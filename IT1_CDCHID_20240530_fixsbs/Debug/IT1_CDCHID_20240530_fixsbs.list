
IT1_CDCHID_20240530_fixsbs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001000  08016358  08016358  00026358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017358  08017358  0003ffe0  2**0
                  CONTENTS
  4 .ARM          00000008  08017358  08017358  00027358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017360  08017360  0003ffe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017360  08017360  00027360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017364  08017364  00027364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .app_info     00000010  0801ffd0  0801ffd0  0003ffd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000568  20000000  08017368  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004b2c  20000568  080178d0  00030568  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005094  080178d0  00035094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003ffe0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040010  2**0
                  CONTENTS, READONLY
 14 .debug_info   000610bd  00000000  00000000  00040053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000bdf7  00000000  00000000  000a1110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0002be15  00000000  00000000  000acf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000025a0  00000000  00000000  000d8d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000505e  00000000  00000000  000db2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027958  00000000  00000000  000e031e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005760b  00000000  00000000  00107c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ca1a0  00000000  00000000  0015f281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009a94  00000000  00000000  00229424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007a  00000000  00000000  00232eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000568 	.word	0x20000568
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016340 	.word	0x08016340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000056c 	.word	0x2000056c
 80001cc:	08016340 	.word	0x08016340

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ak09918_init>:
 *
 *  returns: uint8_t value returned
 *
 */
uint8_t ak09918_init()
{
 8000ff0:	b510      	push	{r4, lr}
	printf("ak09918_init\r\n");
 8000ff2:	4814      	ldr	r0, [pc, #80]	; (8001044 <ak09918_init+0x54>)
 8000ff4:	f011 fd90 	bl	8012b18 <puts>
 *  returns: boolean value returned
 *
 */
bool ak09918_who_am_i()
{
	printf("ak09918_who_am_i:\r\n");
 8000ff8:	4813      	ldr	r0, [pc, #76]	; (8001048 <ak09918_init+0x58>)
 8000ffa:	f011 fd8d 	bl	8012b18 <puts>
 *  returns: value of the byte returned
 *
 */
static uint8_t read_single_ak09918_reg(uint8_t reg)
{
	return I2CReadByte(&AK09918C_I2C1, MAG_SLAVE_ADDR, reg);
 8000ffe:	2201      	movs	r2, #1
 8001000:	210c      	movs	r1, #12
 8001002:	4812      	ldr	r0, [pc, #72]	; (800104c <ak09918_init+0x5c>)
 8001004:	f007 fb4c 	bl	80086a0 <I2CReadByte>
 8001008:	4604      	mov	r4, r0
	printf("ak09918_who_am_i=%x == %x ?\r\n", ak09918c_id, AK09918C_ID);
 800100a:	220c      	movs	r2, #12
 800100c:	4810      	ldr	r0, [pc, #64]	; (8001050 <ak09918_init+0x60>)
 800100e:	4621      	mov	r1, r4
 8001010:	f011 fd14 	bl	8012a3c <iprintf>
	if(ak09918c_id == AK09918C_ID)
 8001014:	2c0c      	cmp	r4, #12
 8001016:	d001      	beq.n	800101c <ak09918_init+0x2c>
		return 0;
 8001018:	2000      	movs	r0, #0
}
 800101a:	bd10      	pop	{r4, pc}
 *  val: value of the byte to be written
 *
 */
static void write_single_ak09918_reg(uint8_t reg, uint8_t val)
{
	return I2CWriteByte(&AK09918C_I2C1, MAG_SLAVE_ADDR, reg, val);
 800101c:	4621      	mov	r1, r4
 800101e:	2301      	movs	r3, #1
 8001020:	2232      	movs	r2, #50	; 0x32
 8001022:	480a      	ldr	r0, [pc, #40]	; (800104c <ak09918_init+0x5c>)
 8001024:	f007 fb78 	bl	8008718 <I2CWriteByte>
	HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	f008 fb8f 	bl	800974c <HAL_Delay>
	return I2CWriteByte(&AK09918C_I2C1, MAG_SLAVE_ADDR, reg, val);
 800102e:	2308      	movs	r3, #8
 8001030:	2231      	movs	r2, #49	; 0x31
 8001032:	4621      	mov	r1, r4
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <ak09918_init+0x5c>)
 8001036:	f007 fb6f 	bl	8008718 <I2CWriteByte>
	HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f008 fb86 	bl	800974c <HAL_Delay>
	return 1;
 8001040:	2001      	movs	r0, #1
}
 8001042:	bd10      	pop	{r4, pc}
 8001044:	08016394 	.word	0x08016394
 8001048:	080163a4 	.word	0x080163a4
 800104c:	20003b48 	.word	0x20003b48
 8001050:	080163b8 	.word	0x080163b8

08001054 <read_single_icm42688_reg>:
 *
 *  returns: value of the byte returned
 *
 */
static uint8_t read_single_icm42688_reg(userbank ub, uint8_t reg)
{
 8001054:	b510      	push	{r4, lr}
 8001056:	b082      	sub	sp, #8
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001058:	4c1d      	ldr	r4, [pc, #116]	; (80010d0 <read_single_icm42688_reg+0x7c>)
	write_reg[1] = ub;
 800105a:	f88d 0005 	strb.w	r0, [sp, #5]
	write_reg[0] = WRITE | REG_BANK_SEL;
 800105e:	f04f 0c76 	mov.w	ip, #118	; 0x76
	uint8_t read_reg = READ | reg;
 8001062:	f061 037f 	orn	r3, r1, #127	; 0x7f
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2110      	movs	r1, #16
 800106a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | REG_BANK_SEL;
 800106e:	f88d c004 	strb.w	ip, [sp, #4]
	uint8_t read_reg = READ | reg;
 8001072:	f88d 3003 	strb.w	r3, [sp, #3]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001076:	f008 ff65 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 800107a:	230a      	movs	r3, #10
 800107c:	a901      	add	r1, sp, #4
 800107e:	2202      	movs	r2, #2
 8001080:	4620      	mov	r0, r4
 8001082:	f00c faeb 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	2110      	movs	r1, #16
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f008 ff59 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f008 ff53 	bl	8009f44 <HAL_GPIO_WritePin>
	uint8_t reg_val;
	select_user_bank(ub);

	cs_low();
	HAL_SPI_Transmit(ICM42688_SPI, &read_reg, 1, 1000);
 800109e:	f10d 0103 	add.w	r1, sp, #3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	2201      	movs	r2, #1
 80010a8:	4620      	mov	r0, r4
 80010aa:	f00c fad7 	bl	800d65c <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM42688_SPI, &reg_val, 1, 1000);
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	a901      	add	r1, sp, #4
 80010b4:	2201      	movs	r2, #1
 80010b6:	4620      	mov	r0, r4
 80010b8:	f00c fd7a 	bl	800dbb0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	f008 ff3e 	bl	8009f44 <HAL_GPIO_WritePin>
	cs_high();

	return reg_val;
}
 80010c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80010cc:	b002      	add	sp, #8
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	20003c1c 	.word	0x20003c1c

080010d4 <read_single_icm42688_reg.constprop.0>:
static uint8_t read_single_icm42688_reg(userbank ub, uint8_t reg)
 80010d4:	b510      	push	{r4, lr}
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 80010d6:	4c1d      	ldr	r4, [pc, #116]	; (800114c <read_single_icm42688_reg.constprop.0+0x78>)
static uint8_t read_single_icm42688_reg(userbank ub, uint8_t reg)
 80010d8:	b082      	sub	sp, #8
	write_reg[0] = WRITE | REG_BANK_SEL;
 80010da:	f04f 0c76 	mov.w	ip, #118	; 0x76
	uint8_t read_reg = READ | reg;
 80010de:	f060 037f 	orn	r3, r0, #127	; 0x7f
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | REG_BANK_SEL;
 80010ea:	f8ad c004 	strh.w	ip, [sp, #4]
	uint8_t read_reg = READ | reg;
 80010ee:	f88d 3003 	strb.w	r3, [sp, #3]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80010f2:	f008 ff27 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 80010f6:	230a      	movs	r3, #10
 80010f8:	a901      	add	r1, sp, #4
 80010fa:	2202      	movs	r2, #2
 80010fc:	4620      	mov	r0, r4
 80010fe:	f00c faad 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2110      	movs	r1, #16
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f008 ff1b 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2110      	movs	r1, #16
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f008 ff15 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, &read_reg, 1, 1000);
 800111a:	f10d 0103 	add.w	r1, sp, #3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	2201      	movs	r2, #1
 8001124:	4620      	mov	r0, r4
 8001126:	f00c fa99 	bl	800d65c <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM42688_SPI, &reg_val, 1, 1000);
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	a901      	add	r1, sp, #4
 8001130:	2201      	movs	r2, #1
 8001132:	4620      	mov	r0, r4
 8001134:	f00c fd3c 	bl	800dbb0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	2201      	movs	r2, #1
 800113e:	2110      	movs	r1, #16
 8001140:	f008 ff00 	bl	8009f44 <HAL_GPIO_WritePin>
}
 8001144:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001148:	b002      	add	sp, #8
 800114a:	bd10      	pop	{r4, pc}
 800114c:	20003c1c 	.word	0x20003c1c

08001150 <icm42688_enable_tap_detection>:
{
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t new_val = read_single_icm42688_reg(ub_0, PWR_MGMT0);
 8001152:	204e      	movs	r0, #78	; 0x4e
{
 8001154:	b083      	sub	sp, #12
	uint8_t new_val = read_single_icm42688_reg(ub_0, PWR_MGMT0);
 8001156:	f7ff ffbd 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	new_val &= 0x3E;
 800115a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 800115e:	4cc4      	ldr	r4, [pc, #784]	; (8001470 <icm42688_enable_tap_detection+0x320>)
	new_val &= 0x3E;
 8001160:	f040 0002 	orr.w	r0, r0, #2
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001164:	2576      	movs	r5, #118	; 0x76
 *
 */
static void write_single_icm42688_reg(userbank ub, uint8_t reg, uint8_t val)
{
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001166:	234e      	movs	r3, #78	; 0x4e
	write_reg[1] = val;
 8001168:	f88d 0001 	strb.w	r0, [sp, #1]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2110      	movs	r1, #16
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001174:	f88d 3000 	strb.w	r3, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001178:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800117c:	f008 fee2 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001180:	230a      	movs	r3, #10
 8001182:	a901      	add	r1, sp, #4
 8001184:	2202      	movs	r2, #2
 8001186:	4620      	mov	r0, r4
 8001188:	f00c fa68 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2110      	movs	r1, #16
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f008 fed6 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2110      	movs	r1, #16
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f008 fed0 	bl	8009f44 <HAL_GPIO_WritePin>

	select_user_bank(ub);

	cs_low();
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 80011a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a8:	4669      	mov	r1, sp
 80011aa:	2202      	movs	r2, #2
 80011ac:	4620      	mov	r0, r4
 80011ae:	f00c fa55 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2110      	movs	r1, #16
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f008 fec3 	bl	8009f44 <HAL_GPIO_WritePin>
	new_val = read_single_icm42688_reg(ub_0, INTF_CONFIG1); // reg 0x4D
 80011be:	204d      	movs	r0, #77	; 0x4d
 80011c0:	f7ff ff88 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	new_val &= 0x07;
 80011c4:	f000 0007 	and.w	r0, r0, #7
	write_reg[0] = WRITE | reg;
 80011c8:	274d      	movs	r7, #77	; 0x4d
	write_reg[1] = val;
 80011ca:	f88d 0001 	strb.w	r0, [sp, #1]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2110      	movs	r1, #16
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | REG_BANK_SEL;
 80011d6:	f8ad 5004 	strh.w	r5, [sp, #4]
	write_reg[0] = WRITE | reg;
 80011da:	f88d 7000 	strb.w	r7, [sp]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80011de:	f008 feb1 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 80011e2:	230a      	movs	r3, #10
 80011e4:	a901      	add	r1, sp, #4
 80011e6:	2202      	movs	r2, #2
 80011e8:	4620      	mov	r0, r4
 80011ea:	f00c fa37 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2110      	movs	r1, #16
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f008 fea5 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2110      	movs	r1, #16
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f008 fe9f 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	4669      	mov	r1, sp
 800120c:	2202      	movs	r2, #2
 800120e:	4620      	mov	r0, r4
 8001210:	f00c fa24 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2110      	movs	r1, #16
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f008 fe92 	bl	8009f44 <HAL_GPIO_WritePin>
	new_val = read_single_icm42688_reg(ub_0, ACCEL_CONFIG1); // reg 0x53
 8001220:	2053      	movs	r0, #83	; 0x53
 8001222:	f7ff ff57 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	new_val |= (2<<1);
 8001226:	f040 0004 	orr.w	r0, r0, #4
	write_reg[1] = val;
 800122a:	f88d 0001 	strb.w	r0, [sp, #1]
	write_reg[0] = WRITE | reg;
 800122e:	2353      	movs	r3, #83	; 0x53
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2110      	movs	r1, #16
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001238:	f88d 3000 	strb.w	r3, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 800123c:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001240:	f008 fe80 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001244:	230a      	movs	r3, #10
 8001246:	a901      	add	r1, sp, #4
 8001248:	2202      	movs	r2, #2
 800124a:	4620      	mov	r0, r4
 800124c:	f00c fa06 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2110      	movs	r1, #16
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f008 fe74 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2110      	movs	r1, #16
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f008 fe6e 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126c:	4669      	mov	r1, sp
 800126e:	2202      	movs	r2, #2
 8001270:	4620      	mov	r0, r4
 8001272:	f00c f9f3 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2110      	movs	r1, #16
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f008 fe61 	bl	8009f44 <HAL_GPIO_WritePin>
	new_val = read_single_icm42688_reg(ub_0, GYRO_ACCEL_CONFIG0); // reg 0x52
 8001282:	2052      	movs	r0, #82	; 0x52
 8001284:	f7ff ff26 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	new_val |= (4<<4);
 8001288:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	write_reg[1] = val;
 800128c:	f88d 0001 	strb.w	r0, [sp, #1]
	write_reg[0] = WRITE | reg;
 8001290:	2352      	movs	r3, #82	; 0x52
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2110      	movs	r1, #16
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 800129a:	f88d 3000 	strb.w	r3, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 800129e:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80012a2:	f008 fe4f 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 80012a6:	230a      	movs	r3, #10
 80012a8:	a901      	add	r1, sp, #4
 80012aa:	2202      	movs	r2, #2
 80012ac:	4620      	mov	r0, r4
 80012ae:	f00c f9d5 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2110      	movs	r1, #16
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f008 fe43 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2110      	movs	r1, #16
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f008 fe3d 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	4669      	mov	r1, sp
 80012d0:	2202      	movs	r2, #2
 80012d2:	4620      	mov	r0, r4
 80012d4:	f00c f9c2 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2110      	movs	r1, #16
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e0:	f008 fe30 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f008 fa31 	bl	800974c <HAL_Delay>
	write_reg[0] = WRITE | REG_BANK_SEL;
 80012ea:	f240 3676 	movw	r6, #886	; 0x376
	write_reg[0] = WRITE | reg;
 80012ee:	f645 3347 	movw	r3, #23367	; 0x5b47
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2110      	movs	r1, #16
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 80012fa:	f8ad 3000 	strh.w	r3, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 80012fe:	f8ad 6004 	strh.w	r6, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001302:	f008 fe1f 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001306:	230a      	movs	r3, #10
 8001308:	a901      	add	r1, sp, #4
 800130a:	2202      	movs	r2, #2
 800130c:	4620      	mov	r0, r4
 800130e:	f00c f9a5 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2110      	movs	r1, #16
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f008 fe13 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2110      	movs	r1, #16
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f008 fe0d 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	4669      	mov	r1, sp
 8001330:	2202      	movs	r2, #2
 8001332:	4620      	mov	r0, r4
 8001334:	f00c f992 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	2110      	movs	r1, #16
 800133c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001340:	f008 fe00 	bl	8009f44 <HAL_GPIO_WritePin>
	write_reg[0] = WRITE | reg;
 8001344:	f244 6346 	movw	r3, #17990	; 0x4646
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2110      	movs	r1, #16
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001350:	f8ad 3000 	strh.w	r3, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001354:	f8ad 6004 	strh.w	r6, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001358:	f008 fdf4 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 800135c:	230a      	movs	r3, #10
 800135e:	a901      	add	r1, sp, #4
 8001360:	2202      	movs	r2, #2
 8001362:	4620      	mov	r0, r4
 8001364:	f00c f97a 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2110      	movs	r1, #16
 800136c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001370:	f008 fde8 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2110      	movs	r1, #16
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f008 fde2 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001384:	4669      	mov	r1, sp
 8001386:	2202      	movs	r2, #2
 8001388:	4620      	mov	r0, r4
 800138a:	f00c f967 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2110      	movs	r1, #16
 8001392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001396:	f008 fdd5 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f008 f9d6 	bl	800974c <HAL_Delay>
	new_val = read_single_icm42688_reg(ub_4, INT_SOURCE6);
 80013a0:	4639      	mov	r1, r7
 80013a2:	2003      	movs	r0, #3
 80013a4:	f7ff fe56 	bl	8001054 <read_single_icm42688_reg>
	new_val |= 1;
 80013a8:	f040 0001 	orr.w	r0, r0, #1
	write_reg[1] = val;
 80013ac:	f88d 0001 	strb.w	r0, [sp, #1]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2110      	movs	r1, #16
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 80013b8:	f88d 7000 	strb.w	r7, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 80013bc:	f8ad 6004 	strh.w	r6, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80013c0:	f008 fdc0 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 80013c4:	230a      	movs	r3, #10
 80013c6:	a901      	add	r1, sp, #4
 80013c8:	2202      	movs	r2, #2
 80013ca:	4620      	mov	r0, r4
 80013cc:	f00c f946 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2110      	movs	r1, #16
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f008 fdb4 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f008 fdae 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 80013e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ec:	4669      	mov	r1, sp
 80013ee:	2202      	movs	r2, #2
 80013f0:	4620      	mov	r0, r4
 80013f2:	f00c f933 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2110      	movs	r1, #16
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f008 fda1 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001402:	2032      	movs	r0, #50	; 0x32
 8001404:	f008 f9a2 	bl	800974c <HAL_Delay>
	new_val = read_single_icm42688_reg(ub_0, APEX_CONFIG0); // reg 0x56
 8001408:	2056      	movs	r0, #86	; 0x56
 800140a:	f7ff fe63 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	new_val |= 1<<6;
 800140e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	write_reg[1] = val;
 8001412:	f88d 0001 	strb.w	r0, [sp, #1]
	write_reg[0] = WRITE | reg;
 8001416:	2356      	movs	r3, #86	; 0x56
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2110      	movs	r1, #16
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001420:	f88d 3000 	strb.w	r3, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001424:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001428:	f008 fd8c 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 800142c:	230a      	movs	r3, #10
 800142e:	a901      	add	r1, sp, #4
 8001430:	2202      	movs	r2, #2
 8001432:	4620      	mov	r0, r4
 8001434:	f00c f912 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2110      	movs	r1, #16
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f008 fd80 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2110      	movs	r1, #16
 8001448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144c:	f008 fd7a 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001450:	4669      	mov	r1, sp
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	2202      	movs	r2, #2
 8001458:	4620      	mov	r0, r4
 800145a:	f00c f8ff 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	2110      	movs	r1, #16
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f008 fd6d 	bl	8009f44 <HAL_GPIO_WritePin>
}
 800146a:	b003      	add	sp, #12
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146e:	bf00      	nop
 8001470:	20003c1c 	.word	0x20003c1c

08001474 <icm42688_get_tap_detection_status>:
{
 8001474:	b508      	push	{r3, lr}
	uint8_t new_val = read_single_icm42688_reg(ub_0, INT_STATUS3) & 0x01; // reg 0x38
 8001476:	2038      	movs	r0, #56	; 0x38
 8001478:	f7ff fe2c 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	if (new_val) {
 800147c:	f010 0001 	ands.w	r0, r0, #1
 8001480:	d100      	bne.n	8001484 <icm42688_get_tap_detection_status+0x10>
}
 8001482:	bd08      	pop	{r3, pc}
 8001484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		new_val = read_single_icm42688_reg(ub_0, APEX_DATA4);
 8001488:	2035      	movs	r0, #53	; 0x35
 800148a:	f7ff be23 	b.w	80010d4 <read_single_icm42688_reg.constprop.0>
 800148e:	bf00      	nop

08001490 <icm42688_configure>:
{
 8001490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001494:	4d72      	ldr	r5, [pc, #456]	; (8001660 <icm42688_configure+0x1d0>)
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001496:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8001664 <icm42688_configure+0x1d4>
{
 800149a:	b083      	sub	sp, #12
 800149c:	f105 072a 	add.w	r7, r5, #42	; 0x2a
 80014a0:	462e      	mov	r6, r5
	write_reg[0] = WRITE | REG_BANK_SEL;
 80014a2:	f04f 0976 	mov.w	r9, #118	; 0x76
		icm42688_register_set_and_clear_bits(ub_0, icm42688_register_bank0_cfg[i].reg,
 80014a6:	f896 a000 	ldrb.w	sl, [r6]
 80014aa:	7874      	ldrb	r4, [r6, #1]
 80014ac:	f896 b002 	ldrb.w	fp, [r6, #2]
	const uint8_t orig_val = read_single_icm42688_reg(ub, reg);
 80014b0:	4650      	mov	r0, sl
 80014b2:	f7ff fe0f 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
 80014b6:	4684      	mov	ip, r0
	uint8_t val = (orig_val & ~clear_bits) | set_bits;
 80014b8:	ea2c 0b0b 	bic.w	fp, ip, fp
 80014bc:	ea44 030b 	orr.w	r3, r4, fp
 80014c0:	b2db      	uxtb	r3, r3
	if (orig_val != val) {
 80014c2:	459c      	cmp	ip, r3
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0110 	mov.w	r1, #16
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	for(i=0 ;i<size_register_bank0_cfg;i++)
 80014d0:	f106 0603 	add.w	r6, r6, #3
	if (orig_val != val) {
 80014d4:	d026      	beq.n	8001524 <icm42688_configure+0x94>
	write_reg[1] = val;
 80014d6:	f88d 3001 	strb.w	r3, [sp, #1]
	write_reg[0] = WRITE | reg;
 80014da:	f88d a000 	strb.w	sl, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 80014de:	f8ad 9004 	strh.w	r9, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80014e2:	f008 fd2f 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 80014e6:	230a      	movs	r3, #10
 80014e8:	2202      	movs	r2, #2
 80014ea:	a901      	add	r1, sp, #4
 80014ec:	4640      	mov	r0, r8
 80014ee:	f00c f8b5 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	2110      	movs	r1, #16
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fa:	f008 fd23 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2110      	movs	r1, #16
 8001502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001506:	f008 fd1d 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 800150a:	2202      	movs	r2, #2
 800150c:	4669      	mov	r1, sp
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	4640      	mov	r0, r8
 8001514:	f00c f8a2 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2110      	movs	r1, #16
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f008 fd10 	bl	8009f44 <HAL_GPIO_WritePin>
	for(i=0 ;i<size_register_bank0_cfg;i++)
 8001524:	42b7      	cmp	r7, r6
 8001526:	d1be      	bne.n	80014a6 <icm42688_configure+0x16>
	const uint8_t orig_val = read_single_icm42688_reg(ub, reg);
 8001528:	200b      	movs	r0, #11
 800152a:	f7ff fdd3 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	uint8_t val = (orig_val & ~clear_bits) | set_bits;
 800152e:	f040 0303 	orr.w	r3, r0, #3
 8001532:	b2db      	uxtb	r3, r3
	if (orig_val != val) {
 8001534:	4298      	cmp	r0, r3
 8001536:	d02c      	beq.n	8001592 <icm42688_configure+0x102>
	write_reg[0] = WRITE | reg;
 8001538:	200b      	movs	r0, #11
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2110      	movs	r1, #16
	write_reg[0] = WRITE | reg;
 800153e:	f88d 0000 	strb.w	r0, [sp]
	write_reg[1] = val;
 8001542:	f88d 3001 	strb.w	r3, [sp, #1]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | REG_BANK_SEL;
 800154a:	2376      	movs	r3, #118	; 0x76
 800154c:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001550:	f008 fcf8 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001554:	230a      	movs	r3, #10
 8001556:	2202      	movs	r2, #2
 8001558:	a901      	add	r1, sp, #4
 800155a:	4842      	ldr	r0, [pc, #264]	; (8001664 <icm42688_configure+0x1d4>)
 800155c:	f00c f87e 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	2110      	movs	r1, #16
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f008 fcec 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2110      	movs	r1, #16
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f008 fce6 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001578:	2202      	movs	r2, #2
 800157a:	4669      	mov	r1, sp
 800157c:	4839      	ldr	r0, [pc, #228]	; (8001664 <icm42688_configure+0x1d4>)
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	f00c f86b 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2110      	movs	r1, #16
 800158a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158e:	f008 fcd9 	bl	8009f44 <HAL_GPIO_WritePin>
	const uint8_t orig_val = read_single_icm42688_reg(ub, reg);
 8001592:	2003      	movs	r0, #3
 8001594:	f7ff fd9e 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	uint8_t val = (orig_val & ~clear_bits) | set_bits;
 8001598:	f040 0301 	orr.w	r3, r0, #1
 800159c:	b2db      	uxtb	r3, r3
	if (orig_val != val) {
 800159e:	4298      	cmp	r0, r3
 80015a0:	d02c      	beq.n	80015fc <icm42688_configure+0x16c>
	write_reg[0] = WRITE | reg;
 80015a2:	2003      	movs	r0, #3
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
	write_reg[0] = WRITE | reg;
 80015a8:	f88d 0000 	strb.w	r0, [sp]
	write_reg[1] = val;
 80015ac:	f88d 3001 	strb.w	r3, [sp, #1]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | REG_BANK_SEL;
 80015b4:	2376      	movs	r3, #118	; 0x76
 80015b6:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80015ba:	f008 fcc3 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 80015be:	230a      	movs	r3, #10
 80015c0:	2202      	movs	r2, #2
 80015c2:	a901      	add	r1, sp, #4
 80015c4:	4827      	ldr	r0, [pc, #156]	; (8001664 <icm42688_configure+0x1d4>)
 80015c6:	f00c f849 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2110      	movs	r1, #16
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f008 fcb7 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2110      	movs	r1, #16
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f008 fcb1 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 80015e2:	2202      	movs	r2, #2
 80015e4:	4669      	mov	r1, sp
 80015e6:	481f      	ldr	r0, [pc, #124]	; (8001664 <icm42688_configure+0x1d4>)
 80015e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ec:	f00c f836 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2110      	movs	r1, #16
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f008 fca4 	bl	8009f44 <HAL_GPIO_WritePin>
{
 80015fc:	2401      	movs	r4, #1
 80015fe:	e005      	b.n	800160c <icm42688_configure+0x17c>
	if (set_bits && ((reg_value & set_bits) != set_bits)) {
 8001600:	4386      	bics	r6, r0
 8001602:	d00b      	beq.n	800161c <icm42688_configure+0x18c>
			success = false;
 8001604:	2400      	movs	r4, #0
	for(i=0 ;i<size_register_bank0_cfg;i++)
 8001606:	3503      	adds	r5, #3
 8001608:	42af      	cmp	r7, r5
 800160a:	d012      	beq.n	8001632 <icm42688_configure+0x1a2>
		if (!icm42688_register_check(ub_0, icm42688_register_bank0_cfg[i].reg,
 800160c:	786e      	ldrb	r6, [r5, #1]
	const uint8_t reg_value = read_single_icm42688_reg(ub, reg);
 800160e:	7828      	ldrb	r0, [r5, #0]
		if (!icm42688_register_check(ub_0, icm42688_register_bank0_cfg[i].reg,
 8001610:	f895 8002 	ldrb.w	r8, [r5, #2]
	const uint8_t reg_value = read_single_icm42688_reg(ub, reg);
 8001614:	f7ff fd5e 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	if (set_bits && ((reg_value & set_bits) != set_bits)) {
 8001618:	2e00      	cmp	r6, #0
 800161a:	d1f1      	bne.n	8001600 <icm42688_configure+0x170>
	if (clear_bits && ((reg_value & clear_bits) != 0)) {
 800161c:	f1b8 0f00 	cmp.w	r8, #0
 8001620:	d0f1      	beq.n	8001606 <icm42688_configure+0x176>
			success = false;
 8001622:	ea18 0f00 	tst.w	r8, r0
	for(i=0 ;i<size_register_bank0_cfg;i++)
 8001626:	f105 0503 	add.w	r5, r5, #3
			success = false;
 800162a:	bf18      	it	ne
 800162c:	2400      	movne	r4, #0
	for(i=0 ;i<size_register_bank0_cfg;i++)
 800162e:	42af      	cmp	r7, r5
 8001630:	d1ec      	bne.n	800160c <icm42688_configure+0x17c>
	const uint8_t reg_value = read_single_icm42688_reg(ub, reg);
 8001632:	200b      	movs	r0, #11
 8001634:	f7ff fd4e 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	if (set_bits && ((reg_value & set_bits) != set_bits)) {
 8001638:	f000 0003 	and.w	r0, r0, #3
			success = false;
 800163c:	2803      	cmp	r0, #3
	const uint8_t reg_value = read_single_icm42688_reg(ub, reg);
 800163e:	f04f 0003 	mov.w	r0, #3
			success = false;
 8001642:	bf18      	it	ne
 8001644:	2400      	movne	r4, #0
	const uint8_t reg_value = read_single_icm42688_reg(ub, reg);
 8001646:	f7ff fd45 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
			success = false;
 800164a:	f010 0f01 	tst.w	r0, #1
	accel_range = range;
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <icm42688_configure+0x1d8>)
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <icm42688_configure+0x1dc>)
 8001652:	601a      	str	r2, [r3, #0]
			success = false;
 8001654:	bf08      	it	eq
 8001656:	2400      	moveq	r4, #0
}
 8001658:	4620      	mov	r0, r4
 800165a:	b003      	add	sp, #12
 800165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001660:	08016448 	.word	0x08016448
 8001664:	20003c1c 	.word	0x20003c1c
 8001668:	20000000 	.word	0x20000000
 800166c:	431ce80a 	.word	0x431ce80a

08001670 <icm42688_enable_data_ready_interrupt>:
{
 8001670:	b530      	push	{r4, r5, lr}
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001672:	4c2f      	ldr	r4, [pc, #188]	; (8001730 <icm42688_enable_data_ready_interrupt+0xc0>)
{
 8001674:	b083      	sub	sp, #12
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001676:	2576      	movs	r5, #118	; 0x76
	write_reg[0] = WRITE | reg;
 8001678:	f44f 7345 	mov.w	r3, #788	; 0x314
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2110      	movs	r1, #16
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001684:	f8ad 3000 	strh.w	r3, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001688:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800168c:	f008 fc5a 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001690:	230a      	movs	r3, #10
 8001692:	a901      	add	r1, sp, #4
 8001694:	2202      	movs	r2, #2
 8001696:	4620      	mov	r0, r4
 8001698:	f00b ffe0 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2110      	movs	r1, #16
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f008 fc4e 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2110      	movs	r1, #16
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f008 fc48 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	4669      	mov	r1, sp
 80016ba:	2202      	movs	r2, #2
 80016bc:	4620      	mov	r0, r4
 80016be:	f00b ffcd 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2110      	movs	r1, #16
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f008 fc3b 	bl	8009f44 <HAL_GPIO_WritePin>
	write_reg[0] = WRITE | reg;
 80016ce:	f640 0365 	movw	r3, #2149	; 0x865
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2110      	movs	r1, #16
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 80016da:	f8ad 3000 	strh.w	r3, [sp]
	write_reg[0] = WRITE | REG_BANK_SEL;
 80016de:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80016e2:	f008 fc2f 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 80016e6:	230a      	movs	r3, #10
 80016e8:	a901      	add	r1, sp, #4
 80016ea:	2202      	movs	r2, #2
 80016ec:	4620      	mov	r0, r4
 80016ee:	f00b ffb5 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2110      	movs	r1, #16
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f008 fc23 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2110      	movs	r1, #16
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f008 fc1d 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	4669      	mov	r1, sp
 8001710:	2202      	movs	r2, #2
 8001712:	4620      	mov	r0, r4
 8001714:	f00b ffa2 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	2201      	movs	r2, #1
 800171e:	2110      	movs	r1, #16
 8001720:	f008 fc10 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_Delay(60);
 8001724:	203c      	movs	r0, #60	; 0x3c
}
 8001726:	b003      	add	sp, #12
 8001728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_Delay(60);
 800172c:	f008 b80e 	b.w	800974c <HAL_Delay>
 8001730:	20003c1c 	.word	0x20003c1c
 8001734:	00000000 	.word	0x00000000

08001738 <calculate_IMU_error>:
{
 8001738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800173c:	ed2d 8b02 	vpush	{d8}
 8001740:	b09d      	sub	sp, #116	; 0x74
 8001742:	23c8      	movs	r3, #200	; 0xc8
 8001744:	f8df a364 	ldr.w	sl, [pc, #868]	; 8001aac <calculate_IMU_error+0x374>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001748:	f8df b358 	ldr.w	fp, [pc, #856]	; 8001aa4 <calculate_IMU_error+0x36c>
{
 800174c:	930b      	str	r3, [sp, #44]	; 0x2c
 *  returns: a pointer to store data returned
 *
 */
static uint8_t* read_multiple_icm42688_reg(userbank ub, uint8_t reg, uint8_t* reg_val, uint8_t len)
{
	uint8_t read_reg = READ | reg;
 800174e:	239f      	movs	r3, #159	; 0x9f
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2110      	movs	r1, #16
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	uint8_t read_reg = READ | reg;
 8001758:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	write_reg[0] = WRITE | REG_BANK_SEL;
 800175c:	2376      	movs	r3, #118	; 0x76
 800175e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001762:	f008 fbef 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001766:	230a      	movs	r3, #10
 8001768:	2202      	movs	r2, #2
 800176a:	a90d      	add	r1, sp, #52	; 0x34
 800176c:	4658      	mov	r0, fp
 800176e:	f00b ff75 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	2110      	movs	r1, #16
 8001776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177a:	f008 fbe3 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	2110      	movs	r1, #16
 8001782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001786:	f008 fbdd 	bl	8009f44 <HAL_GPIO_WritePin>
//	static uint8_t reg_val[14];
	select_user_bank(ub);

	cs_low();
	HAL_SPI_Transmit(ICM42688_SPI, &read_reg, 1, 1000);
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	2201      	movs	r2, #1
 8001790:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8001794:	4658      	mov	r0, fp
 8001796:	f00b ff61 	bl	800d65c <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM42688_SPI, reg_val, len, 1000);
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	2206      	movs	r2, #6
 80017a0:	a90d      	add	r1, sp, #52	; 0x34
 80017a2:	4658      	mov	r0, fp
 80017a4:	f00c fa04 	bl	800dbb0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2110      	movs	r1, #16
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f008 fbc8 	bl	8009f44 <HAL_GPIO_WritePin>
	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80017b4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data->z = (int16_t)(temp[4] << 8 | temp[5]) - accel_scale_factor;
 80017b8:	4ab5      	ldr	r2, [pc, #724]	; (8001a90 <calculate_IMU_error+0x358>)
	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80017ba:	badb      	revsh	r3, r3
 80017bc:	ee07 3a90 	vmov	s15, r3
	data->z = (int16_t)(temp[4] << 8 | temp[5]) - accel_scale_factor;
 80017c0:	edd2 8a00 	vldr	s17, [r2]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80017c4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
	data->z = (int16_t)(temp[4] << 8 | temp[5]) - accel_scale_factor;
 80017c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80017d0:	bad2      	revsh	r2, r2
	data->x /= accel_scale_factor;
 80017d2:	eec7 7aa8 	vdiv.f32	s15, s15, s17
	data->z = (int16_t)(temp[4] << 8 | temp[5]) - accel_scale_factor;
 80017d6:	badb      	revsh	r3, r3
 80017d8:	ee08 3a10 	vmov	s16, r3
	data->x /= accel_scale_factor;
 80017dc:	edcd 7a08 	vstr	s15, [sp, #32]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80017e0:	ee07 2a90 	vmov	s15, r2
 80017e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	data->z = (int16_t)(temp[4] << 8 | temp[5]) - accel_scale_factor;
 80017e8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		accel_error[0] += ((atan((temp.y) / sqrt(pow((temp.x), 2) + pow((temp.z), 2))) * 180 / M_PI));;
 80017ec:	eec7 7aa8 	vdiv.f32	s15, s15, s17
	data->z = (int16_t)(temp[4] << 8 | temp[5]) - accel_scale_factor;
 80017f0:	ee38 8a68 	vsub.f32	s16, s16, s17
		accel_error[0] += ((atan((temp.y) / sqrt(pow((temp.x), 2) + pow((temp.z), 2))) * 180 / M_PI));;
 80017f4:	ee17 0a90 	vmov	r0, s15
 80017f8:	f7fe fea6 	bl	8000548 <__aeabi_f2d>
 80017fc:	4680      	mov	r8, r0
 80017fe:	9808      	ldr	r0, [sp, #32]
 8001800:	4689      	mov	r9, r1
 8001802:	f7fe fea1 	bl	8000548 <__aeabi_f2d>
 8001806:	eec8 7a28 	vdiv.f32	s15, s16, s17
 800180a:	4606      	mov	r6, r0
 800180c:	460f      	mov	r7, r1
 800180e:	ee17 0a90 	vmov	r0, s15
 8001812:	f7fe fe99 	bl	8000548 <__aeabi_f2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	f7fe feed 	bl	80005f8 <__aeabi_dmul>
 800181e:	4632      	mov	r2, r6
 8001820:	4604      	mov	r4, r0
 8001822:	460d      	mov	r5, r1
 8001824:	463b      	mov	r3, r7
 8001826:	4630      	mov	r0, r6
 8001828:	4639      	mov	r1, r7
 800182a:	f7fe fee5 	bl	80005f8 <__aeabi_dmul>
 800182e:	4622      	mov	r2, r4
 8001830:	462b      	mov	r3, r5
 8001832:	f7fe fd2b 	bl	800028c <__adddf3>
 8001836:	ec41 0b10 	vmov	d0, r0, r1
 800183a:	f014 facf 	bl	8015ddc <sqrt>
 800183e:	4640      	mov	r0, r8
 8001840:	ec53 2b10 	vmov	r2, r3, d0
 8001844:	4649      	mov	r1, r9
 8001846:	f7ff f801 	bl	800084c <__aeabi_ddiv>
 800184a:	ec41 0b10 	vmov	d0, r0, r1
 800184e:	f014 faf3 	bl	8015e38 <atan>
 8001852:	4b90      	ldr	r3, [pc, #576]	; (8001a94 <calculate_IMU_error+0x35c>)
 8001854:	f8da 7000 	ldr.w	r7, [sl]
 8001858:	ec51 0b10 	vmov	r0, r1, d0
 800185c:	2200      	movs	r2, #0
 800185e:	f7fe fecb 	bl	80005f8 <__aeabi_dmul>
 8001862:	a389      	add	r3, pc, #548	; (adr r3, 8001a88 <calculate_IMU_error+0x350>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fff0 	bl	800084c <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	4638      	mov	r0, r7
 8001870:	4616      	mov	r6, r2
 8001872:	460f      	mov	r7, r1
 8001874:	f7fe fe68 	bl	8000548 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4630      	mov	r0, r6
 800187e:	4639      	mov	r1, r7
 8001880:	f7fe fd04 	bl	800028c <__adddf3>
 8001884:	f7ff f9b0 	bl	8000be8 <__aeabi_d2f>
		accel_error[1] += ((atan(-1 * (temp.x) / sqrt(pow((temp.y), 2) + pow((temp.z), 2))) * 180 / M_PI));
 8001888:	4642      	mov	r2, r8
		accel_error[0] += ((atan((temp.y) / sqrt(pow((temp.x), 2) + pow((temp.z), 2))) * 180 / M_PI));;
 800188a:	f8ca 0000 	str.w	r0, [sl]
		accel_error[1] += ((atan(-1 * (temp.x) / sqrt(pow((temp.y), 2) + pow((temp.z), 2))) * 180 / M_PI));
 800188e:	464b      	mov	r3, r9
 8001890:	4640      	mov	r0, r8
 8001892:	4649      	mov	r1, r9
 8001894:	f7fe feb0 	bl	80005f8 <__aeabi_dmul>
 8001898:	4622      	mov	r2, r4
 800189a:	462b      	mov	r3, r5
 800189c:	f7fe fcf6 	bl	800028c <__adddf3>
 80018a0:	ec41 0b10 	vmov	d0, r0, r1
 80018a4:	f014 fa9a 	bl	8015ddc <sqrt>
 80018a8:	9b08      	ldr	r3, [sp, #32]
 80018aa:	ec55 4b10 	vmov	r4, r5, d0
 80018ae:	f083 4000 	eor.w	r0, r3, #2147483648	; 0x80000000
 80018b2:	f7fe fe49 	bl	8000548 <__aeabi_f2d>
 80018b6:	4622      	mov	r2, r4
 80018b8:	462b      	mov	r3, r5
 80018ba:	f7fe ffc7 	bl	800084c <__aeabi_ddiv>
 80018be:	ec41 0b10 	vmov	d0, r0, r1
 80018c2:	f014 fab9 	bl	8015e38 <atan>
 80018c6:	4b73      	ldr	r3, [pc, #460]	; (8001a94 <calculate_IMU_error+0x35c>)
 80018c8:	f8da 6004 	ldr.w	r6, [sl, #4]
 80018cc:	ec51 0b10 	vmov	r0, r1, d0
 80018d0:	2200      	movs	r2, #0
 80018d2:	f7fe fe91 	bl	80005f8 <__aeabi_dmul>
 80018d6:	a36c      	add	r3, pc, #432	; (adr r3, 8001a88 <calculate_IMU_error+0x350>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe ffb6 	bl	800084c <__aeabi_ddiv>
 80018e0:	4604      	mov	r4, r0
 80018e2:	4630      	mov	r0, r6
 80018e4:	460d      	mov	r5, r1
 80018e6:	f7fe fe2f 	bl	8000548 <__aeabi_f2d>
 80018ea:	460b      	mov	r3, r1
 80018ec:	4602      	mov	r2, r0
 80018ee:	4629      	mov	r1, r5
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7fe fccb 	bl	800028c <__adddf3>
 80018f6:	f7ff f977 	bl	8000be8 <__aeabi_d2f>
	for(int i = 0; i < 200; i++)
 80018fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		accel_error[1] += ((atan(-1 * (temp.x) / sqrt(pow((temp.y), 2) + pow((temp.z), 2))) * 180 / M_PI));
 80018fc:	f8ca 0004 	str.w	r0, [sl, #4]
	for(int i = 0; i < 200; i++)
 8001900:	3b01      	subs	r3, #1
 8001902:	930b      	str	r3, [sp, #44]	; 0x2c
 8001904:	f47f af23 	bne.w	800174e <calculate_IMU_error+0x16>
	accel_error[0] /= 200;
 8001908:	edda 6a00 	vldr	s13, [sl]
 800190c:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001a98 <calculate_IMU_error+0x360>
 8001910:	4f62      	ldr	r7, [pc, #392]	; (8001a9c <calculate_IMU_error+0x364>)
 8001912:	4c63      	ldr	r4, [pc, #396]	; (8001aa0 <calculate_IMU_error+0x368>)
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001914:	4d63      	ldr	r5, [pc, #396]	; (8001aa4 <calculate_IMU_error+0x36c>)
	accel_error[0] /= 200;
 8001916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	accel_error[1] /= 200;
 800191a:	26c8      	movs	r6, #200	; 0xc8
	accel_error[0] /= 200;
 800191c:	ed8a 7a00 	vstr	s14, [sl]
	accel_error[1] /= 200;
 8001920:	edda 6a01 	vldr	s13, [sl, #4]
 8001924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001928:	ed8a 7a01 	vstr	s14, [sl, #4]
	uint8_t read_reg = READ | reg;
 800192c:	f04f 0ca5 	mov.w	ip, #165	; 0xa5
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001930:	2376      	movs	r3, #118	; 0x76
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2110      	movs	r1, #16
 8001936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	uint8_t read_reg = READ | reg;
 800193a:	f88d c033 	strb.w	ip, [sp, #51]	; 0x33
	write_reg[0] = WRITE | REG_BANK_SEL;
 800193e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001942:	f008 faff 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001946:	230a      	movs	r3, #10
 8001948:	2202      	movs	r2, #2
 800194a:	a90d      	add	r1, sp, #52	; 0x34
 800194c:	4628      	mov	r0, r5
 800194e:	f00b fe85 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001952:	2201      	movs	r2, #1
 8001954:	2110      	movs	r1, #16
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f008 faf3 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2110      	movs	r1, #16
 8001962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001966:	f008 faed 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, &read_reg, 1, 1000);
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	2201      	movs	r2, #1
 8001970:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8001974:	4628      	mov	r0, r5
 8001976:	f00b fe71 	bl	800d65c <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM42688_SPI, reg_val, len, 1000);
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	2206      	movs	r2, #6
 8001980:	a90d      	add	r1, sp, #52	; 0x34
 8001982:	4628      	mov	r0, r5
 8001984:	f00c f914 	bl	800dbb0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2110      	movs	r1, #16
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f008 fad8 	bl	8009f44 <HAL_GPIO_WritePin>
	data->x = (int16_t)(temp[0] << 8 | temp[1]);	// the gyroscope measurement in the x direction, rad/s
 8001994:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data->x /= gyro_scale_factor;
 8001998:	edd7 5a00 	vldr	s11, [r7]
		gyro_error[0] += temp.x;
 800199c:	ed94 5a00 	vldr	s10, [r4]
	data->x = (int16_t)(temp[0] << 8 | temp[1]);	// the gyroscope measurement in the x direction, rad/s
 80019a0:	badb      	revsh	r3, r3
 80019a2:	ee07 3a90 	vmov	s15, r3
	data->y = (int16_t)(temp[2] << 8 | temp[3]);	// the gyroscope measurement in the y direction, rad/s
 80019a6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	data->x = (int16_t)(temp[0] << 8 | temp[1]);	// the gyroscope measurement in the x direction, rad/s
 80019aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	data->y = (int16_t)(temp[2] << 8 | temp[3]);	// the gyroscope measurement in the y direction, rad/s
 80019ae:	badb      	revsh	r3, r3
	data->x /= gyro_scale_factor;
 80019b0:	ee87 6aa5 	vdiv.f32	s12, s15, s11
	for(int i = 0; i < 200; i++)
 80019b4:	3e01      	subs	r6, #1
	data->y = (int16_t)(temp[2] << 8 | temp[3]);	// the gyroscope measurement in the y direction, rad/s
 80019b6:	ee07 3a90 	vmov	s15, r3
	data->z = (int16_t)(temp[4] << 8 | temp[5]);	// the gyroscope measurement in the z direction, rad/s
 80019ba:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	data->y = (int16_t)(temp[2] << 8 | temp[3]);	// the gyroscope measurement in the y direction, rad/s
 80019be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	data->z = (int16_t)(temp[4] << 8 | temp[5]);	// the gyroscope measurement in the z direction, rad/s
 80019c2:	badb      	revsh	r3, r3
	data->y /= gyro_scale_factor;
 80019c4:	eec7 6aa5 	vdiv.f32	s13, s15, s11
	data->z = (int16_t)(temp[4] << 8 | temp[5]);	// the gyroscope measurement in the z direction, rad/s
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	data->z /= gyro_scale_factor;
 80019d0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
		gyro_error[0] += temp.x;
 80019d4:	ee76 7a05 	vadd.f32	s15, s12, s10
 80019d8:	edc4 7a00 	vstr	s15, [r4]
		gyro_error[1] += temp.y;
 80019dc:	edd4 7a01 	vldr	s15, [r4, #4]
 80019e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019e4:	edc4 7a01 	vstr	s15, [r4, #4]
		gyro_error[2] += temp.z;
 80019e8:	edd4 7a02 	vldr	s15, [r4, #8]
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	edc4 7a02 	vstr	s15, [r4, #8]
	for(int i = 0; i < 200; i++)
 80019f4:	d19a      	bne.n	800192c <calculate_IMU_error+0x1f4>
	gyro_error[0] /= 200;
 80019f6:	edd4 6a00 	vldr	s13, [r4]
 80019fa:	eddf 7a27 	vldr	s15, [pc, #156]	; 8001a98 <calculate_IMU_error+0x360>
 80019fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a02:	ed84 7a00 	vstr	s14, [r4]
	gyro_error[1] /= 200;
 8001a06:	edd4 6a01 	vldr	s13, [r4, #4]
 8001a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a0e:	ed84 7a01 	vstr	s14, [r4, #4]
	gyro_error[2] /= 200;
 8001a12:	edd4 6a02 	vldr	s13, [r4, #8]
 8001a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a1a:	ed84 7a02 	vstr	s14, [r4, #8]
	sprintf(tmp,"(%.1f, %.1f), (%.1f, %.1f, %.1f)\n", accel_error[0], accel_error[1], gyro_error[0], gyro_error[1], gyro_error[2]);
 8001a1e:	f8da 0000 	ldr.w	r0, [sl]
 8001a22:	f8da 5004 	ldr.w	r5, [sl, #4]
 8001a26:	6826      	ldr	r6, [r4, #0]
 8001a28:	6867      	ldr	r7, [r4, #4]
 8001a2a:	68a4      	ldr	r4, [r4, #8]
 8001a2c:	f7fe fd8c 	bl	8000548 <__aeabi_f2d>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4620      	mov	r0, r4
 8001a36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a3a:	f7fe fd85 	bl	8000548 <__aeabi_f2d>
 8001a3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001a42:	4638      	mov	r0, r7
 8001a44:	f7fe fd80 	bl	8000548 <__aeabi_f2d>
 8001a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001a4c:	4630      	mov	r0, r6
 8001a4e:	f7fe fd7b 	bl	8000548 <__aeabi_f2d>
 8001a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a56:	4628      	mov	r0, r5
 8001a58:	f7fe fd76 	bl	8000548 <__aeabi_f2d>
 8001a5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001a60:	e9cd 0100 	strd	r0, r1, [sp]
 8001a64:	4910      	ldr	r1, [pc, #64]	; (8001aa8 <calculate_IMU_error+0x370>)
 8001a66:	a80d      	add	r0, sp, #52	; 0x34
 8001a68:	f011 f85e 	bl	8012b28 <siprintf>
	sendCdcData((uint8_t*)tmp, strlen(tmp));
 8001a6c:	a80d      	add	r0, sp, #52	; 0x34
 8001a6e:	f7fe fbff 	bl	8000270 <strlen>
 8001a72:	4601      	mov	r1, r0
 8001a74:	a80d      	add	r0, sp, #52	; 0x34
 8001a76:	f006 fead 	bl	80087d4 <sendCdcData>
}
 8001a7a:	b01d      	add	sp, #116	; 0x74
 8001a7c:	ecbd 8b02 	vpop	{d8}
 8001a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a84:	f3af 8000 	nop.w
 8001a88:	54442d18 	.word	0x54442d18
 8001a8c:	400921fb 	.word	0x400921fb
 8001a90:	20000590 	.word	0x20000590
 8001a94:	40668000 	.word	0x40668000
 8001a98:	43480000 	.word	0x43480000
 8001a9c:	200005a0 	.word	0x200005a0
 8001aa0:	20000594 	.word	0x20000594
 8001aa4:	20003c1c 	.word	0x20003c1c
 8001aa8:	080163f8 	.word	0x080163f8
 8001aac:	20000584 	.word	0x20000584

08001ab0 <icm42688_init>:
{
 8001ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("icm42688_init\r\n");
 8001ab4:	48e0      	ldr	r0, [pc, #896]	; (8001e38 <icm42688_init+0x388>)
{
 8001ab6:	b088      	sub	sp, #32
	GPIO_InitStruct.Pin = ICM42688_CSB_Pin;
 8001ab8:	2410      	movs	r4, #16
	printf("icm42688_init\r\n");
 8001aba:	f011 f82d 	bl	8012b18 <puts>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2501      	movs	r5, #1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	2700      	movs	r7, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac2:	2602      	movs	r6, #2
	HAL_GPIO_Init(ICM42688_CSB_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	a903      	add	r1, sp, #12
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	e9cd 4503 	strd	r4, r5, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ace:	e9cd 5605 	strd	r5, r6, [sp, #20]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	9707      	str	r7, [sp, #28]
	HAL_GPIO_Init(ICM42688_CSB_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f008 f952 	bl	8009d7c <HAL_GPIO_Init>
	uint8_t new_val = read_single_icm42688_reg(ub_0, INTF_CONFIG1);
 8001ad8:	204d      	movs	r0, #77	; 0x4d
 8001ada:	f7ff fafb 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	new_val |= source;
 8001ade:	4328      	orrs	r0, r5
	write_reg[0] = WRITE | reg;
 8001ae0:	234d      	movs	r3, #77	; 0x4d
	write_reg[1] = val;
 8001ae2:	f88d 0005 	strb.w	r0, [sp, #5]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001ae6:	f04f 0876 	mov.w	r8, #118	; 0x76
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001aea:	463a      	mov	r2, r7
 8001aec:	4621      	mov	r1, r4
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001af2:	f88d 3004 	strb.w	r3, [sp, #4]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001af6:	f8ad 8008 	strh.w	r8, [sp, #8]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001afa:	f008 fa23 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001afe:	230a      	movs	r3, #10
 8001b00:	4632      	mov	r2, r6
 8001b02:	a902      	add	r1, sp, #8
 8001b04:	48cd      	ldr	r0, [pc, #820]	; (8001e3c <icm42688_init+0x38c>)
 8001b06:	f00b fda9 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001b0a:	462a      	mov	r2, r5
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b12:	f008 fa17 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001b16:	463a      	mov	r2, r7
 8001b18:	4621      	mov	r1, r4
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f008 fa11 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	4632      	mov	r2, r6
 8001b28:	a901      	add	r1, sp, #4
 8001b2a:	48c4      	ldr	r0, [pc, #784]	; (8001e3c <icm42688_init+0x38c>)
 8001b2c:	f00b fd96 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001b30:	462a      	mov	r2, r5
 8001b32:	4621      	mov	r1, r4
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b38:	f008 fa04 	bl	8009f44 <HAL_GPIO_WritePin>
	write_reg[0] = WRITE | reg;
 8001b3c:	f240 1311 	movw	r3, #273	; 0x111
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001b40:	463a      	mov	r2, r7
 8001b42:	4621      	mov	r1, r4
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001b48:	f8ad 3004 	strh.w	r3, [sp, #4]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001b4c:	f8ad 8008 	strh.w	r8, [sp, #8]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001b50:	f008 f9f8 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001b54:	230a      	movs	r3, #10
 8001b56:	4632      	mov	r2, r6
 8001b58:	a902      	add	r1, sp, #8
 8001b5a:	48b8      	ldr	r0, [pc, #736]	; (8001e3c <icm42688_init+0x38c>)
 8001b5c:	f00b fd7e 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001b60:	462a      	mov	r2, r5
 8001b62:	4621      	mov	r1, r4
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f008 f9ec 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001b6c:	463a      	mov	r2, r7
 8001b6e:	4621      	mov	r1, r4
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f008 f9e6 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001b78:	4632      	mov	r2, r6
 8001b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7e:	a901      	add	r1, sp, #4
 8001b80:	48ae      	ldr	r0, [pc, #696]	; (8001e3c <icm42688_init+0x38c>)
 8001b82:	f00b fd6b 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	462a      	mov	r2, r5
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	f008 f9d9 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8001b92:	2096      	movs	r0, #150	; 0x96
 8001b94:	f007 fdda 	bl	800974c <HAL_Delay>
	uint8_t new_val = read_single_icm42688_reg(ub_0, INT_STATUS);
 8001b98:	202d      	movs	r0, #45	; 0x2d
 8001b9a:	f7ff fa9b 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	if((new_val & RESET_DONE_INT) == RESET_DONE_INT)
 8001b9e:	06c3      	lsls	r3, r0, #27
 8001ba0:	d5fa      	bpl.n	8001b98 <icm42688_init+0xe8>
	uint8_t new_val = read_single_icm42688_reg(ub_0, PWR_MGMT0);
 8001ba2:	204e      	movs	r0, #78	; 0x4e
 8001ba4:	f7ff fa96 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	new_val &= 0x1F;
 8001ba8:	f000 001f 	and.w	r0, r0, #31
	write_reg[0] = WRITE | reg;
 8001bac:	234e      	movs	r3, #78	; 0x4e
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001bae:	2576      	movs	r5, #118	; 0x76
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
	write_reg[1] = val;
 8001bb2:	f88d 0005 	strb.w	r0, [sp, #5]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001bb6:	2110      	movs	r1, #16
 8001bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001bbc:	f88d 3004 	strb.w	r3, [sp, #4]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001bc0:	f8ad 5008 	strh.w	r5, [sp, #8]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001bc4:	f008 f9be 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001bc8:	230a      	movs	r3, #10
 8001bca:	2202      	movs	r2, #2
 8001bcc:	a902      	add	r1, sp, #8
 8001bce:	489b      	ldr	r0, [pc, #620]	; (8001e3c <icm42688_init+0x38c>)
 8001bd0:	f00b fd44 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f008 f9b2 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2110      	movs	r1, #16
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f008 f9ac 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	a901      	add	r1, sp, #4
 8001bf4:	4891      	ldr	r0, [pc, #580]	; (8001e3c <icm42688_init+0x38c>)
 8001bf6:	f00b fd31 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2110      	movs	r1, #16
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c02:	f008 f99f 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c06:	2064      	movs	r0, #100	; 0x64
 8001c08:	f007 fda0 	bl	800974c <HAL_Delay>
	uint8_t new_val = read_single_icm42688_reg(ub_0, INTF_CONFIG1);
 8001c0c:	204d      	movs	r0, #77	; 0x4d
 8001c0e:	f7ff fa61 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
	new_val |= source;
 8001c12:	f040 0001 	orr.w	r0, r0, #1
	write_reg[0] = WRITE | reg;
 8001c16:	234d      	movs	r3, #77	; 0x4d
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
	write_reg[1] = val;
 8001c1a:	f88d 0005 	strb.w	r0, [sp, #5]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001c1e:	2110      	movs	r1, #16
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001c24:	f88d 3004 	strb.w	r3, [sp, #4]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001c28:	f8ad 5008 	strh.w	r5, [sp, #8]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001c2c:	f008 f98a 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001c30:	230a      	movs	r3, #10
 8001c32:	2202      	movs	r2, #2
 8001c34:	a902      	add	r1, sp, #8
 8001c36:	4881      	ldr	r0, [pc, #516]	; (8001e3c <icm42688_init+0x38c>)
 8001c38:	f00b fd10 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2110      	movs	r1, #16
 8001c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c44:	f008 f97e 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2110      	movs	r1, #16
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f008 f978 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c58:	2202      	movs	r2, #2
 8001c5a:	a901      	add	r1, sp, #4
 8001c5c:	4877      	ldr	r0, [pc, #476]	; (8001e3c <icm42688_init+0x38c>)
 8001c5e:	f00b fcfd 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2110      	movs	r1, #16
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f008 f96b 	bl	8009f44 <HAL_GPIO_WritePin>
	uint8_t icm42688_id = read_single_icm42688_reg(ub_0, WHO_AM_I);
 8001c6e:	2075      	movs	r0, #117	; 0x75
 8001c70:	f7ff fa30 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
 8001c74:	4604      	mov	r4, r0
	printf("icm42688_who_am_i=%x == %x ?\r\n", icm42688_id, ICM42688_ID);
 8001c76:	2247      	movs	r2, #71	; 0x47
 8001c78:	4871      	ldr	r0, [pc, #452]	; (8001e40 <icm42688_init+0x390>)
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	f010 fede 	bl	8012a3c <iprintf>
	if(icm42688_id == ICM42688_ID)
 8001c80:	2c47      	cmp	r4, #71	; 0x47
 8001c82:	d003      	beq.n	8001c8c <icm42688_init+0x1dc>
		return 0;
 8001c84:	2000      	movs	r0, #0
}
 8001c86:	b008      	add	sp, #32
 8001c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (icm42688_configure()) {
 8001c8c:	f7ff fc00 	bl	8001490 <icm42688_configure>
 8001c90:	4604      	mov	r4, r0
 8001c92:	2800      	cmp	r0, #0
 8001c94:	f000 80dc 	beq.w	8001e50 <icm42688_init+0x3a0>
	uint8_t new_val = read_single_icm42688_reg(ub_0, GYRO_CONFIG0);
 8001c98:	204f      	movs	r0, #79	; 0x4f
 8001c9a:	f7ff fa1b 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
		gyro_scale_factor = 16.4;
 8001c9e:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <icm42688_init+0x394>)
 8001ca0:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <icm42688_init+0x398>)
	write_reg[1] = val;
 8001ca2:	f88d 0005 	strb.w	r0, [sp, #5]
	write_reg[0] = WRITE | reg;
 8001ca6:	244f      	movs	r4, #79	; 0x4f
		gyro_scale_factor = 16.4;
 8001ca8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001caa:	2110      	movs	r1, #16
 8001cac:	2200      	movs	r2, #0
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001cb2:	f88d 4004 	strb.w	r4, [sp, #4]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001cb6:	f8ad 5008 	strh.w	r5, [sp, #8]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001cba:	f008 f943 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	a902      	add	r1, sp, #8
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	485d      	ldr	r0, [pc, #372]	; (8001e3c <icm42688_init+0x38c>)
 8001cc6:	f00b fcc9 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2110      	movs	r1, #16
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f008 f937 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2110      	movs	r1, #16
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f008 f931 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	a901      	add	r1, sp, #4
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4854      	ldr	r0, [pc, #336]	; (8001e3c <icm42688_init+0x38c>)
 8001cec:	f00b fcb6 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf8:	f008 f924 	bl	8009f44 <HAL_GPIO_WritePin>
	uint8_t new_val = read_single_icm42688_reg(ub_0, GYRO_CONFIG0);
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff f9e9 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
		new_val |= 0x08;
 8001d02:	f040 0008 	orr.w	r0, r0, #8
	write_reg[1] = val;
 8001d06:	f88d 0005 	strb.w	r0, [sp, #5]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2110      	movs	r1, #16
 8001d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001d12:	f88d 4004 	strb.w	r4, [sp, #4]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001d16:	f8ad 5008 	strh.w	r5, [sp, #8]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001d1a:	f008 f913 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001d1e:	230a      	movs	r3, #10
 8001d20:	a902      	add	r1, sp, #8
 8001d22:	2202      	movs	r2, #2
 8001d24:	4845      	ldr	r0, [pc, #276]	; (8001e3c <icm42688_init+0x38c>)
 8001d26:	f00b fc99 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2110      	movs	r1, #16
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d32:	f008 f907 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2110      	movs	r1, #16
 8001d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3e:	f008 f901 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	a901      	add	r1, sp, #4
 8001d48:	2202      	movs	r2, #2
 8001d4a:	483c      	ldr	r0, [pc, #240]	; (8001e3c <icm42688_init+0x38c>)
 8001d4c:	f00b fc86 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001d50:	2201      	movs	r2, #1
 8001d52:	2110      	movs	r1, #16
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d58:	f008 f8f4 	bl	8009f44 <HAL_GPIO_WritePin>
	uint8_t new_val = read_single_icm42688_reg(ub_0, ACCEL_CONFIG0);
 8001d5c:	2050      	movs	r0, #80	; 0x50
 8001d5e:	f7ff f9b9 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
		accel_scale_factor = 2048;
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <icm42688_init+0x39c>)
	write_reg[1] = val;
 8001d64:	f88d 0005 	strb.w	r0, [sp, #5]
		accel_scale_factor = 2048;
 8001d68:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
	write_reg[0] = WRITE | reg;
 8001d6c:	2450      	movs	r4, #80	; 0x50
		accel_scale_factor = 2048;
 8001d6e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001d70:	2110      	movs	r1, #16
 8001d72:	2200      	movs	r2, #0
 8001d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001d78:	f8ad 5008 	strh.w	r5, [sp, #8]
	write_reg[0] = WRITE | reg;
 8001d7c:	f88d 4004 	strb.w	r4, [sp, #4]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001d80:	f008 f8e0 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001d84:	230a      	movs	r3, #10
 8001d86:	a902      	add	r1, sp, #8
 8001d88:	2202      	movs	r2, #2
 8001d8a:	482c      	ldr	r0, [pc, #176]	; (8001e3c <icm42688_init+0x38c>)
 8001d8c:	f00b fc66 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2110      	movs	r1, #16
 8001d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d98:	f008 f8d4 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2110      	movs	r1, #16
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da4:	f008 f8ce 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dac:	a901      	add	r1, sp, #4
 8001dae:	2202      	movs	r2, #2
 8001db0:	4822      	ldr	r0, [pc, #136]	; (8001e3c <icm42688_init+0x38c>)
 8001db2:	f00b fc53 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001db6:	2201      	movs	r2, #1
 8001db8:	2110      	movs	r1, #16
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbe:	f008 f8c1 	bl	8009f44 <HAL_GPIO_WritePin>
	uint8_t new_val = read_single_icm42688_reg(ub_0, ACCEL_CONFIG0);
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7ff f986 	bl	80010d4 <read_single_icm42688_reg.constprop.0>
		new_val |= 0x0F;
 8001dc8:	f040 000f 	orr.w	r0, r0, #15
	write_reg[1] = val;
 8001dcc:	f88d 0005 	strb.w	r0, [sp, #5]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	write_reg[0] = WRITE | reg;
 8001dd8:	f88d 4004 	strb.w	r4, [sp, #4]
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001ddc:	f8ad 5008 	strh.w	r5, [sp, #8]
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001de0:	f008 f8b0 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 10);
 8001de4:	230a      	movs	r3, #10
 8001de6:	a902      	add	r1, sp, #8
 8001de8:	2202      	movs	r2, #2
 8001dea:	4814      	ldr	r0, [pc, #80]	; (8001e3c <icm42688_init+0x38c>)
 8001dec:	f00b fc36 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001df0:	2201      	movs	r2, #1
 8001df2:	2110      	movs	r1, #16
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f008 f8a4 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2110      	movs	r1, #16
 8001e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e04:	f008 f89e 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ICM42688_SPI, write_reg, 2, 1000);
 8001e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0c:	a901      	add	r1, sp, #4
 8001e0e:	2202      	movs	r2, #2
 8001e10:	480a      	ldr	r0, [pc, #40]	; (8001e3c <icm42688_init+0x38c>)
 8001e12:	f00b fc23 	bl	800d65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM42688_CSB_GPIO_Port, ICM42688_CSB_Pin, GPIO_PIN_SET);
 8001e16:	2201      	movs	r2, #1
 8001e18:	2110      	movs	r1, #16
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f008 f891 	bl	8009f44 <HAL_GPIO_WritePin>
		icm42688_enable_tap_detection();
 8001e22:	f7ff f995 	bl	8001150 <icm42688_enable_tap_detection>
		calculate_IMU_error();
 8001e26:	f7ff fc87 	bl	8001738 <calculate_IMU_error>
		HAL_Delay(20);
 8001e2a:	2014      	movs	r0, #20
 8001e2c:	f007 fc8e 	bl	800974c <HAL_Delay>
	return 1;
 8001e30:	2001      	movs	r0, #1
}
 8001e32:	b008      	add	sp, #32
 8001e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e38:	0801641c 	.word	0x0801641c
 8001e3c:	20003c1c 	.word	0x20003c1c
 8001e40:	080163d8 	.word	0x080163d8
 8001e44:	200005a0 	.word	0x200005a0
 8001e48:	41833333 	.word	0x41833333
 8001e4c:	20000590 	.word	0x20000590
		printf("icm42688_configure failed\r\n");
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <icm42688_init+0x3b8>)
 8001e52:	f010 fe61 	bl	8012b18 <puts>
		HAL_Delay(2000);
 8001e56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e5a:	f007 fc77 	bl	800974c <HAL_Delay>
		return 0;
 8001e5e:	4620      	mov	r0, r4
}
 8001e60:	b008      	add	sp, #32
 8001e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e66:	bf00      	nop
 8001e68:	0801642c 	.word	0x0801642c

08001e6c <LM3435_Write_Current_LED>:
{
	return I2CWriteByte(&LM3435_I2C1, LM3435_7bit_ADDR, reg, val);
}

void LM3435_Write_Current_LED(uint8_t vol)
{
 8001e6c:	b570      	push	{r4, r5, r6, lr}
	LM3435_Write(LM3435_LEDLO, rgb_current[vol].LEDLO);
 8001e6e:	4c0f      	ldr	r4, [pc, #60]	; (8001eac <LM3435_Write_Current_LED+0x40>)
	return I2CWriteByte(&LM3435_I2C1, LM3435_7bit_ADDR, reg, val);
 8001e70:	4d0f      	ldr	r5, [pc, #60]	; (8001eb0 <LM3435_Write_Current_LED+0x44>)
 8001e72:	f814 3020 	ldrb.w	r3, [r4, r0, lsl #2]
	LM3435_Write(LM3435_GLEDH, rgb_current[vol].GLEDH);
 8001e76:	eb04 0480 	add.w	r4, r4, r0, lsl #2
	return I2CWriteByte(&LM3435_I2C1, LM3435_7bit_ADDR, reg, val);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	2128      	movs	r1, #40	; 0x28
 8001e80:	f006 fc4a 	bl	8008718 <I2CWriteByte>
 8001e84:	7863      	ldrb	r3, [r4, #1]
 8001e86:	4628      	mov	r0, r5
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2128      	movs	r1, #40	; 0x28
 8001e8c:	f006 fc44 	bl	8008718 <I2CWriteByte>
 8001e90:	78a3      	ldrb	r3, [r4, #2]
 8001e92:	4628      	mov	r0, r5
 8001e94:	2202      	movs	r2, #2
 8001e96:	2128      	movs	r1, #40	; 0x28
 8001e98:	f006 fc3e 	bl	8008718 <I2CWriteByte>
 8001e9c:	78e3      	ldrb	r3, [r4, #3]
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	2203      	movs	r2, #3
	LM3435_Write(LM3435_BLEDH, rgb_current[vol].BLEDH);
	LM3435_Write(LM3435_RLEDH, rgb_current[vol].RLEDH);
}
 8001ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return I2CWriteByte(&LM3435_I2C1, LM3435_7bit_ADDR, reg, val);
 8001ea6:	2128      	movs	r1, #40	; 0x28
 8001ea8:	f006 bc36 	b.w	8008718 <I2CWriteByte>
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	20003b48 	.word	0x20003b48

08001eb4 <rdc200a_get_frame_rate>:
}

static S32_T rdc200a_get_frame_rate(struct _VC_RDC_DEV_INFO_T *dev)
{
	return dev->frame_rate;
}
 8001eb4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8001eb6:	4770      	bx	lr

08001eb8 <rdc200a_get_output_resolution>:
{
 8001eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (vc_panel_attached_port_mask & VC_PANEL_CTRL_PORT_0)
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <rdc200a_get_output_resolution+0x100>)
	U16_T output_size_idx_reg[2] = {0x0827, 0x0927};
 8001ebe:	4a3f      	ldr	r2, [pc, #252]	; (8001fbc <rdc200a_get_output_resolution+0x104>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
	output_size_idx = RDC_REG_GET(output_size_idx_reg[tx_port]) >> 2; // <7:2>
 8001ec2:	4f3f      	ldr	r7, [pc, #252]	; (8001fc0 <rdc200a_get_output_resolution+0x108>)
{
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	43db      	mvns	r3, r3
	U16_T output_size_idx_reg[2] = {0x0827, 0x0927};
 8001ec8:	9200      	str	r2, [sp, #0]
	U16_T output_size_h_idx_reg[2] = {0x0875, 0x0975};
 8001eca:	f003 0301 	and.w	r3, r3, #1
	output_size_idx = RDC_REG_GET(output_size_idx_reg[tx_port]) >> 2; // <7:2>
 8001ece:	aa06      	add	r2, sp, #24
 8001ed0:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8001ed4:	005c      	lsls	r4, r3, #1
	U16_T output_size_v_idx_reg[2] = {0x0876, 0x0976};
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <rdc200a_get_output_resolution+0x10c>)
 8001ed8:	9302      	str	r3, [sp, #8]
	U16_T output_h_size_reg[2] = {0x828, 0x928};
 8001eda:	f1a3 134e 	sub.w	r3, r3, #5111886	; 0x4e004e
	U16_T output_size_h_idx_reg[2] = {0x0875, 0x0975};
 8001ede:	4a3a      	ldr	r2, [pc, #232]	; (8001fc8 <rdc200a_get_output_resolution+0x110>)
	U16_T output_h_size_reg[2] = {0x828, 0x928};
 8001ee0:	9303      	str	r3, [sp, #12]
	U16_T output_v_size_msb_reg[2] = {0x829, 0x929};
 8001ee2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
	U16_T output_size_h_idx_reg[2] = {0x0875, 0x0975};
 8001ee6:	9201      	str	r2, [sp, #4]
	U16_T output_v_size_msb_reg[2] = {0x829, 0x929};
 8001ee8:	9304      	str	r3, [sp, #16]
	output_size_idx = RDC_REG_GET(output_size_idx_reg[tx_port]) >> 2; // <7:2>
 8001eea:	f838 2c18 	ldrh.w	r2, [r8, #-24]
	U16_T output_v_size_lsb_reg[2] = {0x82A, 0x92A};
 8001eee:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
{
 8001ef2:	4606      	mov	r6, r0
 8001ef4:	460d      	mov	r5, r1
	output_size_idx = RDC_REG_GET(output_size_idx_reg[tx_port]) >> 2; // <7:2>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	7839      	ldrb	r1, [r7, #0]
	U16_T output_v_size_lsb_reg[2] = {0x82A, 0x92A};
 8001efa:	9305      	str	r3, [sp, #20]
	output_size_idx = RDC_REG_GET(output_size_idx_reg[tx_port]) >> 2; // <7:2>
 8001efc:	f004 fabc 	bl	8006478 <rtiVC_ReadDevice16>
 8001f00:	f3c0 0387 	ubfx	r3, r0, #2, #8
	if (output_size_idx != 0x3F) {
 8001f04:	2b3f      	cmp	r3, #63	; 0x3f
 8001f06:	d00b      	beq.n	8001f20 <rdc200a_get_output_resolution+0x68>
		*h_size = rdc200a_output_res[output_size_idx].h_size;
 8001f08:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <rdc200a_get_output_resolution+0x114>)
 8001f0a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f0e:	6031      	str	r1, [r6, #0]
		*v_size = rdc200a_output_res[output_size_idx].v_size;
 8001f10:	eb02 0283 	add.w	r2, r2, r3, lsl #2
}
 8001f14:	2000      	movs	r0, #0
		*v_size = rdc200a_output_res[output_size_idx].v_size;
 8001f16:	8853      	ldrh	r3, [r2, #2]
 8001f18:	602b      	str	r3, [r5, #0]
}
 8001f1a:	b006      	add	sp, #24
 8001f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		output_h_size_idx = RDC_REG_GET(output_size_h_idx_reg[tx_port]) & 0x1F;
 8001f20:	f838 2c14 	ldrh.w	r2, [r8, #-20]
 8001f24:	7839      	ldrb	r1, [r7, #0]
 8001f26:	2000      	movs	r0, #0
 8001f28:	f004 faa6 	bl	8006478 <rtiVC_ReadDevice16>
 8001f2c:	f000 001f 	and.w	r0, r0, #31
		if (output_h_size_idx < 0x15)
 8001f30:	2814      	cmp	r0, #20
 8001f32:	d805      	bhi.n	8001f40 <rdc200a_get_output_resolution+0x88>
			h_temp_size = rdc200a_output_h_size_idx_val[output_h_size_idx];
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <rdc200a_get_output_resolution+0x118>)
 8001f36:	f833 8010 	ldrh.w	r8, [r3, r0, lsl #1]
		if (h_temp_size == 0) /* unit : 16 pixels */
 8001f3a:	f1b8 0f00 	cmp.w	r8, #0
 8001f3e:	d10b      	bne.n	8001f58 <rdc200a_get_output_resolution+0xa0>
			h_temp_size = (U16_T)RDC_REG_GET(output_h_size_reg[tx_port]) << 4;
 8001f40:	f104 0318 	add.w	r3, r4, #24
 8001f44:	446b      	add	r3, sp
 8001f46:	7839      	ldrb	r1, [r7, #0]
 8001f48:	f833 2c0c 	ldrh.w	r2, [r3, #-12]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f004 fa93 	bl	8006478 <rtiVC_ReadDevice16>
 8001f52:	0100      	lsls	r0, r0, #4
 8001f54:	fa1f f880 	uxth.w	r8, r0
		output_v_size_idx = RDC_REG_GET(output_size_v_idx_reg[tx_port]) & 0x1F;
 8001f58:	f104 0318 	add.w	r3, r4, #24
 8001f5c:	446b      	add	r3, sp
 8001f5e:	7839      	ldrb	r1, [r7, #0]
 8001f60:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8001f64:	2000      	movs	r0, #0
 8001f66:	f004 fa87 	bl	8006478 <rtiVC_ReadDevice16>
 8001f6a:	f000 001f 	and.w	r0, r0, #31
		if (output_v_size_idx < 0x17)
 8001f6e:	2816      	cmp	r0, #22
 8001f70:	d803      	bhi.n	8001f7a <rdc200a_get_output_resolution+0xc2>
			v_temp_size = rdc200a_output_v_size_idx_val[output_v_size_idx];
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <rdc200a_get_output_resolution+0x11c>)
 8001f74:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
		if (v_temp_size == 0) {
 8001f78:	b9bb      	cbnz	r3, 8001faa <rdc200a_get_output_resolution+0xf2>
			v_temp_size = (U16_T)(RDC_REG_GET(output_v_size_msb_reg[tx_port]) & 0x3) << 8;
 8001f7a:	f104 0318 	add.w	r3, r4, #24
 8001f7e:	eb0d 0403 	add.w	r4, sp, r3
 8001f82:	7839      	ldrb	r1, [r7, #0]
 8001f84:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f004 fa75 	bl	8006478 <rtiVC_ReadDevice16>
 8001f8e:	0200      	lsls	r0, r0, #8
			v_temp_size |= (U16_T)RDC_REG_GET(output_v_size_lsb_reg[tx_port]);
 8001f90:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8001f94:	7839      	ldrb	r1, [r7, #0]
			v_temp_size = (U16_T)(RDC_REG_GET(output_v_size_msb_reg[tx_port]) & 0x3) << 8;
 8001f96:	f400 7440 	and.w	r4, r0, #768	; 0x300
			v_temp_size |= (U16_T)RDC_REG_GET(output_v_size_lsb_reg[tx_port]);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f004 fa6c 	bl	8006478 <rtiVC_ReadDevice16>
 8001fa0:	ea44 0300 	orr.w	r3, r4, r0
 8001fa4:	b29b      	uxth	r3, r3
			v_temp_size <<= 3; /* unit : 8 lines */
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	b29b      	uxth	r3, r3
}
 8001faa:	2000      	movs	r0, #0
		*h_size = h_temp_size;
 8001fac:	f8c6 8000 	str.w	r8, [r6]
		*v_size = rdc200a_output_res[output_size_idx].v_size;
 8001fb0:	602b      	str	r3, [r5, #0]
}
 8001fb2:	b006      	add	sp, #24
 8001fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fb8:	20003814 	.word	0x20003814
 8001fbc:	09270827 	.word	0x09270827
 8001fc0:	2000001d 	.word	0x2000001d
 8001fc4:	09760876 	.word	0x09760876
 8001fc8:	09750875 	.word	0x09750875
 8001fcc:	0801682c 	.word	0x0801682c
 8001fd0:	08016800 	.word	0x08016800
 8001fd4:	0801692c 	.word	0x0801692c

08001fd8 <rdc200a_get_device_id>:

	return 0;
}

static int rdc200a_get_device_id(U16_T *chip_id, U16_T *rev_num)
{
 8001fd8:	b570      	push	{r4, r5, r6, lr}
	U8_T chip_id_msb, chip_id_lsb;

	chip_id_msb = RDC_REG_GET(0x0000);
 8001fda:	4e0a      	ldr	r6, [pc, #40]	; (8002004 <rdc200a_get_device_id+0x2c>)
 8001fdc:	2200      	movs	r2, #0
{
 8001fde:	460c      	mov	r4, r1
 8001fe0:	4605      	mov	r5, r0
	chip_id_msb = RDC_REG_GET(0x0000);
 8001fe2:	7831      	ldrb	r1, [r6, #0]
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f004 fa47 	bl	8006478 <rtiVC_ReadDevice16>
	chip_id_lsb = RDC_REG_GET(0x0001);
 8001fea:	7831      	ldrb	r1, [r6, #0]
 8001fec:	2201      	movs	r2, #1
	chip_id_msb = RDC_REG_GET(0x0000);
 8001fee:	4606      	mov	r6, r0
	chip_id_lsb = RDC_REG_GET(0x0001);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f004 fa41 	bl	8006478 <rtiVC_ReadDevice16>

	*chip_id = ((U16_T)chip_id_msb << 8) | chip_id_lsb;
	*rev_num = 0;
 8001ff6:	2200      	movs	r2, #0
	*chip_id = ((U16_T)chip_id_msb << 8) | chip_id_lsb;
 8001ff8:	ea40 2306 	orr.w	r3, r0, r6, lsl #8
 8001ffc:	802b      	strh	r3, [r5, #0]

	return 0;
}
 8001ffe:	4610      	mov	r0, r2
	*rev_num = 0;
 8002000:	8022      	strh	r2, [r4, #0]
}
 8002002:	bd70      	pop	{r4, r5, r6, pc}
 8002004:	2000001d 	.word	0x2000001d

08002008 <rdc200a_get_fw_version>:
{
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	reg_0x0002 = RDC_REG_GET(0x0002);
 800200a:	4f0b      	ldr	r7, [pc, #44]	; (8002038 <rdc200a_get_fw_version+0x30>)
{
 800200c:	4615      	mov	r5, r2
 800200e:	4606      	mov	r6, r0
 8002010:	460c      	mov	r4, r1
	reg_0x0002 = RDC_REG_GET(0x0002);
 8002012:	2202      	movs	r2, #2
 8002014:	7839      	ldrb	r1, [r7, #0]
 8002016:	2000      	movs	r0, #0
 8002018:	f004 fa2e 	bl	8006478 <rtiVC_ReadDevice16>
	*major_ver = reg_0x0002 >> 4;
 800201c:	0903      	lsrs	r3, r0, #4
	*rel_ver = reg_0x0002 & 0x0F;
 800201e:	f000 000f 	and.w	r0, r0, #15
	*major_ver = reg_0x0002 >> 4;
 8002022:	7033      	strb	r3, [r6, #0]
	*rel_ver = reg_0x0002 & 0x0F;
 8002024:	7028      	strb	r0, [r5, #0]
	*minor_ver = RDC_REG_GET(0x0003);
 8002026:	7839      	ldrb	r1, [r7, #0]
 8002028:	2203      	movs	r2, #3
 800202a:	2000      	movs	r0, #0
 800202c:	f004 fa24 	bl	8006478 <rtiVC_ReadDevice16>
 8002030:	7020      	strb	r0, [r4, #0]
}
 8002032:	2000      	movs	r0, #0
 8002034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002036:	bf00      	nop
 8002038:	2000001d 	.word	0x2000001d

0800203c <rdc200a_disable_text_osd>:
{
 800203c:	b508      	push	{r3, lr}
	ftdrw_en_mask = 1 << drawer_id;
 800203e:	7f83      	ldrb	r3, [r0, #30]
 8002040:	2111      	movs	r1, #17
	RDC_REG_MASK_SET(0x378, ftdrw_en_mask | ftdrw_en_3d_mask, 0x0);
 8002042:	4099      	lsls	r1, r3
 8002044:	f44f 705e 	mov.w	r0, #888	; 0x378
 8002048:	2200      	movs	r2, #0
 800204a:	b2c9      	uxtb	r1, r1
 800204c:	f005 f87c 	bl	8007148 <RDC_REG_MASK_SET>
}
 8002050:	2000      	movs	r0, #0
 8002052:	bd08      	pop	{r3, pc}

08002054 <rdc200a_disable_bitmap_osd>:
{
 8002054:	b508      	push	{r3, lr}
	bmpdr_en = 1 << drawer_id;
 8002056:	7dc3      	ldrb	r3, [r0, #23]
 8002058:	2111      	movs	r1, #17
	RDC_REG_MASK_SET(0x346, bmpdr_en | bmpdr_en_3d, 0x0);
 800205a:	4099      	lsls	r1, r3
 800205c:	f240 3046 	movw	r0, #838	; 0x346
 8002060:	2200      	movs	r2, #0
 8002062:	b2c9      	uxtb	r1, r1
 8002064:	f005 f870 	bl	8007148 <RDC_REG_MASK_SET>
}
 8002068:	2000      	movs	r0, #0
 800206a:	bd08      	pop	{r3, pc}

0800206c <rdc200a_enable_video_sync_interrupt>:
{
 800206c:	b508      	push	{r3, lr}
	RDC_REG_SET(0x05A4, 0x04); // INTR_SET<31:24> reg, [26]
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <rdc200a_enable_video_sync_interrupt+0x18>)
 8002070:	2000      	movs	r0, #0
 8002072:	7819      	ldrb	r1, [r3, #0]
 8002074:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8002078:	2304      	movs	r3, #4
 800207a:	f004 fa11 	bl	80064a0 <rtiVC_WriteDevice16>
}
 800207e:	2000      	movs	r0, #0
 8002080:	bd08      	pop	{r3, pc}
 8002082:	bf00      	nop
 8002084:	2000001d 	.word	0x2000001d

08002088 <rdc200a_disable_laser_sparkling>:
{
 8002088:	b510      	push	{r4, lr}
	RDC_REG_SET(0x0572, 0x00);
 800208a:	4c08      	ldr	r4, [pc, #32]	; (80020ac <rdc200a_disable_laser_sparkling+0x24>)
 800208c:	2300      	movs	r3, #0
 800208e:	7821      	ldrb	r1, [r4, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f240 5272 	movw	r2, #1394	; 0x572
 8002096:	f004 fa03 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x05A4, 0x10);
 800209a:	7821      	ldrb	r1, [r4, #0]
 800209c:	2310      	movs	r3, #16
}
 800209e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RDC_REG_SET(0x05A4, 0x10);
 80020a2:	f240 52a4 	movw	r2, #1444	; 0x5a4
 80020a6:	2000      	movs	r0, #0
 80020a8:	f004 b9fa 	b.w	80064a0 <rtiVC_WriteDevice16>
 80020ac:	2000001d 	.word	0x2000001d

080020b0 <rdc200a_change_dimension_text_osd>:
{
 80020b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	U8_T drawer_id = cb->drawer_id;
 80020b4:	7f86      	ldrb	r6, [r0, #30]
	ftdrw_en_mask = 1 << drawer_id;
 80020b6:	2401      	movs	r4, #1
 80020b8:	40b4      	lsls	r4, r6
 80020ba:	b2e4      	uxtb	r4, r4
	ftdrw_en_3d_mask = (1 << drawer_id) << 4;
 80020bc:	0125      	lsls	r5, r4, #4
	if (d == VC_OSD_DIMENSTION_3D) {
 80020be:	2901      	cmp	r1, #1
	font_pos_y = cb->pos_y; // 1 pixel unit
 80020c0:	e9d0 8a00 	ldrd	r8, sl, [r0]
{
 80020c4:	b087      	sub	sp, #28
	ftdrw_en_3d_mask = (1 << drawer_id) << 4;
 80020c6:	b2ed      	uxtb	r5, r5
	if (d == VC_OSD_DIMENSTION_3D) {
 80020c8:	d00a      	beq.n	80020e0 <rdc200a_change_dimension_text_osd+0x30>
		en_reg_val |= ftdrw_en_3d_mask;
 80020ca:	ea44 0105 	orr.w	r1, r4, r5
	RDC_REG_MASK_SET(0x0378, ftdrw_en_mask|ftdrw_en_3d_mask, en_reg_val);
 80020ce:	4622      	mov	r2, r4
 80020d0:	f44f 705e 	mov.w	r0, #888	; 0x378
 80020d4:	f005 f838 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 80020d8:	2000      	movs	r0, #0
}
 80020da:	b007      	add	sp, #28
 80020dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!rdc200a_check_text_position(&output_h_size, &output_v_size,
 80020e0:	f890 9018 	ldrb.w	r9, [r0, #24]
		dimension_reg_val = RDC_REG_GET(0x0014);
 80020e4:	4f33      	ldr	r7, [pc, #204]	; (80021b4 <rdc200a_change_dimension_text_osd+0x104>)
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 80020e6:	a905      	add	r1, sp, #20
 80020e8:	a804      	add	r0, sp, #16
 80020ea:	f7ff fee5 	bl	8001eb8 <rdc200a_get_output_resolution>
	font_h_size = rdc200a_font_osd_mag_size[mag].h_size;
 80020ee:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <rdc200a_change_dimension_text_osd+0x108>)
		dimension_reg_val = RDC_REG_GET(0x0014);
 80020f0:	7839      	ldrb	r1, [r7, #0]
	font_v_size = rdc200a_font_osd_mag_size[mag].v_size;
 80020f2:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
		dimension_reg_val = RDC_REG_GET(0x0014);
 80020f6:	2000      	movs	r0, #0
	font_h_size = rdc200a_font_osd_mag_size[mag].h_size;
 80020f8:	f853 9039 	ldr.w	r9, [r3, r9, lsl #3]
	font_v_size = rdc200a_font_osd_mag_size[mag].v_size;
 80020fc:	6853      	ldr	r3, [r2, #4]
 80020fe:	9302      	str	r3, [sp, #8]
		dimension_reg_val = RDC_REG_GET(0x0014);
 8002100:	2214      	movs	r2, #20
 8002102:	f004 f9b9 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 8002106:	f010 0f18 	tst.w	r0, #24
 800210a:	d112      	bne.n	8002132 <rdc200a_change_dimension_text_osd+0x82>
		else if (dimension_reg_val & TAB3D_EN) {
 800210c:	0682      	lsls	r2, r0, #26
 800210e:	d44a      	bmi.n	80021a6 <rdc200a_change_dimension_text_osd+0xf6>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8002110:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8002114:	9201      	str	r2, [sp, #4]
	if (((x+font_h_size) < output_h_size) && ((y+font_v_size) < output_v_size))
 8002116:	44c1      	add	r9, r8
 8002118:	4599      	cmp	r9, r3
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	d204      	bcs.n	8002128 <rdc200a_change_dimension_text_osd+0x78>
 800211e:	9a02      	ldr	r2, [sp, #8]
 8002120:	9b01      	ldr	r3, [sp, #4]
 8002122:	4452      	add	r2, sl
 8002124:	4293      	cmp	r3, r2
 8002126:	d809      	bhi.n	800213c <rdc200a_change_dimension_text_osd+0x8c>
			return -1;
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
}
 800212c:	b007      	add	sp, #28
 800212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8002132:	9b04      	ldr	r3, [sp, #16]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8002134:	9a05      	ldr	r2, [sp, #20]
 8002136:	9201      	str	r2, [sp, #4]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	e7ec      	b.n	8002116 <rdc200a_change_dimension_text_osd+0x66>
		dimension_reg_val = RDC_REG_GET(0x0014);
 800213c:	7839      	ldrb	r1, [r7, #0]
 800213e:	2214      	movs	r2, #20
 8002140:	2000      	movs	r0, #0
 8002142:	f004 f999 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) { // Side By Side
 8002146:	f010 0f18 	tst.w	r0, #24
 800214a:	9b00      	ldr	r3, [sp, #0]
 800214c:	d025      	beq.n	800219a <rdc200a_change_dimension_text_osd+0xea>
			font_3d_pos_x = font_pos_x + output_h_size; // 1 pixel unit
 800214e:	eb08 0b03 	add.w	fp, r8, r3
		reg_addr = RDC200A_3D_FONT_POS_X_MSB_REG_ADDR(drawer_id); // MSB reg addr
 8002152:	00b6      	lsls	r6, r6, #2
		RDC_REG_SET(reg_addr, (U8_T)(font_3d_pos_x >> 8));
 8002154:	7839      	ldrb	r1, [r7, #0]
 8002156:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800215a:	f506 725a 	add.w	r2, r6, #872	; 0x368
 800215e:	2000      	movs	r0, #0
 8002160:	f004 f99e 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr+1, font_3d_pos_x & 0xFF);
 8002164:	7839      	ldrb	r1, [r7, #0]
 8002166:	fa5f f38b 	uxtb.w	r3, fp
 800216a:	f206 3269 	addw	r2, r6, #873	; 0x369
 800216e:	2000      	movs	r0, #0
 8002170:	f004 f996 	bl	80064a0 <rtiVC_WriteDevice16>
		en_reg_val |= ftdrw_en_3d_mask;
 8002174:	432c      	orrs	r4, r5
		RDC_REG_SET(reg_addr, (U8_T)(font_3d_pos_y >> 8));
 8002176:	9d03      	ldr	r5, [sp, #12]
 8002178:	7839      	ldrb	r1, [r7, #0]
 800217a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800217e:	f206 326a 	addw	r2, r6, #874	; 0x36a
 8002182:	2000      	movs	r0, #0
 8002184:	f004 f98c 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr+1, font_3d_pos_y & 0xFF);
 8002188:	7839      	ldrb	r1, [r7, #0]
 800218a:	b2eb      	uxtb	r3, r5
 800218c:	f206 326b 	addw	r2, r6, #875	; 0x36b
 8002190:	2000      	movs	r0, #0
 8002192:	f004 f985 	bl	80064a0 <rtiVC_WriteDevice16>
		en_reg_val |= ftdrw_en_3d_mask;
 8002196:	4621      	mov	r1, r4
 8002198:	e799      	b.n	80020ce <rdc200a_change_dimension_text_osd+0x1e>
		else if (dimension_reg_val & TAB3D_EN) {
 800219a:	0683      	lsls	r3, r0, #26
 800219c:	d5d9      	bpl.n	8002152 <rdc200a_change_dimension_text_osd+0xa2>
			font_3d_pos_y = font_pos_y + output_v_size; // 1 pixel unit
 800219e:	9b01      	ldr	r3, [sp, #4]
 80021a0:	4453      	add	r3, sl
 80021a2:	9303      	str	r3, [sp, #12]
 80021a4:	e7d5      	b.n	8002152 <rdc200a_change_dimension_text_osd+0xa2>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 80021a6:	9b05      	ldr	r3, [sp, #20]
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	9305      	str	r3, [sp, #20]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 80021ae:	9b04      	ldr	r3, [sp, #16]
 80021b0:	e7b1      	b.n	8002116 <rdc200a_change_dimension_text_osd+0x66>
 80021b2:	bf00      	nop
 80021b4:	2000001d 	.word	0x2000001d
 80021b8:	0801649c 	.word	0x0801649c

080021bc <rdc200a_hide_text_osd>:
{
 80021bc:	b508      	push	{r3, lr}
	reg_addr = RDC200A_FONT_ALPHA_REG_ADDR(drawer_id);
 80021be:	7f82      	ldrb	r2, [r0, #30]
	RDC_REG_SET(reg_addr, (U8_T)VC_OSD_ALPHA_0);
 80021c0:	4905      	ldr	r1, [pc, #20]	; (80021d8 <rdc200a_hide_text_osd+0x1c>)
 80021c2:	2300      	movs	r3, #0
	reg_addr = RDC200A_FONT_ALPHA_REG_ADDR(drawer_id);
 80021c4:	0052      	lsls	r2, r2, #1
	RDC_REG_SET(reg_addr, (U8_T)VC_OSD_ALPHA_0);
 80021c6:	4618      	mov	r0, r3
 80021c8:	7809      	ldrb	r1, [r1, #0]
 80021ca:	f202 3251 	addw	r2, r2, #849	; 0x351
 80021ce:	f004 f967 	bl	80064a0 <rtiVC_WriteDevice16>
}
 80021d2:	2000      	movs	r0, #0
 80021d4:	bd08      	pop	{r3, pc}
 80021d6:	bf00      	nop
 80021d8:	2000001d 	.word	0x2000001d

080021dc <rdc200a_show_text_osd>:
{
 80021dc:	b508      	push	{r3, lr}
	RDC_REG_SET(reg_addr, ((U8_T)cb->back_alpha<<4)|(U8_T)cb->font_alpha);
 80021de:	f890 c01a 	ldrb.w	ip, [r0, #26]
 80021e2:	7e43      	ldrb	r3, [r0, #25]
	reg_addr = RDC200A_FONT_ALPHA_REG_ADDR(drawer_id);
 80021e4:	7f82      	ldrb	r2, [r0, #30]
	RDC_REG_SET(reg_addr, ((U8_T)cb->back_alpha<<4)|(U8_T)cb->font_alpha);
 80021e6:	4906      	ldr	r1, [pc, #24]	; (8002200 <rdc200a_show_text_osd+0x24>)
 80021e8:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
	reg_addr = RDC200A_FONT_ALPHA_REG_ADDR(drawer_id);
 80021ec:	0052      	lsls	r2, r2, #1
	RDC_REG_SET(reg_addr, ((U8_T)cb->back_alpha<<4)|(U8_T)cb->font_alpha);
 80021ee:	7809      	ldrb	r1, [r1, #0]
 80021f0:	2000      	movs	r0, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f202 3251 	addw	r2, r2, #849	; 0x351
 80021f8:	f004 f952 	bl	80064a0 <rtiVC_WriteDevice16>
}
 80021fc:	2000      	movs	r0, #0
 80021fe:	bd08      	pop	{r3, pc}
 8002200:	2000001d 	.word	0x2000001d

08002204 <rdc200a_change_dimension_bitmap_osd>:
{
 8002204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bmpdr_en = 1 << cb->drawer_id;
 8002208:	7dc2      	ldrb	r2, [r0, #23]
 800220a:	2310      	movs	r3, #16
	bmpdr_en_3d = (1 << cb->drawer_id) << 4;
 800220c:	4093      	lsls	r3, r2
	if (d == VC_OSD_DIMENSTION_3D) {
 800220e:	2901      	cmp	r1, #1
{
 8002210:	b085      	sub	sp, #20
	bmpdr_en_3d = (1 << cb->drawer_id) << 4;
 8002212:	b2dd      	uxtb	r5, r3
	if (d == VC_OSD_DIMENSTION_3D) {
 8002214:	d009      	beq.n	800222a <rdc200a_change_dimension_bitmap_osd+0x26>
		RDC_REG_MASK_SET(0x346, bmpdr_en_3d, 0x0);
 8002216:	2200      	movs	r2, #0
 8002218:	4629      	mov	r1, r5
 800221a:	f240 3046 	movw	r0, #838	; 0x346
 800221e:	f004 ff93 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 8002222:	2000      	movs	r0, #0
}
 8002224:	b005      	add	sp, #20
 8002226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!rdc200a_check_bitmap_position(&output_h_size, &output_v_size,
 800222a:	f890 9014 	ldrb.w	r9, [r0, #20]
		dimension_reg_val = RDC_REG_GET(0x0014);
 800222e:	4e39      	ldr	r6, [pc, #228]	; (8002314 <rdc200a_change_dimension_bitmap_osd+0x110>)
 8002230:	4604      	mov	r4, r0
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 8002232:	a903      	add	r1, sp, #12
 8002234:	a802      	add	r0, sp, #8
		if (!rdc200a_check_bitmap_position(&output_h_size, &output_v_size,
 8002236:	e9d4 7800 	ldrd	r7, r8, [r4]
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 800223a:	f7ff fe3d 	bl	8001eb8 <rdc200a_get_output_resolution>
	bmp_h_size = rdc200a_bmp_osd_mag_size[mag].h_size;
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <rdc200a_change_dimension_bitmap_osd+0x114>)
		dimension_reg_val = RDC_REG_GET(0x0014);
 8002240:	7831      	ldrb	r1, [r6, #0]
	bmp_v_size = rdc200a_bmp_osd_mag_size[mag].v_size;
 8002242:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
		dimension_reg_val = RDC_REG_GET(0x0014);
 8002246:	2000      	movs	r0, #0
	bmp_h_size = rdc200a_bmp_osd_mag_size[mag].h_size;
 8002248:	f853 9039 	ldr.w	r9, [r3, r9, lsl #3]
	bmp_v_size = rdc200a_bmp_osd_mag_size[mag].v_size;
 800224c:	6853      	ldr	r3, [r2, #4]
 800224e:	9301      	str	r3, [sp, #4]
		dimension_reg_val = RDC_REG_GET(0x0014);
 8002250:	2214      	movs	r2, #20
 8002252:	f004 f911 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 8002256:	f010 0f18 	tst.w	r0, #24
 800225a:	d10f      	bne.n	800227c <rdc200a_change_dimension_bitmap_osd+0x78>
		else if (dimension_reg_val & TAB3D_EN) {
 800225c:	0682      	lsls	r2, r0, #26
 800225e:	d450      	bmi.n	8002302 <rdc200a_change_dimension_bitmap_osd+0xfe>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8002260:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
	if (((x+bmp_h_size) < output_h_size) && ((y+bmp_v_size) < output_v_size))
 8002264:	444f      	add	r7, r9
 8002266:	4557      	cmp	r7, sl
 8002268:	d203      	bcs.n	8002272 <rdc200a_change_dimension_bitmap_osd+0x6e>
 800226a:	9b01      	ldr	r3, [sp, #4]
 800226c:	4498      	add	r8, r3
 800226e:	45c3      	cmp	fp, r8
 8002270:	d80a      	bhi.n	8002288 <rdc200a_change_dimension_bitmap_osd+0x84>
			return -1;
 8002272:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002276:	b005      	add	sp, #20
 8002278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 800227c:	9a02      	ldr	r2, [sp, #8]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 800227e:	f8dd b00c 	ldr.w	fp, [sp, #12]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8002282:	ea4f 0a52 	mov.w	sl, r2, lsr #1
 8002286:	e7ed      	b.n	8002264 <rdc200a_change_dimension_bitmap_osd+0x60>
		dimension_reg_val = RDC_REG_GET(0x0014);
 8002288:	7831      	ldrb	r1, [r6, #0]
 800228a:	2214      	movs	r2, #20
 800228c:	2000      	movs	r0, #0
		bmp_pos_y = cb->pos_y; // 1 pixel unit
 800228e:	e9d4 9800 	ldrd	r9, r8, [r4]
		dimension_reg_val = RDC_REG_GET(0x0014);
 8002292:	f004 f8f1 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 8002296:	f010 0f18 	tst.w	r0, #24
 800229a:	d02e      	beq.n	80022fa <rdc200a_change_dimension_bitmap_osd+0xf6>
			bmp_pos_x += output_h_size; // 1 pixel unit
 800229c:	44d1      	add	r9, sl
		reg_addr_msb = RDC200A_3D_BMP_POS_X_MSB_REG_ADDR(cb->drawer_id);
 800229e:	7de7      	ldrb	r7, [r4, #23]
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 80022a0:	7831      	ldrb	r1, [r6, #0]
		reg_addr_msb = RDC200A_3D_BMP_POS_X_MSB_REG_ADDR(cb->drawer_id);
 80022a2:	00bf      	lsls	r7, r7, #2
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 80022a4:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80022a8:	f207 3236 	addw	r2, r7, #822	; 0x336
 80022ac:	2000      	movs	r0, #0
 80022ae:	f004 f8f7 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_x & 0xFF);
 80022b2:	7831      	ldrb	r1, [r6, #0]
 80022b4:	fa5f f389 	uxtb.w	r3, r9
 80022b8:	f207 3237 	addw	r2, r7, #823	; 0x337
 80022bc:	2000      	movs	r0, #0
 80022be:	f004 f8ef 	bl	80064a0 <rtiVC_WriteDevice16>
		reg_addr_msb = RDC200A_3D_BMP_POS_Y_MSB_REG_ADDR(cb->drawer_id);
 80022c2:	7de4      	ldrb	r4, [r4, #23]
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 80022c4:	7831      	ldrb	r1, [r6, #0]
		reg_addr_msb = RDC200A_3D_BMP_POS_Y_MSB_REG_ADDR(cb->drawer_id);
 80022c6:	00a4      	lsls	r4, r4, #2
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 80022c8:	f3c8 2307 	ubfx	r3, r8, #8, #8
 80022cc:	f504 724e 	add.w	r2, r4, #824	; 0x338
 80022d0:	2000      	movs	r0, #0
 80022d2:	f004 f8e5 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_y & 0xFF);
 80022d6:	7831      	ldrb	r1, [r6, #0]
 80022d8:	fa5f f388 	uxtb.w	r3, r8
 80022dc:	f204 3239 	addw	r2, r4, #825	; 0x339
 80022e0:	2000      	movs	r0, #0
 80022e2:	f004 f8dd 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_MASK_SET(0x346, bmpdr_en_3d, bmpdr_en_3d);
 80022e6:	462a      	mov	r2, r5
 80022e8:	4629      	mov	r1, r5
 80022ea:	f240 3046 	movw	r0, #838	; 0x346
 80022ee:	f004 ff2b 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 80022f2:	2000      	movs	r0, #0
}
 80022f4:	b005      	add	sp, #20
 80022f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (dimension_reg_val & TAB3D_EN) {
 80022fa:	0683      	lsls	r3, r0, #26
			bmp_pos_y += output_v_size; // 1 pixel unit
 80022fc:	bf48      	it	mi
 80022fe:	44d8      	addmi	r8, fp
 8002300:	e7cd      	b.n	800229e <rdc200a_change_dimension_bitmap_osd+0x9a>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8002302:	9a03      	ldr	r2, [sp, #12]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8002304:	f8dd a008 	ldr.w	sl, [sp, #8]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8002308:	ea4f 0b52 	mov.w	fp, r2, lsr #1
 800230c:	f8cd b00c 	str.w	fp, [sp, #12]
 8002310:	e7a8      	b.n	8002264 <rdc200a_change_dimension_bitmap_osd+0x60>
 8002312:	bf00      	nop
 8002314:	2000001d 	.word	0x2000001d
 8002318:	08016478 	.word	0x08016478

0800231c <rdc200a_disable_video_sync_interrupt>:
{
 800231c:	b508      	push	{r3, lr}
	RDC_REG_SET(0x05A4, 0x08); // INTR_SET<31:24> reg, [27]
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <rdc200a_disable_video_sync_interrupt+0x18>)
 8002320:	2000      	movs	r0, #0
 8002322:	7819      	ldrb	r1, [r3, #0]
 8002324:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8002328:	2308      	movs	r3, #8
 800232a:	f004 f8b9 	bl	80064a0 <rtiVC_WriteDevice16>
}
 800232e:	2000      	movs	r0, #0
 8002330:	bd08      	pop	{r3, pc}
 8002332:	bf00      	nop
 8002334:	2000001d 	.word	0x2000001d

08002338 <rdc200a_set_led_duty>:
{
 8002338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800233c:	b097      	sub	sp, #92	; 0x5c
	S32_T R_P0_tuning[2] = {0, 0}, G_P0_tuning[2] = {0, 0}, B_P0_tuning[2] = {0, 0};
 800233e:	2400      	movs	r4, #0
 8002340:	2500      	movs	r5, #0
{
 8002342:	460e      	mov	r6, r1
 8002344:	4680      	mov	r8, r0
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 8002346:	a909      	add	r1, sp, #36	; 0x24
 8002348:	a808      	add	r0, sp, #32
{
 800234a:	4617      	mov	r7, r2
	S32_T R_P0_tuning[2] = {0, 0}, G_P0_tuning[2] = {0, 0}, B_P0_tuning[2] = {0, 0};
 800234c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002350:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8002354:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	S32_T R_P1_tuning[2] = {0, 0}, G_P1_tuning[2] = {0, 0}, B_P1_tuning[2] = {0, 0};
 8002358:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 800235c:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8002360:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 8002364:	f7ff fda8 	bl	8001eb8 <rdc200a_get_output_resolution>
	if (vc_panel_attached_port_mask == VC_PANEL_CTRL_PORT_1)
 8002368:	4bd1      	ldr	r3, [pc, #836]	; (80026b0 <rdc200a_set_led_duty+0x378>)
	UINT_T chk_port = (UINT_T)ctrl_port;
 800236a:	f8cd 800c 	str.w	r8, [sp, #12]
	if (vc_panel_attached_port_mask == VC_PANEL_CTRL_PORT_1)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	9701      	str	r7, [sp, #4]
		ctrl_port = VC_PANEL_CTRL_PORT_ALL;
 8002372:	2b02      	cmp	r3, #2
 8002374:	bf14      	ite	ne
 8002376:	4643      	movne	r3, r8
 8002378:	2303      	moveq	r3, #3
 800237a:	9307      	str	r3, [sp, #28]
 800237c:	f006 0301 	and.w	r3, r6, #1
 8002380:	9304      	str	r3, [sp, #16]
 8002382:	f006 0302 	and.w	r3, r6, #2
 8002386:	9305      	str	r3, [sp, #20]
 8002388:	f006 0304 	and.w	r3, r6, #4
 800238c:	9306      	str	r3, [sp, #24]
 800238e:	2300      	movs	r3, #0
 8002390:	f640 0b69 	movw	fp, #2153	; 0x869
 8002394:	9302      	str	r3, [sp, #8]
		if (chk_port & 0x1) {
 8002396:	9b03      	ldr	r3, [sp, #12]
 8002398:	07d9      	lsls	r1, r3, #31
 800239a:	f140 81f8 	bpl.w	800278e <rdc200a_set_led_duty+0x456>
			if (color & VC_LED_CTRL_COLOR_R) {
 800239e:	9b04      	ldr	r3, [sp, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a0 	beq.w	80024e6 <rdc200a_set_led_duty+0x1ae>
				percentage = VC_LED_DUTY_TO_DOUBLE(new_duty[i].R);
 80023a6:	9b01      	ldr	r3, [sp, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	f7fe f8bb 	bl	8000524 <__aeabi_i2d>
 80023ae:	4bc1      	ldr	r3, [pc, #772]	; (80026b4 <rdc200a_set_led_duty+0x37c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	f7fe fa4b 	bl	800084c <__aeabi_ddiv>
 80023b6:	4bc0      	ldr	r3, [pc, #768]	; (80026b8 <rdc200a_set_led_duty+0x380>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	f7fe fa47 	bl	800084c <__aeabi_ddiv>
				if (percentage <= 0.0) {
 80023be:	2200      	movs	r2, #0
 80023c0:	2300      	movs	r3, #0
				percentage = VC_LED_DUTY_TO_DOUBLE(new_duty[i].R);
 80023c2:	4681      	mov	r9, r0
 80023c4:	468a      	mov	sl, r1
				if (percentage <= 0.0) {
 80023c6:	f7fe fb93 	bl	8000af0 <__aeabi_dcmple>
 80023ca:	2800      	cmp	r0, #0
 80023cc:	f040 821e 	bne.w	800280c <rdc200a_set_led_duty+0x4d4>
				if (percentage > 1.0) {
 80023d0:	4bba      	ldr	r3, [pc, #744]	; (80026bc <rdc200a_set_led_duty+0x384>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	4648      	mov	r0, r9
 80023d6:	4651      	mov	r1, sl
 80023d8:	f7fe fb9e 	bl	8000b18 <__aeabi_dcmpgt>
 80023dc:	4605      	mov	r5, r0
 80023de:	2800      	cmp	r0, #0
 80023e0:	f040 8217 	bne.w	8002812 <rdc200a_set_led_duty+0x4da>
				holding_time = (U16_T)RDC_REG_GET(DISPLAY_HOLD_R(i)) << 3; /* 8 line unit */
 80023e4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80026c4 <rdc200a_set_led_duty+0x38c>
 80023e8:	f1ab 0246 	sub.w	r2, fp, #70	; 0x46
 80023ec:	f898 1000 	ldrb.w	r1, [r8]
 80023f0:	b292      	uxth	r2, r2
 80023f2:	f004 f841 	bl	8006478 <rtiVC_ReadDevice16>
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_R_msb(i)) & 0x1F) << 8;
 80023f6:	f1ab 0214 	sub.w	r2, fp, #20
 80023fa:	f898 1000 	ldrb.w	r1, [r8]
				holding_time = (U16_T)RDC_REG_GET(DISPLAY_HOLD_R(i)) << 3; /* 8 line unit */
 80023fe:	4606      	mov	r6, r0
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_R_msb(i)) & 0x1F) << 8;
 8002400:	b292      	uxth	r2, r2
 8002402:	4628      	mov	r0, r5
 8002404:	f004 f838 	bl	8006478 <rtiVC_ReadDevice16>
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_R_lsb(i));
 8002408:	f1ab 0213 	sub.w	r2, fp, #19
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_R_msb(i)) & 0x1F) << 8;
 800240c:	0200      	lsls	r0, r0, #8
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_R_lsb(i));
 800240e:	b292      	uxth	r2, r2
 8002410:	f898 1000 	ldrb.w	r1, [r8]
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_R_msb(i)) & 0x1F) << 8;
 8002414:	f400 54f8 	and.w	r4, r0, #7936	; 0x1f00
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_R_lsb(i));
 8002418:	4628      	mov	r0, r5
 800241a:	f004 f82d 	bl	8006478 <rtiVC_ReadDevice16>
				holding_time = (U16_T)RDC_REG_GET(DISPLAY_HOLD_R(i)) << 3; /* 8 line unit */
 800241e:	00f6      	lsls	r6, r6, #3
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_R_lsb(i));
 8002420:	4304      	orrs	r4, r0
				R_P0_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 8002422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002424:	b2b6      	uxth	r6, r6
 8002426:	4430      	add	r0, r6
 8002428:	f7fe f86c 	bl	8000504 <__aeabi_ui2d>
 800242c:	464a      	mov	r2, r9
 800242e:	4653      	mov	r3, sl
 8002430:	4681      	mov	r9, r0
 8002432:	468a      	mov	sl, r1
 8002434:	f7fe f8e0 	bl	80005f8 <__aeabi_dmul>
 8002438:	b2a4      	uxth	r4, r4
 800243a:	4606      	mov	r6, r0
 800243c:	460f      	mov	r7, r1
 800243e:	4620      	mov	r0, r4
 8002440:	f7fe f870 	bl	8000524 <__aeabi_i2d>
 8002444:	4632      	mov	r2, r6
 8002446:	463b      	mov	r3, r7
 8002448:	f7fd ff1e 	bl	8000288 <__aeabi_dsub>
 800244c:	4b9c      	ldr	r3, [pc, #624]	; (80026c0 <rdc200a_set_led_duty+0x388>)
 800244e:	2200      	movs	r2, #0
 8002450:	f7fd ff1c 	bl	800028c <__adddf3>
 8002454:	f7fe fb80 	bl	8000b58 <__aeabi_d2iz>
 8002458:	9a02      	ldr	r2, [sp, #8]
 800245a:	ab0a      	add	r3, sp, #40	; 0x28
				if (R_P0_tuning[i] < 0) {
 800245c:	2800      	cmp	r0, #0
				R_P0_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 800245e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
				if (R_P0_tuning[i] < 0) {
 8002462:	f2c0 81c1 	blt.w	80027e8 <rdc200a_set_led_duty+0x4b0>
				if (R_P0_tuning[i] > 0x1FFF) {
 8002466:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800246a:	f280 81c0 	bge.w	80027ee <rdc200a_set_led_duty+0x4b6>
				new_duty[i].R = (S32_T)((double)(led_off_time - R_P0_tuning[i])
 800246e:	1a20      	subs	r0, r4, r0
 8002470:	f7fe f858 	bl	8000524 <__aeabi_i2d>
							/ (double)(output_v_size + holding_time)
 8002474:	464a      	mov	r2, r9
 8002476:	4653      	mov	r3, sl
 8002478:	f7fe f9e8 	bl	800084c <__aeabi_ddiv>
							* (100*VC_LED_DUTY_DIVIDER));
 800247c:	a38a      	add	r3, pc, #552	; (adr r3, 80026a8 <rdc200a_set_led_duty+0x370>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fe f8b9 	bl	80005f8 <__aeabi_dmul>
				new_duty[i].R = (S32_T)((double)(led_off_time - R_P0_tuning[i])
 8002486:	f7fe fb67 	bl	8000b58 <__aeabi_d2iz>
 800248a:	9b01      	ldr	r3, [sp, #4]
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_R_msb(i)) & 0x1F) << 8;
 800248c:	f1ab 0210 	sub.w	r2, fp, #16
				new_duty[i].R = (S32_T)((double)(led_off_time - R_P0_tuning[i])
 8002490:	6018      	str	r0, [r3, #0]
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_R_msb(i)) & 0x1F) << 8;
 8002492:	f898 1000 	ldrb.w	r1, [r8]
 8002496:	b292      	uxth	r2, r2
 8002498:	4628      	mov	r0, r5
 800249a:	f003 ffed 	bl	8006478 <rtiVC_ReadDevice16>
                led_off_time |= (U16_T)RDC_REG_GET(LED_P1_OFF_R_lsb(i));
 800249e:	f1ab 020f 	sub.w	r2, fp, #15
 80024a2:	b292      	uxth	r2, r2
 80024a4:	f898 1000 	ldrb.w	r1, [r8]
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_R_msb(i)) & 0x1F) << 8;
 80024a8:	0204      	lsls	r4, r0, #8
                led_off_time |= (U16_T)RDC_REG_GET(LED_P1_OFF_R_lsb(i));
 80024aa:	4628      	mov	r0, r5
 80024ac:	f003 ffe4 	bl	8006478 <rtiVC_ReadDevice16>
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_R_msb(i)) & 0x1F) << 8;
 80024b0:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
                led_off_time |= (U16_T)RDC_REG_GET(LED_P1_OFF_R_lsb(i));
 80024b4:	4320      	orrs	r0, r4
                R_P1_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 80024b6:	b280      	uxth	r0, r0
 80024b8:	f7fe f834 	bl	8000524 <__aeabi_i2d>
 80024bc:	4632      	mov	r2, r6
 80024be:	463b      	mov	r3, r7
 80024c0:	f7fd fee2 	bl	8000288 <__aeabi_dsub>
 80024c4:	4b7e      	ldr	r3, [pc, #504]	; (80026c0 <rdc200a_set_led_duty+0x388>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	f7fd fee0 	bl	800028c <__adddf3>
 80024cc:	f7fe fb44 	bl	8000b58 <__aeabi_d2iz>
 80024d0:	9a02      	ldr	r2, [sp, #8]
 80024d2:	ab10      	add	r3, sp, #64	; 0x40
                if (R_P1_tuning[i] < 0) {
 80024d4:	2800      	cmp	r0, #0
                R_P1_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 80024d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
                if (R_P1_tuning[i] < 0) {
 80024da:	f2c0 8185 	blt.w	80027e8 <rdc200a_set_led_duty+0x4b0>
                if (R_P1_tuning[i] > 0x1FFF) {
 80024de:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80024e2:	f280 8184 	bge.w	80027ee <rdc200a_set_led_duty+0x4b6>
			if (color & VC_LED_CTRL_COLOR_G) {
 80024e6:	9b05      	ldr	r3, [sp, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a0 	beq.w	800262e <rdc200a_set_led_duty+0x2f6>
				percentage = VC_LED_DUTY_TO_DOUBLE(new_duty[i].G);
 80024ee:	9b01      	ldr	r3, [sp, #4]
 80024f0:	6858      	ldr	r0, [r3, #4]
 80024f2:	f7fe f817 	bl	8000524 <__aeabi_i2d>
 80024f6:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <rdc200a_set_led_duty+0x37c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	f7fe f9a7 	bl	800084c <__aeabi_ddiv>
 80024fe:	4b6e      	ldr	r3, [pc, #440]	; (80026b8 <rdc200a_set_led_duty+0x380>)
 8002500:	2200      	movs	r2, #0
 8002502:	f7fe f9a3 	bl	800084c <__aeabi_ddiv>
				if (percentage <= 0.0) {
 8002506:	2200      	movs	r2, #0
 8002508:	2300      	movs	r3, #0
				percentage = VC_LED_DUTY_TO_DOUBLE(new_duty[i].G);
 800250a:	4681      	mov	r9, r0
 800250c:	468a      	mov	sl, r1
				if (percentage <= 0.0) {
 800250e:	f7fe faef 	bl	8000af0 <__aeabi_dcmple>
 8002512:	2800      	cmp	r0, #0
 8002514:	f040 8180 	bne.w	8002818 <rdc200a_set_led_duty+0x4e0>
				if (percentage > 1.0) {
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <rdc200a_set_led_duty+0x384>)
 800251a:	2200      	movs	r2, #0
 800251c:	4648      	mov	r0, r9
 800251e:	4651      	mov	r1, sl
 8002520:	f7fe fafa 	bl	8000b18 <__aeabi_dcmpgt>
 8002524:	4605      	mov	r5, r0
 8002526:	2800      	cmp	r0, #0
 8002528:	f040 8179 	bne.w	800281e <rdc200a_set_led_duty+0x4e6>
				holding_time = (U16_T)RDC_REG_GET(DISPLAY_HOLD_G(i)) << 3; /* 8 line unit */
 800252c:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80026c4 <rdc200a_set_led_duty+0x38c>
 8002530:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
 8002534:	f898 1000 	ldrb.w	r1, [r8]
 8002538:	b292      	uxth	r2, r2
 800253a:	f003 ff9d 	bl	8006478 <rtiVC_ReadDevice16>
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_G_msb(i)) & 0x1F) << 8;
 800253e:	f1ab 020c 	sub.w	r2, fp, #12
 8002542:	f898 1000 	ldrb.w	r1, [r8]
				holding_time = (U16_T)RDC_REG_GET(DISPLAY_HOLD_G(i)) << 3; /* 8 line unit */
 8002546:	4606      	mov	r6, r0
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_G_msb(i)) & 0x1F) << 8;
 8002548:	b292      	uxth	r2, r2
 800254a:	4628      	mov	r0, r5
 800254c:	f003 ff94 	bl	8006478 <rtiVC_ReadDevice16>
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_G_lsb(i));
 8002550:	f1ab 020b 	sub.w	r2, fp, #11
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_G_msb(i)) & 0x1F) << 8;
 8002554:	0200      	lsls	r0, r0, #8
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_G_lsb(i));
 8002556:	b292      	uxth	r2, r2
 8002558:	f898 1000 	ldrb.w	r1, [r8]
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_G_msb(i)) & 0x1F) << 8;
 800255c:	f400 54f8 	and.w	r4, r0, #7936	; 0x1f00
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_G_lsb(i));
 8002560:	4628      	mov	r0, r5
 8002562:	f003 ff89 	bl	8006478 <rtiVC_ReadDevice16>
				holding_time = (U16_T)RDC_REG_GET(DISPLAY_HOLD_G(i)) << 3; /* 8 line unit */
 8002566:	00f6      	lsls	r6, r6, #3
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_G_lsb(i));
 8002568:	4304      	orrs	r4, r0
				G_P0_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 800256a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800256c:	b2b6      	uxth	r6, r6
 800256e:	4430      	add	r0, r6
 8002570:	f7fd ffc8 	bl	8000504 <__aeabi_ui2d>
 8002574:	464a      	mov	r2, r9
 8002576:	4653      	mov	r3, sl
 8002578:	4681      	mov	r9, r0
 800257a:	468a      	mov	sl, r1
 800257c:	f7fe f83c 	bl	80005f8 <__aeabi_dmul>
 8002580:	b2a4      	uxth	r4, r4
 8002582:	4606      	mov	r6, r0
 8002584:	460f      	mov	r7, r1
 8002586:	4620      	mov	r0, r4
 8002588:	f7fd ffcc 	bl	8000524 <__aeabi_i2d>
 800258c:	4632      	mov	r2, r6
 800258e:	463b      	mov	r3, r7
 8002590:	f7fd fe7a 	bl	8000288 <__aeabi_dsub>
 8002594:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <rdc200a_set_led_duty+0x388>)
 8002596:	2200      	movs	r2, #0
 8002598:	f7fd fe78 	bl	800028c <__adddf3>
 800259c:	f7fe fadc 	bl	8000b58 <__aeabi_d2iz>
 80025a0:	9a02      	ldr	r2, [sp, #8]
 80025a2:	ab0c      	add	r3, sp, #48	; 0x30
				if (G_P0_tuning[i] < 0) {
 80025a4:	2800      	cmp	r0, #0
				G_P0_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 80025a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
				if (G_P0_tuning[i] < 0) {
 80025aa:	f2c0 8123 	blt.w	80027f4 <rdc200a_set_led_duty+0x4bc>
				if (G_P0_tuning[i] > 0x1FFF) {
 80025ae:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80025b2:	f280 8122 	bge.w	80027fa <rdc200a_set_led_duty+0x4c2>
				new_duty[i].G = (S32_T)((double)(led_off_time - G_P0_tuning[i])
 80025b6:	1a20      	subs	r0, r4, r0
 80025b8:	f7fd ffb4 	bl	8000524 <__aeabi_i2d>
							/ (double)(output_v_size + holding_time)
 80025bc:	464a      	mov	r2, r9
 80025be:	4653      	mov	r3, sl
 80025c0:	f7fe f944 	bl	800084c <__aeabi_ddiv>
							* (100*VC_LED_DUTY_DIVIDER));
 80025c4:	a338      	add	r3, pc, #224	; (adr r3, 80026a8 <rdc200a_set_led_duty+0x370>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f815 	bl	80005f8 <__aeabi_dmul>
				new_duty[i].G = (S32_T)((double)(led_off_time - G_P0_tuning[i])
 80025ce:	f7fe fac3 	bl	8000b58 <__aeabi_d2iz>
 80025d2:	9b01      	ldr	r3, [sp, #4]
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_G_msb(i)) & 0x1F) << 8;
 80025d4:	f1ab 0208 	sub.w	r2, fp, #8
				new_duty[i].G = (S32_T)((double)(led_off_time - G_P0_tuning[i])
 80025d8:	6058      	str	r0, [r3, #4]
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_G_msb(i)) & 0x1F) << 8;
 80025da:	f898 1000 	ldrb.w	r1, [r8]
 80025de:	b292      	uxth	r2, r2
 80025e0:	4628      	mov	r0, r5
 80025e2:	f003 ff49 	bl	8006478 <rtiVC_ReadDevice16>
                led_off_time |= (U16_T)RDC_REG_GET(LED_P1_OFF_G_lsb(i));
 80025e6:	f1ab 0207 	sub.w	r2, fp, #7
 80025ea:	b292      	uxth	r2, r2
 80025ec:	f898 1000 	ldrb.w	r1, [r8]
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_G_msb(i)) & 0x1F) << 8;
 80025f0:	0204      	lsls	r4, r0, #8
                led_off_time |= (U16_T)RDC_REG_GET(LED_P1_OFF_G_lsb(i));
 80025f2:	4628      	mov	r0, r5
 80025f4:	f003 ff40 	bl	8006478 <rtiVC_ReadDevice16>
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_G_msb(i)) & 0x1F) << 8;
 80025f8:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
                led_off_time |= (U16_T)RDC_REG_GET(LED_P1_OFF_G_lsb(i));
 80025fc:	4320      	orrs	r0, r4
                G_P1_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 80025fe:	b280      	uxth	r0, r0
 8002600:	f7fd ff90 	bl	8000524 <__aeabi_i2d>
 8002604:	4632      	mov	r2, r6
 8002606:	463b      	mov	r3, r7
 8002608:	f7fd fe3e 	bl	8000288 <__aeabi_dsub>
 800260c:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <rdc200a_set_led_duty+0x388>)
 800260e:	2200      	movs	r2, #0
 8002610:	f7fd fe3c 	bl	800028c <__adddf3>
 8002614:	f7fe faa0 	bl	8000b58 <__aeabi_d2iz>
 8002618:	9a02      	ldr	r2, [sp, #8]
 800261a:	ab12      	add	r3, sp, #72	; 0x48
                if (G_P1_tuning[i] < 0) {
 800261c:	2800      	cmp	r0, #0
                G_P1_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 800261e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
                if (G_P1_tuning[i] < 0) {
 8002622:	f2c0 80e7 	blt.w	80027f4 <rdc200a_set_led_duty+0x4bc>
                if (G_P1_tuning[i] > 0x1FFF) {
 8002626:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800262a:	f280 80e6 	bge.w	80027fa <rdc200a_set_led_duty+0x4c2>
			if (color & VC_LED_CTRL_COLOR_B) {
 800262e:	9b06      	ldr	r3, [sp, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80ac 	beq.w	800278e <rdc200a_set_led_duty+0x456>
				percentage = VC_LED_DUTY_TO_DOUBLE(new_duty[i].B);
 8002636:	9b01      	ldr	r3, [sp, #4]
 8002638:	6898      	ldr	r0, [r3, #8]
 800263a:	f7fd ff73 	bl	8000524 <__aeabi_i2d>
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <rdc200a_set_led_duty+0x37c>)
 8002640:	2200      	movs	r2, #0
 8002642:	f7fe f903 	bl	800084c <__aeabi_ddiv>
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <rdc200a_set_led_duty+0x380>)
 8002648:	2200      	movs	r2, #0
 800264a:	f7fe f8ff 	bl	800084c <__aeabi_ddiv>
				if (percentage <= 0.0) {
 800264e:	2200      	movs	r2, #0
 8002650:	2300      	movs	r3, #0
				percentage = VC_LED_DUTY_TO_DOUBLE(new_duty[i].B);
 8002652:	4681      	mov	r9, r0
 8002654:	468a      	mov	sl, r1
				if (percentage <= 0.0) {
 8002656:	f7fe fa4b 	bl	8000af0 <__aeabi_dcmple>
 800265a:	2800      	cmp	r0, #0
 800265c:	f040 80e5 	bne.w	800282a <rdc200a_set_led_duty+0x4f2>
				if (percentage > 1.0) {
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <rdc200a_set_led_duty+0x384>)
 8002662:	2200      	movs	r2, #0
 8002664:	4648      	mov	r0, r9
 8002666:	4651      	mov	r1, sl
 8002668:	f7fe fa56 	bl	8000b18 <__aeabi_dcmpgt>
 800266c:	4605      	mov	r5, r0
 800266e:	2800      	cmp	r0, #0
 8002670:	f040 80d8 	bne.w	8002824 <rdc200a_set_led_duty+0x4ec>
				holding_time = (U16_T)RDC_REG_GET(DISPLAY_HOLD_B(i)) << 3; /* 8 line unit */
 8002674:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80026c4 <rdc200a_set_led_duty+0x38c>
 8002678:	f1ab 0244 	sub.w	r2, fp, #68	; 0x44
 800267c:	f898 1000 	ldrb.w	r1, [r8]
 8002680:	b292      	uxth	r2, r2
 8002682:	f003 fef9 	bl	8006478 <rtiVC_ReadDevice16>
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_B_msb(i)) & 0x1F) << 8;
 8002686:	f1ab 0204 	sub.w	r2, fp, #4
 800268a:	f898 1000 	ldrb.w	r1, [r8]
				holding_time = (U16_T)RDC_REG_GET(DISPLAY_HOLD_B(i)) << 3; /* 8 line unit */
 800268e:	4606      	mov	r6, r0
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_B_msb(i)) & 0x1F) << 8;
 8002690:	b292      	uxth	r2, r2
 8002692:	4628      	mov	r0, r5
 8002694:	f003 fef0 	bl	8006478 <rtiVC_ReadDevice16>
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_B_lsb(i));
 8002698:	f1ab 0203 	sub.w	r2, fp, #3
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_B_msb(i)) & 0x1F) << 8;
 800269c:	0200      	lsls	r0, r0, #8
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_B_lsb(i));
 800269e:	b292      	uxth	r2, r2
 80026a0:	f898 1000 	ldrb.w	r1, [r8]
 80026a4:	e010      	b.n	80026c8 <rdc200a_set_led_duty+0x390>
 80026a6:	bf00      	nop
 80026a8:	00000000 	.word	0x00000000
 80026ac:	40f86a00 	.word	0x40f86a00
 80026b0:	20003814 	.word	0x20003814
 80026b4:	40590000 	.word	0x40590000
 80026b8:	408f4000 	.word	0x408f4000
 80026bc:	3ff00000 	.word	0x3ff00000
 80026c0:	3fe00000 	.word	0x3fe00000
 80026c4:	2000001d 	.word	0x2000001d
				led_off_time = (U16_T)(RDC_REG_GET(LED_P0_OFF_B_msb(i)) & 0x1F) << 8;
 80026c8:	f400 54f8 	and.w	r4, r0, #7936	; 0x1f00
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_B_lsb(i));
 80026cc:	4628      	mov	r0, r5
 80026ce:	f003 fed3 	bl	8006478 <rtiVC_ReadDevice16>
				holding_time = (U16_T)RDC_REG_GET(DISPLAY_HOLD_B(i)) << 3; /* 8 line unit */
 80026d2:	00f6      	lsls	r6, r6, #3
				led_off_time |= (U16_T)RDC_REG_GET(LED_P0_OFF_B_lsb(i));
 80026d4:	4304      	orrs	r4, r0
				B_P0_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 80026d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026d8:	b2b6      	uxth	r6, r6
 80026da:	4430      	add	r0, r6
 80026dc:	f7fd ff12 	bl	8000504 <__aeabi_ui2d>
 80026e0:	464a      	mov	r2, r9
 80026e2:	4653      	mov	r3, sl
 80026e4:	4681      	mov	r9, r0
 80026e6:	468a      	mov	sl, r1
 80026e8:	f7fd ff86 	bl	80005f8 <__aeabi_dmul>
 80026ec:	b2a4      	uxth	r4, r4
 80026ee:	4606      	mov	r6, r0
 80026f0:	460f      	mov	r7, r1
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7fd ff16 	bl	8000524 <__aeabi_i2d>
 80026f8:	4632      	mov	r2, r6
 80026fa:	463b      	mov	r3, r7
 80026fc:	f7fd fdc4 	bl	8000288 <__aeabi_dsub>
 8002700:	4bb5      	ldr	r3, [pc, #724]	; (80029d8 <rdc200a_set_led_duty+0x6a0>)
 8002702:	2200      	movs	r2, #0
 8002704:	f7fd fdc2 	bl	800028c <__adddf3>
 8002708:	f7fe fa26 	bl	8000b58 <__aeabi_d2iz>
 800270c:	9a02      	ldr	r2, [sp, #8]
 800270e:	ab0e      	add	r3, sp, #56	; 0x38
				if (B_P0_tuning[i] < 0) {
 8002710:	2800      	cmp	r0, #0
				B_P0_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 8002712:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
				if (B_P0_tuning[i] < 0) {
 8002716:	db73      	blt.n	8002800 <rdc200a_set_led_duty+0x4c8>
				if (B_P0_tuning[i] > 0x1FFF) {
 8002718:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800271c:	da73      	bge.n	8002806 <rdc200a_set_led_duty+0x4ce>
				new_duty[i].B = (S32_T)((double)(led_off_time - B_P0_tuning[i])
 800271e:	1a20      	subs	r0, r4, r0
 8002720:	f7fd ff00 	bl	8000524 <__aeabi_i2d>
							/ (double)(output_v_size + holding_time)
 8002724:	464a      	mov	r2, r9
 8002726:	4653      	mov	r3, sl
 8002728:	f7fe f890 	bl	800084c <__aeabi_ddiv>
							* (100*VC_LED_DUTY_DIVIDER));
 800272c:	a3a8      	add	r3, pc, #672	; (adr r3, 80029d0 <rdc200a_set_led_duty+0x698>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fd ff61 	bl	80005f8 <__aeabi_dmul>
				new_duty[i].B = (S32_T)((double)(led_off_time - B_P0_tuning[i])
 8002736:	f7fe fa0f 	bl	8000b58 <__aeabi_d2iz>
 800273a:	9b01      	ldr	r3, [sp, #4]
 800273c:	6098      	str	r0, [r3, #8]
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_B_msb(i)) & 0x1F) << 8;
 800273e:	f898 1000 	ldrb.w	r1, [r8]
 8002742:	465a      	mov	r2, fp
 8002744:	4628      	mov	r0, r5
 8002746:	f003 fe97 	bl	8006478 <rtiVC_ReadDevice16>
                led_off_time |= (U16_T)RDC_REG_GET(LED_P1_OFF_B_lsb(i));
 800274a:	f10b 0201 	add.w	r2, fp, #1
 800274e:	b292      	uxth	r2, r2
 8002750:	f898 1000 	ldrb.w	r1, [r8]
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_B_msb(i)) & 0x1F) << 8;
 8002754:	0204      	lsls	r4, r0, #8
                led_off_time |= (U16_T)RDC_REG_GET(LED_P1_OFF_B_lsb(i));
 8002756:	4628      	mov	r0, r5
 8002758:	f003 fe8e 	bl	8006478 <rtiVC_ReadDevice16>
                led_off_time = (U16_T)(RDC_REG_GET(LED_P1_OFF_B_msb(i)) & 0x1F) << 8;
 800275c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
                led_off_time |= (U16_T)RDC_REG_GET(LED_P1_OFF_B_lsb(i));
 8002760:	4320      	orrs	r0, r4
                B_P1_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 8002762:	b280      	uxth	r0, r0
 8002764:	f7fd fede 	bl	8000524 <__aeabi_i2d>
 8002768:	4632      	mov	r2, r6
 800276a:	463b      	mov	r3, r7
 800276c:	f7fd fd8c 	bl	8000288 <__aeabi_dsub>
 8002770:	4b99      	ldr	r3, [pc, #612]	; (80029d8 <rdc200a_set_led_duty+0x6a0>)
 8002772:	2200      	movs	r2, #0
 8002774:	f7fd fd8a 	bl	800028c <__adddf3>
 8002778:	f7fe f9ee 	bl	8000b58 <__aeabi_d2iz>
 800277c:	9a02      	ldr	r2, [sp, #8]
 800277e:	ab14      	add	r3, sp, #80	; 0x50
                if (B_P1_tuning[i] < 0) {
 8002780:	2800      	cmp	r0, #0
                B_P1_tuning[i] = (S32_T)((double)(led_off_time - (output_v_size + holding_time) * percentage) + 0.5);
 8002782:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
                if (B_P1_tuning[i] < 0) {
 8002786:	db3b      	blt.n	8002800 <rdc200a_set_led_duty+0x4c8>
                if (B_P1_tuning[i] > 0x1FFF) {
 8002788:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800278c:	da3b      	bge.n	8002806 <rdc200a_set_led_duty+0x4ce>
		i++;
 800278e:	9b02      	ldr	r3, [sp, #8]
 8002790:	3301      	adds	r3, #1
 8002792:	9302      	str	r3, [sp, #8]
	} while (chk_port);
 8002794:	9b01      	ldr	r3, [sp, #4]
 8002796:	330c      	adds	r3, #12
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	9b03      	ldr	r3, [sp, #12]
 800279c:	f50b 7b80 	add.w	fp, fp, #256	; 0x100
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	fa1f fb8b 	uxth.w	fp, fp
 80027a6:	9303      	str	r3, [sp, #12]
 80027a8:	f47f adf5 	bne.w	8002396 <rdc200a_set_led_duty+0x5e>
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 80027ac:	9b07      	ldr	r3, [sp, #28]
 80027ae:	07da      	lsls	r2, r3, #31
 80027b0:	b2dc      	uxtb	r4, r3
 80027b2:	d50b      	bpl.n	80027cc <rdc200a_set_led_duty+0x494>
		if (color & VC_LED_CTRL_COLOR_R) {
 80027b4:	9b04      	ldr	r3, [sp, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 80e4 	bne.w	8002984 <rdc200a_set_led_duty+0x64c>
		if (color & VC_LED_CTRL_COLOR_G) {
 80027bc:	9b05      	ldr	r3, [sp, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80be 	bne.w	8002940 <rdc200a_set_led_duty+0x608>
		if (color & VC_LED_CTRL_COLOR_B) {
 80027c4:	9b06      	ldr	r3, [sp, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 8098 	bne.w	80028fc <rdc200a_set_led_duty+0x5c4>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 80027cc:	07a3      	lsls	r3, r4, #30
 80027ce:	d507      	bpl.n	80027e0 <rdc200a_set_led_duty+0x4a8>
		if (color & VC_LED_CTRL_COLOR_R) {
 80027d0:	9b04      	ldr	r3, [sp, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d170      	bne.n	80028b8 <rdc200a_set_led_duty+0x580>
		if (color & VC_LED_CTRL_COLOR_G) {
 80027d6:	9b05      	ldr	r3, [sp, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d14b      	bne.n	8002874 <rdc200a_set_led_duty+0x53c>
		if (color & VC_LED_CTRL_COLOR_B) {
 80027dc:	9b06      	ldr	r3, [sp, #24]
 80027de:	bb3b      	cbnz	r3, 8002830 <rdc200a_set_led_duty+0x4f8>
	return 0;
 80027e0:	2000      	movs	r0, #0
}
 80027e2:	b017      	add	sp, #92	; 0x5c
 80027e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return -3;
 80027e8:	f06f 0002 	mvn.w	r0, #2
 80027ec:	e7f9      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -4;
 80027ee:	f06f 0003 	mvn.w	r0, #3
 80027f2:	e7f6      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -7;
 80027f4:	f06f 0006 	mvn.w	r0, #6
 80027f8:	e7f3      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -8;
 80027fa:	f06f 0007 	mvn.w	r0, #7
 80027fe:	e7f0      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -11;
 8002800:	f06f 000a 	mvn.w	r0, #10
 8002804:	e7ed      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -12;
 8002806:	f06f 000b 	mvn.w	r0, #11
 800280a:	e7ea      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -1;
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	e7e7      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -2;
 8002812:	f06f 0001 	mvn.w	r0, #1
 8002816:	e7e4      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -5;
 8002818:	f06f 0004 	mvn.w	r0, #4
 800281c:	e7e1      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -6;
 800281e:	f06f 0005 	mvn.w	r0, #5
 8002822:	e7de      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -10;
 8002824:	f06f 0009 	mvn.w	r0, #9
 8002828:	e7db      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
					return -9;
 800282a:	f06f 0008 	mvn.w	r0, #8
 800282e:	e7d8      	b.n	80027e2 <rdc200a_set_led_duty+0x4aa>
			RDC_REG_SET(LED_P0_ON_B_msb(1), B_P0_tuning[1] >> 8); /* led_p0_on_r */
 8002830:	4c6a      	ldr	r4, [pc, #424]	; (80029dc <rdc200a_set_led_duty+0x6a4>)
 8002832:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002834:	7821      	ldrb	r1, [r4, #0]
 8002836:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800283a:	f640 1263 	movw	r2, #2403	; 0x963
 800283e:	2000      	movs	r0, #0
 8002840:	f003 fe2e 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P0_ON_B_lsb(1), B_P0_tuning[1] & 0xFF);
 8002844:	7821      	ldrb	r1, [r4, #0]
 8002846:	b2eb      	uxtb	r3, r5
 8002848:	f640 1264 	movw	r2, #2404	; 0x964
 800284c:	2000      	movs	r0, #0
 800284e:	f003 fe27 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_B_msb(1), B_P1_tuning[1] >> 8); /* led_p1_on_r */
 8002852:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8002854:	7821      	ldrb	r1, [r4, #0]
 8002856:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800285a:	f640 1267 	movw	r2, #2407	; 0x967
 800285e:	2000      	movs	r0, #0
 8002860:	f003 fe1e 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_B_lsb(1), B_P1_tuning[1] & 0xFF);
 8002864:	7821      	ldrb	r1, [r4, #0]
 8002866:	b2eb      	uxtb	r3, r5
 8002868:	f640 1268 	movw	r2, #2408	; 0x968
 800286c:	2000      	movs	r0, #0
 800286e:	f003 fe17 	bl	80064a0 <rtiVC_WriteDevice16>
 8002872:	e7b5      	b.n	80027e0 <rdc200a_set_led_duty+0x4a8>
			RDC_REG_SET(LED_P0_ON_G_msb(1), G_P0_tuning[1] >> 8); /* led_p0_on_g */
 8002874:	4c59      	ldr	r4, [pc, #356]	; (80029dc <rdc200a_set_led_duty+0x6a4>)
 8002876:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002878:	7821      	ldrb	r1, [r4, #0]
 800287a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800287e:	f640 125b 	movw	r2, #2395	; 0x95b
 8002882:	2000      	movs	r0, #0
 8002884:	f003 fe0c 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P0_ON_G_lsb(1), G_P0_tuning[1] & 0xFF);
 8002888:	7821      	ldrb	r1, [r4, #0]
 800288a:	b2eb      	uxtb	r3, r5
 800288c:	f640 125c 	movw	r2, #2396	; 0x95c
 8002890:	2000      	movs	r0, #0
 8002892:	f003 fe05 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_G_msb(1), G_P1_tuning[1] >> 8); /* led_p1_on_g */
 8002896:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8002898:	7821      	ldrb	r1, [r4, #0]
 800289a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800289e:	f640 125f 	movw	r2, #2399	; 0x95f
 80028a2:	2000      	movs	r0, #0
 80028a4:	f003 fdfc 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_G_lsb(1), G_P1_tuning[1] & 0xFF);
 80028a8:	7821      	ldrb	r1, [r4, #0]
 80028aa:	b2eb      	uxtb	r3, r5
 80028ac:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80028b0:	2000      	movs	r0, #0
 80028b2:	f003 fdf5 	bl	80064a0 <rtiVC_WriteDevice16>
 80028b6:	e791      	b.n	80027dc <rdc200a_set_led_duty+0x4a4>
			RDC_REG_SET(LED_P0_ON_R_msb(1), R_P0_tuning[1] >> 8); /* led_p0_on_r */
 80028b8:	4c48      	ldr	r4, [pc, #288]	; (80029dc <rdc200a_set_led_duty+0x6a4>)
 80028ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80028bc:	7821      	ldrb	r1, [r4, #0]
 80028be:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80028c2:	f640 1253 	movw	r2, #2387	; 0x953
 80028c6:	2000      	movs	r0, #0
 80028c8:	f003 fdea 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P0_ON_R_lsb(1), R_P0_tuning[1] & 0xFF);
 80028cc:	7821      	ldrb	r1, [r4, #0]
 80028ce:	b2eb      	uxtb	r3, r5
 80028d0:	f640 1254 	movw	r2, #2388	; 0x954
 80028d4:	2000      	movs	r0, #0
 80028d6:	f003 fde3 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_R_msb(1), R_P1_tuning[1] >> 8); /* led_p1_on_r */
 80028da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80028dc:	7821      	ldrb	r1, [r4, #0]
 80028de:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80028e2:	f640 1257 	movw	r2, #2391	; 0x957
 80028e6:	2000      	movs	r0, #0
 80028e8:	f003 fdda 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_R_lsb(1), R_P1_tuning[1] & 0xFF);
 80028ec:	7821      	ldrb	r1, [r4, #0]
 80028ee:	b2eb      	uxtb	r3, r5
 80028f0:	f640 1258 	movw	r2, #2392	; 0x958
 80028f4:	2000      	movs	r0, #0
 80028f6:	f003 fdd3 	bl	80064a0 <rtiVC_WriteDevice16>
 80028fa:	e76c      	b.n	80027d6 <rdc200a_set_led_duty+0x49e>
			RDC_REG_SET(LED_P0_ON_B_msb(0), B_P0_tuning[0] >> 8); /* led_p0_on_r */
 80028fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80028fe:	4d37      	ldr	r5, [pc, #220]	; (80029dc <rdc200a_set_led_duty+0x6a4>)
 8002900:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8002904:	7829      	ldrb	r1, [r5, #0]
 8002906:	f640 0263 	movw	r2, #2147	; 0x863
 800290a:	2000      	movs	r0, #0
 800290c:	f003 fdc8 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P0_ON_B_lsb(0), B_P0_tuning[0] & 0xFF);
 8002910:	7829      	ldrb	r1, [r5, #0]
 8002912:	b2f3      	uxtb	r3, r6
 8002914:	f640 0264 	movw	r2, #2148	; 0x864
 8002918:	2000      	movs	r0, #0
 800291a:	f003 fdc1 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_B_msb(0), B_P1_tuning[0] >> 8); /* led_p1_on_r */
 800291e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8002920:	7829      	ldrb	r1, [r5, #0]
 8002922:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8002926:	f640 0267 	movw	r2, #2151	; 0x867
 800292a:	2000      	movs	r0, #0
 800292c:	f003 fdb8 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_B_lsb(0), B_P1_tuning[0] & 0xFF);
 8002930:	7829      	ldrb	r1, [r5, #0]
 8002932:	b2f3      	uxtb	r3, r6
 8002934:	f640 0268 	movw	r2, #2152	; 0x868
 8002938:	2000      	movs	r0, #0
 800293a:	f003 fdb1 	bl	80064a0 <rtiVC_WriteDevice16>
 800293e:	e745      	b.n	80027cc <rdc200a_set_led_duty+0x494>
			RDC_REG_SET(LED_P0_ON_G_msb(0), G_P0_tuning[0] >> 8); /* led_p0_on_g */
 8002940:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002942:	4d26      	ldr	r5, [pc, #152]	; (80029dc <rdc200a_set_led_duty+0x6a4>)
 8002944:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8002948:	7829      	ldrb	r1, [r5, #0]
 800294a:	f640 025b 	movw	r2, #2139	; 0x85b
 800294e:	2000      	movs	r0, #0
 8002950:	f003 fda6 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P0_ON_G_lsb(0), G_P0_tuning[0] & 0xFF);
 8002954:	7829      	ldrb	r1, [r5, #0]
 8002956:	b2f3      	uxtb	r3, r6
 8002958:	f640 025c 	movw	r2, #2140	; 0x85c
 800295c:	2000      	movs	r0, #0
 800295e:	f003 fd9f 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_G_msb(0), G_P1_tuning[0] >> 8); /* led_p1_on_g */
 8002962:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8002964:	7829      	ldrb	r1, [r5, #0]
 8002966:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800296a:	f640 025f 	movw	r2, #2143	; 0x85f
 800296e:	2000      	movs	r0, #0
 8002970:	f003 fd96 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_G_lsb(0), G_P1_tuning[0] & 0xFF);
 8002974:	7829      	ldrb	r1, [r5, #0]
 8002976:	b2f3      	uxtb	r3, r6
 8002978:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800297c:	2000      	movs	r0, #0
 800297e:	f003 fd8f 	bl	80064a0 <rtiVC_WriteDevice16>
 8002982:	e71f      	b.n	80027c4 <rdc200a_set_led_duty+0x48c>
			RDC_REG_SET(LED_P0_ON_R_msb(0), R_P0_tuning[0] >> 8); /* led_p0_on_r */
 8002984:	9f03      	ldr	r7, [sp, #12]
 8002986:	4d15      	ldr	r5, [pc, #84]	; (80029dc <rdc200a_set_led_duty+0x6a4>)
 8002988:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800298a:	7829      	ldrb	r1, [r5, #0]
 800298c:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8002990:	4638      	mov	r0, r7
 8002992:	f640 0253 	movw	r2, #2131	; 0x853
 8002996:	f003 fd83 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P0_ON_R_lsb(0), R_P0_tuning[0] & 0xFF);
 800299a:	7829      	ldrb	r1, [r5, #0]
 800299c:	b2f3      	uxtb	r3, r6
 800299e:	4638      	mov	r0, r7
 80029a0:	f640 0254 	movw	r2, #2132	; 0x854
 80029a4:	f003 fd7c 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_R_msb(0), R_P1_tuning[0] >> 8); /* led_r1_on_r */
 80029a8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80029aa:	7829      	ldrb	r1, [r5, #0]
 80029ac:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80029b0:	4638      	mov	r0, r7
 80029b2:	f640 0257 	movw	r2, #2135	; 0x857
 80029b6:	f003 fd73 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(LED_P1_ON_R_lsb(0), R_P1_tuning[0] & 0xFF);
 80029ba:	7829      	ldrb	r1, [r5, #0]
 80029bc:	b2f3      	uxtb	r3, r6
 80029be:	4638      	mov	r0, r7
 80029c0:	f640 0258 	movw	r2, #2136	; 0x858
 80029c4:	f003 fd6c 	bl	80064a0 <rtiVC_WriteDevice16>
 80029c8:	e6f8      	b.n	80027bc <rdc200a_set_led_duty+0x484>
 80029ca:	bf00      	nop
 80029cc:	f3af 8000 	nop.w
 80029d0:	00000000 	.word	0x00000000
 80029d4:	40f86a00 	.word	0x40f86a00
 80029d8:	3fe00000 	.word	0x3fe00000
 80029dc:	2000001d 	.word	0x2000001d

080029e0 <rdc200a_shift_vertical_pixel>:
{
 80029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	U16_T v_shift_msb_reg[2] = {0x832, 0x932};
 80029e4:	4a5d      	ldr	r2, [pc, #372]	; (8002b5c <rdc200a_shift_vertical_pixel+0x17c>)
	U16_T v_shift_lsb_reg[2] = {0x833, 0x933};
 80029e6:	4b5e      	ldr	r3, [pc, #376]	; (8002b60 <rdc200a_shift_vertical_pixel+0x180>)
			msb[i] = RDC_REG_GET(v_shift_msb_reg[i]);
 80029e8:	4f5e      	ldr	r7, [pc, #376]	; (8002b64 <rdc200a_shift_vertical_pixel+0x184>)
{
 80029ea:	b084      	sub	sp, #16
 80029ec:	2901      	cmp	r1, #1
	U16_T v_shift_lsb_reg[2] = {0x833, 0x933};
 80029ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
 80029f2:	4681      	mov	r9, r0
	UINT_T i = 0, chk_port = (UINT_T)ctrl_port;
 80029f4:	4604      	mov	r4, r0
 80029f6:	ae01      	add	r6, sp, #4
 80029f8:	f04f 0500 	mov.w	r5, #0
			msb[i] = RDC_REG_GET(v_shift_msb_reg[i]);
 80029fc:	f10d 0808 	add.w	r8, sp, #8
 8002a00:	d106      	bne.n	8002a10 <rdc200a_shift_vertical_pixel+0x30>
 8002a02:	e065      	b.n	8002ad0 <rdc200a_shift_vertical_pixel+0xf0>
	} while (chk_port);
 8002a04:	0864      	lsrs	r4, r4, #1
		i++;
 8002a06:	f105 0501 	add.w	r5, r5, #1
	} while (chk_port);
 8002a0a:	f106 0601 	add.w	r6, r6, #1
 8002a0e:	d029      	beq.n	8002a64 <rdc200a_shift_vertical_pixel+0x84>
		if (chk_port & 0x1) {
 8002a10:	07e2      	lsls	r2, r4, #31
 8002a12:	d5f7      	bpl.n	8002a04 <rdc200a_shift_vertical_pixel+0x24>
			msb[i] = RDC_REG_GET(v_shift_msb_reg[i]);
 8002a14:	f838 2015 	ldrh.w	r2, [r8, r5, lsl #1]
 8002a18:	7839      	ldrb	r1, [r7, #0]
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f003 fd2c 	bl	8006478 <rtiVC_ReadDevice16>
			lsb[i] = RDC_REG_GET(v_shift_lsb_reg[i]);
 8002a20:	ab03      	add	r3, sp, #12
			msb[i] = RDC_REG_GET(v_shift_msb_reg[i]);
 8002a22:	4682      	mov	sl, r0
			lsb[i] = RDC_REG_GET(v_shift_lsb_reg[i]);
 8002a24:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8002a28:	7839      	ldrb	r1, [r7, #0]
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f003 fd24 	bl	8006478 <rtiVC_ReadDevice16>
			shift_val = (S16_T)(((U16_T)msb[i] << 8) | lsb[i]);
 8002a30:	f00a 021f 	and.w	r2, sl, #31
 8002a34:	ea40 2302 	orr.w	r3, r0, r2, lsl #8
				shift_val++;
 8002a38:	1c59      	adds	r1, r3, #1
			if (V_SHIFT_SIGN & 0x80)
 8002a3a:	f01a 0f80 	tst.w	sl, #128	; 0x80
			lsb[i] = RDC_REG_GET(v_shift_lsb_reg[i]);
 8002a3e:	7030      	strb	r0, [r6, #0]
				shift_val++;
 8002a40:	460a      	mov	r2, r1
			if (V_SHIFT_SIGN & 0x80)
 8002a42:	d148      	bne.n	8002ad6 <rdc200a_shift_vertical_pixel+0xf6>
					if (shift_val > 0x1FFF) {
 8002a44:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002a48:	f000 8082 	beq.w	8002b50 <rdc200a_shift_vertical_pixel+0x170>
					V_SHIFT_SIGN = 0x00; // up direction from image
 8002a4c:	2300      	movs	r3, #0
			msb[i] = (shift_val >> 8) | V_SHIFT_SIGN;
 8002a4e:	ea43 2322 	orr.w	r3, r3, r2, asr #8
	} while (chk_port);
 8002a52:	0864      	lsrs	r4, r4, #1
			msb[i] = (shift_val >> 8) | V_SHIFT_SIGN;
 8002a54:	f80d 3005 	strb.w	r3, [sp, r5]
			lsb[i] = shift_val & 0xFF;
 8002a58:	7032      	strb	r2, [r6, #0]
		i++;
 8002a5a:	f105 0501 	add.w	r5, r5, #1
	} while (chk_port);
 8002a5e:	f106 0601 	add.w	r6, r6, #1
 8002a62:	d1d5      	bne.n	8002a10 <rdc200a_shift_vertical_pixel+0x30>
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8002a64:	f019 0f01 	tst.w	r9, #1
 8002a68:	fa5f f489 	uxtb.w	r4, r9
 8002a6c:	d147      	bne.n	8002afe <rdc200a_shift_vertical_pixel+0x11e>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8002a6e:	f014 0002 	ands.w	r0, r4, #2
 8002a72:	d158      	bne.n	8002b26 <rdc200a_shift_vertical_pixel+0x146>
}
 8002a74:	b004      	add	sp, #16
 8002a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			msb[i] = RDC_REG_GET(v_shift_msb_reg[i]);
 8002a7a:	f838 2015 	ldrh.w	r2, [r8, r5, lsl #1]
 8002a7e:	7839      	ldrb	r1, [r7, #0]
 8002a80:	2000      	movs	r0, #0
 8002a82:	f003 fcf9 	bl	8006478 <rtiVC_ReadDevice16>
			lsb[i] = RDC_REG_GET(v_shift_lsb_reg[i]);
 8002a86:	ab03      	add	r3, sp, #12
			msb[i] = RDC_REG_GET(v_shift_msb_reg[i]);
 8002a88:	4682      	mov	sl, r0
			lsb[i] = RDC_REG_GET(v_shift_lsb_reg[i]);
 8002a8a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8002a8e:	7839      	ldrb	r1, [r7, #0]
 8002a90:	2000      	movs	r0, #0
 8002a92:	f003 fcf1 	bl	8006478 <rtiVC_ReadDevice16>
			shift_val = (S16_T)(((U16_T)msb[i] << 8) | lsb[i]);
 8002a96:	f00a 031f 	and.w	r3, sl, #31
 8002a9a:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
			if (V_SHIFT_SIGN & 0x80)
 8002a9e:	f01a 0f80 	tst.w	sl, #128	; 0x80
			lsb[i] = RDC_REG_GET(v_shift_lsb_reg[i]);
 8002aa2:	7030      	strb	r0, [r6, #0]
					shift_val = ABS(shift_val);
 8002aa4:	ea6f 0203 	mvn.w	r2, r3
			if (V_SHIFT_SIGN & 0x80)
 8002aa8:	d11e      	bne.n	8002ae8 <rdc200a_shift_vertical_pixel+0x108>
					V_SHIFT_SIGN = 0x80; // down direction from image
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf18      	it	ne
 8002aae:	2200      	movne	r2, #0
				shift_val--;
 8002ab0:	f103 33ff 	add.w	r3, r3, #4294967295
					V_SHIFT_SIGN = 0x80; // down direction from image
 8002ab4:	bf04      	itt	eq
 8002ab6:	2280      	moveq	r2, #128	; 0x80
 8002ab8:	2301      	moveq	r3, #1
			msb[i] = (shift_val >> 8) | V_SHIFT_SIGN;
 8002aba:	ea42 2223 	orr.w	r2, r2, r3, asr #8
 8002abe:	f80d 2005 	strb.w	r2, [sp, r5]
			lsb[i] = shift_val & 0xFF;
 8002ac2:	7033      	strb	r3, [r6, #0]
	} while (chk_port);
 8002ac4:	0864      	lsrs	r4, r4, #1
		i++;
 8002ac6:	f105 0501 	add.w	r5, r5, #1
	} while (chk_port);
 8002aca:	f106 0601 	add.w	r6, r6, #1
 8002ace:	d0c9      	beq.n	8002a64 <rdc200a_shift_vertical_pixel+0x84>
		if (chk_port & 0x1) {
 8002ad0:	07e3      	lsls	r3, r4, #31
 8002ad2:	d5f7      	bpl.n	8002ac4 <rdc200a_shift_vertical_pixel+0xe4>
 8002ad4:	e7d1      	b.n	8002a7a <rdc200a_shift_vertical_pixel+0x9a>
				if (shift_val < 0) {
 8002ad6:	f1d3 0201 	rsbs	r2, r3, #1
 8002ada:	d5b7      	bpl.n	8002a4c <rdc200a_shift_vertical_pixel+0x6c>
					shift_val = ABS(shift_val);
 8002adc:	2a00      	cmp	r2, #0
 8002ade:	bfb8      	it	lt
 8002ae0:	4252      	neglt	r2, r2
 8002ae2:	b212      	sxth	r2, r2
					V_SHIFT_SIGN = 0x80; // down direction from image
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	e7b2      	b.n	8002a4e <rdc200a_shift_vertical_pixel+0x6e>
					shift_val = ABS(shift_val);
 8002ae8:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8002aec:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8002af0:	b29a      	uxth	r2, r3
					if (shift_val > 0x1FFF) {
 8002af2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
					shift_val = ABS(shift_val);
 8002af6:	b21b      	sxth	r3, r3
					if (shift_val > 0x1FFF) {
 8002af8:	d02d      	beq.n	8002b56 <rdc200a_shift_vertical_pixel+0x176>
					V_SHIFT_SIGN = 0x80; // down direction from image
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	e7dd      	b.n	8002aba <rdc200a_shift_vertical_pixel+0xda>
		RDC_REG_SET(v_shift_msb_reg[0], msb[0]);
 8002afe:	4d19      	ldr	r5, [pc, #100]	; (8002b64 <rdc200a_shift_vertical_pixel+0x184>)
 8002b00:	f89d 3000 	ldrb.w	r3, [sp]
 8002b04:	7829      	ldrb	r1, [r5, #0]
 8002b06:	f640 0232 	movw	r2, #2098	; 0x832
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f003 fcc8 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(v_shift_lsb_reg[0], lsb[0]);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b16:	7829      	ldrb	r1, [r5, #0]
 8002b18:	f640 0233 	movw	r2, #2099	; 0x833
 8002b1c:	f003 fcc0 	bl	80064a0 <rtiVC_WriteDevice16>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8002b20:	f014 0002 	ands.w	r0, r4, #2
 8002b24:	d0a6      	beq.n	8002a74 <rdc200a_shift_vertical_pixel+0x94>
		RDC_REG_SET(v_shift_msb_reg[1], msb[1]);
 8002b26:	4c0f      	ldr	r4, [pc, #60]	; (8002b64 <rdc200a_shift_vertical_pixel+0x184>)
 8002b28:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002b2c:	7821      	ldrb	r1, [r4, #0]
 8002b2e:	f640 1232 	movw	r2, #2354	; 0x932
 8002b32:	2000      	movs	r0, #0
 8002b34:	f003 fcb4 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(v_shift_lsb_reg[1], lsb[1]);
 8002b38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002b3c:	7821      	ldrb	r1, [r4, #0]
 8002b3e:	f640 1233 	movw	r2, #2355	; 0x933
 8002b42:	2000      	movs	r0, #0
 8002b44:	f003 fcac 	bl	80064a0 <rtiVC_WriteDevice16>
	return 0;
 8002b48:	2000      	movs	r0, #0
}
 8002b4a:	b004      	add	sp, #16
 8002b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						return -2;
 8002b50:	f06f 0001 	mvn.w	r0, #1
 8002b54:	e78e      	b.n	8002a74 <rdc200a_shift_vertical_pixel+0x94>
						return -1;
 8002b56:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5a:	e78b      	b.n	8002a74 <rdc200a_shift_vertical_pixel+0x94>
 8002b5c:	09320832 	.word	0x09320832
 8002b60:	09330833 	.word	0x09330833
 8002b64:	2000001d 	.word	0x2000001d

08002b68 <rdc200a_shift_horizontal_pixel>:
{
 8002b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	U16_T h_shift_msb_reg[2] = {0x830, 0x930};
 8002b6c:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <rdc200a_shift_horizontal_pixel+0x180>)
	U16_T h_shift_lsb_reg[2] = {0x831, 0x931};
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <rdc200a_shift_horizontal_pixel+0x184>)
{
 8002b70:	b084      	sub	sp, #16
	U16_T h_shift_lsb_reg[2] = {0x831, 0x931};
 8002b72:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
 8002b76:	4681      	mov	r9, r0
	UINT_T i = 0, chk_port = (UINT_T)ctrl_port;
 8002b78:	4604      	mov	r4, r0
 8002b7a:	ae01      	add	r6, sp, #4
 8002b7c:	2900      	cmp	r1, #0
 8002b7e:	d047      	beq.n	8002c10 <rdc200a_shift_horizontal_pixel+0xa8>
			msb[i] = RDC_REG_GET(h_shift_msb_reg[i]);
 8002b80:	4f5b      	ldr	r7, [pc, #364]	; (8002cf0 <rdc200a_shift_horizontal_pixel+0x188>)
	UINT_T i = 0, chk_port = (UINT_T)ctrl_port;
 8002b82:	2500      	movs	r5, #0
			msb[i] = RDC_REG_GET(h_shift_msb_reg[i]);
 8002b84:	f10d 0808 	add.w	r8, sp, #8
 8002b88:	e005      	b.n	8002b96 <rdc200a_shift_horizontal_pixel+0x2e>
	} while (chk_port);
 8002b8a:	0864      	lsrs	r4, r4, #1
		i++;
 8002b8c:	f105 0501 	add.w	r5, r5, #1
	} while (chk_port);
 8002b90:	f106 0601 	add.w	r6, r6, #1
 8002b94:	d02c      	beq.n	8002bf0 <rdc200a_shift_horizontal_pixel+0x88>
		if (chk_port & 0x1) {
 8002b96:	07e2      	lsls	r2, r4, #31
 8002b98:	d5f7      	bpl.n	8002b8a <rdc200a_shift_horizontal_pixel+0x22>
			msb[i] = RDC_REG_GET(h_shift_msb_reg[i]);
 8002b9a:	f838 2015 	ldrh.w	r2, [r8, r5, lsl #1]
 8002b9e:	7839      	ldrb	r1, [r7, #0]
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f003 fc69 	bl	8006478 <rtiVC_ReadDevice16>
			lsb[i] = RDC_REG_GET(h_shift_lsb_reg[i]);
 8002ba6:	ab03      	add	r3, sp, #12
			msb[i] = RDC_REG_GET(h_shift_msb_reg[i]);
 8002ba8:	4682      	mov	sl, r0
			lsb[i] = RDC_REG_GET(h_shift_lsb_reg[i]);
 8002baa:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8002bae:	7839      	ldrb	r1, [r7, #0]
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f003 fc61 	bl	8006478 <rtiVC_ReadDevice16>
			shift_val = (S16_T)(((U16_T)msb[i] << 8) | lsb[i]);
 8002bb6:	f00a 020f 	and.w	r2, sl, #15
 8002bba:	ea40 2302 	orr.w	r3, r0, r2, lsl #8
				shift_val++;
 8002bbe:	1c59      	adds	r1, r3, #1
			if (H_SHIFT_SIGN == 0x00)
 8002bc0:	f01a 0f80 	tst.w	sl, #128	; 0x80
			lsb[i] = RDC_REG_GET(h_shift_lsb_reg[i]);
 8002bc4:	7030      	strb	r0, [r6, #0]
				shift_val++;
 8002bc6:	460a      	mov	r2, r1
			if (H_SHIFT_SIGN == 0x00)
 8002bc8:	d11d      	bne.n	8002c06 <rdc200a_shift_horizontal_pixel+0x9e>
				if (shift_val < 0) {
 8002bca:	f1d3 0201 	rsbs	r2, r3, #1
 8002bce:	d51d      	bpl.n	8002c0c <rdc200a_shift_horizontal_pixel+0xa4>
					shift_val = ABS(shift_val);
 8002bd0:	2a00      	cmp	r2, #0
 8002bd2:	bfb8      	it	lt
 8002bd4:	4252      	neglt	r2, r2
 8002bd6:	b212      	sxth	r2, r2
					H_SHIFT_SIGN = 0x00; // left direction from image
 8002bd8:	2300      	movs	r3, #0
			msb[i] = (shift_val >> 8) | H_SHIFT_SIGN;
 8002bda:	ea43 2322 	orr.w	r3, r3, r2, asr #8
	} while (chk_port);
 8002bde:	0864      	lsrs	r4, r4, #1
			msb[i] = (shift_val >> 8) | H_SHIFT_SIGN;
 8002be0:	f80d 3005 	strb.w	r3, [sp, r5]
			lsb[i] = shift_val & 0xFF;
 8002be4:	7032      	strb	r2, [r6, #0]
		i++;
 8002be6:	f105 0501 	add.w	r5, r5, #1
	} while (chk_port);
 8002bea:	f106 0601 	add.w	r6, r6, #1
 8002bee:	d1d2      	bne.n	8002b96 <rdc200a_shift_horizontal_pixel+0x2e>
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8002bf0:	f019 0f01 	tst.w	r9, #1
 8002bf4:	fa5f f489 	uxtb.w	r4, r9
 8002bf8:	d15d      	bne.n	8002cb6 <rdc200a_shift_horizontal_pixel+0x14e>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8002bfa:	f014 0002 	ands.w	r0, r4, #2
 8002bfe:	d145      	bne.n	8002c8c <rdc200a_shift_horizontal_pixel+0x124>
}
 8002c00:	b004      	add	sp, #16
 8002c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (shift_val > 0xFFF) {
 8002c06:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002c0a:	d069      	beq.n	8002ce0 <rdc200a_shift_horizontal_pixel+0x178>
					H_SHIFT_SIGN = 0x80; // right direction from image
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	e7e4      	b.n	8002bda <rdc200a_shift_horizontal_pixel+0x72>
			msb[i] = RDC_REG_GET(h_shift_msb_reg[i]);
 8002c10:	4f37      	ldr	r7, [pc, #220]	; (8002cf0 <rdc200a_shift_horizontal_pixel+0x188>)
	UINT_T i = 0, chk_port = (UINT_T)ctrl_port;
 8002c12:	460d      	mov	r5, r1
			msb[i] = RDC_REG_GET(h_shift_msb_reg[i]);
 8002c14:	f10d 0808 	add.w	r8, sp, #8
 8002c18:	e005      	b.n	8002c26 <rdc200a_shift_horizontal_pixel+0xbe>
	} while (chk_port);
 8002c1a:	0864      	lsrs	r4, r4, #1
		i++;
 8002c1c:	f105 0501 	add.w	r5, r5, #1
	} while (chk_port);
 8002c20:	f106 0601 	add.w	r6, r6, #1
 8002c24:	d0e4      	beq.n	8002bf0 <rdc200a_shift_horizontal_pixel+0x88>
		if (chk_port & 0x1) {
 8002c26:	07e3      	lsls	r3, r4, #31
 8002c28:	d5f7      	bpl.n	8002c1a <rdc200a_shift_horizontal_pixel+0xb2>
			msb[i] = RDC_REG_GET(h_shift_msb_reg[i]);
 8002c2a:	f838 2015 	ldrh.w	r2, [r8, r5, lsl #1]
 8002c2e:	7839      	ldrb	r1, [r7, #0]
 8002c30:	2000      	movs	r0, #0
 8002c32:	f003 fc21 	bl	8006478 <rtiVC_ReadDevice16>
			lsb[i] = RDC_REG_GET(h_shift_lsb_reg[i]);
 8002c36:	ab03      	add	r3, sp, #12
			msb[i] = RDC_REG_GET(h_shift_msb_reg[i]);
 8002c38:	4682      	mov	sl, r0
			lsb[i] = RDC_REG_GET(h_shift_lsb_reg[i]);
 8002c3a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8002c3e:	7839      	ldrb	r1, [r7, #0]
 8002c40:	2000      	movs	r0, #0
 8002c42:	f003 fc19 	bl	8006478 <rtiVC_ReadDevice16>
			shift_val = (S16_T)(((U16_T)msb[i] << 8) | lsb[i]);
 8002c46:	f00a 030f 	and.w	r3, sl, #15
 8002c4a:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
			if (H_SHIFT_SIGN == 0x00)
 8002c4e:	f01a 0f80 	tst.w	sl, #128	; 0x80
			lsb[i] = RDC_REG_GET(h_shift_lsb_reg[i]);
 8002c52:	7030      	strb	r0, [r6, #0]
					shift_val = ABS(shift_val);
 8002c54:	ea6f 0203 	mvn.w	r2, r3
			if (H_SHIFT_SIGN == 0x00)
 8002c58:	d10f      	bne.n	8002c7a <rdc200a_shift_horizontal_pixel+0x112>
					shift_val = ABS(shift_val);
 8002c5a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8002c5e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8002c62:	b29a      	uxth	r2, r3
					if (shift_val > 0xFFF) {
 8002c64:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
					shift_val = ABS(shift_val);
 8002c68:	b21b      	sxth	r3, r3
					if (shift_val > 0xFFF) {
 8002c6a:	d036      	beq.n	8002cda <rdc200a_shift_horizontal_pixel+0x172>
					H_SHIFT_SIGN = 0x00; // left direction from image
 8002c6c:	2200      	movs	r2, #0
			msb[i] = (shift_val >> 8) | H_SHIFT_SIGN;
 8002c6e:	ea42 2223 	orr.w	r2, r2, r3, asr #8
 8002c72:	f80d 2005 	strb.w	r2, [sp, r5]
			lsb[i] = shift_val & 0xFF;
 8002c76:	7033      	strb	r3, [r6, #0]
 8002c78:	e7cf      	b.n	8002c1a <rdc200a_shift_horizontal_pixel+0xb2>
					H_SHIFT_SIGN = 0x00; // left direction from image
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf18      	it	ne
 8002c7e:	2280      	movne	r2, #128	; 0x80
				shift_val--;
 8002c80:	f103 33ff 	add.w	r3, r3, #4294967295
					H_SHIFT_SIGN = 0x00; // left direction from image
 8002c84:	bf04      	itt	eq
 8002c86:	2200      	moveq	r2, #0
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	e7f0      	b.n	8002c6e <rdc200a_shift_horizontal_pixel+0x106>
		RDC_REG_SET(h_shift_msb_reg[1], msb[1]);
 8002c8c:	4c18      	ldr	r4, [pc, #96]	; (8002cf0 <rdc200a_shift_horizontal_pixel+0x188>)
 8002c8e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002c92:	7821      	ldrb	r1, [r4, #0]
 8002c94:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f003 fc01 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(h_shift_lsb_reg[1], lsb[1]);
 8002c9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002ca2:	7821      	ldrb	r1, [r4, #0]
 8002ca4:	f640 1231 	movw	r2, #2353	; 0x931
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f003 fbf9 	bl	80064a0 <rtiVC_WriteDevice16>
	return 0;
 8002cae:	2000      	movs	r0, #0
}
 8002cb0:	b004      	add	sp, #16
 8002cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RDC_REG_SET(h_shift_msb_reg[0], msb[0]);
 8002cb6:	4d0e      	ldr	r5, [pc, #56]	; (8002cf0 <rdc200a_shift_horizontal_pixel+0x188>)
 8002cb8:	f89d 3000 	ldrb.w	r3, [sp]
 8002cbc:	7829      	ldrb	r1, [r5, #0]
 8002cbe:	f44f 6203 	mov.w	r2, #2096	; 0x830
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f003 fbec 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(h_shift_lsb_reg[0], lsb[0]);
 8002cc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ccc:	7829      	ldrb	r1, [r5, #0]
 8002cce:	f640 0231 	movw	r2, #2097	; 0x831
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f003 fbe4 	bl	80064a0 <rtiVC_WriteDevice16>
 8002cd8:	e78f      	b.n	8002bfa <rdc200a_shift_horizontal_pixel+0x92>
						return -1;
 8002cda:	f04f 30ff 	mov.w	r0, #4294967295
 8002cde:	e78f      	b.n	8002c00 <rdc200a_shift_horizontal_pixel+0x98>
						return -2;
 8002ce0:	f06f 0001 	mvn.w	r0, #1
 8002ce4:	e78c      	b.n	8002c00 <rdc200a_shift_horizontal_pixel+0x98>
 8002ce6:	bf00      	nop
 8002ce8:	09300830 	.word	0x09300830
 8002cec:	09310831 	.word	0x09310831
 8002cf0:	2000001d 	.word	0x2000001d

08002cf4 <rdc200a_generate_test_pattern>:
{
 8002cf4:	b570      	push	{r4, r5, r6, lr}
	RDC_REG_SET(0x0281, r_val);
 8002cf6:	4c0d      	ldr	r4, [pc, #52]	; (8002d2c <rdc200a_generate_test_pattern+0x38>)
{
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4615      	mov	r5, r2
 8002cfc:	460e      	mov	r6, r1
	RDC_REG_SET(0x0281, r_val);
 8002cfe:	f240 2281 	movw	r2, #641	; 0x281
 8002d02:	7821      	ldrb	r1, [r4, #0]
 8002d04:	2000      	movs	r0, #0
 8002d06:	f003 fbcb 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0282, g_val);
 8002d0a:	7821      	ldrb	r1, [r4, #0]
 8002d0c:	4633      	mov	r3, r6
 8002d0e:	f240 2282 	movw	r2, #642	; 0x282
 8002d12:	2000      	movs	r0, #0
 8002d14:	f003 fbc4 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0283, b_val);
 8002d18:	7821      	ldrb	r1, [r4, #0]
 8002d1a:	462b      	mov	r3, r5
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f240 2283 	movw	r2, #643	; 0x283
 8002d22:	f003 fbbd 	bl	80064a0 <rtiVC_WriteDevice16>
}
 8002d26:	2000      	movs	r0, #0
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
 8002d2a:	bf00      	nop
 8002d2c:	2000001d 	.word	0x2000001d

08002d30 <rdc200a_update_lut_from_flash>:
	if (!size) {
 8002d30:	2900      	cmp	r1, #0
 8002d32:	d059      	beq.n	8002de8 <rdc200a_update_lut_from_flash+0xb8>
{
 8002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	RDC_REG_SET(0x0051, 0x01); // Flash to LUT enable
 8002d36:	4d2e      	ldr	r5, [pc, #184]	; (8002df0 <rdc200a_update_lut_from_flash+0xc0>)
 8002d38:	460c      	mov	r4, r1
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	7829      	ldrb	r1, [r5, #0]
 8002d3e:	4617      	mov	r7, r2
 8002d40:	2301      	movs	r3, #1
 8002d42:	2251      	movs	r2, #81	; 0x51
 8002d44:	2000      	movs	r0, #0
 8002d46:	f003 fbab 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0059, 0x00); // Flash to LUT model state machine initialize
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	7829      	ldrb	r1, [r5, #0]
 8002d50:	2259      	movs	r2, #89	; 0x59
 8002d52:	f003 fba5 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0052, id);
 8002d56:	7829      	ldrb	r1, [r5, #0]
 8002d58:	463b      	mov	r3, r7
 8002d5a:	2252      	movs	r2, #82	; 0x52
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f003 fb9f 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0056, (size>>16) & 0xFF);
 8002d62:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002d66:	7829      	ldrb	r1, [r5, #0]
 8002d68:	2256      	movs	r2, #86	; 0x56
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f003 fb98 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0057, (size>>8) & 0xFF);
 8002d70:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8002d74:	7829      	ldrb	r1, [r5, #0]
 8002d76:	2257      	movs	r2, #87	; 0x57
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f003 fb91 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0058, size & 0xFF);
 8002d7e:	b2e3      	uxtb	r3, r4
 8002d80:	7829      	ldrb	r1, [r5, #0]
	RDC_REG_SET(0x0059, 0x01); // Start state machine
 8002d82:	4c1c      	ldr	r4, [pc, #112]	; (8002df4 <rdc200a_update_lut_from_flash+0xc4>)
	RDC_REG_SET(0x0058, size & 0xFF);
 8002d84:	2258      	movs	r2, #88	; 0x58
 8002d86:	2000      	movs	r0, #0
 8002d88:	f003 fb8a 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0053, (faddr>>16) & 0xFF);
 8002d8c:	7829      	ldrb	r1, [r5, #0]
 8002d8e:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8002d92:	2253      	movs	r2, #83	; 0x53
 8002d94:	2000      	movs	r0, #0
 8002d96:	f003 fb83 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0054, (faddr>>8) & 0xFF);
 8002d9a:	7829      	ldrb	r1, [r5, #0]
 8002d9c:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8002da0:	2254      	movs	r2, #84	; 0x54
 8002da2:	2000      	movs	r0, #0
 8002da4:	f003 fb7c 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0055, faddr & 0xFF);
 8002da8:	7829      	ldrb	r1, [r5, #0]
 8002daa:	b2f3      	uxtb	r3, r6
 8002dac:	2255      	movs	r2, #85	; 0x55
 8002dae:	2000      	movs	r0, #0
 8002db0:	f003 fb76 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0059, 0x01); // Start state machine
 8002db4:	7829      	ldrb	r1, [r5, #0]
 8002db6:	2301      	movs	r3, #1
 8002db8:	2259      	movs	r2, #89	; 0x59
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f003 fb70 	bl	80064a0 <rtiVC_WriteDevice16>
 8002dc0:	e003      	b.n	8002dca <rdc200a_update_lut_from_flash+0x9a>
		if (--timeout == 0) {
 8002dc2:	3c01      	subs	r4, #1
 8002dc4:	d00d      	beq.n	8002de2 <rdc200a_update_lut_from_flash+0xb2>
		VC_U_DELAY(1);
 8002dc6:	f003 fae1 	bl	800638c <rtiVC_DelayUs>
		read_data = RDC_REG_GET(0x0092);
 8002dca:	7829      	ldrb	r1, [r5, #0]
 8002dcc:	2292      	movs	r2, #146	; 0x92
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f003 fb52 	bl	8006478 <rtiVC_ReadDevice16>
		if (read_data & 0x10)
 8002dd4:	f010 0f10 	tst.w	r0, #16
		VC_U_DELAY(1);
 8002dd8:	f04f 0001 	mov.w	r0, #1
		if (read_data & 0x10)
 8002ddc:	d0f1      	beq.n	8002dc2 <rdc200a_update_lut_from_flash+0x92>
    return 0;
 8002dde:	2000      	movs	r0, #0
}
 8002de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ret = -2;
 8002de2:	f06f 0001 	mvn.w	r0, #1
}
 8002de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = -1;
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	2000001d 	.word	0x2000001d
 8002df4:	000186a0 	.word	0x000186a0

08002df8 <rdc200a_update_gamma_lut>:
{
 8002df8:	b538      	push	{r3, r4, r5, lr}
							lut_id_ptr->RED_POL_H);
 8002dfa:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <rdc200a_update_gamma_lut+0x68>)
 8002dfc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002e00:	eb03 0540 	add.w	r5, r3, r0, lsl #1
	lut_addr = base_addr + FLASH_ITEM_OFFSET_GAMMA_HIGH_RED(lut_offset);
 8002e04:	030c      	lsls	r4, r1, #12
	rdc200a_update_lut_from_flash(lut_addr, FLASH_SUBITEM_SIZE_PANNEL_GAMMA,
 8002e06:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
 8002e0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e0e:	f504 30fb 	add.w	r0, r4, #128512	; 0x1f600
 8002e12:	f7ff ff8d 	bl	8002d30 <rdc200a_update_lut_from_flash>
	rdc200a_update_lut_from_flash(lut_addr, FLASH_SUBITEM_SIZE_PANNEL_GAMMA,
 8002e16:	786a      	ldrb	r2, [r5, #1]
 8002e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e1c:	f504 30fc 	add.w	r0, r4, #129024	; 0x1f800
 8002e20:	f7ff ff86 	bl	8002d30 <rdc200a_update_lut_from_flash>
	rdc200a_update_lut_from_flash(lut_addr, FLASH_SUBITEM_SIZE_PANNEL_GAMMA,
 8002e24:	78aa      	ldrb	r2, [r5, #2]
 8002e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e2a:	f504 30fd 	add.w	r0, r4, #129536	; 0x1fa00
 8002e2e:	f7ff ff7f 	bl	8002d30 <rdc200a_update_lut_from_flash>
	rdc200a_update_lut_from_flash(lut_addr, FLASH_SUBITEM_SIZE_PANNEL_GAMMA,
 8002e32:	78ea      	ldrb	r2, [r5, #3]
 8002e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e38:	f504 30f8 	add.w	r0, r4, #126976	; 0x1f000
 8002e3c:	f7ff ff78 	bl	8002d30 <rdc200a_update_lut_from_flash>
	rdc200a_update_lut_from_flash(lut_addr, FLASH_SUBITEM_SIZE_PANNEL_GAMMA,
 8002e40:	792a      	ldrb	r2, [r5, #4]
 8002e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e46:	f504 30f9 	add.w	r0, r4, #127488	; 0x1f200
 8002e4a:	f7ff ff71 	bl	8002d30 <rdc200a_update_lut_from_flash>
	rdc200a_update_lut_from_flash(lut_addr, FLASH_SUBITEM_SIZE_PANNEL_GAMMA,
 8002e4e:	796a      	ldrb	r2, [r5, #5]
 8002e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e54:	f504 30fa 	add.w	r0, r4, #128000	; 0x1f400
 8002e58:	f7ff ff6a 	bl	8002d30 <rdc200a_update_lut_from_flash>
}
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}
 8002e60:	080164dc 	.word	0x080164dc

08002e64 <rdc200a_change_laser_sparkling_pwm>:
{
 8002e64:	b510      	push	{r4, lr}
	param[3] = on_time_period >> 8;
 8002e66:	0a02      	lsrs	r2, r0, #8
 8002e68:	f04f 0c00 	mov.w	ip, #0
 8002e6c:	f362 0c07 	bfi	ip, r2, #0, #8
 8002e70:	f360 2c0f 	bfi	ip, r0, #8, #8
	param[5] = off_time_period >> 8;
 8002e74:	0a0a      	lsrs	r2, r1, #8
{
 8002e76:	b082      	sub	sp, #8
	RDC200A_REG_BURST_SET(param, 7);
 8002e78:	4c0f      	ldr	r4, [pc, #60]	; (8002eb8 <rdc200a_change_laser_sparkling_pwm+0x54>)
{
 8002e7a:	460b      	mov	r3, r1
	param[3] = on_time_period >> 8;
 8002e7c:	f362 4c17 	bfi	ip, r2, #16, #8
 8002e80:	f363 6c1f 	bfi	ip, r3, #24, #8
	param[0] = 0x05;
 8002e84:	f247 2005 	movw	r0, #29189	; 0x7205
	RDC200A_REG_BURST_SET(param, 7);
 8002e88:	7821      	ldrb	r1, [r4, #0]
	param[0] = 0x05;
 8002e8a:	f8ad 0000 	strh.w	r0, [sp]
	RDC200A_REG_BURST_SET(param, 7);
 8002e8e:	466a      	mov	r2, sp
	param[3] = on_time_period >> 8;
 8002e90:	f8cd c003 	str.w	ip, [sp, #3]
	RDC200A_REG_BURST_SET(param, 7);
 8002e94:	2307      	movs	r3, #7
	param[2] = 0x01;
 8002e96:	f04f 0c01 	mov.w	ip, #1
	RDC200A_REG_BURST_SET(param, 7);
 8002e9a:	2000      	movs	r0, #0
	param[2] = 0x01;
 8002e9c:	f88d c002 	strb.w	ip, [sp, #2]
	RDC200A_REG_BURST_SET(param, 7);
 8002ea0:	f003 fac8 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC_REG_SET(0x05A4, 0x10);
 8002ea4:	7821      	ldrb	r1, [r4, #0]
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8002eae:	f003 faf7 	bl	80064a0 <rtiVC_WriteDevice16>
}
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd10      	pop	{r4, pc}
 8002eb8:	2000001d 	.word	0x2000001d

08002ebc <rdc200a_request_atw_shift_pixel>:
{
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	b086      	sub	sp, #24
	U8_T H_SHIFT_SIGN[2] = {0x0, 0x0}, V_SHIFT_SIGN[2] = {0x0, 0x0};
 8002ec0:	2300      	movs	r3, #0
		if (chk_port & 0x1) {
 8002ec2:	07c2      	lsls	r2, r0, #31
	U8_T H_SHIFT_SIGN[2] = {0x0, 0x0}, V_SHIFT_SIGN[2] = {0x0, 0x0};
 8002ec4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002ec8:	f8ad 3008 	strh.w	r3, [sp, #8]
		if (chk_port & 0x1) {
 8002ecc:	d517      	bpl.n	8002efe <rdc200a_request_atw_shift_pixel+0x42>
			if (info[i].shift_x >= 0)
 8002ece:	f9b1 2000 	ldrsh.w	r2, [r1]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	f2c0 80c8 	blt.w	8003068 <rdc200a_request_atw_shift_pixel+0x1ac>
				H_SHIFT_SIGN[i] = 0x80; // right direction from image
 8002ed8:	2380      	movs	r3, #128	; 0x80
			if (info[i].shift_x > 0xFFF) {
 8002eda:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002ede:	f88d 3004 	strb.w	r3, [sp, #4]
 8002ee2:	f280 80c9 	bge.w	8003078 <rdc200a_request_atw_shift_pixel+0x1bc>
			if (info[i].shift_y >= 0)
 8002ee6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f2c0 80c8 	blt.w	8003080 <rdc200a_request_atw_shift_pixel+0x1c4>
				V_SHIFT_SIGN[i] = 0x00; // up direction from image
 8002ef0:	2200      	movs	r2, #0
			if (info[i].shift_y > 0x1FFF) {
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef6:	f88d 2008 	strb.w	r2, [sp, #8]
 8002efa:	f280 80b9 	bge.w	8003070 <rdc200a_request_atw_shift_pixel+0x1b4>
	} while (chk_port);
 8002efe:	0843      	lsrs	r3, r0, #1
 8002f00:	d069      	beq.n	8002fd6 <rdc200a_request_atw_shift_pixel+0x11a>
		if (chk_port & 0x1) {
 8002f02:	07de      	lsls	r6, r3, #31
 8002f04:	d517      	bpl.n	8002f36 <rdc200a_request_atw_shift_pixel+0x7a>
			if (info[i].shift_x >= 0)
 8002f06:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f2c0 80bd 	blt.w	800308a <rdc200a_request_atw_shift_pixel+0x1ce>
				H_SHIFT_SIGN[i] = 0x80; // right direction from image
 8002f10:	2280      	movs	r2, #128	; 0x80
			if (info[i].shift_x > 0xFFF) {
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f16:	f88d 2005 	strb.w	r2, [sp, #5]
 8002f1a:	f280 80ad 	bge.w	8003078 <rdc200a_request_atw_shift_pixel+0x1bc>
			if (info[i].shift_y >= 0)
 8002f1e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f2c0 80b6 	blt.w	8003094 <rdc200a_request_atw_shift_pixel+0x1d8>
				V_SHIFT_SIGN[i] = 0x00; // up direction from image
 8002f28:	2200      	movs	r2, #0
			if (info[i].shift_y > 0x1FFF) {
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2e:	f88d 2009 	strb.w	r2, [sp, #9]
 8002f32:	f280 809d 	bge.w	8003070 <rdc200a_request_atw_shift_pixel+0x1b4>
	} while (chk_port);
 8002f36:	0883      	lsrs	r3, r0, #2
 8002f38:	d04d      	beq.n	8002fd6 <rdc200a_request_atw_shift_pixel+0x11a>
		if (chk_port & 0x1) {
 8002f3a:	07dd      	lsls	r5, r3, #31
 8002f3c:	d517      	bpl.n	8002f6e <rdc200a_request_atw_shift_pixel+0xb2>
			if (info[i].shift_x >= 0)
 8002f3e:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f2c0 80ab 	blt.w	800309e <rdc200a_request_atw_shift_pixel+0x1e2>
				H_SHIFT_SIGN[i] = 0x80; // right direction from image
 8002f48:	2280      	movs	r2, #128	; 0x80
			if (info[i].shift_x > 0xFFF) {
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	f88d 2006 	strb.w	r2, [sp, #6]
 8002f52:	f280 8091 	bge.w	8003078 <rdc200a_request_atw_shift_pixel+0x1bc>
			if (info[i].shift_y >= 0)
 8002f56:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f2c0 80a4 	blt.w	80030a8 <rdc200a_request_atw_shift_pixel+0x1ec>
				V_SHIFT_SIGN[i] = 0x00; // up direction from image
 8002f60:	2200      	movs	r2, #0
			if (info[i].shift_y > 0x1FFF) {
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	f88d 200a 	strb.w	r2, [sp, #10]
 8002f6a:	f280 8081 	bge.w	8003070 <rdc200a_request_atw_shift_pixel+0x1b4>
	} while (chk_port);
 8002f6e:	08c3      	lsrs	r3, r0, #3
 8002f70:	d031      	beq.n	8002fd6 <rdc200a_request_atw_shift_pixel+0x11a>
 8002f72:	460a      	mov	r2, r1
		i++;
 8002f74:	f04f 0c03 	mov.w	ip, #3
		if (chk_port & 0x1) {
 8002f78:	07dc      	lsls	r4, r3, #31
 8002f7a:	d526      	bpl.n	8002fca <rdc200a_request_atw_shift_pixel+0x10e>
			if (info[i].shift_x >= 0)
 8002f7c:	f9b2 e00c 	ldrsh.w	lr, [r2, #12]
				H_SHIFT_SIGN[i] = 0x00; // left direction from image
 8002f80:	2400      	movs	r4, #0
			if (info[i].shift_x >= 0)
 8002f82:	45a6      	cmp	lr, r4
				info[i].shift_x = -info[i].shift_x; /* Make a positive value */
 8002f84:	f1ce 0500 	rsb	r5, lr, #0
 8002f88:	bfb8      	it	lt
 8002f8a:	fa0f fe85 	sxthlt.w	lr, r5
 8002f8e:	ae01      	add	r6, sp, #4
				H_SHIFT_SIGN[i] = 0x80; // right direction from image
 8002f90:	bfac      	ite	ge
 8002f92:	2480      	movge	r4, #128	; 0x80
				info[i].shift_x = -info[i].shift_x; /* Make a positive value */
 8002f94:	f8a2 e00c 	strhlt.w	lr, [r2, #12]
			if (info[i].shift_x > 0xFFF) {
 8002f98:	f5be 5f80 	cmp.w	lr, #4096	; 0x1000
 8002f9c:	f806 400c 	strb.w	r4, [r6, ip]
				V_SHIFT_SIGN[i] = 0x00; // up direction from image
 8002fa0:	f04f 0500 	mov.w	r5, #0
			if (info[i].shift_x > 0xFFF) {
 8002fa4:	da68      	bge.n	8003078 <rdc200a_request_atw_shift_pixel+0x1bc>
			if (info[i].shift_y >= 0)
 8002fa6:	f9b2 e00e 	ldrsh.w	lr, [r2, #14]
 8002faa:	f1be 0f00 	cmp.w	lr, #0
				info[i].shift_y = -info[i].shift_y; /* Make a positive value */
 8002fae:	f1ce 0400 	rsb	r4, lr, #0
			if (info[i].shift_y >= 0)
 8002fb2:	da04      	bge.n	8002fbe <rdc200a_request_atw_shift_pixel+0x102>
				info[i].shift_y = -info[i].shift_y; /* Make a positive value */
 8002fb4:	fa0f fe84 	sxth.w	lr, r4
 8002fb8:	f8a2 e00e 	strh.w	lr, [r2, #14]
				V_SHIFT_SIGN[i] = 0x80; // down direction from image
 8002fbc:	2580      	movs	r5, #128	; 0x80
 8002fbe:	ac02      	add	r4, sp, #8
			if (info[i].shift_y > 0x1FFF) {
 8002fc0:	f5be 5f00 	cmp.w	lr, #8192	; 0x2000
 8002fc4:	f804 500c 	strb.w	r5, [r4, ip]
 8002fc8:	da52      	bge.n	8003070 <rdc200a_request_atw_shift_pixel+0x1b4>
	} while (chk_port);
 8002fca:	085b      	lsrs	r3, r3, #1
		i++;
 8002fcc:	f10c 0c01 	add.w	ip, ip, #1
	} while (chk_port);
 8002fd0:	f102 0204 	add.w	r2, r2, #4
 8002fd4:	d1d0      	bne.n	8002f78 <rdc200a_request_atw_shift_pixel+0xbc>
	if (ctrl_port == VC_PANEL_CTRL_PORT_0) { // Port 0 only attached
 8002fd6:	2801      	cmp	r0, #1
 8002fd8:	f000 8095 	beq.w	8003106 <rdc200a_request_atw_shift_pixel+0x24a>
	else if (ctrl_port == VC_PANEL_CTRL_PORT_1) { // Port 1 only attached
 8002fdc:	2802      	cmp	r0, #2
 8002fde:	d068      	beq.n	80030b2 <rdc200a_request_atw_shift_pixel+0x1f6>
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 8002fe0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002fe4:	f991 0001 	ldrsb.w	r0, [r1, #1]
		shift_param[4] = (info[VC_PANEL_PORT_0].shift_y >> 8) | V_SHIFT_SIGN[0];
 8002fe8:	f991 2003 	ldrsb.w	r2, [r1, #3]
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 8002fec:	f9b1 4000 	ldrsh.w	r4, [r1]
		shift_param[4] = (info[VC_PANEL_PORT_0].shift_y >> 8) | V_SHIFT_SIGN[0];
 8002ff0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
		shift_param[9] = (info[VC_PANEL_PORT_1].shift_y >> 8) | V_SHIFT_SIGN[1];
 8002ff4:	f991 c007 	ldrsb.w	ip, [r1, #7]
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 8002ff8:	4318      	orrs	r0, r3
		shift_param[4] = (info[VC_PANEL_PORT_0].shift_y >> 8) | V_SHIFT_SIGN[0];
 8002ffa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002ffe:	431a      	orrs	r2, r3
		shift_param[0] = 0x05;
 8003000:	f649 2305 	movw	r3, #39429	; 0x9a05
 8003004:	f8ad 300c 	strh.w	r3, [sp, #12]
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 8003008:	2300      	movs	r3, #0
 800300a:	f360 0307 	bfi	r3, r0, #0, #8
 800300e:	f364 230f 	bfi	r3, r4, #8, #8
		shift_param[7] = (info[VC_PANEL_PORT_1].shift_x >> 8) | H_SHIFT_SIGN[1];
 8003012:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8003016:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
		shift_param[8] = info[VC_PANEL_PORT_1].shift_x & 0xFF;
 800301a:	f88d 4014 	strb.w	r4, [sp, #20]
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 800301e:	f362 4317 	bfi	r3, r2, #16, #8
		shift_param[7] = (info[VC_PANEL_PORT_1].shift_x >> 8) | H_SHIFT_SIGN[1];
 8003022:	f991 2005 	ldrsb.w	r2, [r1, #5]
		shift_param[9] = (info[VC_PANEL_PORT_1].shift_y >> 8) | V_SHIFT_SIGN[1];
 8003026:	f89d 4009 	ldrb.w	r4, [sp, #9]
		shift_param[7] = (info[VC_PANEL_PORT_1].shift_x >> 8) | H_SHIFT_SIGN[1];
 800302a:	4302      	orrs	r2, r0
 800302c:	f88d 2013 	strb.w	r2, [sp, #19]
		shift_param[9] = (info[VC_PANEL_PORT_1].shift_y >> 8) | V_SHIFT_SIGN[1];
 8003030:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
		shift_param[10] = info[VC_PANEL_PORT_1].shift_y & 0xFF;
 8003034:	f88d 2016 	strb.w	r2, [sp, #22]
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 8003038:	f365 631f 	bfi	r3, r5, #24, #8
		RDC200A_REG_BURST_SET(shift_param, 12);
 800303c:	4a46      	ldr	r2, [pc, #280]	; (8003158 <rdc200a_request_atw_shift_pixel+0x29c>)
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 800303e:	f8cd 300e 	str.w	r3, [sp, #14]
		shift_param[6] = 0x01; // TX0_ATW_SET
 8003042:	2001      	movs	r0, #1
		RDC200A_REG_BURST_SET(shift_param, 12);
 8003044:	230c      	movs	r3, #12
 8003046:	7811      	ldrb	r1, [r2, #0]
		shift_param[6] = 0x01; // TX0_ATW_SET
 8003048:	f88d 0012 	strb.w	r0, [sp, #18]
		shift_param[11] = 0x01; // TX1_ATW_SET
 800304c:	f88d 0017 	strb.w	r0, [sp, #23]
		shift_param[9] = (info[VC_PANEL_PORT_1].shift_y >> 8) | V_SHIFT_SIGN[1];
 8003050:	ea4c 0c04 	orr.w	ip, ip, r4
		RDC200A_REG_BURST_SET(shift_param, 12);
 8003054:	eb0d 0203 	add.w	r2, sp, r3
 8003058:	2000      	movs	r0, #0
		shift_param[9] = (info[VC_PANEL_PORT_1].shift_y >> 8) | V_SHIFT_SIGN[1];
 800305a:	f88d c015 	strb.w	ip, [sp, #21]
		RDC200A_REG_BURST_SET(shift_param, 12);
 800305e:	f003 f9e9 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	return 0;
 8003062:	2000      	movs	r0, #0
}
 8003064:	b006      	add	sp, #24
 8003066:	bd70      	pop	{r4, r5, r6, pc}
				info[i].shift_x = -info[i].shift_x; /* Make a positive value */
 8003068:	4252      	negs	r2, r2
 800306a:	b212      	sxth	r2, r2
 800306c:	800a      	strh	r2, [r1, #0]
 800306e:	e734      	b.n	8002eda <rdc200a_request_atw_shift_pixel+0x1e>
				return -2;
 8003070:	f06f 0001 	mvn.w	r0, #1
}
 8003074:	b006      	add	sp, #24
 8003076:	bd70      	pop	{r4, r5, r6, pc}
				return -1;
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
}
 800307c:	b006      	add	sp, #24
 800307e:	bd70      	pop	{r4, r5, r6, pc}
				info[i].shift_y = -info[i].shift_y; /* Make a positive value */
 8003080:	425b      	negs	r3, r3
 8003082:	b21b      	sxth	r3, r3
 8003084:	804b      	strh	r3, [r1, #2]
				V_SHIFT_SIGN[i] = 0x80; // down direction from image
 8003086:	2280      	movs	r2, #128	; 0x80
 8003088:	e733      	b.n	8002ef2 <rdc200a_request_atw_shift_pixel+0x36>
				info[i].shift_x = -info[i].shift_x; /* Make a positive value */
 800308a:	425b      	negs	r3, r3
 800308c:	b21b      	sxth	r3, r3
 800308e:	808b      	strh	r3, [r1, #4]
				H_SHIFT_SIGN[i] = 0x00; // left direction from image
 8003090:	2200      	movs	r2, #0
 8003092:	e73e      	b.n	8002f12 <rdc200a_request_atw_shift_pixel+0x56>
				info[i].shift_y = -info[i].shift_y; /* Make a positive value */
 8003094:	425b      	negs	r3, r3
 8003096:	b21b      	sxth	r3, r3
 8003098:	80cb      	strh	r3, [r1, #6]
				V_SHIFT_SIGN[i] = 0x80; // down direction from image
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	e745      	b.n	8002f2a <rdc200a_request_atw_shift_pixel+0x6e>
				info[i].shift_x = -info[i].shift_x; /* Make a positive value */
 800309e:	425b      	negs	r3, r3
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	810b      	strh	r3, [r1, #8]
				H_SHIFT_SIGN[i] = 0x00; // left direction from image
 80030a4:	2200      	movs	r2, #0
 80030a6:	e750      	b.n	8002f4a <rdc200a_request_atw_shift_pixel+0x8e>
				info[i].shift_y = -info[i].shift_y; /* Make a positive value */
 80030a8:	425b      	negs	r3, r3
 80030aa:	b21b      	sxth	r3, r3
 80030ac:	814b      	strh	r3, [r1, #10]
				V_SHIFT_SIGN[i] = 0x80; // down direction from image
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	e757      	b.n	8002f62 <rdc200a_request_atw_shift_pixel+0xa6>
		shift_param[2] = (info[VC_PANEL_PORT_1].shift_x >> 8) | H_SHIFT_SIGN[1];
 80030b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80030b6:	f991 2005 	ldrsb.w	r2, [r1, #5]
		shift_param[4] = (info[VC_PANEL_PORT_1].shift_y >> 8) | V_SHIFT_SIGN[1];
 80030ba:	f89d 4009 	ldrb.w	r4, [sp, #9]
		shift_param[2] = (info[VC_PANEL_PORT_1].shift_x >> 8) | H_SHIFT_SIGN[1];
 80030be:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
		shift_param[4] = (info[VC_PANEL_PORT_1].shift_y >> 8) | V_SHIFT_SIGN[1];
 80030c2:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
		shift_param[2] = (info[VC_PANEL_PORT_1].shift_x >> 8) | H_SHIFT_SIGN[1];
 80030c6:	431a      	orrs	r2, r3
		shift_param[4] = (info[VC_PANEL_PORT_1].shift_y >> 8) | V_SHIFT_SIGN[1];
 80030c8:	f991 3007 	ldrsb.w	r3, [r1, #7]
		RDC200A_REG_BURST_SET(shift_param, 7);
 80030cc:	4922      	ldr	r1, [pc, #136]	; (8003158 <rdc200a_request_atw_shift_pixel+0x29c>)
		shift_param[4] = (info[VC_PANEL_PORT_1].shift_y >> 8) | V_SHIFT_SIGN[1];
 80030ce:	4323      	orrs	r3, r4
		shift_param[0] = 0x05;
 80030d0:	f649 7405 	movw	r4, #40709	; 0x9f05
 80030d4:	f8ad 400c 	strh.w	r4, [sp, #12]
		shift_param[6] = 0x01; // TX1_ATW_SET
 80030d8:	2401      	movs	r4, #1
 80030da:	f88d 4012 	strb.w	r4, [sp, #18]
		shift_param[2] = (info[VC_PANEL_PORT_1].shift_x >> 8) | H_SHIFT_SIGN[1];
 80030de:	2400      	movs	r4, #0
 80030e0:	f362 0407 	bfi	r4, r2, #0, #8
 80030e4:	f365 240f 	bfi	r4, r5, #8, #8
 80030e8:	f363 4417 	bfi	r4, r3, #16, #8
 80030ec:	f360 641f 	bfi	r4, r0, #24, #8
		RDC200A_REG_BURST_SET(shift_param, 7);
 80030f0:	7809      	ldrb	r1, [r1, #0]
		shift_param[2] = (info[VC_PANEL_PORT_1].shift_x >> 8) | H_SHIFT_SIGN[1];
 80030f2:	f8cd 400e 	str.w	r4, [sp, #14]
		RDC200A_REG_BURST_SET(shift_param, 7);
 80030f6:	2307      	movs	r3, #7
 80030f8:	aa03      	add	r2, sp, #12
 80030fa:	2000      	movs	r0, #0
 80030fc:	f003 f99a 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	return 0;
 8003100:	2000      	movs	r0, #0
}
 8003102:	b006      	add	sp, #24
 8003104:	bd70      	pop	{r4, r5, r6, pc}
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 8003106:	f991 2001 	ldrsb.w	r2, [r1, #1]
		shift_param[6] = 0x01; // TX0_ATW_SET
 800310a:	f88d 0012 	strb.w	r0, [sp, #18]
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 800310e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003112:	f9b1 4000 	ldrsh.w	r4, [r1]
		shift_param[4] = (info[VC_PANEL_PORT_0].shift_y >> 8) | V_SHIFT_SIGN[0];
 8003116:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800311a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 800311e:	4302      	orrs	r2, r0
 8003120:	2000      	movs	r0, #0
 8003122:	f362 0007 	bfi	r0, r2, #0, #8
		shift_param[4] = (info[VC_PANEL_PORT_0].shift_y >> 8) | V_SHIFT_SIGN[0];
 8003126:	f89d 2008 	ldrb.w	r2, [sp, #8]
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 800312a:	f364 200f 	bfi	r0, r4, #8, #8
		shift_param[4] = (info[VC_PANEL_PORT_0].shift_y >> 8) | V_SHIFT_SIGN[0];
 800312e:	4313      	orrs	r3, r2
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 8003130:	f363 4017 	bfi	r0, r3, #16, #8
		RDC200A_REG_BURST_SET(shift_param, 7);
 8003134:	4a08      	ldr	r2, [pc, #32]	; (8003158 <rdc200a_request_atw_shift_pixel+0x29c>)
		shift_param[2] = (info[VC_PANEL_PORT_0].shift_x >> 8) | H_SHIFT_SIGN[0];
 8003136:	f361 601f 	bfi	r0, r1, #24, #8
 800313a:	f8cd 000e 	str.w	r0, [sp, #14]
		RDC200A_REG_BURST_SET(shift_param, 7);
 800313e:	7811      	ldrb	r1, [r2, #0]
		shift_param[0] = 0x05;
 8003140:	f649 2405 	movw	r4, #39429	; 0x9a05
		RDC200A_REG_BURST_SET(shift_param, 7);
 8003144:	2307      	movs	r3, #7
 8003146:	aa03      	add	r2, sp, #12
 8003148:	2000      	movs	r0, #0
		shift_param[0] = 0x05;
 800314a:	f8ad 400c 	strh.w	r4, [sp, #12]
		RDC200A_REG_BURST_SET(shift_param, 7);
 800314e:	f003 f971 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	return 0;
 8003152:	2000      	movs	r0, #0
}
 8003154:	b006      	add	sp, #24
 8003156:	bd70      	pop	{r4, r5, r6, pc}
 8003158:	2000001d 	.word	0x2000001d

0800315c <rdc200a_enable_test_pattern>:
	if (en == TRUE) {
 800315c:	2801      	cmp	r0, #1
{
 800315e:	b510      	push	{r4, lr}
	if (en == TRUE) {
 8003160:	d012      	beq.n	8003188 <rdc200a_enable_test_pattern+0x2c>
		RDC_REG_SET(0x0200, rdc200a_mrx_config);
 8003162:	4c11      	ldr	r4, [pc, #68]	; (80031a8 <rdc200a_enable_test_pattern+0x4c>)
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <rdc200a_enable_test_pattern+0x50>)
 8003166:	7821      	ldrb	r1, [r4, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316e:	2000      	movs	r0, #0
 8003170:	f003 f996 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(0x0280, rdc200a_pgen_config);
 8003174:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <rdc200a_enable_test_pattern+0x54>)
 8003176:	7821      	ldrb	r1, [r4, #0]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800317e:	2000      	movs	r0, #0
 8003180:	f003 f98e 	bl	80064a0 <rtiVC_WriteDevice16>
}
 8003184:	2000      	movs	r0, #0
 8003186:	bd10      	pop	{r4, pc}
		RDC_REG_MASK_SET(0x0200, 0x07, 0x04);
 8003188:	2204      	movs	r2, #4
 800318a:	2107      	movs	r1, #7
 800318c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003190:	f003 ffda 	bl	8007148 <RDC_REG_MASK_SET>
		RDC_REG_SET(0x0280, 0x00);
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <rdc200a_enable_test_pattern+0x4c>)
 8003196:	2300      	movs	r3, #0
 8003198:	7811      	ldrb	r1, [r2, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80031a0:	f003 f97e 	bl	80064a0 <rtiVC_WriteDevice16>
}
 80031a4:	2000      	movs	r0, #0
 80031a6:	bd10      	pop	{r4, pc}
 80031a8:	2000001d 	.word	0x2000001d
 80031ac:	200005a4 	.word	0x200005a4
 80031b0:	200005a5 	.word	0x200005a5

080031b4 <rdc200a_get_led_duty_from_reg.constprop.0>:
static void rdc200a_get_led_duty_from_reg(UINT_T port, E_VC_LED_CTRL_COLOR_T color,
 80031b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031b8:	4604      	mov	r4, r0
 80031ba:	b083      	sub	sp, #12
		led_on_r = (U16_T)(RDC_REG_GET(LED_P0_ON_R_msb(port)) & 0x1F) << 8; // <12:8>
 80031bc:	0224      	lsls	r4, r4, #8
 80031be:	4d82      	ldr	r5, [pc, #520]	; (80033c8 <rdc200a_get_led_duty_from_reg.constprop.0+0x214>)
 80031c0:	b2a4      	uxth	r4, r4
static void rdc200a_get_led_duty_from_reg(UINT_T port, E_VC_LED_CTRL_COLOR_T color,
 80031c2:	460e      	mov	r6, r1
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 80031c4:	4668      	mov	r0, sp
 80031c6:	a901      	add	r1, sp, #4
 80031c8:	f7fe fe76 	bl	8001eb8 <rdc200a_get_output_resolution>
		led_on_r = (U16_T)(RDC_REG_GET(LED_P0_ON_R_msb(port)) & 0x1F) << 8; // <12:8>
 80031cc:	f604 0253 	addw	r2, r4, #2131	; 0x853
 80031d0:	7829      	ldrb	r1, [r5, #0]
 80031d2:	b292      	uxth	r2, r2
 80031d4:	2000      	movs	r0, #0
 80031d6:	f003 f94f 	bl	8006478 <rtiVC_ReadDevice16>
		led_on_r |= (U16_T)RDC_REG_GET(LED_P0_ON_R_lsb(port));
 80031da:	f604 0254 	addw	r2, r4, #2132	; 0x854
		led_on_r = (U16_T)(RDC_REG_GET(LED_P0_ON_R_msb(port)) & 0x1F) << 8; // <12:8>
 80031de:	0200      	lsls	r0, r0, #8
		led_on_r |= (U16_T)RDC_REG_GET(LED_P0_ON_R_lsb(port));
 80031e0:	7829      	ldrb	r1, [r5, #0]
 80031e2:	b292      	uxth	r2, r2
		led_on_r = (U16_T)(RDC_REG_GET(LED_P0_ON_R_msb(port)) & 0x1F) << 8; // <12:8>
 80031e4:	f400 57f8 	and.w	r7, r0, #7936	; 0x1f00
		led_on_r |= (U16_T)RDC_REG_GET(LED_P0_ON_R_lsb(port));
 80031e8:	2000      	movs	r0, #0
 80031ea:	f003 f945 	bl	8006478 <rtiVC_ReadDevice16>
		led_off_r = (U16_T)(RDC_REG_GET(LED_P0_OFF_R_msb(port)) & 0x1F) << 8;
 80031ee:	f604 0255 	addw	r2, r4, #2133	; 0x855
 80031f2:	7829      	ldrb	r1, [r5, #0]
		led_on_r |= (U16_T)RDC_REG_GET(LED_P0_ON_R_lsb(port));
 80031f4:	4307      	orrs	r7, r0
		led_off_r = (U16_T)(RDC_REG_GET(LED_P0_OFF_R_msb(port)) & 0x1F) << 8;
 80031f6:	b292      	uxth	r2, r2
 80031f8:	2000      	movs	r0, #0
 80031fa:	f003 f93d 	bl	8006478 <rtiVC_ReadDevice16>
		led_off_r |= (U16_T)RDC_REG_GET(LED_P0_OFF_R_lsb(port));
 80031fe:	f604 0256 	addw	r2, r4, #2134	; 0x856
		led_off_r = (U16_T)(RDC_REG_GET(LED_P0_OFF_R_msb(port)) & 0x1F) << 8;
 8003202:	0200      	lsls	r0, r0, #8
		led_off_r |= (U16_T)RDC_REG_GET(LED_P0_OFF_R_lsb(port));
 8003204:	7829      	ldrb	r1, [r5, #0]
		led_off_r = (U16_T)(RDC_REG_GET(LED_P0_OFF_R_msb(port)) & 0x1F) << 8;
 8003206:	f400 58f8 	and.w	r8, r0, #7936	; 0x1f00
		led_off_r |= (U16_T)RDC_REG_GET(LED_P0_OFF_R_lsb(port));
 800320a:	b292      	uxth	r2, r2
 800320c:	2000      	movs	r0, #0
 800320e:	f003 f933 	bl	8006478 <rtiVC_ReadDevice16>
		r_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_R(port)) << 3; /* 8 line unit */
 8003212:	f604 0223 	addw	r2, r4, #2083	; 0x823
 8003216:	b292      	uxth	r2, r2
 8003218:	7829      	ldrb	r1, [r5, #0]
		led_off_r |= (U16_T)RDC_REG_GET(LED_P0_OFF_R_lsb(port));
 800321a:	ea48 0800 	orr.w	r8, r8, r0
		r_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_R(port)) << 3; /* 8 line unit */
 800321e:	2000      	movs	r0, #0
 8003220:	f003 f92a 	bl	8006478 <rtiVC_ReadDevice16>
		led_on_r |= (U16_T)RDC_REG_GET(LED_P0_ON_R_lsb(port));
 8003224:	b2bf      	uxth	r7, r7
		led_off_r |= (U16_T)RDC_REG_GET(LED_P0_OFF_R_lsb(port));
 8003226:	fa1f f888 	uxth.w	r8, r8
		r_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_R(port)) << 3; /* 8 line unit */
 800322a:	4681      	mov	r9, r0
		duty_percentage = (delta/(double)(output_v_size + r_holditme)) * 100.;
 800322c:	eba8 0007 	sub.w	r0, r8, r7
 8003230:	f7fd f978 	bl	8000524 <__aeabi_i2d>
 8003234:	9f01      	ldr	r7, [sp, #4]
		r_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_R(port)) << 3; /* 8 line unit */
 8003236:	ea4f 09c9 	mov.w	r9, r9, lsl #3
		duty_percentage = (delta/(double)(output_v_size + r_holditme)) * 100.;
 800323a:	fa1f f389 	uxth.w	r3, r9
 800323e:	4680      	mov	r8, r0
 8003240:	19d8      	adds	r0, r3, r7
 8003242:	4689      	mov	r9, r1
 8003244:	f7fd f95e 	bl	8000504 <__aeabi_ui2d>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4640      	mov	r0, r8
 800324e:	4649      	mov	r1, r9
 8003250:	f7fd fafc 	bl	800084c <__aeabi_ddiv>
 8003254:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <rdc200a_get_led_duty_from_reg.constprop.0+0x218>)
 8003256:	2200      	movs	r2, #0
 8003258:	f7fd f9ce 	bl	80005f8 <__aeabi_dmul>
		info->R = (S32_T)(duty_percentage * VC_LED_DUTY_DIVIDER + 0.5);
 800325c:	4b5c      	ldr	r3, [pc, #368]	; (80033d0 <rdc200a_get_led_duty_from_reg.constprop.0+0x21c>)
 800325e:	2200      	movs	r2, #0
 8003260:	f7fd f9ca 	bl	80005f8 <__aeabi_dmul>
 8003264:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <rdc200a_get_led_duty_from_reg.constprop.0+0x220>)
 8003266:	2200      	movs	r2, #0
 8003268:	f7fd f810 	bl	800028c <__adddf3>
 800326c:	f7fd fc74 	bl	8000b58 <__aeabi_d2iz>
		led_on_g = (U16_T)(RDC_REG_GET(LED_P0_ON_G_msb(port)) & 0x1F) << 8; // <12:8>
 8003270:	f604 025b 	addw	r2, r4, #2139	; 0x85b
		info->R = (S32_T)(duty_percentage * VC_LED_DUTY_DIVIDER + 0.5);
 8003274:	6030      	str	r0, [r6, #0]
		led_on_g = (U16_T)(RDC_REG_GET(LED_P0_ON_G_msb(port)) & 0x1F) << 8; // <12:8>
 8003276:	7829      	ldrb	r1, [r5, #0]
 8003278:	b292      	uxth	r2, r2
 800327a:	2000      	movs	r0, #0
 800327c:	f003 f8fc 	bl	8006478 <rtiVC_ReadDevice16>
		led_on_g |= (U16_T)RDC_REG_GET(LED_P0_ON_G_lsb(port));
 8003280:	f604 025c 	addw	r2, r4, #2140	; 0x85c
		led_on_g = (U16_T)(RDC_REG_GET(LED_P0_ON_G_msb(port)) & 0x1F) << 8; // <12:8>
 8003284:	0200      	lsls	r0, r0, #8
		led_on_g |= (U16_T)RDC_REG_GET(LED_P0_ON_G_lsb(port));
 8003286:	7829      	ldrb	r1, [r5, #0]
		led_on_g = (U16_T)(RDC_REG_GET(LED_P0_ON_G_msb(port)) & 0x1F) << 8; // <12:8>
 8003288:	f400 58f8 	and.w	r8, r0, #7936	; 0x1f00
		led_on_g |= (U16_T)RDC_REG_GET(LED_P0_ON_G_lsb(port));
 800328c:	b292      	uxth	r2, r2
 800328e:	2000      	movs	r0, #0
 8003290:	f003 f8f2 	bl	8006478 <rtiVC_ReadDevice16>
		led_off_g = (U16_T)(RDC_REG_GET(LED_P0_OFF_G_msb(port)) & 0x1F) << 8;
 8003294:	f604 025d 	addw	r2, r4, #2141	; 0x85d
 8003298:	7829      	ldrb	r1, [r5, #0]
		led_on_g |= (U16_T)RDC_REG_GET(LED_P0_ON_G_lsb(port));
 800329a:	ea48 0800 	orr.w	r8, r8, r0
		led_off_g = (U16_T)(RDC_REG_GET(LED_P0_OFF_G_msb(port)) & 0x1F) << 8;
 800329e:	b292      	uxth	r2, r2
 80032a0:	2000      	movs	r0, #0
 80032a2:	f003 f8e9 	bl	8006478 <rtiVC_ReadDevice16>
		led_off_g |= (U16_T)RDC_REG_GET(LED_P0_OFF_G_lsb(port));
 80032a6:	f604 025e 	addw	r2, r4, #2142	; 0x85e
		led_off_g = (U16_T)(RDC_REG_GET(LED_P0_OFF_G_msb(port)) & 0x1F) << 8;
 80032aa:	0200      	lsls	r0, r0, #8
		led_off_g |= (U16_T)RDC_REG_GET(LED_P0_OFF_G_lsb(port));
 80032ac:	7829      	ldrb	r1, [r5, #0]
		led_off_g = (U16_T)(RDC_REG_GET(LED_P0_OFF_G_msb(port)) & 0x1F) << 8;
 80032ae:	f400 59f8 	and.w	r9, r0, #7936	; 0x1f00
		led_off_g |= (U16_T)RDC_REG_GET(LED_P0_OFF_G_lsb(port));
 80032b2:	b292      	uxth	r2, r2
 80032b4:	2000      	movs	r0, #0
 80032b6:	f003 f8df 	bl	8006478 <rtiVC_ReadDevice16>
		g_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_G(port)) << 3; /* 8 line unit */
 80032ba:	f604 0224 	addw	r2, r4, #2084	; 0x824
 80032be:	b292      	uxth	r2, r2
 80032c0:	7829      	ldrb	r1, [r5, #0]
		led_off_g |= (U16_T)RDC_REG_GET(LED_P0_OFF_G_lsb(port));
 80032c2:	ea49 0900 	orr.w	r9, r9, r0
		g_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_G(port)) << 3; /* 8 line unit */
 80032c6:	2000      	movs	r0, #0
 80032c8:	f003 f8d6 	bl	8006478 <rtiVC_ReadDevice16>
		led_on_g |= (U16_T)RDC_REG_GET(LED_P0_ON_G_lsb(port));
 80032cc:	fa1f f888 	uxth.w	r8, r8
		led_off_g |= (U16_T)RDC_REG_GET(LED_P0_OFF_G_lsb(port));
 80032d0:	fa1f f989 	uxth.w	r9, r9
		g_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_G(port)) << 3; /* 8 line unit */
 80032d4:	4603      	mov	r3, r0
		duty_percentage = (delta/(double)(output_v_size + g_holditme)) * 100.;
 80032d6:	eba9 0008 	sub.w	r0, r9, r8
		g_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_G(port)) << 3; /* 8 line unit */
 80032da:	4699      	mov	r9, r3
		duty_percentage = (delta/(double)(output_v_size + g_holditme)) * 100.;
 80032dc:	f7fd f922 	bl	8000524 <__aeabi_i2d>
		g_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_G(port)) << 3; /* 8 line unit */
 80032e0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
		duty_percentage = (delta/(double)(output_v_size + g_holditme)) * 100.;
 80032e4:	fa1f f389 	uxth.w	r3, r9
 80032e8:	4680      	mov	r8, r0
 80032ea:	19d8      	adds	r0, r3, r7
 80032ec:	4689      	mov	r9, r1
 80032ee:	f7fd f909 	bl	8000504 <__aeabi_ui2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4640      	mov	r0, r8
 80032f8:	4649      	mov	r1, r9
 80032fa:	f7fd faa7 	bl	800084c <__aeabi_ddiv>
 80032fe:	4b33      	ldr	r3, [pc, #204]	; (80033cc <rdc200a_get_led_duty_from_reg.constprop.0+0x218>)
 8003300:	2200      	movs	r2, #0
 8003302:	f7fd f979 	bl	80005f8 <__aeabi_dmul>
		info->G = (S32_T)(duty_percentage * VC_LED_DUTY_DIVIDER + 0.5);
 8003306:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <rdc200a_get_led_duty_from_reg.constprop.0+0x21c>)
 8003308:	2200      	movs	r2, #0
 800330a:	f7fd f975 	bl	80005f8 <__aeabi_dmul>
 800330e:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <rdc200a_get_led_duty_from_reg.constprop.0+0x220>)
 8003310:	2200      	movs	r2, #0
 8003312:	f7fc ffbb 	bl	800028c <__adddf3>
 8003316:	f7fd fc1f 	bl	8000b58 <__aeabi_d2iz>
		led_on_b = (U16_T)(RDC_REG_GET(LED_P0_ON_B_msb(port)) & 0x1F) << 8; // <12:8>
 800331a:	f604 0263 	addw	r2, r4, #2147	; 0x863
 800331e:	7829      	ldrb	r1, [r5, #0]
		info->G = (S32_T)(duty_percentage * VC_LED_DUTY_DIVIDER + 0.5);
 8003320:	6070      	str	r0, [r6, #4]
		led_on_b = (U16_T)(RDC_REG_GET(LED_P0_ON_B_msb(port)) & 0x1F) << 8; // <12:8>
 8003322:	b292      	uxth	r2, r2
 8003324:	2000      	movs	r0, #0
 8003326:	f003 f8a7 	bl	8006478 <rtiVC_ReadDevice16>
		led_on_b |= (U16_T)RDC_REG_GET(LED_P0_ON_B_lsb(port));
 800332a:	f604 0264 	addw	r2, r4, #2148	; 0x864
		led_on_b = (U16_T)(RDC_REG_GET(LED_P0_ON_B_msb(port)) & 0x1F) << 8; // <12:8>
 800332e:	0200      	lsls	r0, r0, #8
		led_on_b |= (U16_T)RDC_REG_GET(LED_P0_ON_B_lsb(port));
 8003330:	7829      	ldrb	r1, [r5, #0]
		led_on_b = (U16_T)(RDC_REG_GET(LED_P0_ON_B_msb(port)) & 0x1F) << 8; // <12:8>
 8003332:	f400 58f8 	and.w	r8, r0, #7936	; 0x1f00
		led_on_b |= (U16_T)RDC_REG_GET(LED_P0_ON_B_lsb(port));
 8003336:	b292      	uxth	r2, r2
 8003338:	2000      	movs	r0, #0
 800333a:	f003 f89d 	bl	8006478 <rtiVC_ReadDevice16>
		led_off_b = (U16_T)(RDC_REG_GET(LED_P0_OFF_B_msb(port)) & 0x1F) << 8;
 800333e:	f604 0265 	addw	r2, r4, #2149	; 0x865
 8003342:	7829      	ldrb	r1, [r5, #0]
		led_on_b |= (U16_T)RDC_REG_GET(LED_P0_ON_B_lsb(port));
 8003344:	ea48 0800 	orr.w	r8, r8, r0
		led_off_b = (U16_T)(RDC_REG_GET(LED_P0_OFF_B_msb(port)) & 0x1F) << 8;
 8003348:	b292      	uxth	r2, r2
 800334a:	2000      	movs	r0, #0
 800334c:	f003 f894 	bl	8006478 <rtiVC_ReadDevice16>
		led_off_b |= (U16_T)RDC_REG_GET(LED_P0_OFF_B_lsb(port));
 8003350:	f604 0266 	addw	r2, r4, #2150	; 0x866
		led_off_b = (U16_T)(RDC_REG_GET(LED_P0_OFF_B_msb(port)) & 0x1F) << 8;
 8003354:	0200      	lsls	r0, r0, #8
		led_off_b |= (U16_T)RDC_REG_GET(LED_P0_OFF_B_lsb(port));
 8003356:	7829      	ldrb	r1, [r5, #0]
		led_off_b = (U16_T)(RDC_REG_GET(LED_P0_OFF_B_msb(port)) & 0x1F) << 8;
 8003358:	f400 59f8 	and.w	r9, r0, #7936	; 0x1f00
		led_off_b |= (U16_T)RDC_REG_GET(LED_P0_OFF_B_lsb(port));
 800335c:	b292      	uxth	r2, r2
 800335e:	2000      	movs	r0, #0
 8003360:	f003 f88a 	bl	8006478 <rtiVC_ReadDevice16>
		b_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_B(port)) << 3; /* 8 line unit */
 8003364:	f604 0225 	addw	r2, r4, #2085	; 0x825
 8003368:	b292      	uxth	r2, r2
 800336a:	7829      	ldrb	r1, [r5, #0]
		led_off_b |= (U16_T)RDC_REG_GET(LED_P0_OFF_B_lsb(port));
 800336c:	ea49 0900 	orr.w	r9, r9, r0
		b_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_B(port)) << 3; /* 8 line unit */
 8003370:	2000      	movs	r0, #0
 8003372:	f003 f881 	bl	8006478 <rtiVC_ReadDevice16>
		led_on_b |= (U16_T)RDC_REG_GET(LED_P0_ON_B_lsb(port));
 8003376:	fa1f f888 	uxth.w	r8, r8
		led_off_b |= (U16_T)RDC_REG_GET(LED_P0_OFF_B_lsb(port));
 800337a:	fa1f f989 	uxth.w	r9, r9
		b_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_B(port)) << 3; /* 8 line unit */
 800337e:	4604      	mov	r4, r0
		duty_percentage = (delta/(double)(output_v_size + b_holditme)) * 100.;
 8003380:	eba9 0008 	sub.w	r0, r9, r8
 8003384:	f7fd f8ce 	bl	8000524 <__aeabi_i2d>
		b_holditme = (U16_T)RDC_REG_GET(DISPLAY_HOLD_B(port)) << 3; /* 8 line unit */
 8003388:	00e4      	lsls	r4, r4, #3
		duty_percentage = (delta/(double)(output_v_size + b_holditme)) * 100.;
 800338a:	b2a4      	uxth	r4, r4
 800338c:	4680      	mov	r8, r0
 800338e:	19e0      	adds	r0, r4, r7
 8003390:	4689      	mov	r9, r1
 8003392:	f7fd f8b7 	bl	8000504 <__aeabi_ui2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4640      	mov	r0, r8
 800339c:	4649      	mov	r1, r9
 800339e:	f7fd fa55 	bl	800084c <__aeabi_ddiv>
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <rdc200a_get_led_duty_from_reg.constprop.0+0x218>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	f7fd f927 	bl	80005f8 <__aeabi_dmul>
		info->B = (S32_T)(duty_percentage * VC_LED_DUTY_DIVIDER + 0.5);
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <rdc200a_get_led_duty_from_reg.constprop.0+0x21c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	f7fd f923 	bl	80005f8 <__aeabi_dmul>
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <rdc200a_get_led_duty_from_reg.constprop.0+0x220>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	f7fc ff69 	bl	800028c <__adddf3>
 80033ba:	f7fd fbcd 	bl	8000b58 <__aeabi_d2iz>
 80033be:	60b0      	str	r0, [r6, #8]
}
 80033c0:	b003      	add	sp, #12
 80033c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033c6:	bf00      	nop
 80033c8:	2000001d 	.word	0x2000001d
 80033cc:	40590000 	.word	0x40590000
 80033d0:	408f4000 	.word	0x408f4000
 80033d4:	3fe00000 	.word	0x3fe00000

080033d8 <rdc200a_get_led_duty>:
{
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	4614      	mov	r4, r2
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 80033dc:	07ca      	lsls	r2, r1, #31
{
 80033de:	4605      	mov	r5, r0
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 80033e0:	b2cf      	uxtb	r7, r1
 80033e2:	d40f      	bmi.n	8003404 <rdc200a_get_led_duty+0x2c>
 80033e4:	f100 064c 	add.w	r6, r0, #76	; 0x4c
	if (ctrl_port & VC_PANEL_CTRL_PORT_1)
 80033e8:	07bb      	lsls	r3, r7, #30
 80033ea:	d416      	bmi.n	800341a <rdc200a_get_led_duty+0x42>
 80033ec:	3558      	adds	r5, #88	; 0x58
	info[0] = dev->led_duty_info[0];
 80033ee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80033f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	info[1] = dev->led_duty_info[1];
 80033f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033fa:	340c      	adds	r4, #12
 80033fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003400:	2000      	movs	r0, #0
 8003402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (dev->led_duty_info[0].R == -1)
 8003404:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003406:	3301      	adds	r3, #1
			rdc200a_get_led_duty_from_reg(0, VC_LED_CTRL_COLOR_ALL, &dev->led_duty_info[0]);
 8003408:	f100 064c 	add.w	r6, r0, #76	; 0x4c
		if (dev->led_duty_info[0].R == -1)
 800340c:	d1ec      	bne.n	80033e8 <rdc200a_get_led_duty+0x10>
			rdc200a_get_led_duty_from_reg(0, VC_LED_CTRL_COLOR_ALL, &dev->led_duty_info[0]);
 800340e:	4631      	mov	r1, r6
 8003410:	2000      	movs	r0, #0
 8003412:	f7ff fecf 	bl	80031b4 <rdc200a_get_led_duty_from_reg.constprop.0>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1)
 8003416:	07bb      	lsls	r3, r7, #30
 8003418:	d5e8      	bpl.n	80033ec <rdc200a_get_led_duty+0x14>
		if (dev->led_duty_info[1].R == -1)
 800341a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800341c:	3301      	adds	r3, #1
			rdc200a_get_led_duty_from_reg(1, VC_LED_CTRL_COLOR_ALL, &dev->led_duty_info[1]);
 800341e:	f105 0558 	add.w	r5, r5, #88	; 0x58
		if (dev->led_duty_info[1].R == -1)
 8003422:	d1e4      	bne.n	80033ee <rdc200a_get_led_duty+0x16>
			rdc200a_get_led_duty_from_reg(1, VC_LED_CTRL_COLOR_ALL, &dev->led_duty_info[1]);
 8003424:	4629      	mov	r1, r5
 8003426:	2001      	movs	r0, #1
 8003428:	f7ff fec4 	bl	80031b4 <rdc200a_get_led_duty_from_reg.constprop.0>
 800342c:	e7df      	b.n	80033ee <rdc200a_get_led_duty+0x16>
 800342e:	bf00      	nop

08003430 <rdc200a_fill_step_value>:
{
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	461d      	mov	r5, r3
	if (color & VC_LED_CTRL_COLOR_R) {
 8003434:	07cb      	lsls	r3, r1, #31
{
 8003436:	460c      	mov	r4, r1
 8003438:	4606      	mov	r6, r0
	if (color & VC_LED_CTRL_COLOR_R) {
 800343a:	d524      	bpl.n	8003486 <rdc200a_fill_step_value+0x56>
		if (up == TRUE)
 800343c:	2a01      	cmp	r2, #1
			new_duty->R = (S32_T)RDC200A_STEP_UP_LED_DUTY_VALUE(dev_duty->R);
 800343e:	6828      	ldr	r0, [r5, #0]
		if (up == TRUE)
 8003440:	d042      	beq.n	80034c8 <rdc200a_fill_step_value+0x98>
			new_duty->R = (S32_T)RDC200A_STEP_DOWN_LED_DUTY_VALUE(dev_duty->R);
 8003442:	f7fd f86f 	bl	8000524 <__aeabi_i2d>
 8003446:	2200      	movs	r2, #0
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <rdc200a_fill_step_value+0xbc>)
 800344a:	f7fc ff1d 	bl	8000288 <__aeabi_dsub>
 800344e:	f7fd fb83 	bl	8000b58 <__aeabi_d2iz>
	if (color & VC_LED_CTRL_COLOR_G) {
 8003452:	07a2      	lsls	r2, r4, #30
			new_duty->R = (S32_T)RDC200A_STEP_DOWN_LED_DUTY_VALUE(dev_duty->R);
 8003454:	6030      	str	r0, [r6, #0]
	if (color & VC_LED_CTRL_COLOR_G) {
 8003456:	d545      	bpl.n	80034e4 <rdc200a_fill_step_value+0xb4>
			new_duty->G = (S32_T)RDC200A_STEP_DOWN_LED_DUTY_VALUE(dev_duty->G);
 8003458:	6868      	ldr	r0, [r5, #4]
 800345a:	f7fd f863 	bl	8000524 <__aeabi_i2d>
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <rdc200a_fill_step_value+0xbc>)
 8003460:	2200      	movs	r2, #0
 8003462:	f7fc ff11 	bl	8000288 <__aeabi_dsub>
 8003466:	f7fd fb77 	bl	8000b58 <__aeabi_d2iz>
	if (color & VC_LED_CTRL_COLOR_B) {
 800346a:	0761      	lsls	r1, r4, #29
			new_duty->G = (S32_T)RDC200A_STEP_DOWN_LED_DUTY_VALUE(dev_duty->G);
 800346c:	6070      	str	r0, [r6, #4]
	if (color & VC_LED_CTRL_COLOR_B) {
 800346e:	d509      	bpl.n	8003484 <rdc200a_fill_step_value+0x54>
 8003470:	68a8      	ldr	r0, [r5, #8]
			new_duty->B = (S32_T)RDC200A_STEP_DOWN_LED_DUTY_VALUE(dev_duty->B);
 8003472:	f7fd f857 	bl	8000524 <__aeabi_i2d>
 8003476:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <rdc200a_fill_step_value+0xbc>)
 8003478:	2200      	movs	r2, #0
 800347a:	f7fc ff05 	bl	8000288 <__aeabi_dsub>
 800347e:	f7fd fb6b 	bl	8000b58 <__aeabi_d2iz>
 8003482:	60b0      	str	r0, [r6, #8]
}
 8003484:	bd70      	pop	{r4, r5, r6, pc}
	if (color & VC_LED_CTRL_COLOR_G) {
 8003486:	078b      	lsls	r3, r1, #30
 8003488:	d518      	bpl.n	80034bc <rdc200a_fill_step_value+0x8c>
		if (up == TRUE)
 800348a:	2a01      	cmp	r2, #1
 800348c:	d1e4      	bne.n	8003458 <rdc200a_fill_step_value+0x28>
			new_duty->G = (S32_T)RDC200A_STEP_UP_LED_DUTY_VALUE(dev_duty->G);
 800348e:	6868      	ldr	r0, [r5, #4]
 8003490:	f7fd f848 	bl	8000524 <__aeabi_i2d>
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <rdc200a_fill_step_value+0xbc>)
 8003496:	2200      	movs	r2, #0
 8003498:	f7fc fef8 	bl	800028c <__adddf3>
 800349c:	f7fd fb5c 	bl	8000b58 <__aeabi_d2iz>
	if (color & VC_LED_CTRL_COLOR_B) {
 80034a0:	0761      	lsls	r1, r4, #29
			new_duty->G = (S32_T)RDC200A_STEP_UP_LED_DUTY_VALUE(dev_duty->G);
 80034a2:	6070      	str	r0, [r6, #4]
	if (color & VC_LED_CTRL_COLOR_B) {
 80034a4:	d5ee      	bpl.n	8003484 <rdc200a_fill_step_value+0x54>
 80034a6:	68a8      	ldr	r0, [r5, #8]
			new_duty->B = (S32_T)RDC200A_STEP_UP_LED_DUTY_VALUE(dev_duty->B);
 80034a8:	f7fd f83c 	bl	8000524 <__aeabi_i2d>
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <rdc200a_fill_step_value+0xbc>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	f7fc feec 	bl	800028c <__adddf3>
 80034b4:	f7fd fb50 	bl	8000b58 <__aeabi_d2iz>
 80034b8:	60b0      	str	r0, [r6, #8]
}
 80034ba:	bd70      	pop	{r4, r5, r6, pc}
	if (color & VC_LED_CTRL_COLOR_B) {
 80034bc:	0748      	lsls	r0, r1, #29
 80034be:	d5e1      	bpl.n	8003484 <rdc200a_fill_step_value+0x54>
		if (up == TRUE)
 80034c0:	2a01      	cmp	r2, #1
 80034c2:	68a8      	ldr	r0, [r5, #8]
 80034c4:	d1d5      	bne.n	8003472 <rdc200a_fill_step_value+0x42>
 80034c6:	e7ef      	b.n	80034a8 <rdc200a_fill_step_value+0x78>
			new_duty->R = (S32_T)RDC200A_STEP_UP_LED_DUTY_VALUE(dev_duty->R);
 80034c8:	f7fd f82c 	bl	8000524 <__aeabi_i2d>
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <rdc200a_fill_step_value+0xbc>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	f7fc fedc 	bl	800028c <__adddf3>
 80034d4:	f7fd fb40 	bl	8000b58 <__aeabi_d2iz>
 80034d8:	6030      	str	r0, [r6, #0]
	if (color & VC_LED_CTRL_COLOR_G) {
 80034da:	07a0      	lsls	r0, r4, #30
 80034dc:	d4d7      	bmi.n	800348e <rdc200a_fill_step_value+0x5e>
	if (color & VC_LED_CTRL_COLOR_B) {
 80034de:	0762      	lsls	r2, r4, #29
 80034e0:	d4e1      	bmi.n	80034a6 <rdc200a_fill_step_value+0x76>
}
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
	if (color & VC_LED_CTRL_COLOR_B) {
 80034e4:	0763      	lsls	r3, r4, #29
 80034e6:	d4c3      	bmi.n	8003470 <rdc200a_fill_step_value+0x40>
}
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	bf00      	nop
 80034ec:	407f4000 	.word	0x407f4000

080034f0 <rdc200a_hide_bitmap_osd>:
{
 80034f0:	b508      	push	{r3, lr}
	rdc200a_config_bitmap_osd_alpha_blending(cb->drawer_id, VC_OSD_ALPHA_0);
 80034f2:	7dc2      	ldrb	r2, [r0, #23]
	switch (drawer_id) {
 80034f4:	2a01      	cmp	r2, #1
 80034f6:	d004      	beq.n	8003502 <rdc200a_hide_bitmap_osd+0x12>
 80034f8:	2a02      	cmp	r2, #2
 80034fa:	d011      	beq.n	8003520 <rdc200a_hide_bitmap_osd+0x30>
 80034fc:	b14a      	cbz	r2, 8003512 <rdc200a_hide_bitmap_osd+0x22>
}
 80034fe:	2000      	movs	r0, #0
 8003500:	bd08      	pop	{r3, pc}
		RDC_REG_MASK_SET(0x0324, 0xF0, (U8_T)alpha<<4);
 8003502:	2200      	movs	r2, #0
 8003504:	21f0      	movs	r1, #240	; 0xf0
 8003506:	f44f 7049 	mov.w	r0, #804	; 0x324
 800350a:	f003 fe1d 	bl	8007148 <RDC_REG_MASK_SET>
}
 800350e:	2000      	movs	r0, #0
 8003510:	bd08      	pop	{r3, pc}
		RDC_REG_MASK_SET(0x0324, 0x0F, (U8_T)alpha);
 8003512:	210f      	movs	r1, #15
 8003514:	f44f 7049 	mov.w	r0, #804	; 0x324
 8003518:	f003 fe16 	bl	8007148 <RDC_REG_MASK_SET>
}
 800351c:	2000      	movs	r0, #0
 800351e:	bd08      	pop	{r3, pc}
		RDC_REG_SET(0x0325, (U8_T)alpha);
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <rdc200a_hide_bitmap_osd+0x44>)
 8003522:	2300      	movs	r3, #0
 8003524:	7811      	ldrb	r1, [r2, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f240 3225 	movw	r2, #805	; 0x325
 800352c:	f002 ffb8 	bl	80064a0 <rtiVC_WriteDevice16>
}
 8003530:	2000      	movs	r0, #0
 8003532:	bd08      	pop	{r3, pc}
 8003534:	2000001d 	.word	0x2000001d

08003538 <rdc200a_set_image_display_format>:
{
 8003538:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8_T dimension_reg_val[MAX_NUM_VC_DISPLAY_FORMAT] = {
 800353a:	4c3b      	ldr	r4, [pc, #236]	; (8003628 <rdc200a_set_image_display_format+0xf0>)
{
 800353c:	4603      	mov	r3, r0
 800353e:	460a      	mov	r2, r1
	U8_T dimension_reg_val[MAX_NUM_VC_DISPLAY_FORMAT] = {
 8003540:	e894 0003 	ldmia.w	r4, {r0, r1}
{
 8003544:	b083      	sub	sp, #12
	U8_T dimension_reg_val[MAX_NUM_VC_DISPLAY_FORMAT] = {
 8003546:	9000      	str	r0, [sp, #0]
 8003548:	f8ad 1004 	strh.w	r1, [sp, #4]
	if((fmt != VC_IMAGE_DISPLAY_FORMAT_2D) && swap_image_3d_mode)
 800354c:	b10b      	cbz	r3, 8003552 <rdc200a_set_image_display_format+0x1a>
 800354e:	2a00      	cmp	r2, #0
 8003550:	d160      	bne.n	8003614 <rdc200a_set_image_display_format+0xdc>
 8003552:	3308      	adds	r3, #8
 8003554:	eb0d 0503 	add.w	r5, sp, r3
		rdc200a_mrx_config = RDC_REG_GET(0x0200);
 8003558:	4c34      	ldr	r4, [pc, #208]	; (800362c <rdc200a_set_image_display_format+0xf4>)
 800355a:	4f35      	ldr	r7, [pc, #212]	; (8003630 <rdc200a_set_image_display_format+0xf8>)
 800355c:	7821      	ldrb	r1, [r4, #0]
		rdc200a_pgen_config = RDC_REG_GET(0x0280);
 800355e:	4e35      	ldr	r6, [pc, #212]	; (8003634 <rdc200a_set_image_display_format+0xfc>)
		rdc200a_mrx_config = RDC_REG_GET(0x0200);
 8003560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003564:	2000      	movs	r0, #0
 8003566:	f002 ff87 	bl	8006478 <rtiVC_ReadDevice16>
		rdc200a_pgen_config = RDC_REG_GET(0x0280);
 800356a:	7821      	ldrb	r1, [r4, #0]
		rdc200a_mrx_config = RDC_REG_GET(0x0200);
 800356c:	7038      	strb	r0, [r7, #0]
		rdc200a_pgen_config = RDC_REG_GET(0x0280);
 800356e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003572:	2000      	movs	r0, #0
 8003574:	f002 ff80 	bl	8006478 <rtiVC_ReadDevice16>
	rd0015 = RDC_REG_GET(0x0015);
 8003578:	7821      	ldrb	r1, [r4, #0]
		rdc200a_pgen_config = RDC_REG_GET(0x0280);
 800357a:	7030      	strb	r0, [r6, #0]
	rd0015 = RDC_REG_GET(0x0015);
 800357c:	2215      	movs	r2, #21
 800357e:	2000      	movs	r0, #0
 8003580:	f002 ff7a 	bl	8006478 <rtiVC_ReadDevice16>
	RDC_REG_SET(0x0015, rd0015);
 8003584:	7821      	ldrb	r1, [r4, #0]
 8003586:	f000 03f3 	and.w	r3, r0, #243	; 0xf3
 800358a:	2215      	movs	r2, #21
 800358c:	2000      	movs	r0, #0
 800358e:	f002 ff87 	bl	80064a0 <rtiVC_WriteDevice16>
    RDC_REG_MASK_SET(0x0013, 0x04, 0x00);
 8003592:	2200      	movs	r2, #0
 8003594:	2104      	movs	r1, #4
 8003596:	2013      	movs	r0, #19
 8003598:	f003 fdd6 	bl	8007148 <RDC_REG_MASK_SET>
    RDC_REG_MASK_SET(0x0013, 0x04, 0x04);
 800359c:	2204      	movs	r2, #4
 800359e:	4611      	mov	r1, r2
 80035a0:	2013      	movs	r0, #19
 80035a2:	f003 fdd1 	bl	8007148 <RDC_REG_MASK_SET>
    RDC_REG_MASK_SET(0x0014, 0xFA, dimension_reg_val[fmt]);
 80035a6:	f815 2c08 	ldrb.w	r2, [r5, #-8]
 80035aa:	21fa      	movs	r1, #250	; 0xfa
 80035ac:	2014      	movs	r0, #20
 80035ae:	f003 fdcb 	bl	8007148 <RDC_REG_MASK_SET>
    RDC_REG_MASK_SET(0x0200, 0x07, 0x04);
 80035b2:	2204      	movs	r2, #4
 80035b4:	2107      	movs	r1, #7
 80035b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80035ba:	f003 fdc5 	bl	8007148 <RDC_REG_MASK_SET>
    RDC_REG_SET(0x0280, 0x00);
 80035be:	2300      	movs	r3, #0
 80035c0:	7821      	ldrb	r1, [r4, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80035c8:	f002 ff6a 	bl	80064a0 <rtiVC_WriteDevice16>
    VC_U_DELAY(50000);
 80035cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035d0:	f002 fedc 	bl	800638c <rtiVC_DelayUs>
    RDC_REG_SET(0x0200, rdc200a_mrx_config);
 80035d4:	783b      	ldrb	r3, [r7, #0]
 80035d6:	7821      	ldrb	r1, [r4, #0]
 80035d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035dc:	2000      	movs	r0, #0
 80035de:	f002 ff5f 	bl	80064a0 <rtiVC_WriteDevice16>
    RDC_REG_SET(0x0280, rdc200a_pgen_config);
 80035e2:	7833      	ldrb	r3, [r6, #0]
 80035e4:	7821      	ldrb	r1, [r4, #0]
 80035e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80035ea:	2000      	movs	r0, #0
 80035ec:	f002 ff58 	bl	80064a0 <rtiVC_WriteDevice16>
	rd0015 = RDC_REG_GET(0x0015);
 80035f0:	7821      	ldrb	r1, [r4, #0]
 80035f2:	2215      	movs	r2, #21
 80035f4:	2000      	movs	r0, #0
 80035f6:	f002 ff3f 	bl	8006478 <rtiVC_ReadDevice16>
		rd0015 |= ((rd0015 & 0x03) << 2);
 80035fa:	0083      	lsls	r3, r0, #2
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	4303      	orrs	r3, r0
	RDC_REG_SET(0x0015, rd0015);
 8003602:	7821      	ldrb	r1, [r4, #0]
 8003604:	2000      	movs	r0, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2215      	movs	r2, #21
 800360a:	f002 ff49 	bl	80064a0 <rtiVC_WriteDevice16>
}
 800360e:	2000      	movs	r0, #0
 8003610:	b003      	add	sp, #12
 8003612:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dimension_reg_val[fmt] |= PANEL_SWAP;
 8003614:	3308      	adds	r3, #8
 8003616:	eb0d 0503 	add.w	r5, sp, r3
 800361a:	f815 3c08 	ldrb.w	r3, [r5, #-8]
 800361e:	f043 0302 	orr.w	r3, r3, #2
 8003622:	f805 3c08 	strb.w	r3, [r5, #-8]
 8003626:	e797      	b.n	8003558 <rdc200a_set_image_display_format+0x20>
 8003628:	08016358 	.word	0x08016358
 800362c:	2000001d 	.word	0x2000001d
 8003630:	200005a4 	.word	0x200005a4
 8003634:	200005a5 	.word	0x200005a5

08003638 <rdc200a_show_bitmap_osd>:
{
 8003638:	b508      	push	{r3, lr}
	rdc200a_config_bitmap_osd_alpha_blending(cb->drawer_id, cb->alpha);
 800363a:	7dc1      	ldrb	r1, [r0, #23]
 800363c:	7d42      	ldrb	r2, [r0, #21]
	switch (drawer_id) {
 800363e:	2901      	cmp	r1, #1
 8003640:	d004      	beq.n	800364c <rdc200a_show_bitmap_osd+0x14>
 8003642:	2902      	cmp	r1, #2
 8003644:	d013      	beq.n	800366e <rdc200a_show_bitmap_osd+0x36>
 8003646:	b159      	cbz	r1, 8003660 <rdc200a_show_bitmap_osd+0x28>
}
 8003648:	2000      	movs	r0, #0
 800364a:	bd08      	pop	{r3, pc}
		RDC_REG_MASK_SET(0x0324, 0xF0, (U8_T)alpha<<4);
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003652:	21f0      	movs	r1, #240	; 0xf0
 8003654:	f44f 7049 	mov.w	r0, #804	; 0x324
 8003658:	f003 fd76 	bl	8007148 <RDC_REG_MASK_SET>
}
 800365c:	2000      	movs	r0, #0
 800365e:	bd08      	pop	{r3, pc}
		RDC_REG_MASK_SET(0x0324, 0x0F, (U8_T)alpha);
 8003660:	210f      	movs	r1, #15
 8003662:	f44f 7049 	mov.w	r0, #804	; 0x324
 8003666:	f003 fd6f 	bl	8007148 <RDC_REG_MASK_SET>
}
 800366a:	2000      	movs	r0, #0
 800366c:	bd08      	pop	{r3, pc}
		RDC_REG_SET(0x0325, (U8_T)alpha);
 800366e:	4905      	ldr	r1, [pc, #20]	; (8003684 <rdc200a_show_bitmap_osd+0x4c>)
 8003670:	4613      	mov	r3, r2
 8003672:	7809      	ldrb	r1, [r1, #0]
 8003674:	f240 3225 	movw	r2, #805	; 0x325
 8003678:	2000      	movs	r0, #0
 800367a:	f002 ff11 	bl	80064a0 <rtiVC_WriteDevice16>
}
 800367e:	2000      	movs	r0, #0
 8003680:	bd08      	pop	{r3, pc}
 8003682:	bf00      	nop
 8003684:	2000001d 	.word	0x2000001d

08003688 <rdc200a_poweron_panel.part.0>:
int rdc200a_poweron_panel(BOOL_T on)
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		PLL2_REFDIV = RDC_REG_GET(0x47);
 800368a:	4d44      	ldr	r5, [pc, #272]	; (800379c <rdc200a_poweron_panel.part.0+0x114>)
 800368c:	2247      	movs	r2, #71	; 0x47
 800368e:	7829      	ldrb	r1, [r5, #0]
 8003690:	2000      	movs	r0, #0
 8003692:	f002 fef1 	bl	8006478 <rtiVC_ReadDevice16>
		PLL2_PLLN_lsb = RDC_REG_GET(0x49);
 8003696:	7829      	ldrb	r1, [r5, #0]
 8003698:	2249      	movs	r2, #73	; 0x49
		PLL2_REFDIV = RDC_REG_GET(0x47);
 800369a:	4607      	mov	r7, r0
		PLL2_PLLN_lsb = RDC_REG_GET(0x49);
 800369c:	2000      	movs	r0, #0
 800369e:	f002 feeb 	bl	8006478 <rtiVC_ReadDevice16>
		RDC_REG_MASK_SET(0x47, 0x03, 0x01);
 80036a2:	2201      	movs	r2, #1
 80036a4:	2103      	movs	r1, #3
		PLL2_PLLN_lsb = RDC_REG_GET(0x49);
 80036a6:	4606      	mov	r6, r0
		RDC_REG_MASK_SET(0x47, 0x03, 0x01);
 80036a8:	2047      	movs	r0, #71	; 0x47
 80036aa:	f003 fd4d 	bl	8007148 <RDC_REG_MASK_SET>
		RDC_REG_SET(0x49, 0x6E);
 80036ae:	7829      	ldrb	r1, [r5, #0]
 80036b0:	236e      	movs	r3, #110	; 0x6e
 80036b2:	2249      	movs	r2, #73	; 0x49
 80036b4:	2000      	movs	r0, #0
 80036b6:	f002 fef3 	bl	80064a0 <rtiVC_WriteDevice16>
 80036ba:	2432      	movs	r4, #50	; 0x32
 80036bc:	e005      	b.n	80036ca <rdc200a_poweron_panel.part.0+0x42>
		VC_U_DELAY(1);
 80036be:	f002 fe65 	bl	800638c <rtiVC_DelayUs>
	} while (--lock_timeout);
 80036c2:	1e62      	subs	r2, r4, #1
 80036c4:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
 80036c8:	d009      	beq.n	80036de <rdc200a_poweron_panel.part.0+0x56>
		reg_1A = RDC_REG_GET(0x001A); // monitoring_basic[4:2]
 80036ca:	221a      	movs	r2, #26
 80036cc:	7829      	ldrb	r1, [r5, #0]
 80036ce:	2000      	movs	r0, #0
 80036d0:	f002 fed2 	bl	8006478 <rtiVC_ReadDevice16>
 80036d4:	4602      	mov	r2, r0
		if (reg_1A & lock_mask)
 80036d6:	06d3      	lsls	r3, r2, #27
		VC_U_DELAY(1);
 80036d8:	f04f 0001 	mov.w	r0, #1
		if (reg_1A & lock_mask)
 80036dc:	d5ef      	bpl.n	80036be <rdc200a_poweron_panel.part.0+0x36>
		TX_T2P_EN[0] = RDC_REG_GET(0x0822) & 0x08;
 80036de:	7829      	ldrb	r1, [r5, #0]
 80036e0:	f640 0222 	movw	r2, #2082	; 0x822
 80036e4:	2000      	movs	r0, #0
 80036e6:	f002 fec7 	bl	8006478 <rtiVC_ReadDevice16>
		TX_T2P_EN[1] = RDC_REG_GET(0x0922) & 0x08;
 80036ea:	7829      	ldrb	r1, [r5, #0]
		TX_T2P_EN[0] = RDC_REG_GET(0x0822) & 0x08;
 80036ec:	4604      	mov	r4, r0
		TX_T2P_EN[1] = RDC_REG_GET(0x0922) & 0x08;
 80036ee:	f640 1222 	movw	r2, #2338	; 0x922
 80036f2:	2000      	movs	r0, #0
 80036f4:	f002 fec0 	bl	8006478 <rtiVC_ReadDevice16>
		if (TX_T2P_EN[0] || TX_T2P_EN[1]) {
 80036f8:	4320      	orrs	r0, r4
 80036fa:	0701      	lsls	r1, r0, #28
 80036fc:	d509      	bpl.n	8003712 <rdc200a_poweron_panel.part.0+0x8a>
			RDC_REG_MASK_SET(0x0013, 0x02, 0x00);
 80036fe:	2200      	movs	r2, #0
 8003700:	2102      	movs	r1, #2
 8003702:	2013      	movs	r0, #19
 8003704:	f003 fd20 	bl	8007148 <RDC_REG_MASK_SET>
			RDC_REG_MASK_SET(0x0013, 0x02, 0x02);
 8003708:	2202      	movs	r2, #2
 800370a:	4611      	mov	r1, r2
 800370c:	2013      	movs	r0, #19
 800370e:	f003 fd1b 	bl	8007148 <RDC_REG_MASK_SET>
	rd0015 = RDC_REG_GET(0x0015);
 8003712:	7829      	ldrb	r1, [r5, #0]
 8003714:	2215      	movs	r2, #21
 8003716:	2000      	movs	r0, #0
 8003718:	f002 feae 	bl	8006478 <rtiVC_ReadDevice16>
		rd0015 |= ((rd0015 & 0x03) << 2);
 800371c:	0083      	lsls	r3, r0, #2
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	4303      	orrs	r3, r0
	RDC_REG_SET(0x0015, rd0015);
 8003724:	7829      	ldrb	r1, [r5, #0]
 8003726:	2215      	movs	r2, #21
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2000      	movs	r0, #0
 800372c:	f002 feb8 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(0x47, PLL2_REFDIV);
 8003730:	7829      	ldrb	r1, [r5, #0]
 8003732:	463b      	mov	r3, r7
 8003734:	2247      	movs	r2, #71	; 0x47
 8003736:	2000      	movs	r0, #0
 8003738:	f002 feb2 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(0x49, PLL2_PLLN_lsb);
 800373c:	7829      	ldrb	r1, [r5, #0]
 800373e:	4633      	mov	r3, r6
 8003740:	2249      	movs	r2, #73	; 0x49
 8003742:	2000      	movs	r0, #0
 8003744:	f002 feac 	bl	80064a0 <rtiVC_WriteDevice16>
 8003748:	2432      	movs	r4, #50	; 0x32
 800374a:	e005      	b.n	8003758 <rdc200a_poweron_panel.part.0+0xd0>
		VC_U_DELAY(1);
 800374c:	f002 fe1e 	bl	800638c <rtiVC_DelayUs>
	} while (--lock_timeout);
 8003750:	1e63      	subs	r3, r4, #1
 8003752:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8003756:	d009      	beq.n	800376c <rdc200a_poweron_panel.part.0+0xe4>
		reg_1A = RDC_REG_GET(0x001A); // monitoring_basic[4:2]
 8003758:	221a      	movs	r2, #26
 800375a:	7829      	ldrb	r1, [r5, #0]
 800375c:	2000      	movs	r0, #0
 800375e:	f002 fe8b 	bl	8006478 <rtiVC_ReadDevice16>
 8003762:	4603      	mov	r3, r0
		if (reg_1A & lock_mask)
 8003764:	06da      	lsls	r2, r3, #27
		VC_U_DELAY(1);
 8003766:	f04f 0001 	mov.w	r0, #1
		if (reg_1A & lock_mask)
 800376a:	d5ef      	bpl.n	800374c <rdc200a_poweron_panel.part.0+0xc4>
	reg_0x0019 = RDC_REG_GET(0x0019);
 800376c:	7829      	ldrb	r1, [r5, #0]
 800376e:	2219      	movs	r2, #25
 8003770:	2000      	movs	r0, #0
 8003772:	f002 fe81 	bl	8006478 <rtiVC_ReadDevice16>
	if (reg_0x0019 & 0x02)
 8003776:	0783      	lsls	r3, r0, #30
		reg_0x0019 |= 0x01; // High active power down
 8003778:	bf56      	itet	pl
 800377a:	f040 0001 	orrpl.w	r0, r0, #1
		reg_0x0019 &= ~0x01; // Low active power down
 800377e:	f000 03fe 	andmi.w	r3, r0, #254	; 0xfe
		reg_0x0019 |= 0x01; // High active power down
 8003782:	b2c3      	uxtbpl	r3, r0
	RDC_REG_SET(0x0019, reg_0x0019); // dcdc disable
 8003784:	7829      	ldrb	r1, [r5, #0]
 8003786:	2000      	movs	r0, #0
 8003788:	2219      	movs	r2, #25
 800378a:	f002 fe89 	bl	80064a0 <rtiVC_WriteDevice16>
}
 800378e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	VC_M_DELAY(1);
 8003792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003796:	f002 bdf9 	b.w	800638c <rtiVC_DelayUs>
 800379a:	bf00      	nop
 800379c:	2000001d 	.word	0x2000001d

080037a0 <rdc200a_poweron_panel>:
	if (on == TRUE) {
 80037a0:	2801      	cmp	r0, #1
{
 80037a2:	b510      	push	{r4, lr}
	if (on == TRUE) {
 80037a4:	d023      	beq.n	80037ee <rdc200a_poweron_panel+0x4e>
	reg_0x0019 = RDC_REG_GET(0x0019);
 80037a6:	4c14      	ldr	r4, [pc, #80]	; (80037f8 <rdc200a_poweron_panel+0x58>)
 80037a8:	2219      	movs	r2, #25
 80037aa:	7821      	ldrb	r1, [r4, #0]
 80037ac:	2000      	movs	r0, #0
 80037ae:	f002 fe63 	bl	8006478 <rtiVC_ReadDevice16>
	if (reg_0x0019 & 0x02)
 80037b2:	0783      	lsls	r3, r0, #30
		reg_0x0019 |= 0x01; // Low active power down
 80037b4:	bf46      	itte	mi
 80037b6:	f040 0001 	orrmi.w	r0, r0, #1
 80037ba:	b2c3      	uxtbmi	r3, r0
		reg_0x0019 &= ~0x01; // High active power down
 80037bc:	f000 03fe 	andpl.w	r3, r0, #254	; 0xfe
	RDC_REG_SET(0x0019, reg_0x0019); // dcdc disable
 80037c0:	7821      	ldrb	r1, [r4, #0]
 80037c2:	2219      	movs	r2, #25
 80037c4:	2000      	movs	r0, #0
 80037c6:	f002 fe6b 	bl	80064a0 <rtiVC_WriteDevice16>
	VC_M_DELAY(1);
 80037ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037ce:	f002 fddd 	bl	800638c <rtiVC_DelayUs>
	rd0015 = RDC_REG_GET(0x0015);
 80037d2:	7821      	ldrb	r1, [r4, #0]
 80037d4:	2215      	movs	r2, #21
 80037d6:	2000      	movs	r0, #0
 80037d8:	f002 fe4e 	bl	8006478 <rtiVC_ReadDevice16>
	RDC_REG_SET(0x0015, rd0015);
 80037dc:	7821      	ldrb	r1, [r4, #0]
 80037de:	f000 03f3 	and.w	r3, r0, #243	; 0xf3
 80037e2:	2215      	movs	r2, #21
 80037e4:	2000      	movs	r0, #0
 80037e6:	f002 fe5b 	bl	80064a0 <rtiVC_WriteDevice16>
}
 80037ea:	2000      	movs	r0, #0
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	f7ff ff4b 	bl	8003688 <rdc200a_poweron_panel.part.0>
 80037f2:	2000      	movs	r0, #0
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	bf00      	nop
 80037f8:	2000001d 	.word	0x2000001d

080037fc <rdc200a_change_property_bitmap_osd>:
{
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	b082      	sub	sp, #8
	if (!rdc200a_check_bitmap_position(&output_h_size, &output_v_size,
 8003802:	f890 a016 	ldrb.w	sl, [r0, #22]
 8003806:	f8d0 8000 	ldr.w	r8, [r0]
{
 800380a:	460d      	mov	r5, r1
 800380c:	4604      	mov	r4, r0
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 800380e:	a901      	add	r1, sp, #4
 8003810:	4668      	mov	r0, sp
{
 8003812:	4616      	mov	r6, r2
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 8003814:	f7fe fb50 	bl	8001eb8 <rdc200a_get_output_resolution>
	bmp_h_size = rdc200a_bmp_osd_mag_size[mag].h_size;
 8003818:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <rdc200a_change_property_bitmap_osd+0xdc>)
	bmp_v_size = rdc200a_bmp_osd_mag_size[mag].v_size;
 800381a:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	if (d == VC_OSD_DIMENSTION_3D) {
 800381e:	f1ba 0f01 	cmp.w	sl, #1
	bmp_h_size = rdc200a_bmp_osd_mag_size[mag].h_size;
 8003822:	f853 7035 	ldr.w	r7, [r3, r5, lsl #3]
	bmp_v_size = rdc200a_bmp_osd_mag_size[mag].v_size;
 8003826:	f8d2 9004 	ldr.w	r9, [r2, #4]
	if (d == VC_OSD_DIMENSTION_3D) {
 800382a:	d041      	beq.n	80038b0 <rdc200a_change_property_bitmap_osd+0xb4>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 800382c:	e9dd 3200 	ldrd	r3, r2, [sp]
	if (((x+bmp_h_size) < output_h_size) && ((y+bmp_v_size) < output_v_size))
 8003830:	4447      	add	r7, r8
 8003832:	429f      	cmp	r7, r3
 8003834:	d219      	bcs.n	800386a <rdc200a_change_property_bitmap_osd+0x6e>
 8003836:	44c8      	add	r8, r9
 8003838:	4590      	cmp	r8, r2
 800383a:	d216      	bcs.n	800386a <rdc200a_change_property_bitmap_osd+0x6e>
	reg_addr = RDC200A_BMP_MAG_REG_ADDR(cb->drawer_id);
 800383c:	7de2      	ldrb	r2, [r4, #23]
	RDC_REG_SET(reg_addr, (mag << 2) | (mag << 6));
 800383e:	4f27      	ldr	r7, [pc, #156]	; (80038dc <rdc200a_change_property_bitmap_osd+0xe0>)
 8003840:	01ab      	lsls	r3, r5, #6
 8003842:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 8003846:	7839      	ldrb	r1, [r7, #0]
 8003848:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800384c:	f502 7248 	add.w	r2, r2, #800	; 0x320
 8003850:	2000      	movs	r0, #0
 8003852:	f002 fe25 	bl	80064a0 <rtiVC_WriteDevice16>
	rdc200a_config_bitmap_osd_alpha_blending(cb->drawer_id, alpha);
 8003856:	7de4      	ldrb	r4, [r4, #23]
	switch (drawer_id) {
 8003858:	2c01      	cmp	r4, #1
 800385a:	d00b      	beq.n	8003874 <rdc200a_change_property_bitmap_osd+0x78>
 800385c:	2c02      	cmp	r4, #2
 800385e:	d01f      	beq.n	80038a0 <rdc200a_change_property_bitmap_osd+0xa4>
 8003860:	b1a4      	cbz	r4, 800388c <rdc200a_change_property_bitmap_osd+0x90>
	return 0;
 8003862:	2000      	movs	r0, #0
}
 8003864:	b002      	add	sp, #8
 8003866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
 800386a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800386e:	b002      	add	sp, #8
 8003870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RDC_REG_MASK_SET(0x0324, 0xF0, (U8_T)alpha<<4);
 8003874:	0132      	lsls	r2, r6, #4
 8003876:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800387a:	21f0      	movs	r1, #240	; 0xf0
 800387c:	f44f 7049 	mov.w	r0, #804	; 0x324
 8003880:	f003 fc62 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 8003884:	2000      	movs	r0, #0
}
 8003886:	b002      	add	sp, #8
 8003888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RDC_REG_MASK_SET(0x0324, 0x0F, (U8_T)alpha);
 800388c:	4632      	mov	r2, r6
 800388e:	210f      	movs	r1, #15
 8003890:	f44f 7049 	mov.w	r0, #804	; 0x324
 8003894:	f003 fc58 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 8003898:	4620      	mov	r0, r4
}
 800389a:	b002      	add	sp, #8
 800389c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RDC_REG_SET(0x0325, (U8_T)alpha);
 80038a0:	7839      	ldrb	r1, [r7, #0]
 80038a2:	4633      	mov	r3, r6
 80038a4:	f240 3225 	movw	r2, #805	; 0x325
 80038a8:	2000      	movs	r0, #0
 80038aa:	f002 fdf9 	bl	80064a0 <rtiVC_WriteDevice16>
 80038ae:	e7d8      	b.n	8003862 <rdc200a_change_property_bitmap_osd+0x66>
		dimension_reg_val = RDC_REG_GET(0x0014);
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <rdc200a_change_property_bitmap_osd+0xe0>)
 80038b2:	2214      	movs	r2, #20
 80038b4:	7819      	ldrb	r1, [r3, #0]
 80038b6:	2000      	movs	r0, #0
 80038b8:	f002 fdde 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 80038bc:	f010 0f18 	tst.w	r0, #24
 80038c0:	d106      	bne.n	80038d0 <rdc200a_change_property_bitmap_osd+0xd4>
		else if (dimension_reg_val & TAB3D_EN) {
 80038c2:	0683      	lsls	r3, r0, #26
 80038c4:	d5b2      	bpl.n	800382c <rdc200a_change_property_bitmap_osd+0x30>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 80038c6:	9a01      	ldr	r2, [sp, #4]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 80038c8:	9b00      	ldr	r3, [sp, #0]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 80038ca:	0852      	lsrs	r2, r2, #1
 80038cc:	9201      	str	r2, [sp, #4]
 80038ce:	e7af      	b.n	8003830 <rdc200a_change_property_bitmap_osd+0x34>
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 80038d0:	9b00      	ldr	r3, [sp, #0]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 80038d2:	9a01      	ldr	r2, [sp, #4]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	e7ab      	b.n	8003830 <rdc200a_change_property_bitmap_osd+0x34>
 80038d8:	08016478 	.word	0x08016478
 80038dc:	2000001d 	.word	0x2000001d

080038e0 <rdc200a_change_property_text_osd>:
{
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	4605      	mov	r5, r0
 80038e6:	4699      	mov	r9, r3
	if (!rdc200a_check_text_position(&output_h_size, &output_v_size,
 80038e8:	e9d5 8300 	ldrd	r8, r3, [r5]
{
 80038ec:	b087      	sub	sp, #28
 80038ee:	460c      	mov	r4, r1
	U8_T drawer_id = cb->drawer_id;
 80038f0:	7f87      	ldrb	r7, [r0, #30]
	if (!rdc200a_check_text_position(&output_h_size, &output_v_size,
 80038f2:	f895 a01d 	ldrb.w	sl, [r5, #29]
 80038f6:	9301      	str	r3, [sp, #4]
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 80038f8:	a905      	add	r1, sp, #20
 80038fa:	a804      	add	r0, sp, #16
{
 80038fc:	4616      	mov	r6, r2
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 80038fe:	f7fe fadb 	bl	8001eb8 <rdc200a_get_output_resolution>
	font_h_size = rdc200a_font_osd_mag_size[mag].h_size;
 8003902:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <rdc200a_change_property_text_osd+0xe8>)
	font_v_size = rdc200a_font_osd_mag_size[mag].v_size;
 8003904:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
	if (d == VC_OSD_DIMENSTION_3D) {
 8003908:	f1ba 0f01 	cmp.w	sl, #1
	font_v_size = rdc200a_font_osd_mag_size[mag].v_size;
 800390c:	6852      	ldr	r2, [r2, #4]
	font_h_size = rdc200a_font_osd_mag_size[mag].h_size;
 800390e:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	font_v_size = rdc200a_font_osd_mag_size[mag].v_size;
 8003912:	9202      	str	r2, [sp, #8]
	font_h_size = rdc200a_font_osd_mag_size[mag].h_size;
 8003914:	46a3      	mov	fp, r4
	if (d == VC_OSD_DIMENSTION_3D) {
 8003916:	d02c      	beq.n	8003972 <rdc200a_change_property_text_osd+0x92>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003918:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
	if (((x+font_h_size) < output_h_size) && ((y+font_v_size) < output_v_size))
 800391c:	4498      	add	r8, r3
 800391e:	4590      	cmp	r8, r2
 8003920:	d222      	bcs.n	8003968 <rdc200a_change_property_text_osd+0x88>
 8003922:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8003926:	4413      	add	r3, r2
 8003928:	428b      	cmp	r3, r1
 800392a:	d21d      	bcs.n	8003968 <rdc200a_change_property_text_osd+0x88>
	if (cb->d == VC_OSD_DIMENSTION_3D) {
 800392c:	7f6b      	ldrb	r3, [r5, #29]
		dimension_reg_val = RDC_REG_GET(0x0014);
 800392e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80039cc <rdc200a_change_property_text_osd+0xec>
	if (cb->d == VC_OSD_DIMENSTION_3D) {
 8003932:	2b01      	cmp	r3, #1
 8003934:	d031      	beq.n	800399a <rdc200a_change_property_text_osd+0xba>
	reg_addr = RDC200A_FONT_ALPHA_REG_ADDR(drawer_id);
 8003936:	007f      	lsls	r7, r7, #1
	RDC_REG_SET(reg_addr, ((U8_T)back_alpha<<4)|(U8_T)font_alpha);
 8003938:	ea46 1309 	orr.w	r3, r6, r9, lsl #4
 800393c:	f89a 1000 	ldrb.w	r1, [sl]
 8003940:	f207 3251 	addw	r2, r7, #849	; 0x351
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2000      	movs	r0, #0
 8003948:	f002 fdaa 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr, (mag_y<<4)|mag_x);
 800394c:	ea44 130b 	orr.w	r3, r4, fp, lsl #4
 8003950:	f89a 1000 	ldrb.w	r1, [sl]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f507 7254 	add.w	r2, r7, #848	; 0x350
 800395a:	2000      	movs	r0, #0
 800395c:	f002 fda0 	bl	80064a0 <rtiVC_WriteDevice16>
	return 0;
 8003960:	2000      	movs	r0, #0
}
 8003962:	b007      	add	sp, #28
 8003964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
}
 800396c:	b007      	add	sp, #28
 800396e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dimension_reg_val = RDC_REG_GET(0x0014);
 8003972:	f8df a058 	ldr.w	sl, [pc, #88]	; 80039cc <rdc200a_change_property_text_osd+0xec>
 8003976:	9303      	str	r3, [sp, #12]
 8003978:	f89a 1000 	ldrb.w	r1, [sl]
 800397c:	2214      	movs	r2, #20
 800397e:	2000      	movs	r0, #0
 8003980:	f002 fd7a 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 8003984:	f010 0f18 	tst.w	r0, #24
 8003988:	9b03      	ldr	r3, [sp, #12]
 800398a:	d114      	bne.n	80039b6 <rdc200a_change_property_text_osd+0xd6>
		else if (dimension_reg_val & TAB3D_EN) {
 800398c:	0682      	lsls	r2, r0, #26
 800398e:	d5c3      	bpl.n	8003918 <rdc200a_change_property_text_osd+0x38>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003990:	9905      	ldr	r1, [sp, #20]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8003992:	9a04      	ldr	r2, [sp, #16]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003994:	0849      	lsrs	r1, r1, #1
 8003996:	9105      	str	r1, [sp, #20]
 8003998:	e7c0      	b.n	800391c <rdc200a_change_property_text_osd+0x3c>
		dimension_reg_val = RDC_REG_GET(0x0014);
 800399a:	f89a 1000 	ldrb.w	r1, [sl]
 800399e:	2214      	movs	r2, #20
 80039a0:	2000      	movs	r0, #0
 80039a2:	f002 fd69 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) // Side By Side
 80039a6:	f010 0f18 	tst.w	r0, #24
 80039aa:	d008      	beq.n	80039be <rdc200a_change_property_text_osd+0xde>
			mag_y = (U8_T)(mag + (E_VC_OSD_TEXT_MAG_T)1); // Twice of X
 80039ac:	f104 0b01 	add.w	fp, r4, #1
	RDC_REG_SET(reg_addr, (mag_y<<4)|mag_x);
 80039b0:	fa5f fb8b 	uxtb.w	fp, fp
 80039b4:	e7bf      	b.n	8003936 <rdc200a_change_property_text_osd+0x56>
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 80039b6:	9a04      	ldr	r2, [sp, #16]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 80039b8:	9905      	ldr	r1, [sp, #20]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 80039ba:	0852      	lsrs	r2, r2, #1
 80039bc:	e7ae      	b.n	800391c <rdc200a_change_property_text_osd+0x3c>
		else if (dimension_reg_val & TAB3D_EN)
 80039be:	0683      	lsls	r3, r0, #26
			mag_x = (U8_T)(mag + (E_VC_OSD_TEXT_MAG_T)1); // Twice of Y
 80039c0:	bf44      	itt	mi
 80039c2:	3401      	addmi	r4, #1
 80039c4:	b2e4      	uxtbmi	r4, r4
 80039c6:	e7b6      	b.n	8003936 <rdc200a_change_property_text_osd+0x56>
 80039c8:	0801649c 	.word	0x0801649c
 80039cc:	2000001d 	.word	0x2000001d

080039d0 <rdc200a_move_text_osd>:
{
 80039d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	4605      	mov	r5, r0
 80039d6:	b085      	sub	sp, #20
	if (!rdc200a_check_text_position(&output_h_size, &output_v_size,
 80039d8:	7e06      	ldrb	r6, [r0, #24]
	U8_T drawer_id = cb->drawer_id;
 80039da:	7f84      	ldrb	r4, [r0, #30]
	if (!rdc200a_check_text_position(&output_h_size, &output_v_size,
 80039dc:	f895 a01d 	ldrb.w	sl, [r5, #29]
{
 80039e0:	460f      	mov	r7, r1
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 80039e2:	a802      	add	r0, sp, #8
 80039e4:	a903      	add	r1, sp, #12
{
 80039e6:	4690      	mov	r8, r2
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 80039e8:	f7fe fa66 	bl	8001eb8 <rdc200a_get_output_resolution>
	font_h_size = rdc200a_font_osd_mag_size[mag].h_size;
 80039ec:	4b4f      	ldr	r3, [pc, #316]	; (8003b2c <rdc200a_move_text_osd+0x15c>)
	font_v_size = rdc200a_font_osd_mag_size[mag].v_size;
 80039ee:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
	if (d == VC_OSD_DIMENSTION_3D) {
 80039f2:	f1ba 0f01 	cmp.w	sl, #1
	font_h_size = rdc200a_font_osd_mag_size[mag].h_size;
 80039f6:	f853 6036 	ldr.w	r6, [r3, r6, lsl #3]
	font_v_size = rdc200a_font_osd_mag_size[mag].v_size;
 80039fa:	f8d2 9004 	ldr.w	r9, [r2, #4]
	if (d == VC_OSD_DIMENSTION_3D) {
 80039fe:	d049      	beq.n	8003a94 <rdc200a_move_text_osd+0xc4>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003a00:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
	if (((x+font_h_size) < output_h_size) && ((y+font_v_size) < output_v_size))
 8003a04:	443e      	add	r6, r7
 8003a06:	4556      	cmp	r6, sl
 8003a08:	d23f      	bcs.n	8003a8a <rdc200a_move_text_osd+0xba>
 8003a0a:	44c1      	add	r9, r8
 8003a0c:	45d9      	cmp	r9, fp
 8003a0e:	d23c      	bcs.n	8003a8a <rdc200a_move_text_osd+0xba>
	RDC_REG_SET(reg_addr, 0x0); // alpha 0%
 8003a10:	4e47      	ldr	r6, [pc, #284]	; (8003b30 <rdc200a_move_text_osd+0x160>)
	reg_addr = RDC200A_FONT_ALPHA_REG_ADDR(drawer_id);
 8003a12:	ea4f 0944 	mov.w	r9, r4, lsl #1
	RDC_REG_SET(reg_addr, 0x0); // alpha 0%
 8003a16:	2300      	movs	r3, #0
	reg_addr = RDC200A_FONT_ALPHA_REG_ADDR(drawer_id);
 8003a18:	f209 3951 	addw	r9, r9, #849	; 0x351
 8003a1c:	b2a4      	uxth	r4, r4
	reg_addr = RDC200A_2D_FONT_POS_X_MSB_REG_ADDR(drawer_id); // MSB reg addr
 8003a1e:	00a4      	lsls	r4, r4, #2
	RDC_REG_SET(reg_addr, 0x0); // alpha 0%
 8003a20:	4618      	mov	r0, r3
 8003a22:	7831      	ldrb	r1, [r6, #0]
 8003a24:	464a      	mov	r2, r9
 8003a26:	f002 fd3b 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr, (U8_T)(font_pos_x >> 8));
 8003a2a:	7831      	ldrb	r1, [r6, #0]
 8003a2c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003a30:	f504 7256 	add.w	r2, r4, #856	; 0x358
 8003a34:	2000      	movs	r0, #0
 8003a36:	f002 fd33 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr+1, font_pos_x & 0xFF);
 8003a3a:	7831      	ldrb	r1, [r6, #0]
 8003a3c:	b2fb      	uxtb	r3, r7
 8003a3e:	f204 3259 	addw	r2, r4, #857	; 0x359
 8003a42:	2000      	movs	r0, #0
 8003a44:	f002 fd2c 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr, (U8_T)(font_pos_y >> 8));
 8003a48:	7831      	ldrb	r1, [r6, #0]
 8003a4a:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8003a4e:	f204 325a 	addw	r2, r4, #858	; 0x35a
 8003a52:	2000      	movs	r0, #0
 8003a54:	f002 fd24 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr+1, font_pos_y & 0xFF);
 8003a58:	fa5f f388 	uxtb.w	r3, r8
 8003a5c:	7831      	ldrb	r1, [r6, #0]
 8003a5e:	f204 325b 	addw	r2, r4, #859	; 0x35b
 8003a62:	2000      	movs	r0, #0
 8003a64:	f002 fd1c 	bl	80064a0 <rtiVC_WriteDevice16>
	if (cb->d == VC_OSD_DIMENSTION_3D) {
 8003a68:	7f6b      	ldrb	r3, [r5, #29]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d02b      	beq.n	8003ac6 <rdc200a_move_text_osd+0xf6>
	RDC_REG_SET(reg_addr, ((U8_T)cb->back_alpha<<4)|(U8_T)cb->font_alpha);
 8003a6e:	7eaa      	ldrb	r2, [r5, #26]
 8003a70:	7e6b      	ldrb	r3, [r5, #25]
 8003a72:	7831      	ldrb	r1, [r6, #0]
 8003a74:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	464a      	mov	r2, r9
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f002 fd0f 	bl	80064a0 <rtiVC_WriteDevice16>
	return 0;
 8003a82:	2000      	movs	r0, #0
}
 8003a84:	b005      	add	sp, #20
 8003a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 8003a8a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003a8e:	b005      	add	sp, #20
 8003a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dimension_reg_val = RDC_REG_GET(0x0014);
 8003a94:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <rdc200a_move_text_osd+0x160>)
 8003a96:	2214      	movs	r2, #20
 8003a98:	7819      	ldrb	r1, [r3, #0]
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f002 fcec 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 8003aa0:	f010 0f18 	tst.w	r0, #24
 8003aa4:	d109      	bne.n	8003aba <rdc200a_move_text_osd+0xea>
		else if (dimension_reg_val & TAB3D_EN) {
 8003aa6:	0682      	lsls	r2, r0, #26
 8003aa8:	d5aa      	bpl.n	8003a00 <rdc200a_move_text_osd+0x30>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003aaa:	9b03      	ldr	r3, [sp, #12]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8003aac:	f8dd a008 	ldr.w	sl, [sp, #8]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003ab0:	ea4f 0b53 	mov.w	fp, r3, lsr #1
 8003ab4:	f8cd b00c 	str.w	fp, [sp, #12]
 8003ab8:	e7a4      	b.n	8003a04 <rdc200a_move_text_osd+0x34>
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8003aba:	9b02      	ldr	r3, [sp, #8]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003abc:	f8dd b00c 	ldr.w	fp, [sp, #12]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8003ac0:	ea4f 0a53 	mov.w	sl, r3, lsr #1
 8003ac4:	e79e      	b.n	8003a04 <rdc200a_move_text_osd+0x34>
		dimension_reg_val = RDC_REG_GET(0x0014);
 8003ac6:	7831      	ldrb	r1, [r6, #0]
 8003ac8:	2214      	movs	r2, #20
 8003aca:	2000      	movs	r0, #0
 8003acc:	f002 fcd4 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) { // Side By Side
 8003ad0:	f010 0f18 	tst.w	r0, #24
 8003ad4:	d023      	beq.n	8003b1e <rdc200a_move_text_osd+0x14e>
			font_3d_pos_x = font_pos_x + output_h_size; // 1 pixel unit
 8003ad6:	eb07 030a 	add.w	r3, r7, sl
 8003ada:	9300      	str	r3, [sp, #0]
		RDC_REG_SET(reg_addr, (U8_T)(font_3d_pos_x >> 8));
 8003adc:	9f00      	ldr	r7, [sp, #0]
 8003ade:	7831      	ldrb	r1, [r6, #0]
 8003ae0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003ae4:	f504 725a 	add.w	r2, r4, #872	; 0x368
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f002 fcd9 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr+1, font_3d_pos_x & 0xFF);
 8003aee:	7831      	ldrb	r1, [r6, #0]
 8003af0:	b2fb      	uxtb	r3, r7
 8003af2:	f204 3269 	addw	r2, r4, #873	; 0x369
 8003af6:	2000      	movs	r0, #0
 8003af8:	f002 fcd2 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr, (U8_T)(font_3d_pos_y >> 8));
 8003afc:	9f01      	ldr	r7, [sp, #4]
 8003afe:	7831      	ldrb	r1, [r6, #0]
 8003b00:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003b04:	f204 326a 	addw	r2, r4, #874	; 0x36a
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f002 fcc9 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr+1, font_3d_pos_y & 0xFF);
 8003b0e:	7831      	ldrb	r1, [r6, #0]
 8003b10:	b2fb      	uxtb	r3, r7
 8003b12:	f204 326b 	addw	r2, r4, #875	; 0x36b
 8003b16:	2000      	movs	r0, #0
 8003b18:	f002 fcc2 	bl	80064a0 <rtiVC_WriteDevice16>
 8003b1c:	e7a7      	b.n	8003a6e <rdc200a_move_text_osd+0x9e>
		else if (dimension_reg_val & TAB3D_EN) {
 8003b1e:	0683      	lsls	r3, r0, #26
			font_3d_pos_y = font_pos_y + output_v_size; // 1 pixel unit
 8003b20:	bf44      	itt	mi
 8003b22:	eb08 030b 	addmi.w	r3, r8, fp
 8003b26:	9301      	strmi	r3, [sp, #4]
 8003b28:	e7d8      	b.n	8003adc <rdc200a_move_text_osd+0x10c>
 8003b2a:	bf00      	nop
 8003b2c:	0801649c 	.word	0x0801649c
 8003b30:	2000001d 	.word	0x2000001d

08003b34 <rdc200a_change_input_display_interface>:
{
 8003b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	reg_0x10 = RDC_REG_GET(0x10) & 0x01;
 8003b38:	4d7d      	ldr	r5, [pc, #500]	; (8003d30 <rdc200a_change_input_display_interface+0x1fc>)
	U8_T mrx = rdc200a_mrx_config;
 8003b3a:	4f7e      	ldr	r7, [pc, #504]	; (8003d34 <rdc200a_change_input_display_interface+0x200>)
{
 8003b3c:	4604      	mov	r4, r0
	reg_0x10 = RDC_REG_GET(0x10) & 0x01;
 8003b3e:	2210      	movs	r2, #16
{
 8003b40:	4688      	mov	r8, r1
	reg_0x10 = RDC_REG_GET(0x10) & 0x01;
 8003b42:	2000      	movs	r0, #0
 8003b44:	7829      	ldrb	r1, [r5, #0]
	U8_T mrx = rdc200a_mrx_config;
 8003b46:	f897 a000 	ldrb.w	sl, [r7]
	reg_0x10 = RDC_REG_GET(0x10) & 0x01;
 8003b4a:	f002 fc95 	bl	8006478 <rtiVC_ReadDevice16>
	reg_0x11 = RDC_REG_GET(0x11);
 8003b4e:	7829      	ldrb	r1, [r5, #0]
	reg_0x10 = RDC_REG_GET(0x10) & 0x01;
 8003b50:	f000 0601 	and.w	r6, r0, #1
	reg_0x11 = RDC_REG_GET(0x11);
 8003b54:	2211      	movs	r2, #17
 8003b56:	2000      	movs	r0, #0
 8003b58:	f002 fc8e 	bl	8006478 <rtiVC_ReadDevice16>
	switch (dif) {
 8003b5c:	2c02      	cmp	r4, #2
 8003b5e:	f240 808c 	bls.w	8003c7a <rdc200a_change_input_display_interface+0x146>
 8003b62:	2c03      	cmp	r4, #3
 8003b64:	f040 8084 	bne.w	8003c70 <rdc200a_change_input_display_interface+0x13c>
        RDC_REG_SET(0x0210, 0x00); //Set input config to default
 8003b68:	2300      	movs	r3, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	7829      	ldrb	r1, [r5, #0]
 8003b6e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003b72:	f002 fc95 	bl	80064a0 <rtiVC_WriteDevice16>
        RDC_REG_MASK_SET(0x0290, 0x07, 2); // RX_MON_DETECT_SEL<2:0>
 8003b76:	2202      	movs	r2, #2
 8003b78:	2107      	movs	r1, #7
 8003b7a:	f44f 7024 	mov.w	r0, #656	; 0x290
 8003b7e:	f003 fae3 	bl	8007148 <RDC_REG_MASK_SET>
        RDC_REG_SET(0x0241,    0x00);
 8003b82:	2300      	movs	r3, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	7829      	ldrb	r1, [r5, #0]
 8003b88:	f240 2241 	movw	r2, #577	; 0x241
 8003b8c:	f002 fc88 	bl	80064a0 <rtiVC_WriteDevice16>
        RDC_REG_SET(0x0010    ,0x00);
 8003b90:	2300      	movs	r3, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	7829      	ldrb	r1, [r5, #0]
 8003b96:	2210      	movs	r2, #16
 8003b98:	f002 fc82 	bl	80064a0 <rtiVC_WriteDevice16>
        RDC_REG_SET(0x0012    ,0x10);
 8003b9c:	7829      	ldrb	r1, [r5, #0]
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	2212      	movs	r2, #18
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f002 fc7c 	bl	80064a0 <rtiVC_WriteDevice16>
        RDC_REG_SET(0x0013    ,0x7F);
 8003ba8:	7829      	ldrb	r1, [r5, #0]
 8003baa:	237f      	movs	r3, #127	; 0x7f
 8003bac:	2213      	movs	r2, #19
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f002 fc76 	bl	80064a0 <rtiVC_WriteDevice16>
 8003bb4:	2432      	movs	r4, #50	; 0x32
 8003bb6:	e005      	b.n	8003bc4 <rdc200a_change_input_display_interface+0x90>
		VC_U_DELAY(1);
 8003bb8:	f002 fbe8 	bl	800638c <rtiVC_DelayUs>
	} while (--lock_timeout);
 8003bbc:	1e63      	subs	r3, r4, #1
 8003bbe:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8003bc2:	d009      	beq.n	8003bd8 <rdc200a_change_input_display_interface+0xa4>
		reg_1A = RDC_REG_GET(0x001A); // monitoring_basic[4:2]
 8003bc4:	7829      	ldrb	r1, [r5, #0]
 8003bc6:	221a      	movs	r2, #26
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f002 fc55 	bl	8006478 <rtiVC_ReadDevice16>
 8003bce:	4603      	mov	r3, r0
		if (reg_1A & lock_mask)
 8003bd0:	075b      	lsls	r3, r3, #29
		VC_U_DELAY(1);
 8003bd2:	f04f 0001 	mov.w	r0, #1
		if (reg_1A & lock_mask)
 8003bd6:	d5ef      	bpl.n	8003bb8 <rdc200a_change_input_display_interface+0x84>
        RDC_REG_SET(0x0241,    0x10);
 8003bd8:	7829      	ldrb	r1, [r5, #0]
 8003bda:	2310      	movs	r3, #16
 8003bdc:	f240 2241 	movw	r2, #577	; 0x241
 8003be0:	2000      	movs	r0, #0
 8003be2:	f002 fc5d 	bl	80064a0 <rtiVC_WriteDevice16>
        VC_M_DELAY(1);
 8003be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bea:	f002 fbcf 	bl	800638c <rtiVC_DelayUs>
        RDC_REG_SET(0x0012,    0x11);
 8003bee:	2311      	movs	r3, #17
 8003bf0:	7829      	ldrb	r1, [r5, #0]
 8003bf2:	2212      	movs	r2, #18
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f002 fc53 	bl	80064a0 <rtiVC_WriteDevice16>
        RDC_REG_MASK_SET(0x0240, 0x03, cfg->mipi.num_lane);
 8003bfa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003bfe:	2103      	movs	r1, #3
 8003c00:	f44f 7010 	mov.w	r0, #576	; 0x240
 8003c04:	f003 faa0 	bl	8007148 <RDC_REG_MASK_SET>
        RDC_REG_MASK_SET(0x0253, 0x03, cfg->mipi.num_lane);
 8003c08:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003c0c:	2103      	movs	r1, #3
 8003c0e:	f240 2053 	movw	r0, #595	; 0x253
 8003c12:	f003 fa99 	bl	8007148 <RDC_REG_MASK_SET>
						| (cfg->mipi.cont_clk << 2)));
 8003c16:	f898 2003 	ldrb.w	r2, [r8, #3]
						((cfg->mipi.auto_pd << 3)
 8003c1a:	f898 3002 	ldrb.w	r3, [r8, #2]
						| (cfg->mipi.cont_clk << 2)));
 8003c1e:	0092      	lsls	r2, r2, #2
 8003c20:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
		RDC_REG_MASK_SET(0x0244, 0xC,
 8003c24:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8003c28:	210c      	movs	r1, #12
 8003c2a:	f44f 7011 	mov.w	r0, #580	; 0x244
 8003c2e:	f003 fa8b 	bl	8007148 <RDC_REG_MASK_SET>
        RDC_REG_SET(0x0012, 0x1F);
 8003c32:	7829      	ldrb	r1, [r5, #0]
 8003c34:	231f      	movs	r3, #31
 8003c36:	2212      	movs	r2, #18
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f002 fc31 	bl	80064a0 <rtiVC_WriteDevice16>
        RDC_REG_SET(0x0013, 0xFF);
 8003c3e:	23ff      	movs	r3, #255	; 0xff
 8003c40:	7829      	ldrb	r1, [r5, #0]
 8003c42:	2213      	movs	r2, #19
 8003c44:	2000      	movs	r0, #0
 8003c46:	f002 fc2b 	bl	80064a0 <rtiVC_WriteDevice16>
        RDC_REG_MASK_SET(0x0200, 0x7, mrx);
 8003c4a:	2107      	movs	r1, #7
 8003c4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c50:	2202      	movs	r2, #2
 8003c52:	f003 fa79 	bl	8007148 <RDC_REG_MASK_SET>
        RDC_REG_MASK_SET(0x0010, 0x01, reg_0x10);
 8003c56:	4632      	mov	r2, r6
 8003c58:	2101      	movs	r1, #1
 8003c5a:	2010      	movs	r0, #16
 8003c5c:	f003 fa74 	bl	8007148 <RDC_REG_MASK_SET>
        RDC_REG_SET(0x0011, reg_0x11);
 8003c60:	7829      	ldrb	r1, [r5, #0]
 8003c62:	23c0      	movs	r3, #192	; 0xc0
 8003c64:	2211      	movs	r2, #17
 8003c66:	2000      	movs	r0, #0
 8003c68:	f002 fc1a 	bl	80064a0 <rtiVC_WriteDevice16>
		mrx = 2;
 8003c6c:	f04f 0a02 	mov.w	sl, #2
	rdc200a_mrx_config = mrx;
 8003c70:	f887 a000 	strb.w	sl, [r7]
}
 8003c74:	2000      	movs	r0, #0
 8003c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (dif == VC_INPUT_DISPLAY_IF_LVDS_0) {
 8003c7a:	4681      	mov	r9, r0
 8003c7c:	2c00      	cmp	r4, #0
 8003c7e:	d048      	beq.n	8003d12 <rdc200a_change_input_display_interface+0x1de>
		else if (dif == VC_INPUT_DISPLAY_IF_LVDS_1) {
 8003c80:	2c01      	cmp	r4, #1
 8003c82:	d04c      	beq.n	8003d1e <rdc200a_change_input_display_interface+0x1ea>
			if (cfg->lvds.dual_mode_type == VC_LVDS_DUAL_MODE_PORT0_EVEN)
 8003c84:	f898 3000 	ldrb.w	r3, [r8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2440      	moveq	r4, #64	; 0x40
 8003c8e:	2460      	movne	r4, #96	; 0x60
 8003c90:	f04f 0a00 	mov.w	sl, #0
        RDC_REG_MASK_SET(0x0290, 0x07, 0); // RX_MON_DETECT_SEL<2:0>
 8003c94:	2200      	movs	r2, #0
 8003c96:	2107      	movs	r1, #7
 8003c98:	f44f 7024 	mov.w	r0, #656	; 0x290
 8003c9c:	f003 fa54 	bl	8007148 <RDC_REG_MASK_SET>
		RDC_REG_SET(0x0210, ((U8_T)((U16_T)(lvds_pclk&0x01) <<7))
 8003ca0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003ca4:	7829      	ldrb	r1, [r5, #0]
 8003ca6:	ea44 040a 	orr.w	r4, r4, sl
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	4323      	orrs	r3, r4
 8003cb0:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8003cb4:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f002 fbf1 	bl	80064a0 <rtiVC_WriteDevice16>
 8003cbe:	2432      	movs	r4, #50	; 0x32
 8003cc0:	e005      	b.n	8003cce <rdc200a_change_input_display_interface+0x19a>
		VC_U_DELAY(1);
 8003cc2:	f002 fb63 	bl	800638c <rtiVC_DelayUs>
	} while (--lock_timeout);
 8003cc6:	1e61      	subs	r1, r4, #1
 8003cc8:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
 8003ccc:	d009      	beq.n	8003ce2 <rdc200a_change_input_display_interface+0x1ae>
		reg_1A = RDC_REG_GET(0x001A); // monitoring_basic[4:2]
 8003cce:	221a      	movs	r2, #26
 8003cd0:	7829      	ldrb	r1, [r5, #0]
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	f002 fbd0 	bl	8006478 <rtiVC_ReadDevice16>
 8003cd8:	4602      	mov	r2, r0
		if (reg_1A & lock_mask)
 8003cda:	0752      	lsls	r2, r2, #29
		VC_U_DELAY(1);
 8003cdc:	f04f 0001 	mov.w	r0, #1
		if (reg_1A & lock_mask)
 8003ce0:	d5ef      	bpl.n	8003cc2 <rdc200a_change_input_display_interface+0x18e>
        RDC_REG_MASK_SET(0x0200, 0x7, mrx);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2107      	movs	r1, #7
 8003ce6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003cea:	f003 fa2d 	bl	8007148 <RDC_REG_MASK_SET>
        RDC_REG_MASK_SET(0x0010, 0x01, reg_0x10);
 8003cee:	4632      	mov	r2, r6
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	2010      	movs	r0, #16
 8003cf4:	f003 fa28 	bl	8007148 <RDC_REG_MASK_SET>
		mrx = 0;
 8003cf8:	f04f 0a00 	mov.w	sl, #0
        RDC_REG_SET(0x0011, reg_0x11);
 8003cfc:	7829      	ldrb	r1, [r5, #0]
 8003cfe:	464b      	mov	r3, r9
 8003d00:	2211      	movs	r2, #17
 8003d02:	2000      	movs	r0, #0
 8003d04:	f002 fbcc 	bl	80064a0 <rtiVC_WriteDevice16>
	rdc200a_mrx_config = mrx;
 8003d08:	f887 a000 	strb.w	sl, [r7]
}
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			reg_0x11 |= 0x80; // power down LVDS port 1
 8003d12:	f060 097f 	orn	r9, r0, #127	; 0x7f
 8003d16:	fa5f f989 	uxtb.w	r9, r9
			lvds_port = 0;
 8003d1a:	46a2      	mov	sl, r4
 8003d1c:	e7ba      	b.n	8003c94 <rdc200a_change_input_display_interface+0x160>
			reg_0x11 |= 0x40; // power down LVDS port 0
 8003d1e:	f040 0940 	orr.w	r9, r0, #64	; 0x40
 8003d22:	fa5f f989 	uxtb.w	r9, r9
			lvds_port = 1;
 8003d26:	2420      	movs	r4, #32
 8003d28:	f06f 0a7f 	mvn.w	sl, #127	; 0x7f
 8003d2c:	e7b2      	b.n	8003c94 <rdc200a_change_input_display_interface+0x160>
 8003d2e:	bf00      	nop
 8003d30:	2000001d 	.word	0x2000001d
 8003d34:	200005a4 	.word	0x200005a4

08003d38 <rdc200a_draw_bitmap_osd>:
{
 8003d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3c:	ed2d 8b04 	vpush	{d8-d9}
 8003d40:	b087      	sub	sp, #28
 8003d42:	461d      	mov	r5, r3
 8003d44:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
	U8_T drawer_id = cb->drawer_id;
 8003d48:	7dc4      	ldrb	r4, [r0, #23]
{
 8003d4a:	9303      	str	r3, [sp, #12]
 8003d4c:	4689      	mov	r9, r1
 8003d4e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8003d52:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 8003d56:	9300      	str	r3, [sp, #0]
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 8003d58:	a905      	add	r1, sp, #20
 8003d5a:	a804      	add	r0, sp, #16
{
 8003d5c:	4693      	mov	fp, r2
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 8003d5e:	f7fe f8ab 	bl	8001eb8 <rdc200a_get_output_resolution>
	bmp_h_size = rdc200a_bmp_osd_mag_size[mag].h_size;
 8003d62:	4b80      	ldr	r3, [pc, #512]	; (8003f64 <rdc200a_draw_bitmap_osd+0x22c>)
	bmp_v_size = rdc200a_bmp_osd_mag_size[mag].v_size;
 8003d64:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
	bmp_h_size = rdc200a_bmp_osd_mag_size[mag].h_size;
 8003d68:	f853 6037 	ldr.w	r6, [r3, r7, lsl #3]
	if (d == VC_OSD_DIMENSTION_3D) {
 8003d6c:	9b00      	ldr	r3, [sp, #0]
	bmp_v_size = rdc200a_bmp_osd_mag_size[mag].v_size;
 8003d6e:	f8d2 8004 	ldr.w	r8, [r2, #4]
	if (d == VC_OSD_DIMENSTION_3D) {
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	f000 80d2 	beq.w	8003f1c <rdc200a_draw_bitmap_osd+0x1e4>
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8003d78:	9b04      	ldr	r3, [sp, #16]
 8003d7a:	9301      	str	r3, [sp, #4]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003d7c:	9b05      	ldr	r3, [sp, #20]
 8003d7e:	9302      	str	r3, [sp, #8]
	if (((x+bmp_h_size) < output_h_size) && ((y+bmp_v_size) < output_v_size))
 8003d80:	9b01      	ldr	r3, [sp, #4]
 8003d82:	444e      	add	r6, r9
 8003d84:	429e      	cmp	r6, r3
 8003d86:	d26a      	bcs.n	8003e5e <rdc200a_draw_bitmap_osd+0x126>
 8003d88:	9b02      	ldr	r3, [sp, #8]
 8003d8a:	44d8      	add	r8, fp
 8003d8c:	4598      	cmp	r8, r3
 8003d8e:	d266      	bcs.n	8003e5e <rdc200a_draw_bitmap_osd+0x126>
	bmpdr_en = 1 << drawer_id;
 8003d90:	2301      	movs	r3, #1
 8003d92:	40a3      	lsls	r3, r4
 8003d94:	fa5f f883 	uxtb.w	r8, r3
	bmpdr_en_3d = (1 << drawer_id) << 4;
 8003d98:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8003d9c:	fa5f fa83 	uxtb.w	sl, r3
	RDC_REG_MASK_SET(0x346, bmpdr_en|bmpdr_en_3d, 0);
 8003da0:	2200      	movs	r2, #0
 8003da2:	ea48 010a 	orr.w	r1, r8, sl
 8003da6:	f240 3046 	movw	r0, #838	; 0x346
 8003daa:	f003 f9cd 	bl	8007148 <RDC_REG_MASK_SET>
								rdc200a_bmp_drawer_sram_id[drawer_id]);
 8003dae:	4b6e      	ldr	r3, [pc, #440]	; (8003f68 <rdc200a_draw_bitmap_osd+0x230>)
	rdc200a_update_lut_from_flash(bmp_addr, FLASH_ITEM_ACTUAL_SIZE_BMP,
 8003db0:	4628      	mov	r0, r5
	RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8003db2:	4d6e      	ldr	r5, [pc, #440]	; (8003f6c <rdc200a_draw_bitmap_osd+0x234>)
	rdc200a_update_lut_from_flash(bmp_addr, FLASH_ITEM_ACTUAL_SIZE_BMP,
 8003db4:	5d1a      	ldrb	r2, [r3, r4]
	reg_addr_msb = RDC200A_2D_BMP_POS_X_MSB_REG_ADDR(drawer_id);
 8003db6:	00a6      	lsls	r6, r4, #2
	rdc200a_update_lut_from_flash(bmp_addr, FLASH_ITEM_ACTUAL_SIZE_BMP,
 8003db8:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8003dbc:	f7fe ffb8 	bl	8002d30 <rdc200a_update_lut_from_flash>
	RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8003dc0:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8003dc4:	7829      	ldrb	r1, [r5, #0]
 8003dc6:	f206 3226 	addw	r2, r6, #806	; 0x326
 8003dca:	2000      	movs	r0, #0
 8003dcc:	ee08 3a10 	vmov	s16, r3
 8003dd0:	f002 fb66 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr_msb+1, bmp_pos_x & 0xFF);
 8003dd4:	fa5f f389 	uxtb.w	r3, r9
 8003dd8:	7829      	ldrb	r1, [r5, #0]
 8003dda:	f206 3227 	addw	r2, r6, #807	; 0x327
 8003dde:	2000      	movs	r0, #0
 8003de0:	ee08 3a90 	vmov	s17, r3
 8003de4:	f002 fb5c 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 8003de8:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8003dec:	7829      	ldrb	r1, [r5, #0]
 8003dee:	f506 724a 	add.w	r2, r6, #808	; 0x328
 8003df2:	2000      	movs	r0, #0
 8003df4:	ee09 3a10 	vmov	s18, r3
 8003df8:	f002 fb52 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr_msb+1, bmp_pos_y & 0xFF);
 8003dfc:	fa5f f38b 	uxtb.w	r3, fp
 8003e00:	7829      	ldrb	r1, [r5, #0]
 8003e02:	f206 3229 	addw	r2, r6, #809	; 0x329
 8003e06:	2000      	movs	r0, #0
 8003e08:	ee09 3a90 	vmov	s19, r3
 8003e0c:	f002 fb48 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(RDC200A_BMP_MAG_REG_ADDR(drawer_id), (mag << 2) | (mag << 6));
 8003e10:	01bb      	lsls	r3, r7, #6
 8003e12:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
	reg_addr_msb = RDC200A_2D_BMP_POS_X_MSB_REG_ADDR(drawer_id);
 8003e16:	b2a2      	uxth	r2, r4
	RDC_REG_SET(RDC200A_BMP_MAG_REG_ADDR(drawer_id), (mag << 2) | (mag << 6));
 8003e18:	7829      	ldrb	r1, [r5, #0]
 8003e1a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8003e1e:	f502 7248 	add.w	r2, r2, #800	; 0x320
 8003e22:	2000      	movs	r0, #0
 8003e24:	f002 fb3c 	bl	80064a0 <rtiVC_WriteDevice16>
	switch (drawer_id) {
 8003e28:	2c01      	cmp	r4, #1
 8003e2a:	d06d      	beq.n	8003f08 <rdc200a_draw_bitmap_osd+0x1d0>
 8003e2c:	2c02      	cmp	r4, #2
 8003e2e:	d063      	beq.n	8003ef8 <rdc200a_draw_bitmap_osd+0x1c0>
 8003e30:	2c00      	cmp	r4, #0
 8003e32:	d05a      	beq.n	8003eea <rdc200a_draw_bitmap_osd+0x1b2>
	RDC_REG_MASK_SET(0x346, bmpdr_en, bmpdr_en);
 8003e34:	4642      	mov	r2, r8
 8003e36:	4641      	mov	r1, r8
 8003e38:	f240 3046 	movw	r0, #838	; 0x346
 8003e3c:	f003 f984 	bl	8007148 <RDC_REG_MASK_SET>
	if (d == VC_OSD_DIMENSTION_3D) {
 8003e40:	9b00      	ldr	r3, [sp, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d012      	beq.n	8003e6c <rdc200a_draw_bitmap_osd+0x134>
		RDC_REG_MASK_SET(0x346, bmpdr_en_3d, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	4651      	mov	r1, sl
 8003e4a:	f240 3046 	movw	r0, #838	; 0x346
 8003e4e:	f003 f97b 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 8003e52:	2000      	movs	r0, #0
}
 8003e54:	b007      	add	sp, #28
 8003e56:	ecbd 8b04 	vpop	{d8-d9}
 8003e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 8003e5e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003e62:	b007      	add	sp, #28
 8003e64:	ecbd 8b04 	vpop	{d8-d9}
 8003e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dimension_reg_val = RDC_REG_GET(0x0014);
 8003e6c:	7829      	ldrb	r1, [r5, #0]
 8003e6e:	2214      	movs	r2, #20
 8003e70:	2000      	movs	r0, #0
 8003e72:	f002 fb01 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 8003e76:	f010 0f18 	tst.w	r0, #24
 8003e7a:	d162      	bne.n	8003f42 <rdc200a_draw_bitmap_osd+0x20a>
		else if (dimension_reg_val & TAB3D_EN) {
 8003e7c:	0683      	lsls	r3, r0, #26
 8003e7e:	d508      	bpl.n	8003e92 <rdc200a_draw_bitmap_osd+0x15a>
			bmp_pos_y += output_v_size; // 1 pixel unit
 8003e80:	9b02      	ldr	r3, [sp, #8]
 8003e82:	445b      	add	r3, fp
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 8003e84:	f3c3 2207 	ubfx	r2, r3, #8, #8
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_y & 0xFF);
 8003e88:	b2db      	uxtb	r3, r3
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 8003e8a:	ee09 2a10 	vmov	s18, r2
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_y & 0xFF);
 8003e8e:	ee09 3a90 	vmov	s19, r3
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8003e92:	ee18 3a10 	vmov	r3, s16
 8003e96:	7829      	ldrb	r1, [r5, #0]
 8003e98:	f206 3236 	addw	r2, r6, #822	; 0x336
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f002 faff 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_x & 0xFF);
 8003ea2:	ee18 3a90 	vmov	r3, s17
 8003ea6:	7829      	ldrb	r1, [r5, #0]
 8003ea8:	f206 3237 	addw	r2, r6, #823	; 0x337
 8003eac:	2000      	movs	r0, #0
 8003eae:	f002 faf7 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 8003eb2:	ee19 3a10 	vmov	r3, s18
 8003eb6:	7829      	ldrb	r1, [r5, #0]
 8003eb8:	f506 724e 	add.w	r2, r6, #824	; 0x338
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f002 faef 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_y & 0xFF);
 8003ec2:	ee19 3a90 	vmov	r3, s19
 8003ec6:	7829      	ldrb	r1, [r5, #0]
 8003ec8:	f206 3239 	addw	r2, r6, #825	; 0x339
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f002 fae7 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_MASK_SET(0x346, bmpdr_en_3d, bmpdr_en_3d);
 8003ed2:	4652      	mov	r2, sl
 8003ed4:	4651      	mov	r1, sl
 8003ed6:	f240 3046 	movw	r0, #838	; 0x346
 8003eda:	f003 f935 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 8003ede:	2000      	movs	r0, #0
}
 8003ee0:	b007      	add	sp, #28
 8003ee2:	ecbd 8b04 	vpop	{d8-d9}
 8003ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		RDC_REG_MASK_SET(0x0324, 0x0F, (U8_T)alpha);
 8003eea:	9a03      	ldr	r2, [sp, #12]
 8003eec:	210f      	movs	r1, #15
 8003eee:	f44f 7049 	mov.w	r0, #804	; 0x324
 8003ef2:	f003 f929 	bl	8007148 <RDC_REG_MASK_SET>
		break;
 8003ef6:	e79d      	b.n	8003e34 <rdc200a_draw_bitmap_osd+0xfc>
		RDC_REG_SET(0x0325, (U8_T)alpha);
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	7829      	ldrb	r1, [r5, #0]
 8003efc:	f240 3225 	movw	r2, #805	; 0x325
 8003f00:	2000      	movs	r0, #0
 8003f02:	f002 facd 	bl	80064a0 <rtiVC_WriteDevice16>
		break;
 8003f06:	e795      	b.n	8003e34 <rdc200a_draw_bitmap_osd+0xfc>
		RDC_REG_MASK_SET(0x0324, 0xF0, (U8_T)alpha<<4);
 8003f08:	9b03      	ldr	r3, [sp, #12]
 8003f0a:	011a      	lsls	r2, r3, #4
 8003f0c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003f10:	21f0      	movs	r1, #240	; 0xf0
 8003f12:	f44f 7049 	mov.w	r0, #804	; 0x324
 8003f16:	f003 f917 	bl	8007148 <RDC_REG_MASK_SET>
		break;
 8003f1a:	e78b      	b.n	8003e34 <rdc200a_draw_bitmap_osd+0xfc>
		dimension_reg_val = RDC_REG_GET(0x0014);
 8003f1c:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <rdc200a_draw_bitmap_osd+0x234>)
 8003f1e:	2214      	movs	r2, #20
 8003f20:	7819      	ldrb	r1, [r3, #0]
 8003f22:	2000      	movs	r0, #0
 8003f24:	f002 faa8 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 8003f28:	f010 0f18 	tst.w	r0, #24
 8003f2c:	d113      	bne.n	8003f56 <rdc200a_draw_bitmap_osd+0x21e>
		else if (dimension_reg_val & TAB3D_EN) {
 8003f2e:	0682      	lsls	r2, r0, #26
 8003f30:	f57f af22 	bpl.w	8003d78 <rdc200a_draw_bitmap_osd+0x40>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003f34:	9b05      	ldr	r3, [sp, #20]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	9302      	str	r3, [sp, #8]
 8003f3a:	9305      	str	r3, [sp, #20]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8003f3c:	9b04      	ldr	r3, [sp, #16]
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	e71e      	b.n	8003d80 <rdc200a_draw_bitmap_osd+0x48>
			bmp_pos_x += output_h_size; // 1 pixel unit
 8003f42:	9b01      	ldr	r3, [sp, #4]
 8003f44:	444b      	add	r3, r9
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8003f46:	f3c3 2207 	ubfx	r2, r3, #8, #8
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_x & 0xFF);
 8003f4a:	b2db      	uxtb	r3, r3
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8003f4c:	ee08 2a10 	vmov	s16, r2
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_x & 0xFF);
 8003f50:	ee08 3a90 	vmov	s17, r3
 8003f54:	e79d      	b.n	8003e92 <rdc200a_draw_bitmap_osd+0x15a>
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8003f56:	9b04      	ldr	r3, [sp, #16]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	9301      	str	r3, [sp, #4]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003f5c:	9b05      	ldr	r3, [sp, #20]
 8003f5e:	9302      	str	r3, [sp, #8]
 8003f60:	e70e      	b.n	8003d80 <rdc200a_draw_bitmap_osd+0x48>
 8003f62:	bf00      	nop
 8003f64:	08016478 	.word	0x08016478
 8003f68:	08016474 	.word	0x08016474
 8003f6c:	2000001d 	.word	0x2000001d

08003f70 <rdc200a_move_bitmap_osd>:
{
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	ed2d 8b02 	vpush	{d8}
 8003f78:	4605      	mov	r5, r0
 8003f7a:	b085      	sub	sp, #20
	if (!rdc200a_check_bitmap_position(&output_h_size, &output_v_size,
 8003f7c:	7d06      	ldrb	r6, [r0, #20]
	U8_T drawer_id = cb->drawer_id;
 8003f7e:	7dc4      	ldrb	r4, [r0, #23]
	if (!rdc200a_check_bitmap_position(&output_h_size, &output_v_size,
 8003f80:	f895 9016 	ldrb.w	r9, [r5, #22]
{
 8003f84:	468b      	mov	fp, r1
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 8003f86:	a802      	add	r0, sp, #8
 8003f88:	a903      	add	r1, sp, #12
{
 8003f8a:	4692      	mov	sl, r2
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 8003f8c:	f7fd ff94 	bl	8001eb8 <rdc200a_get_output_resolution>
	bmp_h_size = rdc200a_bmp_osd_mag_size[mag].h_size;
 8003f90:	4b73      	ldr	r3, [pc, #460]	; (8004160 <rdc200a_move_bitmap_osd+0x1f0>)
	bmp_v_size = rdc200a_bmp_osd_mag_size[mag].v_size;
 8003f92:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
	if (d == VC_OSD_DIMENSTION_3D) {
 8003f96:	f1b9 0f01 	cmp.w	r9, #1
	bmp_h_size = rdc200a_bmp_osd_mag_size[mag].h_size;
 8003f9a:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
	bmp_v_size = rdc200a_bmp_osd_mag_size[mag].v_size;
 8003f9e:	f8d2 8004 	ldr.w	r8, [r2, #4]
	if (d == VC_OSD_DIMENSTION_3D) {
 8003fa2:	f000 808a 	beq.w	80040ba <rdc200a_move_bitmap_osd+0x14a>
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8003fa6:	9b02      	ldr	r3, [sp, #8]
 8003fa8:	9300      	str	r3, [sp, #0]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8003faa:	9b03      	ldr	r3, [sp, #12]
 8003fac:	9301      	str	r3, [sp, #4]
	if (((x+bmp_h_size) < output_h_size) && ((y+bmp_v_size) < output_v_size))
 8003fae:	9b00      	ldr	r3, [sp, #0]
 8003fb0:	445f      	add	r7, fp
 8003fb2:	42bb      	cmp	r3, r7
 8003fb4:	d940      	bls.n	8004038 <rdc200a_move_bitmap_osd+0xc8>
 8003fb6:	9b01      	ldr	r3, [sp, #4]
 8003fb8:	44d0      	add	r8, sl
 8003fba:	4598      	cmp	r8, r3
 8003fbc:	d23c      	bcs.n	8004038 <rdc200a_move_bitmap_osd+0xc8>
	switch (drawer_id) {
 8003fbe:	2c01      	cmp	r4, #1
 8003fc0:	d041      	beq.n	8004046 <rdc200a_move_bitmap_osd+0xd6>
 8003fc2:	2c02      	cmp	r4, #2
 8003fc4:	d070      	beq.n	80040a8 <rdc200a_move_bitmap_osd+0x138>
 8003fc6:	2c00      	cmp	r4, #0
 8003fc8:	d067      	beq.n	800409a <rdc200a_move_bitmap_osd+0x12a>
		break;
 8003fca:	4e66      	ldr	r6, [pc, #408]	; (8004164 <rdc200a_move_bitmap_osd+0x1f4>)
	RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8003fcc:	7831      	ldrb	r1, [r6, #0]
	reg_addr_msb = RDC200A_2D_BMP_POS_X_MSB_REG_ADDR(drawer_id);
 8003fce:	00a7      	lsls	r7, r4, #2
	RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8003fd0:	f3cb 2907 	ubfx	r9, fp, #8, #8
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	f207 3226 	addw	r2, r7, #806	; 0x326
 8003fda:	2000      	movs	r0, #0
	RDC_REG_SET(reg_addr_msb+1, bmp_pos_x & 0xFF);
 8003fdc:	fa5f f88b 	uxtb.w	r8, fp
	RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8003fe0:	f002 fa5e 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr_msb+1, bmp_pos_x & 0xFF);
 8003fe4:	7831      	ldrb	r1, [r6, #0]
 8003fe6:	4643      	mov	r3, r8
 8003fe8:	f207 3227 	addw	r2, r7, #807	; 0x327
 8003fec:	2000      	movs	r0, #0
 8003fee:	f002 fa57 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 8003ff2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8003ff6:	7831      	ldrb	r1, [r6, #0]
 8003ff8:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	ee08 3a10 	vmov	s16, r3
 8004002:	f002 fa4d 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr_msb+1, bmp_pos_y & 0xFF);
 8004006:	fa5f f38a 	uxtb.w	r3, sl
 800400a:	7831      	ldrb	r1, [r6, #0]
 800400c:	f207 3229 	addw	r2, r7, #809	; 0x329
 8004010:	2000      	movs	r0, #0
 8004012:	ee08 3a90 	vmov	s17, r3
 8004016:	f002 fa43 	bl	80064a0 <rtiVC_WriteDevice16>
	if (cb->d == VC_OSD_DIMENSTION_3D) {
 800401a:	7dab      	ldrb	r3, [r5, #22]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d065      	beq.n	80040ec <rdc200a_move_bitmap_osd+0x17c>
	switch (drawer_id) {
 8004020:	2c01      	cmp	r4, #1
	rdc200a_config_bitmap_osd_alpha_blending(drawer_id, cb->alpha);
 8004022:	7d6a      	ldrb	r2, [r5, #21]
	switch (drawer_id) {
 8004024:	d02f      	beq.n	8004086 <rdc200a_move_bitmap_osd+0x116>
 8004026:	2c02      	cmp	r4, #2
 8004028:	d020      	beq.n	800406c <rdc200a_move_bitmap_osd+0xfc>
 800402a:	b1a4      	cbz	r4, 8004056 <rdc200a_move_bitmap_osd+0xe6>
 800402c:	2000      	movs	r0, #0
}
 800402e:	b005      	add	sp, #20
 8004030:	ecbd 8b02 	vpop	{d8}
 8004034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
}
 800403c:	b005      	add	sp, #20
 800403e:	ecbd 8b02 	vpop	{d8}
 8004042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		RDC_REG_MASK_SET(0x0324, 0xF0, (U8_T)alpha<<4);
 8004046:	2200      	movs	r2, #0
 8004048:	21f0      	movs	r1, #240	; 0xf0
 800404a:	f44f 7049 	mov.w	r0, #804	; 0x324
 800404e:	f003 f87b 	bl	8007148 <RDC_REG_MASK_SET>
		break;
 8004052:	4e44      	ldr	r6, [pc, #272]	; (8004164 <rdc200a_move_bitmap_osd+0x1f4>)
 8004054:	e7ba      	b.n	8003fcc <rdc200a_move_bitmap_osd+0x5c>
		RDC_REG_MASK_SET(0x0324, 0x0F, (U8_T)alpha);
 8004056:	210f      	movs	r1, #15
 8004058:	f44f 7049 	mov.w	r0, #804	; 0x324
 800405c:	f003 f874 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 8004060:	4620      	mov	r0, r4
}
 8004062:	b005      	add	sp, #20
 8004064:	ecbd 8b02 	vpop	{d8}
 8004068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		RDC_REG_SET(0x0325, (U8_T)alpha);
 800406c:	4613      	mov	r3, r2
 800406e:	7831      	ldrb	r1, [r6, #0]
 8004070:	f240 3225 	movw	r2, #805	; 0x325
 8004074:	2000      	movs	r0, #0
 8004076:	f002 fa13 	bl	80064a0 <rtiVC_WriteDevice16>
	return 0;
 800407a:	2000      	movs	r0, #0
}
 800407c:	b005      	add	sp, #20
 800407e:	ecbd 8b02 	vpop	{d8}
 8004082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		RDC_REG_MASK_SET(0x0324, 0xF0, (U8_T)alpha<<4);
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	f44f 7049 	mov.w	r0, #804	; 0x324
 800408c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004090:	21f0      	movs	r1, #240	; 0xf0
 8004092:	f003 f859 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 8004096:	2000      	movs	r0, #0
		break;
 8004098:	e7c9      	b.n	800402e <rdc200a_move_bitmap_osd+0xbe>
		RDC_REG_MASK_SET(0x0324, 0x0F, (U8_T)alpha);
 800409a:	4622      	mov	r2, r4
 800409c:	210f      	movs	r1, #15
 800409e:	f44f 7049 	mov.w	r0, #804	; 0x324
 80040a2:	f003 f851 	bl	8007148 <RDC_REG_MASK_SET>
 80040a6:	e790      	b.n	8003fca <rdc200a_move_bitmap_osd+0x5a>
		RDC_REG_SET(0x0325, (U8_T)alpha);
 80040a8:	4e2e      	ldr	r6, [pc, #184]	; (8004164 <rdc200a_move_bitmap_osd+0x1f4>)
 80040aa:	2300      	movs	r3, #0
 80040ac:	7831      	ldrb	r1, [r6, #0]
 80040ae:	f240 3225 	movw	r2, #805	; 0x325
 80040b2:	4618      	mov	r0, r3
 80040b4:	f002 f9f4 	bl	80064a0 <rtiVC_WriteDevice16>
		break;
 80040b8:	e788      	b.n	8003fcc <rdc200a_move_bitmap_osd+0x5c>
		dimension_reg_val = RDC_REG_GET(0x0014);
 80040ba:	4e2a      	ldr	r6, [pc, #168]	; (8004164 <rdc200a_move_bitmap_osd+0x1f4>)
 80040bc:	2214      	movs	r2, #20
 80040be:	7831      	ldrb	r1, [r6, #0]
 80040c0:	2000      	movs	r0, #0
 80040c2:	f002 f9d9 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 80040c6:	f010 0f18 	tst.w	r0, #24
 80040ca:	d109      	bne.n	80040e0 <rdc200a_move_bitmap_osd+0x170>
		else if (dimension_reg_val & TAB3D_EN) {
 80040cc:	0682      	lsls	r2, r0, #26
 80040ce:	f57f af6a 	bpl.w	8003fa6 <rdc200a_move_bitmap_osd+0x36>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	9303      	str	r3, [sp, #12]
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 80040da:	9b02      	ldr	r3, [sp, #8]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	e766      	b.n	8003fae <rdc200a_move_bitmap_osd+0x3e>
 80040e0:	9b02      	ldr	r3, [sp, #8]
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	9300      	str	r3, [sp, #0]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 80040e6:	9b03      	ldr	r3, [sp, #12]
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	e760      	b.n	8003fae <rdc200a_move_bitmap_osd+0x3e>
		dimension_reg_val = RDC_REG_GET(0x0014);
 80040ec:	7831      	ldrb	r1, [r6, #0]
 80040ee:	2214      	movs	r2, #20
 80040f0:	2000      	movs	r0, #0
 80040f2:	f002 f9c1 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 80040f6:	f010 0f18 	tst.w	r0, #24
 80040fa:	d024      	beq.n	8004146 <rdc200a_move_bitmap_osd+0x1d6>
			bmp_pos_x += output_h_size; // 1 pixel unit
 80040fc:	9b00      	ldr	r3, [sp, #0]
 80040fe:	445b      	add	r3, fp
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8004100:	f3c3 2907 	ubfx	r9, r3, #8, #8
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_x & 0xFF);
 8004104:	fa5f f883 	uxtb.w	r8, r3
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_x >> 8));
 8004108:	7831      	ldrb	r1, [r6, #0]
 800410a:	464b      	mov	r3, r9
 800410c:	f207 3236 	addw	r2, r7, #822	; 0x336
 8004110:	2000      	movs	r0, #0
 8004112:	f002 f9c5 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_x & 0xFF);
 8004116:	7831      	ldrb	r1, [r6, #0]
 8004118:	4643      	mov	r3, r8
 800411a:	f207 3237 	addw	r2, r7, #823	; 0x337
 800411e:	2000      	movs	r0, #0
 8004120:	f002 f9be 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 8004124:	ee18 3a10 	vmov	r3, s16
 8004128:	7831      	ldrb	r1, [r6, #0]
 800412a:	f507 724e 	add.w	r2, r7, #824	; 0x338
 800412e:	2000      	movs	r0, #0
 8004130:	f002 f9b6 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_y & 0xFF);
 8004134:	ee18 3a90 	vmov	r3, s17
 8004138:	7831      	ldrb	r1, [r6, #0]
 800413a:	f207 3239 	addw	r2, r7, #825	; 0x339
 800413e:	2000      	movs	r0, #0
 8004140:	f002 f9ae 	bl	80064a0 <rtiVC_WriteDevice16>
 8004144:	e76c      	b.n	8004020 <rdc200a_move_bitmap_osd+0xb0>
		else if (dimension_reg_val & TAB3D_EN) {
 8004146:	0683      	lsls	r3, r0, #26
 8004148:	d5de      	bpl.n	8004108 <rdc200a_move_bitmap_osd+0x198>
			bmp_pos_y += output_v_size; // 1 pixel unit
 800414a:	9b01      	ldr	r3, [sp, #4]
 800414c:	4453      	add	r3, sl
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 800414e:	f3c3 2207 	ubfx	r2, r3, #8, #8
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_y & 0xFF);
 8004152:	b2db      	uxtb	r3, r3
		RDC_REG_SET(reg_addr_msb, (U8_T)(bmp_pos_y >> 8));
 8004154:	ee08 2a10 	vmov	s16, r2
		RDC_REG_SET(reg_addr_msb+1, bmp_pos_y & 0xFF);
 8004158:	ee08 3a90 	vmov	s17, r3
 800415c:	e7d4      	b.n	8004108 <rdc200a_move_bitmap_osd+0x198>
 800415e:	bf00      	nop
 8004160:	08016478 	.word	0x08016478
 8004164:	2000001d 	.word	0x2000001d

08004168 <rdc200a_draw_text_osd>:
{
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	b08d      	sub	sp, #52	; 0x34
	U8_T drawer_id = cb->drawer_id;
 800416e:	7f86      	ldrb	r6, [r0, #30]
	size_t i, num_char = strlen(string);
 8004170:	981d      	ldr	r0, [sp, #116]	; 0x74
{
 8004172:	9200      	str	r2, [sp, #0]
 8004174:	461c      	mov	r4, r3
 8004176:	4689      	mov	r9, r1
	size_t i, num_char = strlen(string);
 8004178:	f7fc f87a 	bl	8000270 <strlen>
{
 800417c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8004180:	9304      	str	r3, [sp, #16]
 8004182:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8004186:	9305      	str	r3, [sp, #20]
 8004188:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800418c:	9301      	str	r3, [sp, #4]
	if (num_char > RDC200A_MAX_NUM_FONT_CHAR_PER_BOX) {
 800418e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8004192:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8004196:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
 800419a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 800419e:	9302      	str	r3, [sp, #8]
	if (num_char > RDC200A_MAX_NUM_FONT_CHAR_PER_BOX) {
 80041a0:	f200 813c 	bhi.w	800441c <rdc200a_draw_text_osd+0x2b4>
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 80041a4:	4605      	mov	r5, r0
 80041a6:	a90b      	add	r1, sp, #44	; 0x2c
 80041a8:	a80a      	add	r0, sp, #40	; 0x28
 80041aa:	f7fd fe85 	bl	8001eb8 <rdc200a_get_output_resolution>
	font_h_size = rdc200a_font_osd_mag_size[mag].h_size;
 80041ae:	4ba0      	ldr	r3, [pc, #640]	; (8004430 <rdc200a_draw_text_osd+0x2c8>)
	font_v_size = rdc200a_font_osd_mag_size[mag].v_size;
 80041b0:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
	if (d == VC_OSD_DIMENSTION_3D) {
 80041b4:	f1ba 0f01 	cmp.w	sl, #1
	font_h_size = rdc200a_font_osd_mag_size[mag].h_size;
 80041b8:	f853 7038 	ldr.w	r7, [r3, r8, lsl #3]
	font_v_size = rdc200a_font_osd_mag_size[mag].v_size;
 80041bc:	f8d2 b004 	ldr.w	fp, [r2, #4]
	if (d == VC_OSD_DIMENSTION_3D) {
 80041c0:	f000 80db 	beq.w	800437a <rdc200a_draw_text_osd+0x212>
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 80041c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041c6:	9303      	str	r3, [sp, #12]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 80041c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041ca:	9307      	str	r3, [sp, #28]
	if (((x+font_h_size) < output_h_size) && ((y+font_v_size) < output_v_size))
 80041cc:	9b03      	ldr	r3, [sp, #12]
 80041ce:	444f      	add	r7, r9
 80041d0:	429f      	cmp	r7, r3
 80041d2:	f080 80b3 	bcs.w	800433c <rdc200a_draw_text_osd+0x1d4>
 80041d6:	9b00      	ldr	r3, [sp, #0]
 80041d8:	449b      	add	fp, r3
 80041da:	9b07      	ldr	r3, [sp, #28]
 80041dc:	459b      	cmp	fp, r3
 80041de:	f080 80ad 	bcs.w	800433c <rdc200a_draw_text_osd+0x1d4>
	if (font_color_idx > 15) {
 80041e2:	9b01      	ldr	r3, [sp, #4]
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	f200 811f 	bhi.w	8004428 <rdc200a_draw_text_osd+0x2c0>
	if (back_color_idx > 15) {
 80041ea:	9b02      	ldr	r3, [sp, #8]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	f200 8118 	bhi.w	8004422 <rdc200a_draw_text_osd+0x2ba>
	if (d == VC_OSD_DIMENSTION_3D) {
 80041f2:	f1ba 0f01 	cmp.w	sl, #1
 80041f6:	f000 80b9 	beq.w	800436c <rdc200a_draw_text_osd+0x204>
	ftdrw_en_mask = 1 << drawer_id;
 80041fa:	2701      	movs	r7, #1
 80041fc:	40b7      	lsls	r7, r6
 80041fe:	b2ff      	uxtb	r7, r7
	ftdrw_en_3d_mask = (1 << drawer_id) << 4;
 8004200:	013b      	lsls	r3, r7, #4
 8004202:	b2db      	uxtb	r3, r3
	if (font_addr != 0xFFFFFFFF)
 8004204:	1c61      	adds	r1, r4, #1
	ftdrw_en_3d_mask = (1 << drawer_id) << 4;
 8004206:	9306      	str	r3, [sp, #24]
	if (font_addr != 0xFFFFFFFF)
 8004208:	f040 80a4 	bne.w	8004354 <rdc200a_draw_text_osd+0x1ec>
	if (palette_addr != 0xFFFFFFFF)
 800420c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	f040 8099 	bne.w	8004346 <rdc200a_draw_text_osd+0x1de>
	RDC_REG_SET(reg_addr, ((U8_T)back_alpha<<4)|(U8_T)font_alpha);
 8004214:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8004218:	4c86      	ldr	r4, [pc, #536]	; (8004434 <rdc200a_draw_text_osd+0x2cc>)
	reg_addr = RDC200A_FONT_ALPHA_REG_ADDR(drawer_id);
 800421a:	ea4f 0b46 	mov.w	fp, r6, lsl #1
	RDC_REG_SET(reg_addr, ((U8_T)back_alpha<<4)|(U8_T)font_alpha);
 800421e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004222:	7821      	ldrb	r1, [r4, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f20b 3251 	addw	r2, fp, #849	; 0x351
 800422a:	2000      	movs	r0, #0
	reg_addr = RDC200A_FONT_ALPHA_REG_ADDR(drawer_id);
 800422c:	b2b6      	uxth	r6, r6
	RDC_REG_SET(reg_addr, (mag_y<<4)|mag_x);
 800422e:	ea48 1808 	orr.w	r8, r8, r8, lsl #4
	RDC_REG_SET(reg_addr, ((U8_T)back_alpha<<4)|(U8_T)font_alpha);
 8004232:	f002 f935 	bl	80064a0 <rtiVC_WriteDevice16>
	reg_addr = RDC200A_2D_FONT_POS_X_MSB_REG_ADDR(drawer_id); // MSB reg addr
 8004236:	00b6      	lsls	r6, r6, #2
	RDC_REG_SET(reg_addr, (mag_y<<4)|mag_x);
 8004238:	7821      	ldrb	r1, [r4, #0]
 800423a:	fa5f f388 	uxtb.w	r3, r8
 800423e:	f50b 7254 	add.w	r2, fp, #848	; 0x350
 8004242:	2000      	movs	r0, #0
 8004244:	f002 f92c 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr, (U8_T)(font_pos_x >> 8));
 8004248:	7821      	ldrb	r1, [r4, #0]
 800424a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800424e:	f506 7256 	add.w	r2, r6, #856	; 0x358
 8004252:	2000      	movs	r0, #0
 8004254:	f002 f924 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr+1, font_pos_x & 0xFF);
 8004258:	7821      	ldrb	r1, [r4, #0]
 800425a:	fa5f f389 	uxtb.w	r3, r9
 800425e:	f206 3259 	addw	r2, r6, #857	; 0x359
 8004262:	2000      	movs	r0, #0
 8004264:	f002 f91c 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr, (U8_T)(font_pos_y >> 8));
 8004268:	9b00      	ldr	r3, [sp, #0]
 800426a:	7821      	ldrb	r1, [r4, #0]
 800426c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004270:	f206 325a 	addw	r2, r6, #858	; 0x35a
 8004274:	2000      	movs	r0, #0
 8004276:	f002 f913 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(reg_addr+1, font_pos_y & 0xFF);
 800427a:	7821      	ldrb	r1, [r4, #0]
 800427c:	f89d 3000 	ldrb.w	r3, [sp]
 8004280:	f206 325b 	addw	r2, r6, #859	; 0x35b
 8004284:	2000      	movs	r0, #0
 8004286:	f002 f90b 	bl	80064a0 <rtiVC_WriteDevice16>
	if (d == VC_OSD_DIMENSTION_3D) {
 800428a:	f1ba 0f01 	cmp.w	sl, #1
 800428e:	f000 8083 	beq.w	8004398 <rdc200a_draw_text_osd+0x230>
		en_reg_val |= ftdrw_en_3d_mask;
 8004292:	9906      	ldr	r1, [sp, #24]
	en_reg_val = ftdrw_en_mask; /* Make the value of 2D enable in default */
 8004294:	463a      	mov	r2, r7
		en_reg_val |= ftdrw_en_3d_mask;
 8004296:	4339      	orrs	r1, r7
	RDC_REG_MASK_SET(0x0378, ftdrw_en_mask|ftdrw_en_3d_mask, en_reg_val);
 8004298:	f44f 705e 	mov.w	r0, #888	; 0x378
 800429c:	f002 ff54 	bl	8007148 <RDC_REG_MASK_SET>
	RDC_REG_SET(0x0379, (U8_T)(1 << drawer_id));
 80042a0:	7821      	ldrb	r1, [r4, #0]
 80042a2:	463b      	mov	r3, r7
 80042a4:	f240 3279 	movw	r2, #889	; 0x379
 80042a8:	2000      	movs	r0, #0
 80042aa:	f002 f8f9 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x037A, (back_color_idx<<4)|font_color_idx); // color data
 80042ae:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80042b2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80042b6:	7821      	ldrb	r1, [r4, #0]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f240 327a 	movw	r2, #890	; 0x37a
 80042be:	2000      	movs	r0, #0
 80042c0:	f002 f8ee 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x037B, 0x18); // font_fsm command : INST_CHAR_COLOR
 80042c4:	7821      	ldrb	r1, [r4, #0]
 80042c6:	2318      	movs	r3, #24
 80042c8:	f240 327b 	movw	r2, #891	; 0x37b
 80042cc:	2000      	movs	r0, #0
 80042ce:	f002 f8e7 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x037C, 0x01); // font_fsm command : idle
 80042d2:	7821      	ldrb	r1, [r4, #0]
 80042d4:	2301      	movs	r3, #1
 80042d6:	f44f 725f 	mov.w	r2, #892	; 0x37c
 80042da:	2000      	movs	r0, #0
 80042dc:	f002 f8e0 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x037B, 0x11); // font_fsm command : clear
 80042e0:	7821      	ldrb	r1, [r4, #0]
 80042e2:	2311      	movs	r3, #17
 80042e4:	f240 327b 	movw	r2, #891	; 0x37b
 80042e8:	2000      	movs	r0, #0
 80042ea:	f002 f8d9 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x037C, 0x01); // font_fsm command : idle
 80042ee:	7821      	ldrb	r1, [r4, #0]
 80042f0:	2301      	movs	r3, #1
 80042f2:	f44f 725f 	mov.w	r2, #892	; 0x37c
 80042f6:	2000      	movs	r0, #0
 80042f8:	f002 f8d2 	bl	80064a0 <rtiVC_WriteDevice16>
	for (i = 0; i < num_char; i++) {
 80042fc:	b1d5      	cbz	r5, 8004334 <rdc200a_draw_text_osd+0x1cc>
 80042fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004300:	1e5e      	subs	r6, r3, #1
 8004302:	4435      	add	r5, r6
		RDC_REG_SET(0x037A, string[i]);
 8004304:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8004308:	7821      	ldrb	r1, [r4, #0]
 800430a:	f240 327a 	movw	r2, #890	; 0x37a
 800430e:	2000      	movs	r0, #0
 8004310:	f002 f8c6 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(0x037B, 0x14); // font_fsm command : put_char
 8004314:	7821      	ldrb	r1, [r4, #0]
 8004316:	2314      	movs	r3, #20
 8004318:	f240 327b 	movw	r2, #891	; 0x37b
 800431c:	2000      	movs	r0, #0
 800431e:	f002 f8bf 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(0x037C, 0x01); // font_fsm command : idle
 8004322:	7821      	ldrb	r1, [r4, #0]
 8004324:	2301      	movs	r3, #1
 8004326:	f44f 725f 	mov.w	r2, #892	; 0x37c
 800432a:	2000      	movs	r0, #0
 800432c:	f002 f8b8 	bl	80064a0 <rtiVC_WriteDevice16>
	for (i = 0; i < num_char; i++) {
 8004330:	42b5      	cmp	r5, r6
 8004332:	d1e7      	bne.n	8004304 <rdc200a_draw_text_osd+0x19c>
	return 0;
 8004334:	2000      	movs	r0, #0
}
 8004336:	b00d      	add	sp, #52	; 0x34
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -2;
 800433c:	f06f 0001 	mvn.w	r0, #1
}
 8004340:	b00d      	add	sp, #52	; 0x34
 8004342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rdc200a_update_lut_from_flash(palette_addr, 96,
 8004346:	4618      	mov	r0, r3
							rdc200a_palette_drawer_sram_id[drawer_id]);
 8004348:	4b3b      	ldr	r3, [pc, #236]	; (8004438 <rdc200a_draw_text_osd+0x2d0>)
		rdc200a_update_lut_from_flash(palette_addr, 96,
 800434a:	2160      	movs	r1, #96	; 0x60
 800434c:	5d9a      	ldrb	r2, [r3, r6]
 800434e:	f7fe fcef 	bl	8002d30 <rdc200a_update_lut_from_flash>
 8004352:	e75f      	b.n	8004214 <rdc200a_draw_text_osd+0xac>
							rdc200a_font_drawer_sram_id[drawer_id]);
 8004354:	4b39      	ldr	r3, [pc, #228]	; (800443c <rdc200a_draw_text_osd+0x2d4>)
		rdc200a_update_lut_from_flash(font_addr, FLASH_ITEM_SIZE_FONT,
 8004356:	4620      	mov	r0, r4
 8004358:	5d9a      	ldrb	r2, [r3, r6]
 800435a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800435e:	f7fe fce7 	bl	8002d30 <rdc200a_update_lut_from_flash>
	if (palette_addr != 0xFFFFFFFF)
 8004362:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	f43f af55 	beq.w	8004214 <rdc200a_draw_text_osd+0xac>
 800436a:	e7ec      	b.n	8004346 <rdc200a_draw_text_osd+0x1de>
		if (mag == VC_TEXT_OSD_MAG_x8) {
 800436c:	f1b8 0f07 	cmp.w	r8, #7
 8004370:	f47f af43 	bne.w	80041fa <rdc200a_draw_text_osd+0x92>
			return -5;
 8004374:	f06f 0004 	mvn.w	r0, #4
 8004378:	e7dd      	b.n	8004336 <rdc200a_draw_text_osd+0x1ce>
		dimension_reg_val = RDC_REG_GET(0x0014);
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <rdc200a_draw_text_osd+0x2cc>)
 800437c:	2214      	movs	r2, #20
 800437e:	7819      	ldrb	r1, [r3, #0]
 8004380:	2000      	movs	r0, #0
 8004382:	f002 f879 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) {
 8004386:	f010 0f18 	tst.w	r0, #24
 800438a:	d036      	beq.n	80043fa <rdc200a_draw_text_osd+0x292>
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 800438c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	9303      	str	r3, [sp, #12]
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8004392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004394:	9307      	str	r3, [sp, #28]
 8004396:	e719      	b.n	80041cc <rdc200a_draw_text_osd+0x64>
		dimension_reg_val = RDC_REG_GET(0x0014);
 8004398:	7821      	ldrb	r1, [r4, #0]
 800439a:	2214      	movs	r2, #20
 800439c:	2000      	movs	r0, #0
 800439e:	f002 f86b 	bl	8006478 <rtiVC_ReadDevice16>
		if (dimension_reg_val & (SBS3D_EN|SBS_LL_3D_EN)) { // Side By Side
 80043a2:	f010 0f18 	tst.w	r0, #24
 80043a6:	d032      	beq.n	800440e <rdc200a_draw_text_osd+0x2a6>
			font_3d_pos_x = font_pos_x + output_h_size; // 1 pixel unit
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	444b      	add	r3, r9
 80043ac:	9308      	str	r3, [sp, #32]
		RDC_REG_SET(reg_addr, (U8_T)(font_3d_pos_x >> 8));
 80043ae:	9b08      	ldr	r3, [sp, #32]
 80043b0:	7821      	ldrb	r1, [r4, #0]
 80043b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80043b6:	f506 725a 	add.w	r2, r6, #872	; 0x368
 80043ba:	2000      	movs	r0, #0
 80043bc:	f002 f870 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr+1, font_3d_pos_x & 0xFF);
 80043c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80043c4:	7821      	ldrb	r1, [r4, #0]
 80043c6:	f206 3269 	addw	r2, r6, #873	; 0x369
 80043ca:	2000      	movs	r0, #0
 80043cc:	f002 f868 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr, (U8_T)(font_3d_pos_y >> 8));
 80043d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d2:	7821      	ldrb	r1, [r4, #0]
 80043d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80043d8:	f206 326a 	addw	r2, r6, #874	; 0x36a
 80043dc:	2000      	movs	r0, #0
 80043de:	f002 f85f 	bl	80064a0 <rtiVC_WriteDevice16>
		RDC_REG_SET(reg_addr+1, font_3d_pos_y & 0xFF);
 80043e2:	7821      	ldrb	r1, [r4, #0]
 80043e4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80043e8:	f206 326b 	addw	r2, r6, #875	; 0x36b
 80043ec:	2000      	movs	r0, #0
 80043ee:	f002 f857 	bl	80064a0 <rtiVC_WriteDevice16>
		en_reg_val |= ftdrw_en_3d_mask;
 80043f2:	9a06      	ldr	r2, [sp, #24]
 80043f4:	433a      	orrs	r2, r7
 80043f6:	4611      	mov	r1, r2
 80043f8:	e74e      	b.n	8004298 <rdc200a_draw_text_osd+0x130>
		else if (dimension_reg_val & TAB3D_EN) {
 80043fa:	0680      	lsls	r0, r0, #26
 80043fc:	f57f aee2 	bpl.w	80041c4 <rdc200a_draw_text_osd+0x5c>
			output_v_size >>= 1; // V Divide by 2 (Top and Bottom)
 8004400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004402:	085b      	lsrs	r3, r3, #1
 8004404:	9307      	str	r3, [sp, #28]
 8004406:	930b      	str	r3, [sp, #44]	; 0x2c
			output_h_size >>= 1; // H Divide by 2 (Side By Side)
 8004408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800440a:	9303      	str	r3, [sp, #12]
 800440c:	e6de      	b.n	80041cc <rdc200a_draw_text_osd+0x64>
		else if (dimension_reg_val & TAB3D_EN) {
 800440e:	0683      	lsls	r3, r0, #26
 8004410:	d5cd      	bpl.n	80043ae <rdc200a_draw_text_osd+0x246>
			font_3d_pos_y = font_pos_y + output_v_size; // 1 pixel unit
 8004412:	9b00      	ldr	r3, [sp, #0]
 8004414:	9a07      	ldr	r2, [sp, #28]
 8004416:	4413      	add	r3, r2
 8004418:	9309      	str	r3, [sp, #36]	; 0x24
			mag_x = (U8_T)(mag + (E_VC_OSD_TEXT_MAG_T)1); // Twice of Y
 800441a:	e7c8      	b.n	80043ae <rdc200a_draw_text_osd+0x246>
		return -1;
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	e789      	b.n	8004336 <rdc200a_draw_text_osd+0x1ce>
		return -4;
 8004422:	f06f 0003 	mvn.w	r0, #3
 8004426:	e786      	b.n	8004336 <rdc200a_draw_text_osd+0x1ce>
		return -3;
 8004428:	f06f 0002 	mvn.w	r0, #2
 800442c:	e783      	b.n	8004336 <rdc200a_draw_text_osd+0x1ce>
 800442e:	bf00      	nop
 8004430:	0801649c 	.word	0x0801649c
 8004434:	2000001d 	.word	0x2000001d
 8004438:	0801695c 	.word	0x0801695c
 800443c:	08016498 	.word	0x08016498

08004440 <rdc200a_sbs_on>:

}

void rdc200a_sbs_on()
{
	rdc200a_set_image_display_format(VC_IMAGE_DISPLAY_FORMAT_3D_SBS, FALSE);
 8004440:	2100      	movs	r1, #0
 8004442:	2001      	movs	r0, #1
 8004444:	f7ff b878 	b.w	8003538 <rdc200a_set_image_display_format>

08004448 <rdc200a_sbs_off>:
}

void rdc200a_sbs_off()
{
	rdc200a_set_image_display_format(VC_IMAGE_DISPLAY_FORMAT_2D, FALSE);
 8004448:	2100      	movs	r1, #0
 800444a:	4608      	mov	r0, r1
 800444c:	f7ff b874 	b.w	8003538 <rdc200a_set_image_display_format>

08004450 <rdc200a_config_lvds_rx_clock>:
	{225000000, 0x3F, 0, 2}  /* >= 225 MHz */

};

int rdc200a_config_lvds_rx_clock(U32_T pclk_hz)
{
 8004450:	b538      	push	{r3, r4, r5, lr}

	tbl = (const RDC200A_LVDS_CLK_TABLE_T *)rdc200a_lvds_clk_table;

	/* If it is not found in the 10 boundaries, the last setting is selected. */
	for (i = 0; i < (NUM_RDC200A_LVDS_PCLK_BND - 1); i++) {
		if (pclk_hz < tbl->boundary_pclk_hz)
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <rdc200a_config_lvds_rx_clock+0xcc>)
 8004454:	4298      	cmp	r0, r3
 8004456:	d94e      	bls.n	80044f6 <rdc200a_config_lvds_rx_clock+0xa6>
 8004458:	4b31      	ldr	r3, [pc, #196]	; (8004520 <rdc200a_config_lvds_rx_clock+0xd0>)
 800445a:	4298      	cmp	r0, r3
 800445c:	d94d      	bls.n	80044fa <rdc200a_config_lvds_rx_clock+0xaa>
 800445e:	4b31      	ldr	r3, [pc, #196]	; (8004524 <rdc200a_config_lvds_rx_clock+0xd4>)
 8004460:	4298      	cmp	r0, r3
 8004462:	d94c      	bls.n	80044fe <rdc200a_config_lvds_rx_clock+0xae>
 8004464:	4b30      	ldr	r3, [pc, #192]	; (8004528 <rdc200a_config_lvds_rx_clock+0xd8>)
 8004466:	4298      	cmp	r0, r3
 8004468:	d34b      	bcc.n	8004502 <rdc200a_config_lvds_rx_clock+0xb2>
 800446a:	4b30      	ldr	r3, [pc, #192]	; (800452c <rdc200a_config_lvds_rx_clock+0xdc>)
 800446c:	4298      	cmp	r0, r3
 800446e:	d94a      	bls.n	8004506 <rdc200a_config_lvds_rx_clock+0xb6>
 8004470:	4b2f      	ldr	r3, [pc, #188]	; (8004530 <rdc200a_config_lvds_rx_clock+0xe0>)
 8004472:	4298      	cmp	r0, r3
 8004474:	d949      	bls.n	800450a <rdc200a_config_lvds_rx_clock+0xba>
 8004476:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <rdc200a_config_lvds_rx_clock+0xe4>)
 8004478:	4298      	cmp	r0, r3
 800447a:	d948      	bls.n	800450e <rdc200a_config_lvds_rx_clock+0xbe>
 800447c:	4b2e      	ldr	r3, [pc, #184]	; (8004538 <rdc200a_config_lvds_rx_clock+0xe8>)
 800447e:	4298      	cmp	r0, r3
 8004480:	d947      	bls.n	8004512 <rdc200a_config_lvds_rx_clock+0xc2>
 8004482:	4b2e      	ldr	r3, [pc, #184]	; (800453c <rdc200a_config_lvds_rx_clock+0xec>)
 8004484:	4298      	cmp	r0, r3
 8004486:	d946      	bls.n	8004516 <rdc200a_config_lvds_rx_clock+0xc6>
			break;

		tbl++;
 8004488:	4c2d      	ldr	r4, [pc, #180]	; (8004540 <rdc200a_config_lvds_rx_clock+0xf0>)
		if (pclk_hz < tbl->boundary_pclk_hz)
 800448a:	4a2e      	ldr	r2, [pc, #184]	; (8004544 <rdc200a_config_lvds_rx_clock+0xf4>)
		tbl++;
 800448c:	f1a4 0308 	sub.w	r3, r4, #8
 8004490:	4290      	cmp	r0, r2
 8004492:	bf98      	it	ls
 8004494:	461c      	movls	r4, r3
	}

	RDC_REG_SET(0x0027, 0x20 | (tbl->pll0_refdiv) | (tbl->pll0_postd << 2));
 8004496:	79a2      	ldrb	r2, [r4, #6]
 8004498:	7963      	ldrb	r3, [r4, #5]
 800449a:	4d2b      	ldr	r5, [pc, #172]	; (8004548 <rdc200a_config_lvds_rx_clock+0xf8>)
 800449c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80044a0:	f043 0320 	orr.w	r3, r3, #32
 80044a4:	7829      	ldrb	r1, [r5, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2000      	movs	r0, #0
 80044aa:	2227      	movs	r2, #39	; 0x27
 80044ac:	f001 fff8 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0028, (U8_T)((tbl->pll0_plln & 0x300) >> 8));
 80044b0:	2300      	movs	r3, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	7829      	ldrb	r1, [r5, #0]
 80044b6:	2228      	movs	r2, #40	; 0x28
 80044b8:	f001 fff2 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0029, (tbl->pll0_plln & 0xFF));
 80044bc:	7923      	ldrb	r3, [r4, #4]
 80044be:	7829      	ldrb	r1, [r5, #0]
 80044c0:	2229      	movs	r2, #41	; 0x29
 80044c2:	2000      	movs	r0, #0
 80044c4:	f001 ffec 	bl	80064a0 <rtiVC_WriteDevice16>
 80044c8:	2432      	movs	r4, #50	; 0x32
 80044ca:	e005      	b.n	80044d8 <rdc200a_config_lvds_rx_clock+0x88>
		VC_U_DELAY(1);
 80044cc:	f001 ff5e 	bl	800638c <rtiVC_DelayUs>
	} while (--lock_timeout);
 80044d0:	1e63      	subs	r3, r4, #1
 80044d2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80044d6:	d00b      	beq.n	80044f0 <rdc200a_config_lvds_rx_clock+0xa0>
		reg_1A = RDC_REG_GET(0x001A); // monitoring_basic[4:2]
 80044d8:	7829      	ldrb	r1, [r5, #0]
 80044da:	221a      	movs	r2, #26
 80044dc:	2000      	movs	r0, #0
 80044de:	f001 ffcb 	bl	8006478 <rtiVC_ReadDevice16>
 80044e2:	4603      	mov	r3, r0
		if (reg_1A & lock_mask)
 80044e4:	075b      	lsls	r3, r3, #29
		VC_U_DELAY(1);
 80044e6:	f04f 0001 	mov.w	r0, #1
		if (reg_1A & lock_mask)
 80044ea:	d5ef      	bpl.n	80044cc <rdc200a_config_lvds_rx_clock+0x7c>

	if (!rdc200a_check_pll_lock(0))
		return -1;

	return 0;
 80044ec:	2000      	movs	r0, #0
}
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
	tbl = (const RDC200A_LVDS_CLK_TABLE_T *)rdc200a_lvds_clk_table;
 80044f6:	4c15      	ldr	r4, [pc, #84]	; (800454c <rdc200a_config_lvds_rx_clock+0xfc>)
 80044f8:	e7cd      	b.n	8004496 <rdc200a_config_lvds_rx_clock+0x46>
		tbl++;
 80044fa:	4c15      	ldr	r4, [pc, #84]	; (8004550 <rdc200a_config_lvds_rx_clock+0x100>)
 80044fc:	e7cb      	b.n	8004496 <rdc200a_config_lvds_rx_clock+0x46>
 80044fe:	4c15      	ldr	r4, [pc, #84]	; (8004554 <rdc200a_config_lvds_rx_clock+0x104>)
 8004500:	e7c9      	b.n	8004496 <rdc200a_config_lvds_rx_clock+0x46>
 8004502:	4c15      	ldr	r4, [pc, #84]	; (8004558 <rdc200a_config_lvds_rx_clock+0x108>)
 8004504:	e7c7      	b.n	8004496 <rdc200a_config_lvds_rx_clock+0x46>
 8004506:	4c15      	ldr	r4, [pc, #84]	; (800455c <rdc200a_config_lvds_rx_clock+0x10c>)
 8004508:	e7c5      	b.n	8004496 <rdc200a_config_lvds_rx_clock+0x46>
 800450a:	4c15      	ldr	r4, [pc, #84]	; (8004560 <rdc200a_config_lvds_rx_clock+0x110>)
 800450c:	e7c3      	b.n	8004496 <rdc200a_config_lvds_rx_clock+0x46>
 800450e:	4c15      	ldr	r4, [pc, #84]	; (8004564 <rdc200a_config_lvds_rx_clock+0x114>)
 8004510:	e7c1      	b.n	8004496 <rdc200a_config_lvds_rx_clock+0x46>
 8004512:	4c15      	ldr	r4, [pc, #84]	; (8004568 <rdc200a_config_lvds_rx_clock+0x118>)
 8004514:	e7bf      	b.n	8004496 <rdc200a_config_lvds_rx_clock+0x46>
 8004516:	4c15      	ldr	r4, [pc, #84]	; (800456c <rdc200a_config_lvds_rx_clock+0x11c>)
 8004518:	e7bd      	b.n	8004496 <rdc200a_config_lvds_rx_clock+0x46>
 800451a:	bf00      	nop
 800451c:	0112a87f 	.word	0x0112a87f
 8004520:	022550ff 	.word	0x022550ff
 8004524:	02aea53f 	.word	0x02aea53f
 8004528:	03938700 	.word	0x03938700
 800452c:	047868bf 	.word	0x047868bf
 8004530:	05f5e0ff 	.word	0x05f5e0ff
 8004534:	07270dff 	.word	0x07270dff
 8004538:	08f0d17f 	.word	0x08f0d17f
 800453c:	0b16227f 	.word	0x0b16227f
 8004540:	08016638 	.word	0x08016638
 8004544:	0d693a3f 	.word	0x0d693a3f
 8004548:	2000001d 	.word	0x2000001d
 800454c:	080165e8 	.word	0x080165e8
 8004550:	080165f0 	.word	0x080165f0
 8004554:	080165f8 	.word	0x080165f8
 8004558:	08016600 	.word	0x08016600
 800455c:	08016608 	.word	0x08016608
 8004560:	08016610 	.word	0x08016610
 8004564:	08016618 	.word	0x08016618
 8004568:	08016620 	.word	0x08016620
 800456c:	08016628 	.word	0x08016628

08004570 <rdc200a_config_mipi_rx_clock>:

int rdc200a_config_mipi_rx_clock(U32_T pclk_hz)
{
 8004570:	b570      	push	{r4, r5, r6, lr}
	UINT_T num_lane;
	const RDC200A_MIPI_CLK_TABLE_T *tbl;
	UINT_T i;
	U32_T check_pclk_hz = pclk_hz + (pclk_hz >> 4);

	num_lane = RDC_REG_GET(0x0253) & 0x3;
 8004572:	4d3f      	ldr	r5, [pc, #252]	; (8004670 <rdc200a_config_mipi_rx_clock+0x100>)
{
 8004574:	4606      	mov	r6, r0
	num_lane = RDC_REG_GET(0x0253) & 0x3;
 8004576:	f240 2253 	movw	r2, #595	; 0x253
 800457a:	7829      	ldrb	r1, [r5, #0]
 800457c:	2000      	movs	r0, #0
 800457e:	f001 ff7b 	bl	8006478 <rtiVC_ReadDevice16>
	tbl = (const RDC200A_MIPI_CLK_TABLE_T *)&rdc200a_mipi_clk_table[num_lane];
 8004582:	f000 0403 	and.w	r4, r0, #3
 8004586:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800458a:	4b3a      	ldr	r3, [pc, #232]	; (8004674 <rdc200a_config_mipi_rx_clock+0x104>)
 800458c:	0122      	lsls	r2, r4, #4
 800458e:	eb03 1404 	add.w	r4, r3, r4, lsl #4

	/* If it is not found in the 6 boundaries, the last setting is selected. */
	for (i = 0; i < (NUM_RDC200A_MIPI_PCLK_BND - 1); i++) {
		if (check_pclk_hz < tbl->boundary_pclk_hz)
 8004592:	589b      	ldr	r3, [r3, r2]
	U32_T check_pclk_hz = pclk_hz + (pclk_hz >> 4);
 8004594:	eb06 1616 	add.w	r6, r6, r6, lsr #4
		if (check_pclk_hz < tbl->boundary_pclk_hz)
 8004598:	429e      	cmp	r6, r3
 800459a:	d319      	bcc.n	80045d0 <rdc200a_config_mipi_rx_clock+0x60>
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	429e      	cmp	r6, r3
			break;

		tbl++;
 80045a0:	f104 0210 	add.w	r2, r4, #16
		if (check_pclk_hz < tbl->boundary_pclk_hz)
 80045a4:	d361      	bcc.n	800466a <rdc200a_config_mipi_rx_clock+0xfa>
 80045a6:	6a23      	ldr	r3, [r4, #32]
 80045a8:	429e      	cmp	r6, r3
		tbl++;
 80045aa:	f104 0220 	add.w	r2, r4, #32
		if (check_pclk_hz < tbl->boundary_pclk_hz)
 80045ae:	d35c      	bcc.n	800466a <rdc200a_config_mipi_rx_clock+0xfa>
 80045b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045b2:	429e      	cmp	r6, r3
		tbl++;
 80045b4:	f104 0230 	add.w	r2, r4, #48	; 0x30
		if (check_pclk_hz < tbl->boundary_pclk_hz)
 80045b8:	d357      	bcc.n	800466a <rdc200a_config_mipi_rx_clock+0xfa>
 80045ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045bc:	429e      	cmp	r6, r3
		tbl++;
 80045be:	f104 0240 	add.w	r2, r4, #64	; 0x40
		if (check_pclk_hz < tbl->boundary_pclk_hz)
 80045c2:	d352      	bcc.n	800466a <rdc200a_config_mipi_rx_clock+0xfa>
 80045c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80045c6:	42b3      	cmp	r3, r6
		tbl++;
 80045c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
		if (check_pclk_hz < tbl->boundary_pclk_hz)
 80045cc:	d84d      	bhi.n	800466a <rdc200a_config_mipi_rx_clock+0xfa>
		tbl++;
 80045ce:	3460      	adds	r4, #96	; 0x60
	}

	RDC_REG_SET(0x0027, 0x20 | (tbl->pll0_refdiv) | (tbl->pll0_postd << 2));
 80045d0:	79a2      	ldrb	r2, [r4, #6]
 80045d2:	7963      	ldrb	r3, [r4, #5]
 80045d4:	7829      	ldrb	r1, [r5, #0]
 80045d6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80045da:	f043 0320 	orr.w	r3, r3, #32
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2227      	movs	r2, #39	; 0x27
 80045e2:	2000      	movs	r0, #0
 80045e4:	f001 ff5c 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0028, (U8_T)((tbl->pll0_plln & 0x300) >> 8));
 80045e8:	2300      	movs	r3, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	7829      	ldrb	r1, [r5, #0]
 80045ee:	2228      	movs	r2, #40	; 0x28
 80045f0:	f001 ff56 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0029, (tbl->pll0_plln & 0xFF));
 80045f4:	7923      	ldrb	r3, [r4, #4]
 80045f6:	7829      	ldrb	r1, [r5, #0]
 80045f8:	2229      	movs	r2, #41	; 0x29
 80045fa:	2000      	movs	r0, #0
 80045fc:	f001 ff50 	bl	80064a0 <rtiVC_WriteDevice16>

	RDC_REG_MASK_SET(0x0241, 0x01, tbl->mipi_clk_periph_sel);
 8004600:	79e2      	ldrb	r2, [r4, #7]
 8004602:	2101      	movs	r1, #1
 8004604:	f240 2041 	movw	r0, #577	; 0x241
 8004608:	f002 fd9e 	bl	8007148 <RDC_REG_MASK_SET>
	RDC_REG_SET(0x0242, tbl->mipi_txclkinesc_sel|(tbl->mipi_rxclkinesc_sel<<2)|
 800460c:	7aa3      	ldrb	r3, [r4, #10]
 800460e:	7a21      	ldrb	r1, [r4, #8]
 8004610:	7a62      	ldrb	r2, [r4, #9]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8004618:	4313      	orrs	r3, r2
 800461a:	7ae2      	ldrb	r2, [r4, #11]
 800461c:	7829      	ldrb	r1, [r5, #0]
 800461e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f240 2242 	movw	r2, #578	; 0x242
 8004628:	2000      	movs	r0, #0
 800462a:	f001 ff39 	bl	80064a0 <rtiVC_WriteDevice16>
						(tbl->mipi_dpi_pclk_sel<<4)|(tbl->mipi_clk_rx_sel<<6));
	RDC_REG_SET(0x0245, tbl->mipi_dphy_prg_rxhs_settle);
 800462e:	7b23      	ldrb	r3, [r4, #12]
 8004630:	7829      	ldrb	r1, [r5, #0]
 8004632:	f240 2245 	movw	r2, #581	; 0x245
 8004636:	2000      	movs	r0, #0
 8004638:	f001 ff32 	bl	80064a0 <rtiVC_WriteDevice16>
 800463c:	2432      	movs	r4, #50	; 0x32
 800463e:	e005      	b.n	800464c <rdc200a_config_mipi_rx_clock+0xdc>
		VC_U_DELAY(1);
 8004640:	f001 fea4 	bl	800638c <rtiVC_DelayUs>
	} while (--lock_timeout);
 8004644:	1e63      	subs	r3, r4, #1
 8004646:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800464a:	d00b      	beq.n	8004664 <rdc200a_config_mipi_rx_clock+0xf4>
		reg_1A = RDC_REG_GET(0x001A); // monitoring_basic[4:2]
 800464c:	7829      	ldrb	r1, [r5, #0]
 800464e:	221a      	movs	r2, #26
 8004650:	2000      	movs	r0, #0
 8004652:	f001 ff11 	bl	8006478 <rtiVC_ReadDevice16>
 8004656:	4603      	mov	r3, r0
		if (reg_1A & lock_mask)
 8004658:	075b      	lsls	r3, r3, #29
		VC_U_DELAY(1);
 800465a:	f04f 0001 	mov.w	r0, #1
		if (reg_1A & lock_mask)
 800465e:	d5ef      	bpl.n	8004640 <rdc200a_config_mipi_rx_clock+0xd0>

	if (!rdc200a_check_pll_lock(0))
		return -1;

	return 0;
 8004660:	2000      	movs	r0, #0
}
 8004662:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
 8004664:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004668:	bd70      	pop	{r4, r5, r6, pc}
 800466a:	4614      	mov	r4, r2
 800466c:	e7b0      	b.n	80045d0 <rdc200a_config_mipi_rx_clock+0x60>
 800466e:	bf00      	nop
 8004670:	2000001d 	.word	0x2000001d
 8004674:	08016640 	.word	0x08016640

08004678 <rdc200a_change_input_resolutionx>:
{
 8004678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	dif_path = RDC_REG_GET(0x0200) & 0x3;
 800467c:	4d34      	ldr	r5, [pc, #208]	; (8004750 <rdc200a_change_input_resolutionx+0xd8>)
{
 800467e:	b082      	sub	sp, #8
 8004680:	4606      	mov	r6, r0
 8004682:	460f      	mov	r7, r1
 8004684:	4690      	mov	r8, r2
	dif_path = RDC_REG_GET(0x0200) & 0x3;
 8004686:	7829      	ldrb	r1, [r5, #0]
 8004688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468c:	2000      	movs	r0, #0
{
 800468e:	461c      	mov	r4, r3
	dif_path = RDC_REG_GET(0x0200) & 0x3;
 8004690:	f001 fef2 	bl	8006478 <rtiVC_ReadDevice16>
 8004694:	f000 0003 	and.w	r0, r0, #3
	if ((dif_path != 0x02/* MIPI */) && (dif_path != 0x00))
 8004698:	2802      	cmp	r0, #2
 800469a:	d04a      	beq.n	8004732 <rdc200a_change_input_resolutionx+0xba>
 800469c:	2800      	cmp	r0, #0
 800469e:	d153      	bne.n	8004748 <rdc200a_change_input_resolutionx+0xd0>
	pclk_hz = (h_input_size + h_blank) * (v_input_size + v_blank) * frame_rate;
 80046a0:	9a08      	ldr	r2, [sp, #32]
 80046a2:	193b      	adds	r3, r7, r4
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	eb06 0008 	add.w	r0, r6, r8
		ret = rdc200a_config_lvds_rx_clock(pclk_hz);
 80046ac:	fb03 f000 	mul.w	r0, r3, r0
 80046b0:	f7ff fece 	bl	8004450 <rdc200a_config_lvds_rx_clock>
	if (ret)
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d139      	bne.n	800472c <rdc200a_change_input_resolutionx+0xb4>
	RDC_REG_SET(0x0201, (U8_T)((U16_T)input_res_idx << 2));
 80046b8:	7829      	ldrb	r1, [r5, #0]
 80046ba:	9001      	str	r0, [sp, #4]
 80046bc:	23fc      	movs	r3, #252	; 0xfc
 80046be:	f240 2201 	movw	r2, #513	; 0x201
 80046c2:	f001 feed 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0202, (U8_T)(h_input_size/4 >> 8));
 80046c6:	08b4      	lsrs	r4, r6, #2
 80046c8:	f3c6 2387 	ubfx	r3, r6, #10, #8
 80046cc:	7829      	ldrb	r1, [r5, #0]
 80046ce:	9801      	ldr	r0, [sp, #4]
 80046d0:	f240 2202 	movw	r2, #514	; 0x202
 80046d4:	f001 fee4 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0203, h_input_size/4 & 0xFF);
 80046d8:	b2e3      	uxtb	r3, r4
 80046da:	7829      	ldrb	r1, [r5, #0]
 80046dc:	9801      	ldr	r0, [sp, #4]
 80046de:	f240 2203 	movw	r2, #515	; 0x203
 80046e2:	f001 fedd 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0204, (U8_T)(v_input_size/4 >> 8));
 80046e6:	7829      	ldrb	r1, [r5, #0]
 80046e8:	9801      	ldr	r0, [sp, #4]
 80046ea:	f3c7 2387 	ubfx	r3, r7, #10, #8
 80046ee:	f44f 7201 	mov.w	r2, #516	; 0x204
 80046f2:	f001 fed5 	bl	80064a0 <rtiVC_WriteDevice16>
	DSI_DPI_PAYLOAD_FIFO_SEND_LEVEL = (h_input_size >> 2) * 3; // h_input_size * 3/4;
 80046f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	RDC_REG_SET(0x0205, v_input_size/4 & 0xFF);
 80046fa:	7829      	ldrb	r1, [r5, #0]
 80046fc:	9801      	ldr	r0, [sp, #4]
 80046fe:	f3c7 0387 	ubfx	r3, r7, #2, #8
 8004702:	f240 2205 	movw	r2, #517	; 0x205
 8004706:	f001 fecb 	bl	80064a0 <rtiVC_WriteDevice16>
	DSI_DPI_PAYLOAD_FIFO_SEND_LEVEL = (h_input_size >> 2) * 3; // h_input_size * 3/4;
 800470a:	b2a6      	uxth	r6, r4
	RDC_REG_SET(0x0269, (U8_T)(DSI_DPI_PAYLOAD_FIFO_SEND_LEVEL >> 8));
 800470c:	7829      	ldrb	r1, [r5, #0]
 800470e:	9801      	ldr	r0, [sp, #4]
 8004710:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8004714:	f240 2269 	movw	r2, #617	; 0x269
 8004718:	f001 fec2 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x026A, DSI_DPI_PAYLOAD_FIFO_SEND_LEVEL & 0xFF);
 800471c:	9801      	ldr	r0, [sp, #4]
 800471e:	7829      	ldrb	r1, [r5, #0]
 8004720:	b2f3      	uxtb	r3, r6
 8004722:	f240 226a 	movw	r2, #618	; 0x26a
 8004726:	f001 febb 	bl	80064a0 <rtiVC_WriteDevice16>
	return 0;
 800472a:	9801      	ldr	r0, [sp, #4]
}
 800472c:	b002      	add	sp, #8
 800472e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pclk_hz = (h_input_size + h_blank) * (v_input_size + v_blank) * frame_rate;
 8004732:	9a08      	ldr	r2, [sp, #32]
 8004734:	193b      	adds	r3, r7, r4
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	eb06 0008 	add.w	r0, r6, r8
		ret = rdc200a_config_mipi_rx_clock(pclk_hz);
 800473e:	fb03 f000 	mul.w	r0, r3, r0
 8004742:	f7ff ff15 	bl	8004570 <rdc200a_config_mipi_rx_clock>
 8004746:	e7b5      	b.n	80046b4 <rdc200a_change_input_resolutionx+0x3c>
		return -2;
 8004748:	f06f 0001 	mvn.w	r0, #1
 800474c:	e7ee      	b.n	800472c <rdc200a_change_input_resolutionx+0xb4>
 800474e:	bf00      	nop
 8004750:	2000001d 	.word	0x2000001d

08004754 <set_rdc200a_output_90Hz>:
{
 8004754:	b510      	push	{r4, lr}
 8004756:	b082      	sub	sp, #8
	RDC_REG_SET(0x49, 0x52);
 8004758:	4c1b      	ldr	r4, [pc, #108]	; (80047c8 <set_rdc200a_output_90Hz+0x74>)
	rdc200a_change_input_resolutionx(1920, 1080, 280, 45, 90);
 800475a:	205a      	movs	r0, #90	; 0x5a
 800475c:	9000      	str	r0, [sp, #0]
 800475e:	232d      	movs	r3, #45	; 0x2d
 8004760:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004764:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8004768:	f44f 60f0 	mov.w	r0, #1920	; 0x780
 800476c:	f7ff ff84 	bl	8004678 <rdc200a_change_input_resolutionx>
	RDC_REG_SET(0x49, 0x52);
 8004770:	7821      	ldrb	r1, [r4, #0]
 8004772:	2352      	movs	r3, #82	; 0x52
 8004774:	2249      	movs	r2, #73	; 0x49
 8004776:	2000      	movs	r0, #0
 8004778:	f001 fe92 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x82b, 1);
 800477c:	7821      	ldrb	r1, [r4, #0]
 800477e:	2301      	movs	r3, #1
 8004780:	f640 022b 	movw	r2, #2091	; 0x82b
 8004784:	2000      	movs	r0, #0
 8004786:	f001 fe8b 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x92b, 1);
 800478a:	7821      	ldrb	r1, [r4, #0]
 800478c:	2301      	movs	r3, #1
 800478e:	f640 122b 	movw	r2, #2347	; 0x92b
 8004792:	2000      	movs	r0, #0
 8004794:	f001 fe84 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x14, 9); // 3D mode                                                                                                                                    , 0x9);
 8004798:	7821      	ldrb	r1, [r4, #0]
 800479a:	2309      	movs	r3, #9
 800479c:	2214      	movs	r2, #20
 800479e:	2000      	movs	r0, #0
 80047a0:	f001 fe7e 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x82E, 2);
 80047a4:	7821      	ldrb	r1, [r4, #0]
 80047a6:	2302      	movs	r3, #2
 80047a8:	f640 022e 	movw	r2, #2094	; 0x82e
 80047ac:	2000      	movs	r0, #0
 80047ae:	f001 fe77 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x92E, 2);
 80047b2:	7821      	ldrb	r1, [r4, #0]
 80047b4:	2302      	movs	r3, #2
 80047b6:	f640 122e 	movw	r2, #2350	; 0x92e
 80047ba:	2000      	movs	r0, #0
}
 80047bc:	b002      	add	sp, #8
 80047be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RDC_REG_SET(0x92E, 2);
 80047c2:	f001 be6d 	b.w	80064a0 <rtiVC_WriteDevice16>
 80047c6:	bf00      	nop
 80047c8:	2000001d 	.word	0x2000001d

080047cc <rdc200a_config_input_resolution>:
	}
}

static int rdc200a_config_input_resolution(U8_T dif_path, VC_INPUT_RES_T res,
										U32_T pclk_hz, BOOL_T enable_3D)
{
 80047cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int ret = 0;
	U32_T h_input_size = rdc200a_input_res[res].h_size;
 80047d0:	4d62      	ldr	r5, [pc, #392]	; (800495c <rdc200a_config_input_resolution+0x190>)
{
 80047d2:	b082      	sub	sp, #8
	U32_T h_input_size = rdc200a_input_res[res].h_size;
 80047d4:	f835 6021 	ldrh.w	r6, [r5, r1, lsl #2]
{
 80047d8:	4690      	mov	r8, r2
	U32_T v_input_size = rdc200a_input_res[res].v_size;
 80047da:	eb05 0281 	add.w	r2, r5, r1, lsl #2
	U16_T DSI_DPI_PAYLOAD_FIFO_SEND_LEVEL;
	U8_T h_scale_ration, v_scale_ration;

	DMSG("PCLK(%u) for the new input resolution\n", pclk_hz);

	if (enable_3D == TRUE) {
 80047de:	2b01      	cmp	r3, #1
{
 80047e0:	4604      	mov	r4, r0
	U32_T v_input_size = rdc200a_input_res[res].v_size;
 80047e2:	ea4f 0581 	mov.w	r5, r1, lsl #2
	rdc200a_get_output_resolution(&h_output_size, &v_output_size);
 80047e6:	4668      	mov	r0, sp
 80047e8:	a901      	add	r1, sp, #4
		fmt = VC_IMAGE_DISPLAY_FORMAT_3D_SBS_LL;
		target_h_input_size = h_input_size >> 1; /* 1/2 */
 80047ea:	bf0c      	ite	eq
 80047ec:	ea4f 0a56 	moveq.w	sl, r6, lsr #1
	}
	else {
		fmt = VC_IMAGE_DISPLAY_FORMAT_2D;
		target_h_input_size = h_input_size;
 80047f0:	46b2      	movne	sl, r6
	U32_T v_input_size = rdc200a_input_res[res].v_size;
 80047f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
		fmt = VC_IMAGE_DISPLAY_FORMAT_3D_SBS_LL;
 80047f6:	bf0c      	ite	eq
 80047f8:	2703      	moveq	r7, #3
		fmt = VC_IMAGE_DISPLAY_FORMAT_2D;
 80047fa:	2700      	movne	r7, #0
	rdc200a_get_output_resolution(&h_output_size, &v_output_size);
 80047fc:	f7fd fb5c 	bl	8001eb8 <rdc200a_get_output_resolution>
	h_scale = (h_output_size * 100) / h_input_size;
 8004800:	9b00      	ldr	r3, [sp, #0]
 8004802:	2264      	movs	r2, #100	; 0x64
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	fbb3 f3fa 	udiv	r3, r3, sl
	switch (h_scale) {
 800480c:	2b96      	cmp	r3, #150	; 0x96
 800480e:	f000 808e 	beq.w	800492e <rdc200a_config_input_resolution+0x162>
 8004812:	d85a      	bhi.n	80048ca <rdc200a_config_input_resolution+0xfe>
 8004814:	4293      	cmp	r3, r2
 8004816:	d076      	beq.n	8004906 <rdc200a_config_input_resolution+0x13a>
 8004818:	2b85      	cmp	r3, #133	; 0x85
		h_ration = 1; /* x1.33 */
 800481a:	bf08      	it	eq
 800481c:	f04f 0a01 	moveq.w	sl, #1
	switch (h_scale) {
 8004820:	d158      	bne.n	80048d4 <rdc200a_config_input_resolution+0x108>
	v_scale = (v_output_size * 100) / v_input_size;
 8004822:	9901      	ldr	r1, [sp, #4]
 8004824:	2364      	movs	r3, #100	; 0x64
 8004826:	fb03 f101 	mul.w	r1, r3, r1
 800482a:	fbb1 f1f9 	udiv	r1, r1, r9
	switch (v_scale) {
 800482e:	2996      	cmp	r1, #150	; 0x96
 8004830:	f000 8085 	beq.w	800493e <rdc200a_config_input_resolution+0x172>
 8004834:	d83e      	bhi.n	80048b4 <rdc200a_config_input_resolution+0xe8>
 8004836:	4299      	cmp	r1, r3
 8004838:	d059      	beq.n	80048ee <rdc200a_config_input_resolution+0x122>
 800483a:	2985      	cmp	r1, #133	; 0x85
 800483c:	d157      	bne.n	80048ee <rdc200a_config_input_resolution+0x122>
 800483e:	f04f 0901 	mov.w	r9, #1
	target_v_input_size = v_input_size;

	rdc200a_get_scale_ration(&h_scale_ration, &v_scale_ration,
							target_h_input_size, target_v_input_size);

	if (dif_path == 0x2) /* MIPI */
 8004842:	2c02      	cmp	r4, #2
		ret = rdc200a_config_mipi_rx_clock(pclk_hz);
 8004844:	4640      	mov	r0, r8
	if (dif_path == 0x2) /* MIPI */
 8004846:	d03c      	beq.n	80048c2 <rdc200a_config_input_resolution+0xf6>
	else /*0x0: LVDS */
		ret = rdc200a_config_lvds_rx_clock(pclk_hz);
 8004848:	f7ff fe02 	bl	8004450 <rdc200a_config_lvds_rx_clock>
 800484c:	4604      	mov	r4, r0

	if (ret)
 800484e:	bb6c      	cbnz	r4, 80048ac <rdc200a_config_input_resolution+0xe0>
		return ret;

	/* INPUT_SIZE_IDX */
	RDC_REG_SET(0x0201, (U8_T)((U16_T)input_res_idx << 2));
 8004850:	f005 03fc 	and.w	r3, r5, #252	; 0xfc
 8004854:	4d42      	ldr	r5, [pc, #264]	; (8004960 <rdc200a_config_input_resolution+0x194>)

	/* Change FIFO level. */
	DSI_DPI_PAYLOAD_FIFO_SEND_LEVEL = (h_input_size >> 2) * 3; // h_input_size * 3/4;
 8004856:	08b6      	lsrs	r6, r6, #2
	RDC_REG_SET(0x0201, (U8_T)((U16_T)input_res_idx << 2));
 8004858:	7829      	ldrb	r1, [r5, #0]
 800485a:	4620      	mov	r0, r4
 800485c:	f240 2201 	movw	r2, #513	; 0x201
	DSI_DPI_PAYLOAD_FIFO_SEND_LEVEL = (h_input_size >> 2) * 3; // h_input_size * 3/4;
 8004860:	eb06 0646 	add.w	r6, r6, r6, lsl #1
	RDC_REG_SET(0x0201, (U8_T)((U16_T)input_res_idx << 2));
 8004864:	f001 fe1c 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0269, (U8_T)(DSI_DPI_PAYLOAD_FIFO_SEND_LEVEL >> 8));
 8004868:	7829      	ldrb	r1, [r5, #0]
 800486a:	0a33      	lsrs	r3, r6, #8
 800486c:	4620      	mov	r0, r4
 800486e:	f240 2269 	movw	r2, #617	; 0x269
 8004872:	f001 fe15 	bl	80064a0 <rtiVC_WriteDevice16>
	U8_T scale_reg_val = h_scale_ration | (v_scale_ration << 2);
 8004876:	ea4a 0989 	orr.w	r9, sl, r9, lsl #2
	RDC_REG_SET(0x026A, DSI_DPI_PAYLOAD_FIFO_SEND_LEVEL & 0xFF);
 800487a:	7829      	ldrb	r1, [r5, #0]
 800487c:	b2f3      	uxtb	r3, r6
 800487e:	4620      	mov	r0, r4
 8004880:	f240 226a 	movw	r2, #618	; 0x26a
 8004884:	f001 fe0c 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0834, scale_reg_val);
 8004888:	7829      	ldrb	r1, [r5, #0]
 800488a:	464b      	mov	r3, r9
 800488c:	4620      	mov	r0, r4
 800488e:	f640 0234 	movw	r2, #2100	; 0x834
 8004892:	f001 fe05 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0934, scale_reg_val);
 8004896:	7829      	ldrb	r1, [r5, #0]
 8004898:	4620      	mov	r0, r4
 800489a:	464b      	mov	r3, r9
 800489c:	f640 1234 	movw	r2, #2356	; 0x934
 80048a0:	f001 fdfe 	bl	80064a0 <rtiVC_WriteDevice16>

	rdc200a_set_scaleup(h_scale_ration, v_scale_ration);

	rdc200a_set_image_display_format(fmt, FALSE);
 80048a4:	4621      	mov	r1, r4
 80048a6:	4638      	mov	r0, r7
 80048a8:	f7fe fe46 	bl	8003538 <rdc200a_set_image_display_format>

	return ret;
}
 80048ac:	4620      	mov	r0, r4
 80048ae:	b002      	add	sp, #8
 80048b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (v_scale) {
 80048b4:	29c8      	cmp	r1, #200	; 0xc8
 80048b6:	d11a      	bne.n	80048ee <rdc200a_config_input_resolution+0x122>
		v_ration = 3; /* x2 */
 80048b8:	f04f 0903 	mov.w	r9, #3
	if (dif_path == 0x2) /* MIPI */
 80048bc:	2c02      	cmp	r4, #2
		ret = rdc200a_config_mipi_rx_clock(pclk_hz);
 80048be:	4640      	mov	r0, r8
	if (dif_path == 0x2) /* MIPI */
 80048c0:	d1c2      	bne.n	8004848 <rdc200a_config_input_resolution+0x7c>
		ret = rdc200a_config_mipi_rx_clock(pclk_hz);
 80048c2:	f7ff fe55 	bl	8004570 <rdc200a_config_mipi_rx_clock>
 80048c6:	4604      	mov	r4, r0
 80048c8:	e7c1      	b.n	800484e <rdc200a_config_input_resolution+0x82>
	switch (h_scale) {
 80048ca:	2bc8      	cmp	r3, #200	; 0xc8
 80048cc:	d102      	bne.n	80048d4 <rdc200a_config_input_resolution+0x108>
		h_ration = 3; /* x2 */
 80048ce:	f04f 0a03 	mov.w	sl, #3
 80048d2:	e7a6      	b.n	8004822 <rdc200a_config_input_resolution+0x56>
	v_scale = (v_output_size * 100) / v_input_size;
 80048d4:	9b01      	ldr	r3, [sp, #4]
 80048d6:	2264      	movs	r2, #100	; 0x64
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	fbb3 f3f9 	udiv	r3, r3, r9
	switch (v_scale) {
 80048e0:	2b96      	cmp	r3, #150	; 0x96
 80048e2:	d035      	beq.n	8004950 <rdc200a_config_input_resolution+0x184>
 80048e4:	d906      	bls.n	80048f4 <rdc200a_config_input_resolution+0x128>
 80048e6:	2bc8      	cmp	r3, #200	; 0xc8
 80048e8:	d024      	beq.n	8004934 <rdc200a_config_input_resolution+0x168>
 80048ea:	f04f 0a00 	mov.w	sl, #0
 80048ee:	f04f 0900 	mov.w	r9, #0
 80048f2:	e7a6      	b.n	8004842 <rdc200a_config_input_resolution+0x76>
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d027      	beq.n	8004948 <rdc200a_config_input_resolution+0x17c>
 80048f8:	2b85      	cmp	r3, #133	; 0x85
 80048fa:	d1f6      	bne.n	80048ea <rdc200a_config_input_resolution+0x11e>
 80048fc:	f04f 0a00 	mov.w	sl, #0
 8004900:	f04f 0901 	mov.w	r9, #1
	switch (err_mask) {
 8004904:	e79d      	b.n	8004842 <rdc200a_config_input_resolution+0x76>
	v_scale = (v_output_size * 100) / v_input_size;
 8004906:	9a01      	ldr	r2, [sp, #4]
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	fbb3 f3f9 	udiv	r3, r3, r9
	switch (v_scale) {
 8004910:	2b96      	cmp	r3, #150	; 0x96
 8004912:	d01d      	beq.n	8004950 <rdc200a_config_input_resolution+0x184>
 8004914:	f04f 0a00 	mov.w	sl, #0
 8004918:	d804      	bhi.n	8004924 <rdc200a_config_input_resolution+0x158>
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d012      	beq.n	8004944 <rdc200a_config_input_resolution+0x178>
 800491e:	2b85      	cmp	r3, #133	; 0x85
 8004920:	d08d      	beq.n	800483e <rdc200a_config_input_resolution+0x72>
 8004922:	e7e4      	b.n	80048ee <rdc200a_config_input_resolution+0x122>
 8004924:	2bc8      	cmp	r3, #200	; 0xc8
 8004926:	d1e2      	bne.n	80048ee <rdc200a_config_input_resolution+0x122>
		v_ration = 3; /* x2 */
 8004928:	f04f 0903 	mov.w	r9, #3
 800492c:	e7c6      	b.n	80048bc <rdc200a_config_input_resolution+0xf0>
	switch (h_scale) {
 800492e:	f04f 0a02 	mov.w	sl, #2
 8004932:	e776      	b.n	8004822 <rdc200a_config_input_resolution+0x56>
	switch (v_scale) {
 8004934:	f04f 0a00 	mov.w	sl, #0
 8004938:	f04f 0903 	mov.w	r9, #3
 800493c:	e781      	b.n	8004842 <rdc200a_config_input_resolution+0x76>
		v_ration = 2; /* x1.5 */
 800493e:	f04f 0902 	mov.w	r9, #2
 8004942:	e77e      	b.n	8004842 <rdc200a_config_input_resolution+0x76>
	switch (v_scale) {
 8004944:	46d1      	mov	r9, sl
 8004946:	e77c      	b.n	8004842 <rdc200a_config_input_resolution+0x76>
 8004948:	f04f 0900 	mov.w	r9, #0
 800494c:	46ca      	mov	sl, r9
 800494e:	e778      	b.n	8004842 <rdc200a_config_input_resolution+0x76>
		h_ration = 0; /* x1 */
 8004950:	f04f 0a00 	mov.w	sl, #0
		v_ration = 2; /* x1.5 */
 8004954:	f04f 0902 	mov.w	r9, #2
 8004958:	e773      	b.n	8004842 <rdc200a_config_input_resolution+0x76>
 800495a:	bf00      	nop
 800495c:	080164e8 	.word	0x080164e8
 8004960:	2000001d 	.word	0x2000001d

08004964 <rdc200a_change_input_resolution2>:
 @ pclk_hz[in] Pixel clock in Hz.
 @NOTE Only support to Side By Side 3D.
*/
static int rdc200a_change_input_resolution2(VC_INPUT_RES_T res, BOOL_T enable_3D,
										U32_T pclk_hz)
{
 8004964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret = 0;
	U8_T prev_input_res_idx, input_res_idx = (U8_T)res;
	U8_T dif_path; /* Display Interface path */

	prev_input_res_idx = RDC_REG_GET(0x0201) >> 2;
 8004968:	4f21      	ldr	r7, [pc, #132]	; (80049f0 <rdc200a_change_input_resolution2+0x8c>)
{
 800496a:	4604      	mov	r4, r0
 800496c:	4615      	mov	r5, r2
 800496e:	460e      	mov	r6, r1
	prev_input_res_idx = RDC_REG_GET(0x0201) >> 2;
 8004970:	f240 2201 	movw	r2, #513	; 0x201
 8004974:	7839      	ldrb	r1, [r7, #0]
 8004976:	2000      	movs	r0, #0
 8004978:	f001 fd7e 	bl	8006478 <rtiVC_ReadDevice16>
	if (prev_input_res_idx == input_res_idx) {
 800497c:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8004980:	4284      	cmp	r4, r0
 8004982:	d02f      	beq.n	80049e4 <rdc200a_change_input_resolution2+0x80>
	switch (res) {
 8004984:	f1a4 0019 	sub.w	r0, r4, #25
 8004988:	2826      	cmp	r0, #38	; 0x26
 800498a:	d819      	bhi.n	80049c0 <rdc200a_change_input_resolution2+0x5c>
 800498c:	e8df f000 	tbb	[pc, r0]
 8004990:	14181814 	.word	0x14181814
 8004994:	18141414 	.word	0x18141414
 8004998:	18181818 	.word	0x18181818
 800499c:	14181818 	.word	0x14181818
 80049a0:	18181814 	.word	0x18181814
 80049a4:	18181818 	.word	0x18181818
 80049a8:	18181818 	.word	0x18181818
 80049ac:	18181818 	.word	0x18181818
 80049b0:	14141418 	.word	0x14141418
 80049b4:	1414      	.short	0x1414
 80049b6:	14          	.byte	0x14
 80049b7:	00          	.byte	0x00
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ret = rdc200a_config_input_resolution(dif_path, res, pclk_hz, enable_3D);

	return ret;
}
 80049bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dif_path = RDC_REG_GET(0x0200) & 0x3;
 80049c0:	7839      	ldrb	r1, [r7, #0]
 80049c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c6:	2000      	movs	r0, #0
 80049c8:	f001 fd56 	bl	8006478 <rtiVC_ReadDevice16>
	if ((dif_path != 0x02/* MIPI */) && (dif_path != 0x00))
 80049cc:	07c3      	lsls	r3, r0, #31
	dif_path = RDC_REG_GET(0x0200) & 0x3;
 80049ce:	f000 0703 	and.w	r7, r0, #3
	if ((dif_path != 0x02/* MIPI */) && (dif_path != 0x00))
 80049d2:	d40a      	bmi.n	80049ea <rdc200a_change_input_resolution2+0x86>
	ret = rdc200a_config_input_resolution(dif_path, res, pclk_hz, enable_3D);
 80049d4:	4633      	mov	r3, r6
 80049d6:	462a      	mov	r2, r5
 80049d8:	4621      	mov	r1, r4
 80049da:	4638      	mov	r0, r7
}
 80049dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ret = rdc200a_config_input_resolution(dif_path, res, pclk_hz, enable_3D);
 80049e0:	f7ff bef4 	b.w	80047cc <rdc200a_config_input_resolution>
		return 0;
 80049e4:	2000      	movs	r0, #0
}
 80049e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -2;
 80049ea:	f06f 0001 	mvn.w	r0, #1
 80049ee:	e7e5      	b.n	80049bc <rdc200a_change_input_resolution2+0x58>
 80049f0:	2000001d 	.word	0x2000001d

080049f4 <rdc200a_change_input_resolution>:
 @NOTE Only support to Side By Side 3D.
*/
static int rdc200a_change_input_resolution(VC_INPUT_RES_T res, BOOL_T enable_3D,
										U32_T h_blank, U32_T v_blank,
										U32_T frame_rate)
{
 80049f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f8:	461e      	mov	r6, r3
	int ret = 0;
	U32_T h_input_size = rdc200a_input_res[res].h_size;
 80049fa:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <rdc200a_change_input_resolution+0xac>)
	U32_T v_input_size = rdc200a_input_res[res].v_size;
	U8_T prev_input_res_idx, input_res_idx = (U8_T)res;
	U8_T dif_path; /* Display Interface path */
	U32_T pclk_hz;

	prev_input_res_idx = RDC_REG_GET(0x0201) >> 2;
 80049fc:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8004aa4 <rdc200a_change_input_resolution+0xb0>
	U32_T h_input_size = rdc200a_input_res[res].h_size;
 8004a00:	f833 8020 	ldrh.w	r8, [r3, r0, lsl #2]
{
 8004a04:	4617      	mov	r7, r2
	U32_T v_input_size = rdc200a_input_res[res].v_size;
 8004a06:	eb03 0280 	add.w	r2, r3, r0, lsl #2
{
 8004a0a:	b081      	sub	sp, #4
	U32_T v_input_size = rdc200a_input_res[res].v_size;
 8004a0c:	f8b2 a002 	ldrh.w	sl, [r2, #2]
{
 8004a10:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8004a14:	4604      	mov	r4, r0
 8004a16:	460d      	mov	r5, r1
	prev_input_res_idx = RDC_REG_GET(0x0201) >> 2;
 8004a18:	f240 2201 	movw	r2, #513	; 0x201
 8004a1c:	f89b 1000 	ldrb.w	r1, [fp]
 8004a20:	2000      	movs	r0, #0
 8004a22:	f001 fd29 	bl	8006478 <rtiVC_ReadDevice16>
	switch (res) {
 8004a26:	f1a4 0319 	sub.w	r3, r4, #25
 8004a2a:	2b26      	cmp	r3, #38	; 0x26
 8004a2c:	d81a      	bhi.n	8004a64 <rdc200a_change_input_resolution+0x70>
 8004a2e:	e8df f003 	tbb	[pc, r3]
 8004a32:	1914      	.short	0x1914
 8004a34:	14141419 	.word	0x14141419
 8004a38:	19191914 	.word	0x19191914
 8004a3c:	19191919 	.word	0x19191919
 8004a40:	19141419 	.word	0x19141419
 8004a44:	19191919 	.word	0x19191919
 8004a48:	19191919 	.word	0x19191919
 8004a4c:	19191919 	.word	0x19191919
 8004a50:	14191919 	.word	0x14191919
 8004a54:	14141414 	.word	0x14141414
 8004a58:	14          	.byte	0x14
 8004a59:	00          	.byte	0x00
 8004a5a:	f04f 30ff 	mov.w	r0, #4294967295
	pclk_hz = (h_input_size + h_blank) * (v_input_size + v_blank) * frame_rate;

	ret = rdc200a_config_input_resolution(dif_path, res, pclk_hz, enable_3D);

	return ret;
}
 8004a5e:	b001      	add	sp, #4
 8004a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dif_path = RDC_REG_GET(0x0200) & 0x3;
 8004a64:	f89b 1000 	ldrb.w	r1, [fp]
 8004a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f001 fd03 	bl	8006478 <rtiVC_ReadDevice16>
	if ((dif_path != 0x02/* MIPI */) && (dif_path != 0x00))
 8004a72:	07c3      	lsls	r3, r0, #31
	dif_path = RDC_REG_GET(0x0200) & 0x3;
 8004a74:	f000 0c03 	and.w	ip, r0, #3
	if ((dif_path != 0x02/* MIPI */) && (dif_path != 0x00))
 8004a78:	d40e      	bmi.n	8004a98 <rdc200a_change_input_resolution+0xa4>
	pclk_hz = (h_input_size + h_blank) * (v_input_size + v_blank) * frame_rate;
 8004a7a:	eb08 0207 	add.w	r2, r8, r7
 8004a7e:	44b2      	add	sl, r6
 8004a80:	fb0a f202 	mul.w	r2, sl, r2
	ret = rdc200a_config_input_resolution(dif_path, res, pclk_hz, enable_3D);
 8004a84:	462b      	mov	r3, r5
 8004a86:	fb09 f202 	mul.w	r2, r9, r2
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4660      	mov	r0, ip
}
 8004a8e:	b001      	add	sp, #4
 8004a90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ret = rdc200a_config_input_resolution(dif_path, res, pclk_hz, enable_3D);
 8004a94:	f7ff be9a 	b.w	80047cc <rdc200a_config_input_resolution>
		return -2;
 8004a98:	f06f 0001 	mvn.w	r0, #1
 8004a9c:	e7df      	b.n	8004a5e <rdc200a_change_input_resolution+0x6a>
 8004a9e:	bf00      	nop
 8004aa0:	080164e8 	.word	0x080164e8
 8004aa4:	2000001d 	.word	0x2000001d

08004aa8 <RDC200A_Probe>:
	dev->led_duty = 15; /* Default. HMD system. Beam project: 95 */
 8004aa8:	220f      	movs	r2, #15
	dev->min_led_duty = 5;
 8004aaa:	f645 7305 	movw	r3, #24325	; 0x5f05

int RDC200A_Probe(VC_RDC_DEV_INFO_T *dev)
{
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	4604      	mov	r4, r0
	dev->led_duty = 15; /* Default. HMD system. Beam project: 95 */
 8004ab2:	7102      	strb	r2, [r0, #4]
	dev->min_led_duty = 5;
 8004ab4:	8003      	strh	r3, [r0, #0]
	int ret;

	rdc200a_set_default(dev);

	ret = RDC200A_ProbeFLASH(dev);
 8004ab6:	f001 f84f 	bl	8005b58 <RDC200A_ProbeFLASH>

	dev->get_fw_version = rdc200a_get_fw_version;
	dev->prepare_controller = rdc200a_prepare_controller;
 8004aba:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <RDC200A_Probe+0xc8>)
 8004abc:	62a3      	str	r3, [r4, #40]	; 0x28

#endif

	dev->get_device_id = rdc200a_get_device_id;

	dev->enable_test_pattern = rdc200a_enable_test_pattern;
 8004abe:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <RDC200A_Probe+0xcc>)
 8004ac0:	6423      	str	r3, [r4, #64]	; 0x40
	dev->generate_test_pattern = rdc200a_generate_test_pattern;


	dev->update_lut = rdc200a_update_lut_from_flash;
 8004ac2:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <RDC200A_Probe+0xd0>)
 8004ac4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	dev->get_fw_version = rdc200a_get_fw_version;
 8004ac8:	4a2c      	ldr	r2, [pc, #176]	; (8004b7c <RDC200A_Probe+0xd4>)
	dev->update_gamma_lut = rdc200a_update_gamma_lut;

	dev->enable_distortion_correction = rdc200a_enable_cokoa;
 8004aca:	4b2d      	ldr	r3, [pc, #180]	; (8004b80 <RDC200A_Probe+0xd8>)
	dev->get_fw_version = rdc200a_get_fw_version;
 8004acc:	6222      	str	r2, [r4, #32]
	dev->enable_distortion_correction = rdc200a_enable_cokoa;
 8004ace:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	dev->generate_test_pattern = rdc200a_generate_test_pattern;
 8004ad2:	4a2c      	ldr	r2, [pc, #176]	; (8004b84 <RDC200A_Probe+0xdc>)

	dev->get_output_resolution = rdc200a_get_output_resolution;

	dev->poweron_panel = rdc200a_poweron_panel;
 8004ad4:	4b2c      	ldr	r3, [pc, #176]	; (8004b88 <RDC200A_Probe+0xe0>)
	dev->generate_test_pattern = rdc200a_generate_test_pattern;
 8004ad6:	6462      	str	r2, [r4, #68]	; 0x44
	dev->poweron_panel = rdc200a_poweron_panel;
 8004ad8:	6263      	str	r3, [r4, #36]	; 0x24
	dev->get_device_id = rdc200a_get_device_id;
 8004ada:	492c      	ldr	r1, [pc, #176]	; (8004b8c <RDC200A_Probe+0xe4>)
	dev->get_output_resolution = rdc200a_get_output_resolution;
 8004adc:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <RDC200A_Probe+0xe8>)

 	dev->enable_gamma_correction = rdc200a_enable_gamma_correction;

	dev->set_image_display_format = rdc200a_set_image_display_format;
 8004ade:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <RDC200A_Probe+0xec>)
	dev->get_device_id = rdc200a_get_device_id;
 8004ae0:	61e1      	str	r1, [r4, #28]
	dev->get_output_resolution = rdc200a_get_output_resolution;
 8004ae2:	67e2      	str	r2, [r4, #124]	; 0x7c
	dev->set_image_display_format = rdc200a_set_image_display_format;
 8004ae4:	64a3      	str	r3, [r4, #72]	; 0x48
	dev->update_gamma_lut = rdc200a_update_gamma_lut;
 8004ae6:	492c      	ldr	r1, [pc, #176]	; (8004b98 <RDC200A_Probe+0xf0>)

	dev->shift_horizontal_pixel = rdc200a_shift_horizontal_pixel;
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	; (8004b9c <RDC200A_Probe+0xf4>)
	dev->shift_vertical_pixel = rdc200a_shift_vertical_pixel;
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <RDC200A_Probe+0xf8>)
	dev->update_gamma_lut = rdc200a_update_gamma_lut;
 8004aec:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
 	dev->enable_gamma_correction = rdc200a_enable_gamma_correction;
 8004af0:	492c      	ldr	r1, [pc, #176]	; (8004ba4 <RDC200A_Probe+0xfc>)
 8004af2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	dev->shift_vertical_pixel = rdc200a_shift_vertical_pixel;
 8004af6:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c

	dev->get_frame_rate = rdc200a_get_frame_rate;
 8004afa:	492b      	ldr	r1, [pc, #172]	; (8004ba8 <RDC200A_Probe+0x100>)
	dev->step_frame_rate = rdc200a_step_frame_rate;
 8004afc:	4b2b      	ldr	r3, [pc, #172]	; (8004bac <RDC200A_Probe+0x104>)

	dev->get_led_duty = rdc200a_get_led_duty;
 8004afe:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <RDC200A_Probe+0x108>)
	dev->step_frame_rate = rdc200a_step_frame_rate;
 8004b00:	e9c4 311d 	strd	r3, r1, [r4, #116]	; 0x74
	dev->set_led_duty = rdc200a_set_led_duty;
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <RDC200A_Probe+0x10c>)
	dev->fill_step_value = rdc200a_fill_step_value;
 8004b06:	492c      	ldr	r1, [pc, #176]	; (8004bb8 <RDC200A_Probe+0x110>)
 8004b08:	6661      	str	r1, [r4, #100]	; 0x64
	dev->set_led_duty = rdc200a_set_led_duty;
 8004b0a:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68

	dev->enable_video_sync_interrupt = rdc200a_enable_video_sync_interrupt;
 8004b0e:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <RDC200A_Probe+0x114>)
 8004b10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	dev->disable_video_sync_interrupt = rdc200a_disable_video_sync_interrupt;
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <RDC200A_Probe+0x118>)

	dev->request_atw_shift_pixel = rdc200a_request_atw_shift_pixel;
 8004b16:	4b2b      	ldr	r3, [pc, #172]	; (8004bc4 <RDC200A_Probe+0x11c>)

	dev->change_input_display_interface = rdc200a_change_input_display_interface;
 8004b18:	492b      	ldr	r1, [pc, #172]	; (8004bc8 <RDC200A_Probe+0x120>)
 8004b1a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
	dev->request_atw_shift_pixel = rdc200a_request_atw_shift_pixel;
 8004b1e:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88

	dev->change_input_resolution = rdc200a_change_input_resolution;
 8004b22:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <RDC200A_Probe+0x124>)
 8004b24:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	dev->change_input_resolution2 = rdc200a_change_input_resolution2;
 8004b28:	4a29      	ldr	r2, [pc, #164]	; (8004bd0 <RDC200A_Probe+0x128>)

	dev->draw_bitmap_osd = rdc200a_draw_bitmap_osd;
 8004b2a:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <RDC200A_Probe+0x12c>)
	dev->move_bitmap_osd = rdc200a_move_bitmap_osd;
 8004b2c:	492a      	ldr	r1, [pc, #168]	; (8004bd8 <RDC200A_Probe+0x130>)
	dev->draw_bitmap_osd = rdc200a_draw_bitmap_osd;
 8004b2e:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
	dev->show_bitmap_osd = rdc200a_show_bitmap_osd;
 8004b32:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <RDC200A_Probe+0x134>)
	dev->hide_bitmap_osd = rdc200a_hide_bitmap_osd;
 8004b34:	4a2a      	ldr	r2, [pc, #168]	; (8004be0 <RDC200A_Probe+0x138>)
	dev->show_bitmap_osd = rdc200a_show_bitmap_osd;
 8004b36:	e9c4 132c 	strd	r1, r3, [r4, #176]	; 0xb0
	dev->change_property_bitmap_osd = rdc200a_change_property_bitmap_osd;
 8004b3a:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <RDC200A_Probe+0x13c>)
	dev->change_dimension_bitmap_osd = rdc200a_change_dimension_bitmap_osd;
 8004b3c:	492a      	ldr	r1, [pc, #168]	; (8004be8 <RDC200A_Probe+0x140>)
	dev->change_property_bitmap_osd = rdc200a_change_property_bitmap_osd;
 8004b3e:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
	dev->disable_bitmap_osd = rdc200a_disable_bitmap_osd;
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <RDC200A_Probe+0x144>)

	dev->draw_text_osd = rdc200a_draw_text_osd;
 8004b44:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <RDC200A_Probe+0x148>)
	dev->disable_bitmap_osd = rdc200a_disable_bitmap_osd;
 8004b46:	e9c4 1330 	strd	r1, r3, [r4, #192]	; 0xc0
	dev->move_text_osd = rdc200a_move_text_osd;
 8004b4a:	4b2a      	ldr	r3, [pc, #168]	; (8004bf4 <RDC200A_Probe+0x14c>)
	dev->show_text_osd = rdc200a_show_text_osd;
 8004b4c:	492a      	ldr	r1, [pc, #168]	; (8004bf8 <RDC200A_Probe+0x150>)
	dev->move_text_osd = rdc200a_move_text_osd;
 8004b4e:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
	dev->hide_text_osd = rdc200a_hide_text_osd;
 8004b52:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <RDC200A_Probe+0x154>)
	dev->change_property_text_osd = rdc200a_change_property_text_osd;
 8004b54:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <RDC200A_Probe+0x158>)
	dev->hide_text_osd = rdc200a_hide_text_osd;
 8004b56:	e9c4 1334 	strd	r1, r3, [r4, #208]	; 0xd0
	dev->change_dimension_text_osd = rdc200a_change_dimension_text_osd;
 8004b5a:	4b2a      	ldr	r3, [pc, #168]	; (8004c04 <RDC200A_Probe+0x15c>)
	dev->disable_text_osd = rdc200a_disable_text_osd;
 8004b5c:	492a      	ldr	r1, [pc, #168]	; (8004c08 <RDC200A_Probe+0x160>)
	dev->change_dimension_text_osd = rdc200a_change_dimension_text_osd;
 8004b5e:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8

	dev->change_laser_sparkling_pwm = rdc200a_change_laser_sparkling_pwm;
 8004b62:	4a2a      	ldr	r2, [pc, #168]	; (8004c0c <RDC200A_Probe+0x164>)
	dev->disable_laser_sparkling = rdc200a_disable_laser_sparkling;
 8004b64:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <RDC200A_Probe+0x168>)
 8004b66:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	dev->change_laser_sparkling_pwm = rdc200a_change_laser_sparkling_pwm;
 8004b6a:	e9c4 1238 	strd	r1, r2, [r4, #224]	; 0xe0
	dev->request_led_color_mode = rdc200_request_led_color_mode;
	dev->confirm_led_control = rdc200_confirm_led_control;
#endif

	return ret;
}
 8004b6e:	bd10      	pop	{r4, pc}
 8004b70:	08005271 	.word	0x08005271
 8004b74:	0800315d 	.word	0x0800315d
 8004b78:	08002d31 	.word	0x08002d31
 8004b7c:	08002009 	.word	0x08002009
 8004b80:	08004dd9 	.word	0x08004dd9
 8004b84:	08002cf5 	.word	0x08002cf5
 8004b88:	080037a1 	.word	0x080037a1
 8004b8c:	08001fd9 	.word	0x08001fd9
 8004b90:	08001eb9 	.word	0x08001eb9
 8004b94:	08003539 	.word	0x08003539
 8004b98:	08002df9 	.word	0x08002df9
 8004b9c:	08002b69 	.word	0x08002b69
 8004ba0:	080029e1 	.word	0x080029e1
 8004ba4:	08004c89 	.word	0x08004c89
 8004ba8:	08001eb5 	.word	0x08001eb5
 8004bac:	080052d5 	.word	0x080052d5
 8004bb0:	080033d9 	.word	0x080033d9
 8004bb4:	08002339 	.word	0x08002339
 8004bb8:	08003431 	.word	0x08003431
 8004bbc:	0800206d 	.word	0x0800206d
 8004bc0:	0800231d 	.word	0x0800231d
 8004bc4:	08002ebd 	.word	0x08002ebd
 8004bc8:	08003b35 	.word	0x08003b35
 8004bcc:	080049f5 	.word	0x080049f5
 8004bd0:	08004965 	.word	0x08004965
 8004bd4:	08003d39 	.word	0x08003d39
 8004bd8:	08003f71 	.word	0x08003f71
 8004bdc:	08003639 	.word	0x08003639
 8004be0:	080034f1 	.word	0x080034f1
 8004be4:	080037fd 	.word	0x080037fd
 8004be8:	08002205 	.word	0x08002205
 8004bec:	08002055 	.word	0x08002055
 8004bf0:	08004169 	.word	0x08004169
 8004bf4:	080039d1 	.word	0x080039d1
 8004bf8:	080021dd 	.word	0x080021dd
 8004bfc:	080021bd 	.word	0x080021bd
 8004c00:	080038e1 	.word	0x080038e1
 8004c04:	080020b1 	.word	0x080020b1
 8004c08:	0800203d 	.word	0x0800203d
 8004c0c:	08002e65 	.word	0x08002e65
 8004c10:	08002089 	.word	0x08002089

08004c14 <RDC_REG_GET16>:
		I2CWriteBytes(&RDC200A_I2C1, RDC200A_7bit_ADDR, (uint8_t)reg, (uint8_t*)&val, sizeof(val));
#endif
}

uint32_t RDC_REG_GET16(uint16_t reg)
{
 8004c14:	b530      	push	{r4, r5, lr}
 8004c16:	b087      	sub	sp, #28
#if 1
	// TODO get byte data
	uint16_t timeout = 0;
	uint8_t read_data[4] = {0};
	if(HAL_I2C_Master_Transmit(&RDC200A_I2C1, (RDC200A_7bit_ADDR << 1) | I2C_WRITE , (uint8_t*)&reg, 2, I2C_TIMEOUT) != HAL_OK)
 8004c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	uint8_t read_data[4] = {0};
 8004c1c:	2100      	movs	r1, #0
{
 8004c1e:	4604      	mov	r4, r0
	if(HAL_I2C_Master_Transmit(&RDC200A_I2C1, (RDC200A_7bit_ADDR << 1) | I2C_WRITE , (uint8_t*)&reg, 2, I2C_TIMEOUT) != HAL_OK)
 8004c20:	9300      	str	r3, [sp, #0]
	uint8_t read_data[4] = {0};
 8004c22:	9105      	str	r1, [sp, #20]
	if(HAL_I2C_Master_Transmit(&RDC200A_I2C1, (RDC200A_7bit_ADDR << 1) | I2C_WRITE , (uint8_t*)&reg, 2, I2C_TIMEOUT) != HAL_OK)
 8004c24:	4817      	ldr	r0, [pc, #92]	; (8004c84 <RDC_REG_GET16+0x70>)
{
 8004c26:	f8ad 400e 	strh.w	r4, [sp, #14]
	if(HAL_I2C_Master_Transmit(&RDC200A_I2C1, (RDC200A_7bit_ADDR << 1) | I2C_WRITE , (uint8_t*)&reg, 2, I2C_TIMEOUT) != HAL_OK)
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	f10d 020e 	add.w	r2, sp, #14
 8004c30:	2194      	movs	r1, #148	; 0x94
 8004c32:	f005 fcc3 	bl	800a5bc <HAL_I2C_Master_Transmit>
 8004c36:	b9e0      	cbnz	r0, 8004c72 <RDC_REG_GET16+0x5e>
	{
		Error_Handler();
	}
	while (HAL_I2C_GetState(&RDC200A_I2C1) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 8004c38:	4d12      	ldr	r5, [pc, #72]	; (8004c84 <RDC_REG_GET16+0x70>)
{
 8004c3a:	f240 34e9 	movw	r4, #1001	; 0x3e9
 8004c3e:	e002      	b.n	8004c46 <RDC_REG_GET16+0x32>
	while (HAL_I2C_GetState(&RDC200A_I2C1) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 8004c40:	b154      	cbz	r4, 8004c58 <RDC_REG_GET16+0x44>
 8004c42:	f004 fd83 	bl	800974c <HAL_Delay>
 8004c46:	4628      	mov	r0, r5
 8004c48:	f006 fcb6 	bl	800b5b8 <HAL_I2C_GetState>
 8004c4c:	3c01      	subs	r4, #1
 8004c4e:	2820      	cmp	r0, #32
 8004c50:	b2a4      	uxth	r4, r4
 8004c52:	f04f 000a 	mov.w	r0, #10
 8004c56:	d1f3      	bne.n	8004c40 <RDC_REG_GET16+0x2c>

	if(HAL_I2C_Master_Receive(&RDC200A_I2C1, (RDC200A_7bit_ADDR << 1) | I2C_READ , (uint8_t*)&read_data, sizeof(read_data), I2C_TIMEOUT) != HAL_OK)
 8004c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	4809      	ldr	r0, [pc, #36]	; (8004c84 <RDC_REG_GET16+0x70>)
 8004c60:	2304      	movs	r3, #4
 8004c62:	aa05      	add	r2, sp, #20
 8004c64:	2195      	movs	r1, #149	; 0x95
 8004c66:	f005 fe55 	bl	800a914 <HAL_I2C_Master_Receive>
 8004c6a:	b928      	cbnz	r0, 8004c78 <RDC_REG_GET16+0x64>
	uint8_t read_data[2] = {0};
	I2CReadBytes16(&RDC200A_I2C1, RDC200A_7bit_ADDR, reg, (uint8_t*)&read_data, sizeof(read_data));
#endif
	uint32_t val = ((uint32_t)read_data[3] << 24 | (uint32_t)read_data[2] << 16 | (uint32_t)read_data[1] << 8) | (uint32_t)read_data[0];
	return val;
}
 8004c6c:	9805      	ldr	r0, [sp, #20]
 8004c6e:	b007      	add	sp, #28
 8004c70:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8004c72:	f004 fa79 	bl	8009168 <Error_Handler>
 8004c76:	e7df      	b.n	8004c38 <RDC_REG_GET16+0x24>
		Error_Handler();
 8004c78:	f004 fa76 	bl	8009168 <Error_Handler>
}
 8004c7c:	9805      	ldr	r0, [sp, #20]
 8004c7e:	b007      	add	sp, #28
 8004c80:	bd30      	pop	{r4, r5, pc}
 8004c82:	bf00      	nop
 8004c84:	20003b48 	.word	0x20003b48

08004c88 <rdc200a_enable_gamma_correction>:
{
 8004c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8004c8c:	f010 0401 	ands.w	r4, r0, #1
{
 8004c90:	460e      	mov	r6, r1
 8004c92:	4617      	mov	r7, r2
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8004c94:	b2c5      	uxtb	r5, r0
 8004c96:	d115      	bne.n	8004cc4 <rdc200a_enable_gamma_correction+0x3c>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8004c98:	f015 0502 	ands.w	r5, r5, #2
 8004c9c:	d102      	bne.n	8004ca4 <rdc200a_enable_gamma_correction+0x1c>
}
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gamma_en_state[1] = RDC_REG_GET16(0x0973) & 0x1;
 8004ca4:	f640 1073 	movw	r0, #2419	; 0x973
 8004ca8:	f7ff ffb4 	bl	8004c14 <RDC_REG_GET16>
		if (enable == TRUE) {
 8004cac:	2e01      	cmp	r6, #1
		gamma_en_state[1] = RDC_REG_GET16(0x0973) & 0x1;
 8004cae:	f000 0201 	and.w	r2, r0, #1
		if (enable == TRUE) {
 8004cb2:	d047      	beq.n	8004d44 <rdc200a_enable_gamma_correction+0xbc>
			if (gamma_en_state[1] == 1) // Is gamma enabled for the port 1?
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	d173      	bne.n	8004da0 <rdc200a_enable_gamma_correction+0x118>
		RDC_REG_MASK_SET(0x0973, 0x01, gamma_en_val);
 8004cb8:	2101      	movs	r1, #1
 8004cba:	f640 1073 	movw	r0, #2419	; 0x973
 8004cbe:	f002 fa43 	bl	8007148 <RDC_REG_MASK_SET>
	if (panel_offon_mask)
 8004cc2:	e7ec      	b.n	8004c9e <rdc200a_enable_gamma_correction+0x16>
		gamma_en_state[0] = RDC_REG_GET16(0x0873) & 0x1;
 8004cc4:	f640 0073 	movw	r0, #2163	; 0x873
 8004cc8:	f7ff ffa4 	bl	8004c14 <RDC_REG_GET16>
		if (enable == TRUE) {
 8004ccc:	2e01      	cmp	r6, #1
		gamma_en_state[0] = RDC_REG_GET16(0x0873) & 0x1;
 8004cce:	f000 0801 	and.w	r8, r0, #1
		if (enable == TRUE) {
 8004cd2:	d048      	beq.n	8004d66 <rdc200a_enable_gamma_correction+0xde>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8004cd4:	f015 0502 	ands.w	r5, r5, #2
 8004cd8:	d13c      	bne.n	8004d54 <rdc200a_enable_gamma_correction+0xcc>
	if (panel_offon_mask)
 8004cda:	f1b8 0f00 	cmp.w	r8, #0
 8004cde:	d057      	beq.n	8004d90 <rdc200a_enable_gamma_correction+0x108>
 8004ce0:	2600      	movs	r6, #0
	rd0015 = RDC_REG_GET(0x0015);
 8004ce2:	4f3c      	ldr	r7, [pc, #240]	; (8004dd4 <rdc200a_enable_gamma_correction+0x14c>)
 8004ce4:	2215      	movs	r2, #21
 8004ce6:	7839      	ldrb	r1, [r7, #0]
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f001 fbc5 	bl	8006478 <rtiVC_ReadDevice16>
	RDC_REG_SET(0x0015, rd0015);
 8004cee:	7839      	ldrb	r1, [r7, #0]
 8004cf0:	f000 03f3 	and.w	r3, r0, #243	; 0xf3
 8004cf4:	2215      	movs	r2, #21
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f001 fbd2 	bl	80064a0 <rtiVC_WriteDevice16>
	if (ctrl_port & VC_PANEL_CTRL_PORT_0)
 8004cfc:	b12c      	cbz	r4, 8004d0a <rdc200a_enable_gamma_correction+0x82>
		RDC_REG_MASK_SET(0x0873, 0x01, gamma_en_val);
 8004cfe:	4632      	mov	r2, r6
 8004d00:	2101      	movs	r1, #1
 8004d02:	f640 0073 	movw	r0, #2163	; 0x873
 8004d06:	f002 fa1f 	bl	8007148 <RDC_REG_MASK_SET>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1)
 8004d0a:	b12d      	cbz	r5, 8004d18 <rdc200a_enable_gamma_correction+0x90>
		RDC_REG_MASK_SET(0x0973, 0x01, gamma_en_val);
 8004d0c:	4632      	mov	r2, r6
 8004d0e:	2101      	movs	r1, #1
 8004d10:	f640 1073 	movw	r0, #2419	; 0x973
 8004d14:	f002 fa18 	bl	8007148 <RDC_REG_MASK_SET>
	if (panel_offon_mask)
 8004d18:	f1b8 0f00 	cmp.w	r8, #0
 8004d1c:	d0bf      	beq.n	8004c9e <rdc200a_enable_gamma_correction+0x16>
	rd0015 = RDC_REG_GET(0x0015);
 8004d1e:	4c2d      	ldr	r4, [pc, #180]	; (8004dd4 <rdc200a_enable_gamma_correction+0x14c>)
 8004d20:	2215      	movs	r2, #21
 8004d22:	7821      	ldrb	r1, [r4, #0]
 8004d24:	2000      	movs	r0, #0
 8004d26:	f001 fba7 	bl	8006478 <rtiVC_ReadDevice16>
		rd0015 |= ((rd0015 & 0x03) << 2);
 8004d2a:	0083      	lsls	r3, r0, #2
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	4303      	orrs	r3, r0
	RDC_REG_SET(0x0015, rd0015);
 8004d32:	7821      	ldrb	r1, [r4, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2215      	movs	r2, #21
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f001 fbb1 	bl	80064a0 <rtiVC_WriteDevice16>
}
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (gamma_en_state[1] == 0) // Is gamma disabled for the port 1?
 8004d44:	bb32      	cbnz	r2, 8004d94 <rdc200a_enable_gamma_correction+0x10c>
			rdc200a_update_gamma_lut(1, lut_offset[1]);
 8004d46:	7939      	ldrb	r1, [r7, #4]
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f7fe f855 	bl	8002df8 <rdc200a_update_gamma_lut>
 8004d4e:	f04f 0802 	mov.w	r8, #2
 8004d52:	e7c6      	b.n	8004ce2 <rdc200a_enable_gamma_correction+0x5a>
		gamma_en_state[1] = RDC_REG_GET16(0x0973) & 0x1;
 8004d54:	f640 1073 	movw	r0, #2419	; 0x973
 8004d58:	f7ff ff5c 	bl	8004c14 <RDC_REG_GET16>
			if (gamma_en_state[1] == 1) // Is gamma enabled for the port 1?
 8004d5c:	07c3      	lsls	r3, r0, #31
 8004d5e:	d5bc      	bpl.n	8004cda <rdc200a_enable_gamma_correction+0x52>
				panel_offon_mask |= VC_PANEL_CTRL_PORT_1;
 8004d60:	f048 0802 	orr.w	r8, r8, #2
 8004d64:	e7bc      	b.n	8004ce0 <rdc200a_enable_gamma_correction+0x58>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8004d66:	f015 0502 	ands.w	r5, r5, #2
			if (gamma_en_state[0] == 0) // Is gamma disabled for the port 0?
 8004d6a:	f1c8 0801 	rsb	r8, r8, #1
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8004d6e:	d11a      	bne.n	8004da6 <rdc200a_enable_gamma_correction+0x11e>
			rdc200a_update_gamma_lut(0, lut_offset[0]);
 8004d70:	7839      	ldrb	r1, [r7, #0]
 8004d72:	4628      	mov	r0, r5
 8004d74:	f7fe f840 	bl	8002df8 <rdc200a_update_gamma_lut>
	if (panel_offon_mask)
 8004d78:	f1b8 0f00 	cmp.w	r8, #0
 8004d7c:	d001      	beq.n	8004d82 <rdc200a_enable_gamma_correction+0xfa>
 8004d7e:	4626      	mov	r6, r4
 8004d80:	e7af      	b.n	8004ce2 <rdc200a_enable_gamma_correction+0x5a>
		RDC_REG_MASK_SET(0x0873, 0x01, gamma_en_val);
 8004d82:	4632      	mov	r2, r6
 8004d84:	4631      	mov	r1, r6
 8004d86:	f640 0073 	movw	r0, #2163	; 0x873
 8004d8a:	f002 f9dd 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 8004d8e:	e786      	b.n	8004c9e <rdc200a_enable_gamma_correction+0x16>
	if (panel_offon_mask)
 8004d90:	4646      	mov	r6, r8
 8004d92:	e7b4      	b.n	8004cfe <rdc200a_enable_gamma_correction+0x76>
			rdc200a_update_gamma_lut(1, lut_offset[1]);
 8004d94:	7939      	ldrb	r1, [r7, #4]
 8004d96:	4630      	mov	r0, r6
 8004d98:	f7fe f82e 	bl	8002df8 <rdc200a_update_gamma_lut>
 8004d9c:	46a0      	mov	r8, r4
 8004d9e:	e7b4      	b.n	8004d0a <rdc200a_enable_gamma_correction+0x82>
			if (gamma_en_state[1] == 1) // Is gamma enabled for the port 1?
 8004da0:	f04f 0802 	mov.w	r8, #2
	if (panel_offon_mask)
 8004da4:	e79c      	b.n	8004ce0 <rdc200a_enable_gamma_correction+0x58>
		gamma_en_state[1] = RDC_REG_GET16(0x0973) & 0x1;
 8004da6:	f640 1073 	movw	r0, #2419	; 0x973
 8004daa:	f7ff ff33 	bl	8004c14 <RDC_REG_GET16>
			if (gamma_en_state[1] == 0) // Is gamma disabled for the port 1?
 8004dae:	07c2      	lsls	r2, r0, #31
 8004db0:	d401      	bmi.n	8004db6 <rdc200a_enable_gamma_correction+0x12e>
				panel_offon_mask |= VC_PANEL_CTRL_PORT_1;
 8004db2:	f048 0802 	orr.w	r8, r8, #2
			rdc200a_update_gamma_lut(0, lut_offset[0]);
 8004db6:	7839      	ldrb	r1, [r7, #0]
 8004db8:	2000      	movs	r0, #0
 8004dba:	f7fe f81d 	bl	8002df8 <rdc200a_update_gamma_lut>
			rdc200a_update_gamma_lut(1, lut_offset[1]);
 8004dbe:	7939      	ldrb	r1, [r7, #4]
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	f7fe f819 	bl	8002df8 <rdc200a_update_gamma_lut>
	if (panel_offon_mask)
 8004dc6:	4626      	mov	r6, r4
 8004dc8:	f1b8 0f00 	cmp.w	r8, #0
 8004dcc:	d097      	beq.n	8004cfe <rdc200a_enable_gamma_correction+0x76>
 8004dce:	4626      	mov	r6, r4
 8004dd0:	e787      	b.n	8004ce2 <rdc200a_enable_gamma_correction+0x5a>
 8004dd2:	bf00      	nop
 8004dd4:	2000001d 	.word	0x2000001d

08004dd8 <rdc200a_enable_cokoa>:
{
 8004dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8004ddc:	f010 0701 	ands.w	r7, r0, #1
{
 8004de0:	460e      	mov	r6, r1
 8004de2:	4691      	mov	r9, r2
 8004de4:	461d      	mov	r5, r3
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8004de6:	b2c4      	uxtb	r4, r0
 8004de8:	d170      	bne.n	8004ecc <rdc200a_enable_cokoa+0xf4>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8004dea:	f014 0402 	ands.w	r4, r4, #2
 8004dee:	d109      	bne.n	8004e04 <rdc200a_enable_cokoa+0x2c>
	if (dc_en == TRUE) {
 8004df0:	2901      	cmp	r1, #1
 8004df2:	d013      	beq.n	8004e1c <rdc200a_enable_cokoa+0x44>
	if (vc_panel_attached_port_mask == VC_PANEL_CTRL_PORT_1) {
 8004df4:	4bb5      	ldr	r3, [pc, #724]	; (80050cc <rdc200a_enable_cokoa+0x2f4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f000 80c7 	beq.w	8004f8c <rdc200a_enable_cokoa+0x1b4>
}
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cokoa_en_state[1] = RDC_REG_GET16(0x0971) & 0x1;
 8004e04:	f640 1071 	movw	r0, #2417	; 0x971
 8004e08:	f7ff ff04 	bl	8004c14 <RDC_REG_GET16>
		if (dc_en == TRUE) {
 8004e0c:	2e01      	cmp	r6, #1
		cokoa_en_state[1] = RDC_REG_GET16(0x0971) & 0x1;
 8004e0e:	f000 0801 	and.w	r8, r0, #1
		if (dc_en == TRUE) {
 8004e12:	d07f      	beq.n	8004f14 <rdc200a_enable_cokoa+0x13c>
			if (cokoa_en_state[1] == 1) // Is cokoa enabled for the specified port?
 8004e14:	f1b8 0f00 	cmp.w	r8, #0
 8004e18:	f040 8121 	bne.w	800505e <rdc200a_enable_cokoa+0x286>
	if (vc_panel_attached_port_mask == VC_PANEL_CTRL_PORT_1) {
 8004e1c:	4bab      	ldr	r3, [pc, #684]	; (80050cc <rdc200a_enable_cokoa+0x2f4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d1ec      	bne.n	8004dfe <rdc200a_enable_cokoa+0x26>
 8004e24:	f04f 0800 	mov.w	r8, #0
 8004e28:	4647      	mov	r7, r8
		if (cokoa_en_state[1] == 1)
 8004e2a:	ea4f 1888 	mov.w	r8, r8, lsl #6
 8004e2e:	4ea8      	ldr	r6, [pc, #672]	; (80050d0 <rdc200a_enable_cokoa+0x2f8>)
 8004e30:	fa1f f888 	uxth.w	r8, r8
		for (addr = 0x0853; addr <= 0x086A; addr += 2) {
 8004e34:	f640 0453 	movw	r4, #2131	; 0x853
 8004e38:	f640 096b 	movw	r9, #2155	; 0x86b
			led_msb = RDC_REG_GET(addr + 0x100); // Get the led from port 1.
 8004e3c:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8004e40:	7831      	ldrb	r1, [r6, #0]
 8004e42:	b292      	uxth	r2, r2
 8004e44:	2000      	movs	r0, #0
 8004e46:	f001 fb17 	bl	8006478 <rtiVC_ReadDevice16>
			led_lsb = RDC_REG_GET((addr + 0x100)+1);
 8004e4a:	f204 1201 	addw	r2, r4, #257	; 0x101
			led_msb = RDC_REG_GET(addr + 0x100); // Get the led from port 1.
 8004e4e:	4605      	mov	r5, r0
			led_lsb = RDC_REG_GET((addr + 0x100)+1);
 8004e50:	7831      	ldrb	r1, [r6, #0]
 8004e52:	b292      	uxth	r2, r2
 8004e54:	2000      	movs	r0, #0
 8004e56:	f001 fb0f 	bl	8006478 <rtiVC_ReadDevice16>
			val = ((U16_T)led_msb<<8) | led_lsb;
 8004e5a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
			val += add;
 8004e5e:	fa18 fc80 	uxtah	ip, r8, r0
			RDC_REG_SET(addr, (U8_T)(val >> 8));
 8004e62:	4622      	mov	r2, r4
 8004e64:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8004e68:	7831      	ldrb	r1, [r6, #0]
 8004e6a:	2000      	movs	r0, #0
			val += add;
 8004e6c:	fa1f f58c 	uxth.w	r5, ip
			RDC_REG_SET(addr, (U8_T)(val >> 8));
 8004e70:	f001 fb16 	bl	80064a0 <rtiVC_WriteDevice16>
			RDC_REG_SET(addr+1, val & 0xFF);
 8004e74:	1c62      	adds	r2, r4, #1
		for (addr = 0x0853; addr <= 0x086A; addr += 2) {
 8004e76:	3402      	adds	r4, #2
			RDC_REG_SET(addr+1, val & 0xFF);
 8004e78:	7831      	ldrb	r1, [r6, #0]
 8004e7a:	b2eb      	uxtb	r3, r5
 8004e7c:	b292      	uxth	r2, r2
 8004e7e:	2000      	movs	r0, #0
		for (addr = 0x0853; addr <= 0x086A; addr += 2) {
 8004e80:	b2a4      	uxth	r4, r4
			RDC_REG_SET(addr+1, val & 0xFF);
 8004e82:	f001 fb0d 	bl	80064a0 <rtiVC_WriteDevice16>
		for (addr = 0x0853; addr <= 0x086A; addr += 2) {
 8004e86:	454c      	cmp	r4, r9
 8004e88:	d1d8      	bne.n	8004e3c <rdc200a_enable_cokoa+0x64>
	if (panel_offon_mask) {
 8004e8a:	2f00      	cmp	r7, #0
 8004e8c:	d0b7      	beq.n	8004dfe <rdc200a_enable_cokoa+0x26>
	rd0015 = RDC_REG_GET(0x0015);
 8004e8e:	4c90      	ldr	r4, [pc, #576]	; (80050d0 <rdc200a_enable_cokoa+0x2f8>)
 8004e90:	2215      	movs	r2, #21
 8004e92:	7821      	ldrb	r1, [r4, #0]
 8004e94:	2000      	movs	r0, #0
 8004e96:	f001 faef 	bl	8006478 <rtiVC_ReadDevice16>
	RDC_REG_SET(0x0015, rd0015);
 8004e9a:	7821      	ldrb	r1, [r4, #0]
 8004e9c:	f000 03f3 	and.w	r3, r0, #243	; 0xf3
 8004ea0:	2215      	movs	r2, #21
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f001 fafc 	bl	80064a0 <rtiVC_WriteDevice16>
	rd0015 = RDC_REG_GET(0x0015);
 8004ea8:	7821      	ldrb	r1, [r4, #0]
 8004eaa:	2215      	movs	r2, #21
 8004eac:	2000      	movs	r0, #0
 8004eae:	f001 fae3 	bl	8006478 <rtiVC_ReadDevice16>
		rd0015 |= ((rd0015 & 0x03) << 2);
 8004eb2:	0083      	lsls	r3, r0, #2
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	4303      	orrs	r3, r0
	RDC_REG_SET(0x0015, rd0015);
 8004eba:	7821      	ldrb	r1, [r4, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2215      	movs	r2, #21
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f001 faed 	bl	80064a0 <rtiVC_WriteDevice16>
}
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cokoa_en_state[0] = RDC_REG_GET16(0x0871) & 0x1;
 8004ecc:	f640 0071 	movw	r0, #2161	; 0x871
 8004ed0:	f7ff fea0 	bl	8004c14 <RDC_REG_GET16>
		if (dc_en == TRUE) {
 8004ed4:	2e01      	cmp	r6, #1
		cokoa_en_state[0] = RDC_REG_GET16(0x0871) & 0x1;
 8004ed6:	f000 0701 	and.w	r7, r0, #1
		if (dc_en == TRUE) {
 8004eda:	f000 808f 	beq.w	8004ffc <rdc200a_enable_cokoa+0x224>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8004ede:	f014 0402 	ands.w	r4, r4, #2
 8004ee2:	d155      	bne.n	8004f90 <rdc200a_enable_cokoa+0x1b8>
			if (cokoa_en_state[0] == 1) {
 8004ee4:	b18f      	cbz	r7, 8004f0a <rdc200a_enable_cokoa+0x132>
				RDC_REG_MASK_SET(0x0871, 0x01, 0x00); // TX0_COKOA_EN
 8004ee6:	4622      	mov	r2, r4
 8004ee8:	2101      	movs	r1, #1
 8004eea:	f640 0071 	movw	r0, #2161	; 0x871
 8004eee:	f002 f92b 	bl	8007148 <RDC_REG_MASK_SET>
				RDC_REG_MASK_SET(0x0870, 0x40, 0x40); // TX0_COKOA_ISO_CTRL
 8004ef2:	2240      	movs	r2, #64	; 0x40
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	f44f 6007 	mov.w	r0, #2160	; 0x870
 8004efa:	f002 f925 	bl	8007148 <RDC_REG_MASK_SET>
				RDC_REG_MASK_SET(0x0870, 0x80, 0x00); // TX0_COKOA_PSW_CTRL
 8004efe:	4622      	mov	r2, r4
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	f44f 6007 	mov.w	r0, #2160	; 0x870
 8004f06:	f002 f91f 	bl	8007148 <RDC_REG_MASK_SET>
	if (vc_panel_attached_port_mask == VC_PANEL_CTRL_PORT_1) {
 8004f0a:	4b70      	ldr	r3, [pc, #448]	; (80050cc <rdc200a_enable_cokoa+0x2f4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d1bb      	bne.n	8004e8a <rdc200a_enable_cokoa+0xb2>
 8004f12:	e78a      	b.n	8004e2a <rdc200a_enable_cokoa+0x52>
			if (cokoa_en_state[1] == 0) // Is cokoa disabled for the specified port?
 8004f14:	f1b8 0f00 	cmp.w	r8, #0
 8004f18:	f000 80a3 	beq.w	8005062 <rdc200a_enable_cokoa+0x28a>
 8004f1c:	4e6c      	ldr	r6, [pc, #432]	; (80050d0 <rdc200a_enable_cokoa+0x2f8>)
 8004f1e:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 8004f22:	b2ed      	uxtb	r5, r5
			RDC_REG_MASK_SET(0x0970, 0x80, 0x80);
 8004f24:	2280      	movs	r2, #128	; 0x80
 8004f26:	4611      	mov	r1, r2
 8004f28:	f44f 6017 	mov.w	r0, #2416	; 0x970
 8004f2c:	f002 f90c 	bl	8007148 <RDC_REG_MASK_SET>
			RDC_REG_MASK_SET(0x0970, 0x40, 0x00);
 8004f30:	2200      	movs	r2, #0
 8004f32:	2140      	movs	r1, #64	; 0x40
 8004f34:	f44f 6017 	mov.w	r0, #2416	; 0x970
 8004f38:	f002 f906 	bl	8007148 <RDC_REG_MASK_SET>
			RDC_REG_SET(0x0971, 0x1 | (ca_en<<3));
 8004f3c:	f04a 0301 	orr.w	r3, sl, #1
 8004f40:	7831      	ldrb	r1, [r6, #0]
 8004f42:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8004f46:	f640 1271 	movw	r2, #2417	; 0x971
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f001 faa8 	bl	80064a0 <rtiVC_WriteDevice16>
	lut_addr = base_addr + FLASH_ITEM_OFFSET_DC_RED(lut_offset);
 8004f50:	f899 4004 	ldrb.w	r4, [r9, #4]
 8004f54:	0324      	lsls	r4, r4, #12
	rdc200a_update_lut_from_flash(lut_addr, FLASH_ITEM_SIZE_DC, lut_id[port][0]);
 8004f56:	2210      	movs	r2, #16
 8004f58:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8004f5c:	f504 301c 	add.w	r0, r4, #159744	; 0x27000
 8004f60:	f7fd fee6 	bl	8002d30 <rdc200a_update_lut_from_flash>
	if (ca_en == TRUE) {
 8004f64:	2d01      	cmp	r5, #1
 8004f66:	d1d0      	bne.n	8004f0a <rdc200a_enable_cokoa+0x132>
		rdc200a_update_lut_from_flash(lut_addr, FLASH_ITEM_SIZE_DC, lut_id[port][1]);
 8004f68:	f504 301d 	add.w	r0, r4, #160768	; 0x27400
 8004f6c:	2211      	movs	r2, #17
 8004f6e:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8004f72:	30e6      	adds	r0, #230	; 0xe6
 8004f74:	f7fd fedc 	bl	8002d30 <rdc200a_update_lut_from_flash>
		rdc200a_update_lut_from_flash(lut_addr, FLASH_ITEM_SIZE_DC, lut_id[port][2]);
 8004f78:	f504 301e 	add.w	r0, r4, #161792	; 0x27800
 8004f7c:	2212      	movs	r2, #18
 8004f7e:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8004f82:	f500 70e6 	add.w	r0, r0, #460	; 0x1cc
 8004f86:	f7fd fed3 	bl	8002d30 <rdc200a_update_lut_from_flash>
}
 8004f8a:	e7be      	b.n	8004f0a <rdc200a_enable_cokoa+0x132>
	UINT_T panel_offon_mask = 0x0;
 8004f8c:	4627      	mov	r7, r4
 8004f8e:	e74c      	b.n	8004e2a <rdc200a_enable_cokoa+0x52>
		cokoa_en_state[1] = RDC_REG_GET16(0x0971) & 0x1;
 8004f90:	f640 1071 	movw	r0, #2417	; 0x971
 8004f94:	f7ff fe3e 	bl	8004c14 <RDC_REG_GET16>
			if (cokoa_en_state[1] == 1) // Is cokoa enabled for the specified port?
 8004f98:	f010 0801 	ands.w	r8, r0, #1
 8004f9c:	d114      	bne.n	8004fc8 <rdc200a_enable_cokoa+0x1f0>
			if (cokoa_en_state[0] == 1) {
 8004f9e:	2f00      	cmp	r7, #0
 8004fa0:	d0b3      	beq.n	8004f0a <rdc200a_enable_cokoa+0x132>
				RDC_REG_MASK_SET(0x0871, 0x01, 0x00); // TX0_COKOA_EN
 8004fa2:	4642      	mov	r2, r8
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	f640 0071 	movw	r0, #2161	; 0x871
 8004faa:	f002 f8cd 	bl	8007148 <RDC_REG_MASK_SET>
				RDC_REG_MASK_SET(0x0870, 0x40, 0x40); // TX0_COKOA_ISO_CTRL
 8004fae:	2240      	movs	r2, #64	; 0x40
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	f44f 6007 	mov.w	r0, #2160	; 0x870
 8004fb6:	f002 f8c7 	bl	8007148 <RDC_REG_MASK_SET>
				RDC_REG_MASK_SET(0x0870, 0x80, 0x00); // TX0_COKOA_PSW_CTRL
 8004fba:	4642      	mov	r2, r8
 8004fbc:	2180      	movs	r1, #128	; 0x80
 8004fbe:	f44f 6007 	mov.w	r0, #2160	; 0x870
 8004fc2:	f002 f8c1 	bl	8007148 <RDC_REG_MASK_SET>
			if (cokoa_en_state[1] == 1) {
 8004fc6:	e7a0      	b.n	8004f0a <rdc200a_enable_cokoa+0x132>
				panel_offon_mask |= VC_PANEL_CTRL_PORT_1;
 8004fc8:	f047 0402 	orr.w	r4, r7, #2
			if (cokoa_en_state[0] == 1) {
 8004fcc:	2f00      	cmp	r7, #0
 8004fce:	d169      	bne.n	80050a4 <rdc200a_enable_cokoa+0x2cc>
				RDC_REG_MASK_SET(0x0971, 0x01, 0x00); // TX1_COKOA_EN
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	f640 1071 	movw	r0, #2417	; 0x971
 8004fd8:	f002 f8b6 	bl	8007148 <RDC_REG_MASK_SET>
				RDC_REG_MASK_SET(0x0970, 0x40, 0x40); // TX1_COKOA_ISO_CTRL
 8004fdc:	2240      	movs	r2, #64	; 0x40
 8004fde:	4611      	mov	r1, r2
 8004fe0:	f44f 6017 	mov.w	r0, #2416	; 0x970
 8004fe4:	f002 f8b0 	bl	8007148 <RDC_REG_MASK_SET>
				RDC_REG_MASK_SET(0x0970, 0x80, 0x00); // TX1_COKOA_PSW_CTRL
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2180      	movs	r1, #128	; 0x80
 8004fec:	f44f 6017 	mov.w	r0, #2416	; 0x970
 8004ff0:	f002 f8aa 	bl	8007148 <RDC_REG_MASK_SET>
 8004ff4:	4627      	mov	r7, r4
 8004ff6:	f04f 0801 	mov.w	r8, #1
 8004ffa:	e786      	b.n	8004f0a <rdc200a_enable_cokoa+0x132>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8004ffc:	f014 0402 	ands.w	r4, r4, #2
			if (cokoa_en_state[0] == 0) // Is cokoa disabled for the specified port?
 8005000:	f1c7 0701 	rsb	r7, r7, #1
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8005004:	d144      	bne.n	8005090 <rdc200a_enable_cokoa+0x2b8>
 8005006:	46a0      	mov	r8, r4
			RDC_REG_MASK_SET(0x0870, 0x80, 0x80);
 8005008:	2280      	movs	r2, #128	; 0x80
 800500a:	4611      	mov	r1, r2
 800500c:	f44f 6007 	mov.w	r0, #2160	; 0x870
 8005010:	f002 f89a 	bl	8007148 <RDC_REG_MASK_SET>
			RDC_REG_SET(0x0871, 0x1 | (ca_en<<3));
 8005014:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
			RDC_REG_MASK_SET(0x0870, 0x40, 0x00);
 8005018:	2200      	movs	r2, #0
 800501a:	2140      	movs	r1, #64	; 0x40
 800501c:	f44f 6007 	mov.w	r0, #2160	; 0x870
			RDC_REG_SET(0x0871, 0x1 | (ca_en<<3));
 8005020:	4e2b      	ldr	r6, [pc, #172]	; (80050d0 <rdc200a_enable_cokoa+0x2f8>)
			RDC_REG_MASK_SET(0x0870, 0x40, 0x00);
 8005022:	f002 f891 	bl	8007148 <RDC_REG_MASK_SET>
			RDC_REG_SET(0x0871, 0x1 | (ca_en<<3));
 8005026:	f04a 0301 	orr.w	r3, sl, #1
 800502a:	7831      	ldrb	r1, [r6, #0]
 800502c:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8005030:	f640 0271 	movw	r2, #2161	; 0x871
 8005034:	2000      	movs	r0, #0
 8005036:	f001 fa33 	bl	80064a0 <rtiVC_WriteDevice16>
	lut_addr = base_addr + FLASH_ITEM_OFFSET_DC_RED(lut_offset);
 800503a:	f899 b000 	ldrb.w	fp, [r9]
 800503e:	ea4f 3b0b 	mov.w	fp, fp, lsl #12
	if (ca_en == TRUE) {
 8005042:	b2ed      	uxtb	r5, r5
	rdc200a_update_lut_from_flash(lut_addr, FLASH_ITEM_SIZE_DC, lut_id[port][0]);
 8005044:	2200      	movs	r2, #0
 8005046:	f240 41e6 	movw	r1, #1254	; 0x4e6
 800504a:	f50b 301c 	add.w	r0, fp, #159744	; 0x27000
 800504e:	f7fd fe6f 	bl	8002d30 <rdc200a_update_lut_from_flash>
	if (ca_en == TRUE) {
 8005052:	2d01      	cmp	r5, #1
 8005054:	d007      	beq.n	8005066 <rdc200a_enable_cokoa+0x28e>
		if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8005056:	2c00      	cmp	r4, #0
 8005058:	f47f af64 	bne.w	8004f24 <rdc200a_enable_cokoa+0x14c>
 800505c:	e755      	b.n	8004f0a <rdc200a_enable_cokoa+0x132>
			if (cokoa_en_state[1] == 1) // Is cokoa enabled for the specified port?
 800505e:	2402      	movs	r4, #2
 8005060:	e7b6      	b.n	8004fd0 <rdc200a_enable_cokoa+0x1f8>
			if (cokoa_en_state[1] == 0) // Is cokoa disabled for the specified port?
 8005062:	2702      	movs	r7, #2
 8005064:	e75a      	b.n	8004f1c <rdc200a_enable_cokoa+0x144>
		rdc200a_update_lut_from_flash(lut_addr, FLASH_ITEM_SIZE_DC, lut_id[port][1]);
 8005066:	f50b 301d 	add.w	r0, fp, #160768	; 0x27400
 800506a:	462a      	mov	r2, r5
 800506c:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8005070:	30e6      	adds	r0, #230	; 0xe6
 8005072:	f7fd fe5d 	bl	8002d30 <rdc200a_update_lut_from_flash>
		rdc200a_update_lut_from_flash(lut_addr, FLASH_ITEM_SIZE_DC, lut_id[port][2]);
 8005076:	f50b 301e 	add.w	r0, fp, #161792	; 0x27800
 800507a:	f500 70e6 	add.w	r0, r0, #460	; 0x1cc
 800507e:	2202      	movs	r2, #2
 8005080:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8005084:	f7fd fe54 	bl	8002d30 <rdc200a_update_lut_from_flash>
		if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8005088:	2c00      	cmp	r4, #0
 800508a:	f47f af4b 	bne.w	8004f24 <rdc200a_enable_cokoa+0x14c>
 800508e:	e73c      	b.n	8004f0a <rdc200a_enable_cokoa+0x132>
		cokoa_en_state[1] = RDC_REG_GET16(0x0971) & 0x1;
 8005090:	f640 1071 	movw	r0, #2417	; 0x971
 8005094:	f7ff fdbe 	bl	8004c14 <RDC_REG_GET16>
			if (cokoa_en_state[1] == 0) // Is cokoa disabled for the specified port?
 8005098:	f010 0801 	ands.w	r8, r0, #1
 800509c:	d1b4      	bne.n	8005008 <rdc200a_enable_cokoa+0x230>
				panel_offon_mask |= VC_PANEL_CTRL_PORT_1;
 800509e:	f047 0702 	orr.w	r7, r7, #2
		if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 80050a2:	e7b1      	b.n	8005008 <rdc200a_enable_cokoa+0x230>
				RDC_REG_MASK_SET(0x0871, 0x01, 0x00); // TX0_COKOA_EN
 80050a4:	2200      	movs	r2, #0
 80050a6:	2101      	movs	r1, #1
 80050a8:	f640 0071 	movw	r0, #2161	; 0x871
 80050ac:	f002 f84c 	bl	8007148 <RDC_REG_MASK_SET>
				RDC_REG_MASK_SET(0x0870, 0x40, 0x40); // TX0_COKOA_ISO_CTRL
 80050b0:	2240      	movs	r2, #64	; 0x40
 80050b2:	4611      	mov	r1, r2
 80050b4:	f44f 6007 	mov.w	r0, #2160	; 0x870
 80050b8:	f002 f846 	bl	8007148 <RDC_REG_MASK_SET>
				RDC_REG_MASK_SET(0x0870, 0x80, 0x00); // TX0_COKOA_PSW_CTRL
 80050bc:	2200      	movs	r2, #0
 80050be:	2180      	movs	r1, #128	; 0x80
 80050c0:	f44f 6007 	mov.w	r0, #2160	; 0x870
 80050c4:	f002 f840 	bl	8007148 <RDC_REG_MASK_SET>
			if (cokoa_en_state[1] == 1) {
 80050c8:	e782      	b.n	8004fd0 <rdc200a_enable_cokoa+0x1f8>
 80050ca:	bf00      	nop
 80050cc:	20003814 	.word	0x20003814
 80050d0:	2000001d 	.word	0x2000001d

080050d4 <rdc200a_get_frame_rate_from_reg>:
{
 80050d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	reg_0x47 = RDC_REG_GET(0x0047);
 80050d8:	4d5e      	ldr	r5, [pc, #376]	; (8005254 <rdc200a_get_frame_rate_from_reg+0x180>)
	U8_T num_tx_ch_shift[4] = {2/*4*/, 3/*8*/, 0, 1/*2*/};
 80050da:	4b5f      	ldr	r3, [pc, #380]	; (8005258 <rdc200a_get_frame_rate_from_reg+0x184>)
	reg_0x47 = RDC_REG_GET(0x0047);
 80050dc:	7829      	ldrb	r1, [r5, #0]
{
 80050de:	b084      	sub	sp, #16
	reg_0x47 = RDC_REG_GET(0x0047);
 80050e0:	2247      	movs	r2, #71	; 0x47
 80050e2:	2000      	movs	r0, #0
	U8_T num_tx_ch_shift[4] = {2/*4*/, 3/*8*/, 0, 1/*2*/};
 80050e4:	9303      	str	r3, [sp, #12]
	reg_0x47 = RDC_REG_GET(0x0047);
 80050e6:	f001 f9c7 	bl	8006478 <rtiVC_ReadDevice16>
	reg_0x48 = RDC_REG_GET(0x0048);
 80050ea:	7829      	ldrb	r1, [r5, #0]
	reg_0x47 = RDC_REG_GET(0x0047);
 80050ec:	4604      	mov	r4, r0
	reg_0x48 = RDC_REG_GET(0x0048);
 80050ee:	2248      	movs	r2, #72	; 0x48
 80050f0:	2000      	movs	r0, #0
 80050f2:	f001 f9c1 	bl	8006478 <rtiVC_ReadDevice16>
	reg_0x49 = RDC_REG_GET(0x0049);
 80050f6:	7829      	ldrb	r1, [r5, #0]
	reg_0x48 = RDC_REG_GET(0x0048);
 80050f8:	4606      	mov	r6, r0
	reg_0x49 = RDC_REG_GET(0x0049);
 80050fa:	2249      	movs	r2, #73	; 0x49
 80050fc:	2000      	movs	r0, #0
 80050fe:	f001 f9bb 	bl	8006478 <rtiVC_ReadDevice16>
	pll2plln = ((U16_T)reg_0x48 << 8) | reg_0x49;
 8005102:	ea40 2306 	orr.w	r3, r0, r6, lsl #8
	feedback_divider_ratio = (pll2plln >> 2)*4 + (pll2plln & 0x3);
 8005106:	b29b      	uxth	r3, r3
	x_clock = (RDC200A_XTAL_FREQ_MHz / (pll2_refdiv + 1));
 8005108:	f004 0403 	and.w	r4, r4, #3
 800510c:	3401      	adds	r4, #1
 800510e:	2220      	movs	r2, #32
 8005110:	fbb2 f2f4 	udiv	r2, r2, r4
	vco_osc_freq = feedback_divider_ratio * x_clock;
 8005114:	fb02 f003 	mul.w	r0, r2, r3
	pll_out_freq = vco_osc_freq / 2.0f;
 8005118:	ee07 0a90 	vmov	s15, r0
 800511c:	eefa 7aef 	vcvt.f32.s32	s15, s15, #1
 8005120:	ee17 0a90 	vmov	r0, s15
 8005124:	f7fb fa10 	bl	8000548 <__aeabi_f2d>
	lvds_tx_clock = pll_out_freq / 2.0f;
 8005128:	4b4c      	ldr	r3, [pc, #304]	; (800525c <rdc200a_get_frame_rate_from_reg+0x188>)
 800512a:	2200      	movs	r2, #0
 800512c:	f7fb fa64 	bl	80005f8 <__aeabi_dmul>
	if (vc_panel_attached_port_mask & VC_PANEL_CTRL_PORT_0) {
 8005130:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <rdc200a_get_frame_rate_from_reg+0x18c>)
	lvds_tx_clock = pll_out_freq / 2.0f;
 8005132:	4606      	mov	r6, r0
	if (vc_panel_attached_port_mask & VC_PANEL_CTRL_PORT_0) {
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	f010 0801 	ands.w	r8, r0, #1
	lvds_tx_clock = pll_out_freq / 2.0f;
 800513a:	460f      	mov	r7, r1
	if (vc_panel_attached_port_mask & VC_PANEL_CTRL_PORT_0) {
 800513c:	d069      	beq.n	8005212 <rdc200a_get_frame_rate_from_reg+0x13e>
		r_holditme = (U16_T)RDC_REG_GET(0x0823) << 3; /* 8 pixel unit */
 800513e:	7829      	ldrb	r1, [r5, #0]
 8005140:	f640 0223 	movw	r2, #2083	; 0x823
 8005144:	2000      	movs	r0, #0
 8005146:	f001 f997 	bl	8006478 <rtiVC_ReadDevice16>
 800514a:	00c0      	lsls	r0, r0, #3
		g_holditme = (U16_T)RDC_REG_GET(0x0824) << 3;
 800514c:	7829      	ldrb	r1, [r5, #0]
 800514e:	f640 0224 	movw	r2, #2084	; 0x824
		r_holditme = (U16_T)RDC_REG_GET(0x0823) << 3; /* 8 pixel unit */
 8005152:	b284      	uxth	r4, r0
		g_holditme = (U16_T)RDC_REG_GET(0x0824) << 3;
 8005154:	2000      	movs	r0, #0
 8005156:	f001 f98f 	bl	8006478 <rtiVC_ReadDevice16>
 800515a:	00c0      	lsls	r0, r0, #3
		b_holditme = (U16_T)RDC_REG_GET(0x0825) << 3;
 800515c:	7829      	ldrb	r1, [r5, #0]
 800515e:	f640 0225 	movw	r2, #2085	; 0x825
		g_holditme = (U16_T)RDC_REG_GET(0x0824) << 3;
 8005162:	fa1f fa80 	uxth.w	sl, r0
		b_holditme = (U16_T)RDC_REG_GET(0x0825) << 3;
 8005166:	2000      	movs	r0, #0
 8005168:	f001 f986 	bl	8006478 <rtiVC_ReadDevice16>
 800516c:	00c0      	lsls	r0, r0, #3
 800516e:	b285      	uxth	r5, r0
		CONFIG_PANEL_DRV = RDC_REG_GET32(0x0821);
 8005170:	f640 0021 	movw	r0, #2081	; 0x821
 8005174:	f7ff fd4e 	bl	8004c14 <RDC_REG_GET16>
 8005178:	4681      	mov	r9, r0
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 800517a:	a902      	add	r1, sp, #8
 800517c:	a801      	add	r0, sp, #4
 800517e:	f7fc fe9b 	bl	8001eb8 <rdc200a_get_output_resolution>
	one_line_time = 4. * (2. + (double)vertical_line_pixel/(double)lvds_line) / (double)lvds_tx_clock / 1000.0/1000.0;
 8005182:	9801      	ldr	r0, [sp, #4]
 8005184:	f7fb f9be 	bl	8000504 <__aeabi_ui2d>
	lvds_line = 1 << num_tx_ch_shift[num_tx_channel_idx];
 8005188:	ab04      	add	r3, sp, #16
 800518a:	eb03 1399 	add.w	r3, r3, r9, lsr #6
	one_line_time = 4. * (2. + (double)vertical_line_pixel/(double)lvds_line) / (double)lvds_tx_clock / 1000.0/1000.0;
 800518e:	4680      	mov	r8, r0
	lvds_line = 1 << num_tx_ch_shift[num_tx_channel_idx];
 8005190:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8005194:	2001      	movs	r0, #1
	one_line_time = 4. * (2. + (double)vertical_line_pixel/(double)lvds_line) / (double)lvds_tx_clock / 1000.0/1000.0;
 8005196:	4098      	lsls	r0, r3
 8005198:	4689      	mov	r9, r1
 800519a:	f7fb f9c3 	bl	8000524 <__aeabi_i2d>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4640      	mov	r0, r8
 80051a4:	4649      	mov	r1, r9
 80051a6:	f7fb fb51 	bl	800084c <__aeabi_ddiv>
 80051aa:	2200      	movs	r2, #0
 80051ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051b0:	f7fb f86c 	bl	800028c <__adddf3>
 80051b4:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <rdc200a_get_frame_rate_from_reg+0x190>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	f7fb fa1e 	bl	80005f8 <__aeabi_dmul>
 80051bc:	4632      	mov	r2, r6
 80051be:	463b      	mov	r3, r7
 80051c0:	f7fb fb44 	bl	800084c <__aeabi_ddiv>
 80051c4:	4b28      	ldr	r3, [pc, #160]	; (8005268 <rdc200a_get_frame_rate_from_reg+0x194>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	f7fb fb40 	bl	800084c <__aeabi_ddiv>
 80051cc:	2200      	movs	r2, #0
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <rdc200a_get_frame_rate_from_reg+0x194>)
 80051d0:	f7fb fb3c 	bl	800084c <__aeabi_ddiv>
	frame_rate_hz = 1.0 / ((double)(scan_time*3 + (r_holditme+g_holditme+b_holditme)) * one_line_time);
 80051d4:	9b02      	ldr	r3, [sp, #8]
 80051d6:	4454      	add	r4, sl
 80051d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80051dc:	442c      	add	r4, r5
	one_line_time = 4. * (2. + (double)vertical_line_pixel/(double)lvds_line) / (double)lvds_tx_clock / 1000.0/1000.0;
 80051de:	4606      	mov	r6, r0
	frame_rate_hz = 1.0 / ((double)(scan_time*3 + (r_holditme+g_holditme+b_holditme)) * one_line_time);
 80051e0:	1918      	adds	r0, r3, r4
	one_line_time = 4. * (2. + (double)vertical_line_pixel/(double)lvds_line) / (double)lvds_tx_clock / 1000.0/1000.0;
 80051e2:	460f      	mov	r7, r1
	frame_rate_hz = 1.0 / ((double)(scan_time*3 + (r_holditme+g_holditme+b_holditme)) * one_line_time);
 80051e4:	f7fb f98e 	bl	8000504 <__aeabi_ui2d>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4630      	mov	r0, r6
 80051ee:	4639      	mov	r1, r7
 80051f0:	f7fb fa02 	bl	80005f8 <__aeabi_dmul>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	2000      	movs	r0, #0
 80051fa:	491c      	ldr	r1, [pc, #112]	; (800526c <rdc200a_get_frame_rate_from_reg+0x198>)
 80051fc:	f7fb fb26 	bl	800084c <__aeabi_ddiv>
	return (S32_T)(frame_rate_hz * VC_FRAME_RATE_DIVIDER);
 8005200:	4b19      	ldr	r3, [pc, #100]	; (8005268 <rdc200a_get_frame_rate_from_reg+0x194>)
 8005202:	2200      	movs	r2, #0
 8005204:	f7fb f9f8 	bl	80005f8 <__aeabi_dmul>
 8005208:	f7fb fca6 	bl	8000b58 <__aeabi_d2iz>
}
 800520c:	b004      	add	sp, #16
 800520e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		r_holditme = (U16_T)RDC_REG_GET(0x0923) << 3; /* 8 pixel unit */
 8005212:	7829      	ldrb	r1, [r5, #0]
 8005214:	f640 1223 	movw	r2, #2339	; 0x923
 8005218:	4640      	mov	r0, r8
 800521a:	f001 f92d 	bl	8006478 <rtiVC_ReadDevice16>
 800521e:	00c0      	lsls	r0, r0, #3
		g_holditme = (U16_T)RDC_REG_GET(0x0924) << 3;
 8005220:	7829      	ldrb	r1, [r5, #0]
 8005222:	f640 1224 	movw	r2, #2340	; 0x924
		r_holditme = (U16_T)RDC_REG_GET(0x0923) << 3; /* 8 pixel unit */
 8005226:	b284      	uxth	r4, r0
		g_holditme = (U16_T)RDC_REG_GET(0x0924) << 3;
 8005228:	4640      	mov	r0, r8
 800522a:	f001 f925 	bl	8006478 <rtiVC_ReadDevice16>
		b_holditme = (U16_T)RDC_REG_GET(0x0925) << 3;
 800522e:	7829      	ldrb	r1, [r5, #0]
		g_holditme = (U16_T)RDC_REG_GET(0x0924) << 3;
 8005230:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
		b_holditme = (U16_T)RDC_REG_GET(0x0925) << 3;
 8005234:	f640 1225 	movw	r2, #2341	; 0x925
 8005238:	4640      	mov	r0, r8
 800523a:	f001 f91d 	bl	8006478 <rtiVC_ReadDevice16>
 800523e:	00c0      	lsls	r0, r0, #3
 8005240:	b285      	uxth	r5, r0
		CONFIG_PANEL_DRV = RDC_REG_GET32(0x0921);
 8005242:	f640 1021 	movw	r0, #2337	; 0x921
 8005246:	f7ff fce5 	bl	8004c14 <RDC_REG_GET16>
		g_holditme = (U16_T)RDC_REG_GET(0x0924) << 3;
 800524a:	fa1f fa8a 	uxth.w	sl, sl
		CONFIG_PANEL_DRV = RDC_REG_GET32(0x0921);
 800524e:	4681      	mov	r9, r0
 8005250:	e793      	b.n	800517a <rdc200a_get_frame_rate_from_reg+0xa6>
 8005252:	bf00      	nop
 8005254:	2000001d 	.word	0x2000001d
 8005258:	01000302 	.word	0x01000302
 800525c:	3fe00000 	.word	0x3fe00000
 8005260:	20003814 	.word	0x20003814
 8005264:	40100000 	.word	0x40100000
 8005268:	408f4000 	.word	0x408f4000
 800526c:	3ff00000 	.word	0x3ff00000

08005270 <rdc200a_prepare_controller>:
{
 8005270:	b538      	push	{r3, r4, r5, lr}
	RDC_REG_SET(0x0004, 0x76);
 8005272:	4c15      	ldr	r4, [pc, #84]	; (80052c8 <rdc200a_prepare_controller+0x58>)
{
 8005274:	4605      	mov	r5, r0
	RDC_REG_SET(0x0004, 0x76);
 8005276:	7821      	ldrb	r1, [r4, #0]
 8005278:	2376      	movs	r3, #118	; 0x76
 800527a:	2204      	movs	r2, #4
 800527c:	2000      	movs	r0, #0
 800527e:	f001 f90f 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0005, _CFG_RDP_SLAVE_ADDR);
 8005282:	7821      	ldrb	r1, [r4, #0]
 8005284:	2318      	movs	r3, #24
 8005286:	2205      	movs	r2, #5
 8005288:	2000      	movs	r0, #0
 800528a:	f001 f909 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0006, 0x00); /* Disable all panel backdoor path */
 800528e:	2300      	movs	r3, #0
 8005290:	7821      	ldrb	r1, [r4, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	2206      	movs	r2, #6
 8005296:	f001 f903 	bl	80064a0 <rtiVC_WriteDevice16>
	dev->frame_rate = rdc200a_get_frame_rate_from_reg();
 800529a:	f7ff ff1b 	bl	80050d4 <rdc200a_get_frame_rate_from_reg>
	rdc200a_mrx_config = RDC_REG_GET(0x0200);
 800529e:	7821      	ldrb	r1, [r4, #0]
	dev->frame_rate = rdc200a_get_frame_rate_from_reg();
 80052a0:	6728      	str	r0, [r5, #112]	; 0x70
	rdc200a_mrx_config = RDC_REG_GET(0x0200);
 80052a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a6:	2000      	movs	r0, #0
 80052a8:	f001 f8e6 	bl	8006478 <rtiVC_ReadDevice16>
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <rdc200a_prepare_controller+0x5c>)
	rdc200a_pgen_config = RDC_REG_GET(0x0280);
 80052ae:	7821      	ldrb	r1, [r4, #0]
	rdc200a_mrx_config = RDC_REG_GET(0x0200);
 80052b0:	4605      	mov	r5, r0
	rdc200a_pgen_config = RDC_REG_GET(0x0280);
 80052b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80052b6:	2000      	movs	r0, #0
	rdc200a_mrx_config = RDC_REG_GET(0x0200);
 80052b8:	701d      	strb	r5, [r3, #0]
	rdc200a_pgen_config = RDC_REG_GET(0x0280);
 80052ba:	f001 f8dd 	bl	8006478 <rtiVC_ReadDevice16>
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <rdc200a_prepare_controller+0x60>)
 80052c0:	4602      	mov	r2, r0
 80052c2:	701a      	strb	r2, [r3, #0]
}
 80052c4:	2000      	movs	r0, #0
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	2000001d 	.word	0x2000001d
 80052cc:	200005a4 	.word	0x200005a4
 80052d0:	200005a5 	.word	0x200005a5

080052d4 <rdc200a_step_frame_rate>:
{
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	b089      	sub	sp, #36	; 0x24
	if (up == TRUE)
 80052da:	2901      	cmp	r1, #1
{
 80052dc:	9002      	str	r0, [sp, #8]
		new_frame_rate = RDC200A_STEP_UP_FRAME_RATE_VALUE(dev->frame_rate);
 80052de:	6f00      	ldr	r0, [r0, #112]	; 0x70
	U8_T num_tx_ch_shift[4] = {2/*4*/, 3/*8*/, 0, 1/*2*/};
 80052e0:	4b7d      	ldr	r3, [pc, #500]	; (80054d8 <rdc200a_step_frame_rate+0x204>)
 80052e2:	9307      	str	r3, [sp, #28]
		new_frame_rate = RDC200A_STEP_UP_FRAME_RATE_VALUE(dev->frame_rate);
 80052e4:	bf0c      	ite	eq
 80052e6:	f500 707a 	addeq.w	r0, r0, #1000	; 0x3e8
		new_frame_rate = RDC200A_STEP_DOWN_FRAME_RATE_VALUE(dev->frame_rate);
 80052ea:	f5a0 707a 	subne.w	r0, r0, #1000	; 0x3e8
	if (new_rate <= 0) {
 80052ee:	2800      	cmp	r0, #0
		return -1;
 80052f0:	bfd8      	it	le
 80052f2:	f04f 30ff 	movle.w	r0, #4294967295
	if (new_rate <= 0) {
 80052f6:	f340 80ce 	ble.w	8005496 <rdc200a_step_frame_rate+0x1c2>
	new_frame_rate_hz = (double)new_rate / (double)VC_FRAME_RATE_DIVIDER;
 80052fa:	f7fb f913 	bl	8000524 <__aeabi_i2d>
 80052fe:	4b77      	ldr	r3, [pc, #476]	; (80054dc <rdc200a_step_frame_rate+0x208>)
		r_holding_time = (U16_T)RDC_REG_GET(0x0823) << 3; /* 8 pixel unit */
 8005300:	4d77      	ldr	r5, [pc, #476]	; (80054e0 <rdc200a_step_frame_rate+0x20c>)
	new_frame_rate_hz = (double)new_rate / (double)VC_FRAME_RATE_DIVIDER;
 8005302:	2200      	movs	r2, #0
 8005304:	f7fb faa2 	bl	800084c <__aeabi_ddiv>
 8005308:	4606      	mov	r6, r0
	pll2_refdiv = RDC_REG_GET16(0x0047) & 0x03;
 800530a:	2047      	movs	r0, #71	; 0x47
	new_frame_rate_hz = (double)new_rate / (double)VC_FRAME_RATE_DIVIDER;
 800530c:	460f      	mov	r7, r1
	pll2_refdiv = RDC_REG_GET16(0x0047) & 0x03;
 800530e:	f7ff fc81 	bl	8004c14 <RDC_REG_GET16>
 8005312:	f000 0003 	and.w	r0, r0, #3
	x_clock = (RDC200A_XTAL_FREQ_MHz / (pll2_refdiv + 1));
 8005316:	3001      	adds	r0, #1
 8005318:	2320      	movs	r3, #32
 800531a:	fbb3 f3f0 	udiv	r3, r3, r0
 800531e:	9301      	str	r3, [sp, #4]
	if (vc_panel_attached_port_mask & VC_PANEL_CTRL_PORT_0) {
 8005320:	4b70      	ldr	r3, [pc, #448]	; (80054e4 <rdc200a_step_frame_rate+0x210>)
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	f010 0801 	ands.w	r8, r0, #1
 8005328:	f040 80b8 	bne.w	800549c <rdc200a_step_frame_rate+0x1c8>
		r_holding_time = (U16_T)RDC_REG_GET(0x0923) << 3; /* 8 pixel unit */
 800532c:	7829      	ldrb	r1, [r5, #0]
 800532e:	f640 1223 	movw	r2, #2339	; 0x923
 8005332:	4640      	mov	r0, r8
 8005334:	f001 f8a0 	bl	8006478 <rtiVC_ReadDevice16>
		g_holding_time = (U16_T)RDC_REG_GET(0x0924) << 3;
 8005338:	7829      	ldrb	r1, [r5, #0]
 800533a:	f640 1224 	movw	r2, #2340	; 0x924
		r_holding_time = (U16_T)RDC_REG_GET(0x0923) << 3; /* 8 pixel unit */
 800533e:	00c4      	lsls	r4, r0, #3
		g_holding_time = (U16_T)RDC_REG_GET(0x0924) << 3;
 8005340:	4640      	mov	r0, r8
 8005342:	f001 f899 	bl	8006478 <rtiVC_ReadDevice16>
		b_holding_time = (U16_T)RDC_REG_GET(0x0925) << 3;
 8005346:	7829      	ldrb	r1, [r5, #0]
		g_holding_time = (U16_T)RDC_REG_GET(0x0924) << 3;
 8005348:	4683      	mov	fp, r0
		b_holding_time = (U16_T)RDC_REG_GET(0x0925) << 3;
 800534a:	f640 1225 	movw	r2, #2341	; 0x925
 800534e:	4640      	mov	r0, r8
 8005350:	f001 f892 	bl	8006478 <rtiVC_ReadDevice16>
 8005354:	00c3      	lsls	r3, r0, #3
		CONFIG_PANEL_DRV = RDC_REG_GET32(0x0921);
 8005356:	f640 1021 	movw	r0, #2337	; 0x921
		b_holding_time = (U16_T)RDC_REG_GET(0x0925) << 3;
 800535a:	9303      	str	r3, [sp, #12]
		CONFIG_PANEL_DRV = RDC_REG_GET32(0x0921);
 800535c:	f7ff fc5a 	bl	8004c14 <RDC_REG_GET16>
		g_holding_time = (U16_T)RDC_REG_GET(0x0924) << 3;
 8005360:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
		CONFIG_PANEL_DRV = RDC_REG_GET32(0x0921);
 8005364:	4681      	mov	r9, r0
	rdc200a_get_output_resolution(&output_h_size, &output_v_size);
 8005366:	a906      	add	r1, sp, #24
 8005368:	a805      	add	r0, sp, #20
 800536a:	f7fc fda5 	bl	8001eb8 <rdc200a_get_output_resolution>
	bB4_bA = (U32_T)(4*(2 + (double)vertical_line_pixel/(double)lvds_line)*new_frame_rate_hz * scans_holds * (4. /(double)(1000*1000*x_clock))+0.5);
 800536e:	9805      	ldr	r0, [sp, #20]
 8005370:	f7fb f8c8 	bl	8000504 <__aeabi_ui2d>
	lvds_line = 1 << num_tx_ch_shift[num_tx_channel_idx];
 8005374:	ab08      	add	r3, sp, #32
 8005376:	eb03 1399 	add.w	r3, r3, r9, lsr #6
	bB4_bA = (U32_T)(4*(2 + (double)vertical_line_pixel/(double)lvds_line)*new_frame_rate_hz * scans_holds * (4. /(double)(1000*1000*x_clock))+0.5);
 800537a:	4680      	mov	r8, r0
	lvds_line = 1 << num_tx_ch_shift[num_tx_channel_idx];
 800537c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8005380:	2001      	movs	r0, #1
	bB4_bA = (U32_T)(4*(2 + (double)vertical_line_pixel/(double)lvds_line)*new_frame_rate_hz * scans_holds * (4. /(double)(1000*1000*x_clock))+0.5);
 8005382:	4098      	lsls	r0, r3
 8005384:	4689      	mov	r9, r1
 8005386:	f7fb f8cd 	bl	8000524 <__aeabi_i2d>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4640      	mov	r0, r8
 8005390:	4649      	mov	r1, r9
 8005392:	f7fb fa5b 	bl	800084c <__aeabi_ddiv>
 8005396:	2200      	movs	r2, #0
 8005398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800539c:	f7fa ff76 	bl	800028c <__adddf3>
 80053a0:	2200      	movs	r2, #0
 80053a2:	4b51      	ldr	r3, [pc, #324]	; (80054e8 <rdc200a_step_frame_rate+0x214>)
 80053a4:	f7fb f928 	bl	80005f8 <__aeabi_dmul>
 80053a8:	4682      	mov	sl, r0
	scans_holds = scan_time*3 + r_holding_time+g_holding_time+b_holding_time;
 80053aa:	9806      	ldr	r0, [sp, #24]
	bB4_bA = (U32_T)(4*(2 + (double)vertical_line_pixel/(double)lvds_line)*new_frame_rate_hz * scans_holds * (4. /(double)(1000*1000*x_clock))+0.5);
 80053ac:	9b03      	ldr	r3, [sp, #12]
	scans_holds = scan_time*3 + r_holding_time+g_holding_time+b_holding_time;
 80053ae:	445c      	add	r4, fp
 80053b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80053b4:	4420      	add	r0, r4
	bB4_bA = (U32_T)(4*(2 + (double)vertical_line_pixel/(double)lvds_line)*new_frame_rate_hz * scans_holds * (4. /(double)(1000*1000*x_clock))+0.5);
 80053b6:	4418      	add	r0, r3
 80053b8:	468b      	mov	fp, r1
 80053ba:	f7fb f8a3 	bl	8000504 <__aeabi_ui2d>
 80053be:	9b01      	ldr	r3, [sp, #4]
 80053c0:	4680      	mov	r8, r0
 80053c2:	484a      	ldr	r0, [pc, #296]	; (80054ec <rdc200a_step_frame_rate+0x218>)
 80053c4:	fb03 f000 	mul.w	r0, r3, r0
 80053c8:	4689      	mov	r9, r1
 80053ca:	f7fb f8ab 	bl	8000524 <__aeabi_i2d>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	2000      	movs	r0, #0
 80053d4:	4944      	ldr	r1, [pc, #272]	; (80054e8 <rdc200a_step_frame_rate+0x214>)
 80053d6:	f7fb fa39 	bl	800084c <__aeabi_ddiv>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	4616      	mov	r6, r2
 80053e4:	461f      	mov	r7, r3
 80053e6:	4652      	mov	r2, sl
 80053e8:	465b      	mov	r3, fp
 80053ea:	f7fb f905 	bl	80005f8 <__aeabi_dmul>
 80053ee:	4642      	mov	r2, r8
 80053f0:	464b      	mov	r3, r9
 80053f2:	f7fb f901 	bl	80005f8 <__aeabi_dmul>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4630      	mov	r0, r6
 80053fc:	4639      	mov	r1, r7
 80053fe:	f7fb f8fb 	bl	80005f8 <__aeabi_dmul>
 8005402:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <rdc200a_step_frame_rate+0x21c>)
 8005404:	2200      	movs	r2, #0
 8005406:	f7fa ff41 	bl	800028c <__adddf3>
 800540a:	f7fb fbcd 	bl	8000ba8 <__aeabi_d2uiz>
	if (bB4_bA > 0x3FF) { /* pll2_plln<9:0> */
 800540e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
	bB4_bA = (U32_T)(4*(2 + (double)vertical_line_pixel/(double)lvds_line)*new_frame_rate_hz * scans_holds * (4. /(double)(1000*1000*x_clock))+0.5);
 8005412:	4604      	mov	r4, r0
		return -2;
 8005414:	bf28      	it	cs
 8005416:	f06f 0001 	mvncs.w	r0, #1
	if (bB4_bA > 0x3FF) { /* pll2_plln<9:0> */
 800541a:	d23c      	bcs.n	8005496 <rdc200a_step_frame_rate+0x1c2>
	RDC_REG_SET(0x0048, bB4_bA>>8);
 800541c:	7829      	ldrb	r1, [r5, #0]
 800541e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8005422:	2248      	movs	r2, #72	; 0x48
 8005424:	2000      	movs	r0, #0
 8005426:	f001 f83b 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0049, bB4_bA & 0xFF);
 800542a:	7829      	ldrb	r1, [r5, #0]
 800542c:	b2e3      	uxtb	r3, r4
 800542e:	2249      	movs	r2, #73	; 0x49
 8005430:	2000      	movs	r0, #0
 8005432:	f001 f835 	bl	80064a0 <rtiVC_WriteDevice16>
	frame_rate_hz = 1.0/(double)(scans_holds*(4 * (2 + vertical_line_pixel/(double)lvds_line)* 4 /(double)(bB4_bA*x_clock)/1000.0/1000.0));
 8005436:	4b2c      	ldr	r3, [pc, #176]	; (80054e8 <rdc200a_step_frame_rate+0x214>)
 8005438:	2200      	movs	r2, #0
 800543a:	4650      	mov	r0, sl
 800543c:	4659      	mov	r1, fp
 800543e:	f7fb f8db 	bl	80005f8 <__aeabi_dmul>
 8005442:	4602      	mov	r2, r0
 8005444:	9801      	ldr	r0, [sp, #4]
 8005446:	fb04 f000 	mul.w	r0, r4, r0
 800544a:	460d      	mov	r5, r1
 800544c:	4614      	mov	r4, r2
 800544e:	f7fb f859 	bl	8000504 <__aeabi_ui2d>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4620      	mov	r0, r4
 8005458:	4629      	mov	r1, r5
 800545a:	f7fb f9f7 	bl	800084c <__aeabi_ddiv>
 800545e:	4b1f      	ldr	r3, [pc, #124]	; (80054dc <rdc200a_step_frame_rate+0x208>)
 8005460:	2200      	movs	r2, #0
 8005462:	f7fb f9f3 	bl	800084c <__aeabi_ddiv>
 8005466:	4b1d      	ldr	r3, [pc, #116]	; (80054dc <rdc200a_step_frame_rate+0x208>)
 8005468:	2200      	movs	r2, #0
 800546a:	f7fb f9ef 	bl	800084c <__aeabi_ddiv>
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	f7fb f8c1 	bl	80005f8 <__aeabi_dmul>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	2000      	movs	r0, #0
 800547c:	491d      	ldr	r1, [pc, #116]	; (80054f4 <rdc200a_step_frame_rate+0x220>)
 800547e:	f7fb f9e5 	bl	800084c <__aeabi_ddiv>
	ret = (S32_T)(frame_rate_hz * VC_FRAME_RATE_DIVIDER);
 8005482:	4b16      	ldr	r3, [pc, #88]	; (80054dc <rdc200a_step_frame_rate+0x208>)
 8005484:	2200      	movs	r2, #0
 8005486:	f7fb f8b7 	bl	80005f8 <__aeabi_dmul>
 800548a:	f7fb fb65 	bl	8000b58 <__aeabi_d2iz>
	if (applied_frame_rate > 0)
 800548e:	2800      	cmp	r0, #0
		dev->frame_rate = applied_frame_rate; /* Update new rate */
 8005490:	bfc4      	itt	gt
 8005492:	9b02      	ldrgt	r3, [sp, #8]
 8005494:	6718      	strgt	r0, [r3, #112]	; 0x70
}
 8005496:	b009      	add	sp, #36	; 0x24
 8005498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		r_holding_time = (U16_T)RDC_REG_GET(0x0823) << 3; /* 8 pixel unit */
 800549c:	7829      	ldrb	r1, [r5, #0]
 800549e:	f640 0223 	movw	r2, #2083	; 0x823
 80054a2:	2000      	movs	r0, #0
 80054a4:	f000 ffe8 	bl	8006478 <rtiVC_ReadDevice16>
		g_holding_time = (U16_T)RDC_REG_GET(0x0824) << 3;
 80054a8:	7829      	ldrb	r1, [r5, #0]
 80054aa:	f640 0224 	movw	r2, #2084	; 0x824
		r_holding_time = (U16_T)RDC_REG_GET(0x0823) << 3; /* 8 pixel unit */
 80054ae:	00c4      	lsls	r4, r0, #3
		g_holding_time = (U16_T)RDC_REG_GET(0x0824) << 3;
 80054b0:	2000      	movs	r0, #0
 80054b2:	f000 ffe1 	bl	8006478 <rtiVC_ReadDevice16>
		b_holding_time = (U16_T)RDC_REG_GET(0x0825) << 3;
 80054b6:	7829      	ldrb	r1, [r5, #0]
 80054b8:	f640 0225 	movw	r2, #2085	; 0x825
		g_holding_time = (U16_T)RDC_REG_GET(0x0824) << 3;
 80054bc:	ea4f 0bc0 	mov.w	fp, r0, lsl #3
		b_holding_time = (U16_T)RDC_REG_GET(0x0825) << 3;
 80054c0:	2000      	movs	r0, #0
 80054c2:	f000 ffd9 	bl	8006478 <rtiVC_ReadDevice16>
 80054c6:	00c3      	lsls	r3, r0, #3
		CONFIG_PANEL_DRV = RDC_REG_GET32(0x0821);
 80054c8:	f640 0021 	movw	r0, #2081	; 0x821
		b_holding_time = (U16_T)RDC_REG_GET(0x0825) << 3;
 80054cc:	9303      	str	r3, [sp, #12]
		CONFIG_PANEL_DRV = RDC_REG_GET32(0x0821);
 80054ce:	f7ff fba1 	bl	8004c14 <RDC_REG_GET16>
 80054d2:	4681      	mov	r9, r0
 80054d4:	e747      	b.n	8005366 <rdc200a_step_frame_rate+0x92>
 80054d6:	bf00      	nop
 80054d8:	01000302 	.word	0x01000302
 80054dc:	408f4000 	.word	0x408f4000
 80054e0:	2000001d 	.word	0x2000001d
 80054e4:	20003814 	.word	0x20003814
 80054e8:	40100000 	.word	0x40100000
 80054ec:	000f4240 	.word	0x000f4240
 80054f0:	3fe00000 	.word	0x3fe00000
 80054f4:	3ff00000 	.word	0x3ff00000

080054f8 <rdc200a_flash_read>:
static int rdc200a_flash_read(U32_T addr, U8_T *buf, UINT_T len)
{
	int ret;
	unsigned int bytes_to_read = 0;

	if (buf == NULL || len == 0) {
 80054f8:	2900      	cmp	r1, #0
 80054fa:	f000 8082 	beq.w	8005602 <rdc200a_flash_read+0x10a>
{
 80054fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005502:	4617      	mov	r7, r2
 8005504:	b085      	sub	sp, #20
	if (buf == NULL || len == 0) {
 8005506:	2a00      	cmp	r2, #0
 8005508:	d07e      	beq.n	8005608 <rdc200a_flash_read+0x110>
 800550a:	4d41      	ldr	r5, [pc, #260]	; (8005610 <rdc200a_flash_read+0x118>)
 800550c:	4682      	mov	sl, r0
 800550e:	468b      	mov	fp, r1
		return -1;
	}

	while (len) {
		// by RDC200A spec. Max FLASH_TX_DATA_NUM is 260. (cmd - 260 = 256)
		bytes_to_read = MIN(len, 256);
 8005510:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8005514:	46b8      	mov	r8, r7
 8005516:	bf28      	it	cs
 8005518:	f44f 7880 	movcs.w	r8, #256	; 0x100
	FLASH_TX_DATA_NUM = 4/*cmd + 3 addr*/ + len;
 800551c:	f108 0904 	add.w	r9, r8, #4
	direct_ctrl_reg_buf[2] = (1<<7) | (0<<6) | (FLASH_TX_DATA_NUM>>8); /* 0x005A */
 8005520:	f3c9 2407 	ubfx	r4, r9, #8, #8
 8005524:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8005528:	f88d 400a 	strb.w	r4, [sp, #10]
	direct_ctrl_reg_buf[4] = CMD_READ; /* 0x005C */
 800552c:	2403      	movs	r4, #3
 800552e:	f88d 400c 	strb.w	r4, [sp, #12]
	direct_ctrl_reg_buf[5] = (addr >> 16) & 0xFF; /* 0x005D */
 8005532:	ea4f 441a 	mov.w	r4, sl, lsr #16
	RDC_REG_SET(0x0051, temp_reg_val);
 8005536:	7829      	ldrb	r1, [r5, #0]
	direct_ctrl_reg_buf[5] = (addr >> 16) & 0xFF; /* 0x005D */
 8005538:	f88d 400d 	strb.w	r4, [sp, #13]
	RDC_REG_SET(0x0051, temp_reg_val);
 800553c:	2306      	movs	r3, #6
 800553e:	2251      	movs	r2, #81	; 0x51
 8005540:	2000      	movs	r0, #0
	direct_ctrl_reg_buf[0] = 0x00;
 8005542:	f44f 46b4 	mov.w	r6, #23040	; 0x5a00
	direct_ctrl_reg_buf[6] = (addr >> 8) & 0xFF; /* 0x005E */
 8005546:	fa9a f49a 	rev16.w	r4, sl
	FLASH_TX_DATA_NUM = 4/*cmd + 3 addr*/ + len;
 800554a:	fa1f f989 	uxth.w	r9, r9
	direct_ctrl_reg_buf[0] = 0x00;
 800554e:	f8ad 6008 	strh.w	r6, [sp, #8]
	direct_ctrl_reg_buf[6] = (addr >> 8) & 0xFF; /* 0x005E */
 8005552:	f8ad 400e 	strh.w	r4, [sp, #14]
	direct_ctrl_reg_buf[3] = (U8_T)(FLASH_TX_DATA_NUM & 0xFF); /* 0x005B */
 8005556:	f88d 900b 	strb.w	r9, [sp, #11]
	RDC_REG_SET(0x0051, temp_reg_val);
 800555a:	f000 ffa1 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC200A_REG_BURST_SET(direct_ctrl_reg_buf, 8);
 800555e:	2308      	movs	r3, #8
 8005560:	eb0d 0203 	add.w	r2, sp, r3
 8005564:	7829      	ldrb	r1, [r5, #0]
 8005566:	2000      	movs	r0, #0
 8005568:	f000 ff64 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	reg_0x0061 = RDC_REG_GET(0x0061);
 800556c:	7829      	ldrb	r1, [r5, #0]
 800556e:	2261      	movs	r2, #97	; 0x61
 8005570:	2000      	movs	r0, #0
 8005572:	f000 ff81 	bl	8006478 <rtiVC_ReadDevice16>
	reg_0x0061 &= ~(1<<3); // FLASH_DIRECT_START
 8005576:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
	RDC_REG_SET(0x0061, reg_0x0061);
 800557a:	7829      	ldrb	r1, [r5, #0]
 800557c:	4623      	mov	r3, r4
 800557e:	2261      	movs	r2, #97	; 0x61
 8005580:	2000      	movs	r0, #0
 8005582:	f000 ff8d 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC_REG_SET(0x0061, reg_0x0061);
 8005586:	7829      	ldrb	r1, [r5, #0]
 8005588:	f044 0308 	orr.w	r3, r4, #8
 800558c:	2261      	movs	r2, #97	; 0x61
 800558e:	2000      	movs	r0, #0
 8005590:	f000 ff86 	bl	80064a0 <rtiVC_WriteDevice16>
 8005594:	2664      	movs	r6, #100	; 0x64
 8005596:	24f0      	movs	r4, #240	; 0xf0
 8005598:	e001      	b.n	800559e <rdc200a_flash_read+0xa6>
		if (--retry_cnt == 0)
 800559a:	3c01      	subs	r4, #1
 800559c:	d024      	beq.n	80055e8 <rdc200a_flash_read+0xf0>
		reg_0x0092 = RDC_REG_GET(0x0092);		
 800559e:	7829      	ldrb	r1, [r5, #0]
 80055a0:	2292      	movs	r2, #146	; 0x92
 80055a2:	2000      	movs	r0, #0
 80055a4:	f000 ff68 	bl	8006478 <rtiVC_ReadDevice16>
		if (reg_0x0092 & 0x40) { /* MON_SPI_MASTER_RDY_NBUSY */
 80055a8:	0643      	lsls	r3, r0, #25
 80055aa:	d5f6      	bpl.n	800559a <rdc200a_flash_read+0xa2>
	RDC_REG_SET(0x0051, temp_reg_val);
 80055ac:	7829      	ldrb	r1, [r5, #0]
 80055ae:	2304      	movs	r3, #4
 80055b0:	2251      	movs	r2, #81	; 0x51
 80055b2:	2000      	movs	r0, #0
 80055b4:	f000 ff74 	bl	80064a0 <rtiVC_WriteDevice16>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, temp, 4/*DummyData*/ + len);
 80055b8:	4816      	ldr	r0, [pc, #88]	; (8005614 <rdc200a_flash_read+0x11c>)
 80055ba:	7829      	ldrb	r1, [r5, #0]
 80055bc:	4a16      	ldr	r2, [pc, #88]	; (8005618 <rdc200a_flash_read+0x120>)
 80055be:	9000      	str	r0, [sp, #0]
 80055c0:	2302      	movs	r3, #2
 80055c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80055c6:	2000      	movs	r0, #0
 80055c8:	f000 ff0e 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	memcpy(buf, &temp[4], len);
 80055cc:	4658      	mov	r0, fp
 80055ce:	4913      	ldr	r1, [pc, #76]	; (800561c <rdc200a_flash_read+0x124>)
 80055d0:	4642      	mov	r2, r8
 80055d2:	f00d fccc 	bl	8012f6e <memcpy>
	while (len) {
 80055d6:	ebb7 0708 	subs.w	r7, r7, r8

		ret = read_data_bytes(addr, buf, bytes_to_read);
		if (ret)
			return -2;

		buf += bytes_to_read;
 80055da:	44c3      	add	fp, r8
		addr += bytes_to_read;
 80055dc:	44c2      	add	sl, r8
	while (len) {
 80055de:	d197      	bne.n	8005510 <rdc200a_flash_read+0x18>
		len -= bytes_to_read;
	}

	return 0;
 80055e0:	4638      	mov	r0, r7
}
 80055e2:	b005      	add	sp, #20
 80055e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (--retry_cnt == 0) {
 80055e8:	3e01      	subs	r6, #1
 80055ea:	d1d4      	bne.n	8005596 <rdc200a_flash_read+0x9e>
	RDC_REG_SET(0x0051, temp_reg_val);
 80055ec:	4630      	mov	r0, r6
 80055ee:	7829      	ldrb	r1, [r5, #0]
 80055f0:	2304      	movs	r3, #4
 80055f2:	2251      	movs	r2, #81	; 0x51
 80055f4:	f000 ff54 	bl	80064a0 <rtiVC_WriteDevice16>
			return -2;
 80055f8:	f06f 0001 	mvn.w	r0, #1
}
 80055fc:	b005      	add	sp, #20
 80055fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 8005602:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005606:	4770      	bx	lr
		return -1;
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	e7e9      	b.n	80055e2 <rdc200a_flash_read+0xea>
 800560e:	bf00      	nop
 8005610:	2000001d 	.word	0x2000001d
 8005614:	200006b0 	.word	0x200006b0
 8005618:	200005a8 	.word	0x200005a8
 800561c:	200006b4 	.word	0x200006b4

08005620 <rdc200a_flash_write>:

	return ret;
}

static int rdc200a_flash_write(U32_T flash_addr, const U8_T *buf, UINT_T len)
{
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	b089      	sub	sp, #36	; 0x24
	int ret;

	if (buf == NULL || len == 0) {
 8005626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800562a:	2900      	cmp	r1, #0
 800562c:	f000 8098 	beq.w	8005760 <rdc200a_flash_write+0x140>
 8005630:	4693      	mov	fp, r2
 8005632:	2a00      	cmp	r2, #0
 8005634:	f000 8094 	beq.w	8005760 <rdc200a_flash_write+0x140>
		EMSG("Write: Invalid parameters\n");
		return -1;
	}

	RDC_REG_SET(0x0051, 0x04);
 8005638:	4d4b      	ldr	r5, [pc, #300]	; (8005768 <rdc200a_flash_write+0x148>)
 800563a:	4c4c      	ldr	r4, [pc, #304]	; (800576c <rdc200a_flash_write+0x14c>)
 800563c:	7829      	ldrb	r1, [r5, #0]
 800563e:	2304      	movs	r3, #4
 8005640:	2251      	movs	r2, #81	; 0x51
 8005642:	2000      	movs	r0, #0
 8005644:	f000 ff2c 	bl	80064a0 <rtiVC_WriteDevice16>
	size_t retlen = 0;	
 8005648:	f04f 0900 	mov.w	r9, #0
 800564c:	af07      	add	r7, sp, #28
	memcpy(&flash_cmdb[sizeof(RDC200A_FLASH_PP_MSG_HDR_T)], pgm_buf, len);
 800564e:	f8cd b00c 	str.w	fp, [sp, #12]
		page_offset = (flash_addr + i) & (FLASH_PAGE_SIZE - 1);
 8005652:	9b04      	ldr	r3, [sp, #16]
 8005654:	eb03 0809 	add.w	r8, r3, r9
		page_remain = MIN(FLASH_PAGE_SIZE - page_offset, len - i);
 8005658:	9b03      	ldr	r3, [sp, #12]
		page_offset = (flash_addr + i) & (FLASH_PAGE_SIZE - 1);
 800565a:	f3c8 060a 	ubfx	r6, r8, #0, #11
		page_remain = MIN(FLASH_PAGE_SIZE - page_offset, len - i);
 800565e:	f5c6 6600 	rsb	r6, r6, #2048	; 0x800
 8005662:	eba3 0309 	sub.w	r3, r3, r9
 8005666:	429e      	cmp	r6, r3
 8005668:	bf28      	it	cs
 800566a:	461e      	movcs	r6, r3
 800566c:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8005670:	e002      	b.n	8005678 <rdc200a_flash_write+0x58>
		if (--retry_cnt == 0) {
 8005672:	f1bb 0b01 	subs.w	fp, fp, #1
 8005676:	d06e      	beq.n	8005756 <rdc200a_flash_write+0x136>
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 8005678:	f04f 0c06 	mov.w	ip, #6
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 800567c:	7829      	ldrb	r1, [r5, #0]
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 800567e:	f884 c002 	strb.w	ip, [r4, #2]
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 8005682:	2303      	movs	r3, #3
 8005684:	4622      	mov	r2, r4
 8005686:	2000      	movs	r0, #0
 8005688:	f000 fed4 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 800568c:	f04f 0a02 	mov.w	sl, #2
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005690:	f04f 0c05 	mov.w	ip, #5
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005694:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005696:	f884 c002 	strb.w	ip, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 800569a:	2304      	movs	r3, #4
 800569c:	4622      	mov	r2, r4
 800569e:	2000      	movs	r0, #0
 80056a0:	f000 fec8 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 80056a4:	4653      	mov	r3, sl
 80056a6:	4622      	mov	r2, r4
 80056a8:	e9cd 7a00 	strd	r7, sl, [sp]
 80056ac:	7829      	ldrb	r1, [r5, #0]
 80056ae:	2000      	movs	r0, #0
 80056b0:	f000 fe9a 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 80056b4:	f89d 301d 	ldrb.w	r3, [sp, #29]
		if (sr & RDC200_FLASH_SR_WEL) {
 80056b8:	079a      	lsls	r2, r3, #30
 80056ba:	d5da      	bpl.n	8005672 <rdc200a_flash_write+0x52>
	flash_cmdb[RDC200A_FCMD_POS_FADDR_H] = (flash_addr >> 16) & 0xFF;
 80056bc:	ea4f 4318 	mov.w	r3, r8, lsr #16
 80056c0:	70e3      	strb	r3, [r4, #3]
	memcpy(&flash_cmdb[sizeof(RDC200A_FLASH_PP_MSG_HDR_T)], pgm_buf, len);
 80056c2:	9b05      	ldr	r3, [sp, #20]
 80056c4:	482a      	ldr	r0, [pc, #168]	; (8005770 <rdc200a_flash_write+0x150>)
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_PROGRAM_PAGE; 
 80056c6:	f884 a002 	strb.w	sl, [r4, #2]
	memcpy(&flash_cmdb[sizeof(RDC200A_FLASH_PP_MSG_HDR_T)], pgm_buf, len);
 80056ca:	eb03 0109 	add.w	r1, r3, r9
 80056ce:	4632      	mov	r2, r6
	flash_cmdb[RDC200A_FCMD_POS_FADDR_M] = (flash_addr >> 8) & 0xFF; 
 80056d0:	fa98 f898 	rev16.w	r8, r8
 80056d4:	f8a4 8004 	strh.w	r8, [r4, #4]
	memcpy(&flash_cmdb[sizeof(RDC200A_FLASH_PP_MSG_HDR_T)], pgm_buf, len);
 80056d8:	f00d fc49 	bl	8012f6e <memcpy>
	U16_T burst_size = sizeof(RDC200A_FLASH_PP_MSG_HDR_T) + len;
 80056dc:	1db3      	adds	r3, r6, #6
	RDC200A_REG_BURST_SET(flash_cmdb, burst_size);
 80056de:	7829      	ldrb	r1, [r5, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	4622      	mov	r2, r4
 80056e4:	2000      	movs	r0, #0
 80056e6:	f000 fea5 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
		if (ret < 0)
 80056ea:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 80056ee:	e002      	b.n	80056f6 <rdc200a_flash_write+0xd6>
		if (--retry_cnt == 0)
 80056f0:	f1b8 0801 	subs.w	r8, r8, #1
 80056f4:	d02f      	beq.n	8005756 <rdc200a_flash_write+0x136>
		reg_0x0092 = RDC_REG_GET(0x0092);		
 80056f6:	7829      	ldrb	r1, [r5, #0]
 80056f8:	2292      	movs	r2, #146	; 0x92
 80056fa:	2000      	movs	r0, #0
 80056fc:	f000 febc 	bl	8006478 <rtiVC_ReadDevice16>
		if (reg_0x0092 & 0x40) { /* MON_SPI_MASTER_RDY_NBUSY */
 8005700:	0643      	lsls	r3, r0, #25
 8005702:	d5f5      	bpl.n	80056f0 <rdc200a_flash_write+0xd0>
 8005704:	f04f 0803 	mov.w	r8, #3
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005708:	f04f 0a05 	mov.w	sl, #5
 800570c:	e004      	b.n	8005718 <rdc200a_flash_write+0xf8>
		if (--milliseconds == 0)
 800570e:	f1b8 0801 	subs.w	r8, r8, #1
 8005712:	d020      	beq.n	8005756 <rdc200a_flash_write+0x136>
		VC_M_DELAY(1);
 8005714:	f000 fe3a 	bl	800638c <rtiVC_DelayUs>
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005718:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 800571a:	f884 a002 	strb.w	sl, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 800571e:	4622      	mov	r2, r4
 8005720:	2304      	movs	r3, #4
 8005722:	2000      	movs	r0, #0
 8005724:	f000 fe86 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 8005728:	2302      	movs	r3, #2
 800572a:	e9cd 7300 	strd	r7, r3, [sp]
 800572e:	7829      	ldrb	r1, [r5, #0]
 8005730:	4622      	mov	r2, r4
 8005732:	2000      	movs	r0, #0
 8005734:	f000 fe58 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 8005738:	f89d 301d 	ldrb.w	r3, [sp, #29]
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 800573c:	f013 0301 	ands.w	r3, r3, #1
		VC_M_DELAY(1);
 8005740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 8005744:	d1e3      	bne.n	800570e <rdc200a_flash_write+0xee>
	for (i = 0; i < len; ) {
 8005746:	9a03      	ldr	r2, [sp, #12]
		retlen += written;
 8005748:	44b1      	add	r9, r6
	for (i = 0; i < len; ) {
 800574a:	454a      	cmp	r2, r9
 800574c:	d881      	bhi.n	8005652 <rdc200a_flash_write+0x32>

	ret = program_data_bytes(flash_addr, buf, len);
	if (ret)
		return -2;

	return 0;
 800574e:	4618      	mov	r0, r3
}
 8005750:	b009      	add	sp, #36	; 0x24
 8005752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -2;
 8005756:	f06f 0001 	mvn.w	r0, #1
}
 800575a:	b009      	add	sp, #36	; 0x24
 800575c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	e7f9      	b.n	800575a <rdc200a_flash_write+0x13a>
 8005766:	bf00      	nop
 8005768:	2000001d 	.word	0x2000001d
 800576c:	200005a8 	.word	0x200005a8
 8005770:	200005ae 	.word	0x200005ae

08005774 <rdc200a_erase_chip>:
erase_err:
	return ret;
}

static int rdc200a_erase_chip(void)
{
 8005774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int ret;

	RDC_REG_SET(0x0051, 0x04);
 8005778:	4d35      	ldr	r5, [pc, #212]	; (8005850 <rdc200a_erase_chip+0xdc>)
 800577a:	4c36      	ldr	r4, [pc, #216]	; (8005854 <rdc200a_erase_chip+0xe0>)
 800577c:	7829      	ldrb	r1, [r5, #0]
{
 800577e:	b085      	sub	sp, #20
	RDC_REG_SET(0x0051, 0x04);
 8005780:	2304      	movs	r3, #4
 8005782:	2251      	movs	r2, #81	; 0x51
 8005784:	2000      	movs	r0, #0
 8005786:	f000 fe8b 	bl	80064a0 <rtiVC_WriteDevice16>
 800578a:	2664      	movs	r6, #100	; 0x64
 800578c:	af03      	add	r7, sp, #12
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 800578e:	f04f 0806 	mov.w	r8, #6
 8005792:	e001      	b.n	8005798 <rdc200a_erase_chip+0x24>
		if (--retry_cnt == 0) {
 8005794:	3e01      	subs	r6, #1
 8005796:	d056      	beq.n	8005846 <rdc200a_erase_chip+0xd2>
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 8005798:	7829      	ldrb	r1, [r5, #0]
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 800579a:	f884 8002 	strb.w	r8, [r4, #2]
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 800579e:	2303      	movs	r3, #3
 80057a0:	4622      	mov	r2, r4
 80057a2:	2000      	movs	r0, #0
 80057a4:	f000 fe46 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 80057a8:	f04f 0c05 	mov.w	ip, #5
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 80057ac:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 80057ae:	f884 c002 	strb.w	ip, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 80057b2:	2304      	movs	r3, #4
 80057b4:	4622      	mov	r2, r4
 80057b6:	2000      	movs	r0, #0
 80057b8:	f000 fe3c 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 80057bc:	2302      	movs	r3, #2
 80057be:	e9cd 7300 	strd	r7, r3, [sp]
 80057c2:	4622      	mov	r2, r4
 80057c4:	7829      	ldrb	r1, [r5, #0]
 80057c6:	2000      	movs	r0, #0
 80057c8:	f000 fe0e 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 80057cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if (sr & RDC200_FLASH_SR_WEL) {
 80057d0:	079a      	lsls	r2, r3, #30
 80057d2:	d5df      	bpl.n	8005794 <rdc200a_erase_chip+0x20>

	ret = write_enable();
	if (ret)
		goto erase_chip_err;

	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_BULK_ERASE_0;	
 80057d4:	2360      	movs	r3, #96	; 0x60
 80057d6:	70a3      	strb	r3, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 3);
 80057d8:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <rdc200a_erase_chip+0xe0>)
 80057da:	7829      	ldrb	r1, [r5, #0]
 80057dc:	2303      	movs	r3, #3
 80057de:	2000      	movs	r0, #0
 80057e0:	f000 fe28 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
 80057e4:	26f0      	movs	r6, #240	; 0xf0
 80057e6:	e001      	b.n	80057ec <rdc200a_erase_chip+0x78>
		if (--retry_cnt == 0)
 80057e8:	3e01      	subs	r6, #1
 80057ea:	d02c      	beq.n	8005846 <rdc200a_erase_chip+0xd2>
		reg_0x0092 = RDC_REG_GET(0x0092);		
 80057ec:	7829      	ldrb	r1, [r5, #0]
 80057ee:	2292      	movs	r2, #146	; 0x92
 80057f0:	2000      	movs	r0, #0
 80057f2:	f000 fe41 	bl	8006478 <rtiVC_ReadDevice16>
		if (reg_0x0092 & 0x40) { /* MON_SPI_MASTER_RDY_NBUSY */
 80057f6:	0643      	lsls	r3, r0, #25
 80057f8:	d5f6      	bpl.n	80057e8 <rdc200a_erase_chip+0x74>
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 80057fa:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8005854 <rdc200a_erase_chip+0xe0>
 80057fe:	f64e 2660 	movw	r6, #60000	; 0xea60
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005802:	f04f 0805 	mov.w	r8, #5
 8005806:	e003      	b.n	8005810 <rdc200a_erase_chip+0x9c>
		if (--milliseconds == 0)
 8005808:	3e01      	subs	r6, #1
 800580a:	d01c      	beq.n	8005846 <rdc200a_erase_chip+0xd2>
		VC_M_DELAY(1);
 800580c:	f000 fdbe 	bl	800638c <rtiVC_DelayUs>
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005810:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005812:	f884 8002 	strb.w	r8, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005816:	464a      	mov	r2, r9
 8005818:	2304      	movs	r3, #4
 800581a:	2000      	movs	r0, #0
 800581c:	f000 fe0a 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 8005820:	2302      	movs	r3, #2
 8005822:	e9cd 7300 	strd	r7, r3, [sp]
 8005826:	7829      	ldrb	r1, [r5, #0]
 8005828:	464a      	mov	r2, r9
 800582a:	2000      	movs	r0, #0
 800582c:	f000 fddc 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 8005830:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 8005834:	f013 0301 	ands.w	r3, r3, #1
		VC_M_DELAY(1);
 8005838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 800583c:	d1e4      	bne.n	8005808 <rdc200a_erase_chip+0x94>
		}
	}
}
#endif

	return 0;
 800583e:	4618      	mov	r0, r3

erase_chip_err:
	return ret;
}
 8005840:	b005      	add	sp, #20
 8005842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return 0;
 8005846:	f04f 30ff 	mov.w	r0, #4294967295
}
 800584a:	b005      	add	sp, #20
 800584c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005850:	2000001d 	.word	0x2000001d
 8005854:	200005a8 	.word	0x200005a8

08005858 <rdc200a_flash_finish>:

	return 0;
}

static int rdc200a_flash_finish(void)
{
 8005858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	RDC_REG_SET(0x0051, 0x04);
 800585c:	4d32      	ldr	r5, [pc, #200]	; (8005928 <rdc200a_flash_finish+0xd0>)
 800585e:	4c33      	ldr	r4, [pc, #204]	; (800592c <rdc200a_flash_finish+0xd4>)
 8005860:	7829      	ldrb	r1, [r5, #0]
{
 8005862:	b085      	sub	sp, #20
	RDC_REG_SET(0x0051, 0x04);
 8005864:	2304      	movs	r3, #4
 8005866:	2251      	movs	r2, #81	; 0x51
 8005868:	2000      	movs	r0, #0
 800586a:	f000 fe19 	bl	80064a0 <rtiVC_WriteDevice16>
 800586e:	2664      	movs	r6, #100	; 0x64
 8005870:	af03      	add	r7, sp, #12
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 8005872:	f04f 0806 	mov.w	r8, #6
 8005876:	e001      	b.n	800587c <rdc200a_flash_finish+0x24>
		if (--retry_cnt == 0) {
 8005878:	3e01      	subs	r6, #1
 800587a:	d051      	beq.n	8005920 <rdc200a_flash_finish+0xc8>
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 800587c:	7829      	ldrb	r1, [r5, #0]
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 800587e:	f884 8002 	strb.w	r8, [r4, #2]
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 8005882:	2303      	movs	r3, #3
 8005884:	4622      	mov	r2, r4
 8005886:	2000      	movs	r0, #0
 8005888:	f000 fdd4 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 800588c:	f04f 0c05 	mov.w	ip, #5
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005890:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005892:	f884 c002 	strb.w	ip, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005896:	2304      	movs	r3, #4
 8005898:	4622      	mov	r2, r4
 800589a:	2000      	movs	r0, #0
 800589c:	f000 fdca 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 80058a0:	2302      	movs	r3, #2
 80058a2:	e9cd 7300 	strd	r7, r3, [sp]
 80058a6:	7829      	ldrb	r1, [r5, #0]
 80058a8:	4622      	mov	r2, r4
 80058aa:	2000      	movs	r0, #0
 80058ac:	f000 fd9c 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 80058b0:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if (sr & RDC200_FLASH_SR_WEL) {
 80058b4:	0799      	lsls	r1, r3, #30
 80058b6:	d5df      	bpl.n	8005878 <rdc200a_flash_finish+0x20>
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_STATUS_REG;
 80058b8:	f64b 4301 	movw	r3, #48129	; 0xbc01
 80058bc:	8063      	strh	r3, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4);
 80058be:	4a1b      	ldr	r2, [pc, #108]	; (800592c <rdc200a_flash_finish+0xd4>)
 80058c0:	7829      	ldrb	r1, [r5, #0]
 80058c2:	2304      	movs	r3, #4
 80058c4:	2000      	movs	r0, #0
 80058c6:	f000 fdb5 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
 80058ca:	26f0      	movs	r6, #240	; 0xf0
 80058cc:	e001      	b.n	80058d2 <rdc200a_flash_finish+0x7a>
		if (--retry_cnt == 0)
 80058ce:	3e01      	subs	r6, #1
 80058d0:	d026      	beq.n	8005920 <rdc200a_flash_finish+0xc8>
		reg_0x0092 = RDC_REG_GET(0x0092);		
 80058d2:	2292      	movs	r2, #146	; 0x92
 80058d4:	7829      	ldrb	r1, [r5, #0]
 80058d6:	2000      	movs	r0, #0
 80058d8:	f000 fdce 	bl	8006478 <rtiVC_ReadDevice16>
		if (reg_0x0092 & 0x40) { /* MON_SPI_MASTER_RDY_NBUSY */
 80058dc:	0642      	lsls	r2, r0, #25
 80058de:	d5f6      	bpl.n	80058ce <rdc200a_flash_finish+0x76>
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 80058e0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800592c <rdc200a_flash_finish+0xd4>
 80058e4:	2632      	movs	r6, #50	; 0x32
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 80058e6:	f04f 0905 	mov.w	r9, #5
 80058ea:	e003      	b.n	80058f4 <rdc200a_flash_finish+0x9c>
		if (--milliseconds == 0)
 80058ec:	3e01      	subs	r6, #1
 80058ee:	d017      	beq.n	8005920 <rdc200a_flash_finish+0xc8>
		VC_M_DELAY(1);
 80058f0:	f000 fd4c 	bl	800638c <rtiVC_DelayUs>
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 80058f4:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 80058f6:	f884 9002 	strb.w	r9, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 80058fa:	4642      	mov	r2, r8
 80058fc:	2304      	movs	r3, #4
 80058fe:	2000      	movs	r0, #0
 8005900:	f000 fd98 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 8005904:	2302      	movs	r3, #2
 8005906:	e9cd 7300 	strd	r7, r3, [sp]
 800590a:	7829      	ldrb	r1, [r5, #0]
 800590c:	4642      	mov	r2, r8
 800590e:	2000      	movs	r0, #0
 8005910:	f000 fd6a 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 8005914:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 8005918:	07db      	lsls	r3, r3, #31
		VC_M_DELAY(1);
 800591a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 800591e:	d4e5      	bmi.n	80058ec <rdc200a_flash_finish+0x94>
	rdc200a_flash_enable_protect();

	return 0;
}
 8005920:	2000      	movs	r0, #0
 8005922:	b005      	add	sp, #20
 8005924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005928:	2000001d 	.word	0x2000001d
 800592c:	200005a8 	.word	0x200005a8

08005930 <rdc200a_erase_sector>:
{
 8005930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	RDC_REG_SET(0x0051, 0x04);
 8005934:	4d42      	ldr	r5, [pc, #264]	; (8005a40 <rdc200a_erase_sector+0x110>)
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005936:	4c43      	ldr	r4, [pc, #268]	; (8005a44 <rdc200a_erase_sector+0x114>)
	RDC_REG_SET(0x0051, 0x04);
 8005938:	7829      	ldrb	r1, [r5, #0]
{
 800593a:	b085      	sub	sp, #20
	RDC_REG_SET(0x0051, 0x04);
 800593c:	2304      	movs	r3, #4
 800593e:	2251      	movs	r2, #81	; 0x51
{
 8005940:	4681      	mov	r9, r0
	RDC_REG_SET(0x0051, 0x04);
 8005942:	2000      	movs	r0, #0
 8005944:	f000 fdac 	bl	80064a0 <rtiVC_WriteDevice16>
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005948:	2105      	movs	r1, #5
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 800594a:	2304      	movs	r3, #4
 800594c:	4622      	mov	r2, r4
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 800594e:	70a1      	strb	r1, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005950:	2000      	movs	r0, #0
 8005952:	7829      	ldrb	r1, [r5, #0]
 8005954:	f000 fd6e 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 8005958:	af03      	add	r7, sp, #12
 800595a:	2302      	movs	r3, #2
 800595c:	e9cd 7300 	strd	r7, r3, [sp]
 8005960:	7829      	ldrb	r1, [r5, #0]
 8005962:	4622      	mov	r2, r4
 8005964:	2000      	movs	r0, #0
 8005966:	f000 fd3f 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 800596a:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if (sr & (RDC200_FLASH_SR_SRWD | RDC200_FLASH_SR_BP3_0)) {
 800596e:	f013 0fbc 	tst.w	r3, #188	; 0xbc
 8005972:	d160      	bne.n	8005a36 <rdc200a_erase_sector+0x106>
 8005974:	2664      	movs	r6, #100	; 0x64
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 8005976:	f04f 0806 	mov.w	r8, #6
 800597a:	e001      	b.n	8005980 <rdc200a_erase_sector+0x50>
		if (--retry_cnt == 0) {
 800597c:	3e01      	subs	r6, #1
 800597e:	d05a      	beq.n	8005a36 <rdc200a_erase_sector+0x106>
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 8005980:	7829      	ldrb	r1, [r5, #0]
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 8005982:	f884 8002 	strb.w	r8, [r4, #2]
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 8005986:	2303      	movs	r3, #3
 8005988:	4622      	mov	r2, r4
 800598a:	2000      	movs	r0, #0
 800598c:	f000 fd52 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005990:	f04f 0c05 	mov.w	ip, #5
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005994:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005996:	f884 c002 	strb.w	ip, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 800599a:	2304      	movs	r3, #4
 800599c:	4622      	mov	r2, r4
 800599e:	2000      	movs	r0, #0
 80059a0:	f000 fd48 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 80059a4:	2302      	movs	r3, #2
 80059a6:	e9cd 7300 	strd	r7, r3, [sp]
 80059aa:	4622      	mov	r2, r4
 80059ac:	7829      	ldrb	r1, [r5, #0]
 80059ae:	2000      	movs	r0, #0
 80059b0:	f000 fd1a 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 80059b4:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if (sr & RDC200_FLASH_SR_WEL) {
 80059b8:	079a      	lsls	r2, r3, #30
 80059ba:	d5df      	bpl.n	800597c <rdc200a_erase_sector+0x4c>
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_SECTOR_ERASE_4K; 
 80059bc:	2320      	movs	r3, #32
 80059be:	70a3      	strb	r3, [r4, #2]
	flash_cmdb[RDC200A_FCMD_POS_FADDR_H] = (sector_addr >> 16) & 0xFF;
 80059c0:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80059c4:	70e3      	strb	r3, [r4, #3]
	RDC200A_REG_BURST_SET(flash_cmdb, burst_size);
 80059c6:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <rdc200a_erase_sector+0x114>)
 80059c8:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_FADDR_M] = (sector_addr >> 8) & 0xFF; 
 80059ca:	fa99 f999 	rev16.w	r9, r9
	RDC200A_REG_BURST_SET(flash_cmdb, burst_size);
 80059ce:	2306      	movs	r3, #6
 80059d0:	2000      	movs	r0, #0
	flash_cmdb[RDC200A_FCMD_POS_FADDR_M] = (sector_addr >> 8) & 0xFF; 
 80059d2:	f8a4 9004 	strh.w	r9, [r4, #4]
	RDC200A_REG_BURST_SET(flash_cmdb, burst_size);
 80059d6:	26f0      	movs	r6, #240	; 0xf0
 80059d8:	f000 fd2c 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	if (ret)
 80059dc:	e001      	b.n	80059e2 <rdc200a_erase_sector+0xb2>
		if (--retry_cnt == 0)
 80059de:	3e01      	subs	r6, #1
 80059e0:	d029      	beq.n	8005a36 <rdc200a_erase_sector+0x106>
		reg_0x0092 = RDC_REG_GET(0x0092);		
 80059e2:	7829      	ldrb	r1, [r5, #0]
 80059e4:	2292      	movs	r2, #146	; 0x92
 80059e6:	2000      	movs	r0, #0
 80059e8:	f000 fd46 	bl	8006478 <rtiVC_ReadDevice16>
		if (reg_0x0092 & 0x40) { /* MON_SPI_MASTER_RDY_NBUSY */
 80059ec:	0643      	lsls	r3, r0, #25
 80059ee:	d5f6      	bpl.n	80059de <rdc200a_erase_sector+0xae>
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 80059f0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8005a44 <rdc200a_erase_sector+0x114>
 80059f4:	26fa      	movs	r6, #250	; 0xfa
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 80059f6:	f04f 0805 	mov.w	r8, #5
 80059fa:	e003      	b.n	8005a04 <rdc200a_erase_sector+0xd4>
		if (--milliseconds == 0)
 80059fc:	3e01      	subs	r6, #1
 80059fe:	d01a      	beq.n	8005a36 <rdc200a_erase_sector+0x106>
		VC_M_DELAY(1);
 8005a00:	f000 fcc4 	bl	800638c <rtiVC_DelayUs>
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005a04:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005a06:	f884 8002 	strb.w	r8, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005a0a:	464a      	mov	r2, r9
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	2000      	movs	r0, #0
 8005a10:	f000 fd10 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 8005a14:	2302      	movs	r3, #2
 8005a16:	e9cd 7300 	strd	r7, r3, [sp]
 8005a1a:	7829      	ldrb	r1, [r5, #0]
 8005a1c:	464a      	mov	r2, r9
 8005a1e:	2000      	movs	r0, #0
 8005a20:	f000 fce2 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 8005a24:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 8005a28:	f013 0301 	ands.w	r3, r3, #1
		VC_M_DELAY(1);
 8005a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 8005a30:	d1e4      	bne.n	80059fc <rdc200a_erase_sector+0xcc>
	return 0;
 8005a32:	4618      	mov	r0, r3
 8005a34:	e001      	b.n	8005a3a <rdc200a_erase_sector+0x10a>
		return -1;
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005a3a:	b005      	add	sp, #20
 8005a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a40:	2000001d 	.word	0x2000001d
 8005a44:	200005a8 	.word	0x200005a8

08005a48 <rdc200a_flash_prepare>:
{
 8005a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	RDC_REG_SET(0x0051, 0x04);
 8005a4c:	4d40      	ldr	r5, [pc, #256]	; (8005b50 <rdc200a_flash_prepare+0x108>)
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_DEVICE_ID;
 8005a4e:	4c41      	ldr	r4, [pc, #260]	; (8005b54 <rdc200a_flash_prepare+0x10c>)
	RDC_REG_SET(0x0051, 0x04);
 8005a50:	7829      	ldrb	r1, [r5, #0]
{
 8005a52:	b085      	sub	sp, #20
	RDC_REG_SET(0x0051, 0x04);
 8005a54:	2304      	movs	r3, #4
 8005a56:	2251      	movs	r2, #81	; 0x51
 8005a58:	2000      	movs	r0, #0
 8005a5a:	f000 fd21 	bl	80064a0 <rtiVC_WriteDevice16>
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_DEVICE_ID;
 8005a5e:	209f      	movs	r0, #159	; 0x9f
	RDC200A_REG_BURST_GET(flash_cmdb, 2, id_buf, 4); /* Dummy(CMD) + 3 bytes */
 8005a60:	2604      	movs	r6, #4
	RDC200A_REG_BURST_SET(flash_cmdb, 6); // Include DummyForRead0 ~ DummyForRead2
 8005a62:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_DEVICE_ID;
 8005a64:	70a0      	strb	r0, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 6); // Include DummyForRead0 ~ DummyForRead2
 8005a66:	2306      	movs	r3, #6
 8005a68:	4622      	mov	r2, r4
 8005a6a:	2000      	movs	r0, #0
	RDC200A_REG_BURST_GET(flash_cmdb, 2, id_buf, 4); /* Dummy(CMD) + 3 bytes */
 8005a6c:	af03      	add	r7, sp, #12
	RDC200A_REG_BURST_SET(flash_cmdb, 6); // Include DummyForRead0 ~ DummyForRead2
 8005a6e:	f000 fce1 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, id_buf, 4); /* Dummy(CMD) + 3 bytes */
 8005a72:	e9cd 7600 	strd	r7, r6, [sp]
 8005a76:	7829      	ldrb	r1, [r5, #0]
 8005a78:	2302      	movs	r3, #2
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f000 fcb3 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	RDC_REG_SET(0x0051, 0x04);
 8005a82:	4633      	mov	r3, r6
 8005a84:	7829      	ldrb	r1, [r5, #0]
 8005a86:	2251      	movs	r2, #81	; 0x51
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f000 fd09 	bl	80064a0 <rtiVC_WriteDevice16>
 8005a8e:	2664      	movs	r6, #100	; 0x64
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 8005a90:	f04f 0806 	mov.w	r8, #6
 8005a94:	e001      	b.n	8005a9a <rdc200a_flash_prepare+0x52>
		if (--retry_cnt == 0) {
 8005a96:	3e01      	subs	r6, #1
 8005a98:	d055      	beq.n	8005b46 <rdc200a_flash_prepare+0xfe>
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 8005a9a:	7829      	ldrb	r1, [r5, #0]
		flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_ENABLE; 
 8005a9c:	f884 8002 	strb.w	r8, [r4, #2]
		RDC200A_REG_BURST_SET(flash_cmdb, 3);
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	f000 fcc5 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005aaa:	f04f 0c05 	mov.w	ip, #5
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005aae:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005ab0:	f884 c002 	strb.w	ip, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f000 fcbb 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e9cd 7300 	strd	r7, r3, [sp]
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	7829      	ldrb	r1, [r5, #0]
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f000 fc8d 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 8005ace:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if (sr & RDC200_FLASH_SR_WEL) {
 8005ad2:	079a      	lsls	r2, r3, #30
 8005ad4:	d5df      	bpl.n	8005a96 <rdc200a_flash_prepare+0x4e>
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_WRITE_STATUS_REG;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	8063      	strh	r3, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4);
 8005ada:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <rdc200a_flash_prepare+0x10c>)
 8005adc:	7829      	ldrb	r1, [r5, #0]
 8005ade:	2304      	movs	r3, #4
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	f000 fca7 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
 8005ae6:	26f0      	movs	r6, #240	; 0xf0
 8005ae8:	e001      	b.n	8005aee <rdc200a_flash_prepare+0xa6>
		if (--retry_cnt == 0)
 8005aea:	3e01      	subs	r6, #1
 8005aec:	d02b      	beq.n	8005b46 <rdc200a_flash_prepare+0xfe>
		reg_0x0092 = RDC_REG_GET(0x0092);		
 8005aee:	7829      	ldrb	r1, [r5, #0]
 8005af0:	2292      	movs	r2, #146	; 0x92
 8005af2:	2000      	movs	r0, #0
 8005af4:	f000 fcc0 	bl	8006478 <rtiVC_ReadDevice16>
		if (reg_0x0092 & 0x40) { /* MON_SPI_MASTER_RDY_NBUSY */
 8005af8:	0643      	lsls	r3, r0, #25
 8005afa:	d5f6      	bpl.n	8005aea <rdc200a_flash_prepare+0xa2>
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005afc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8005b54 <rdc200a_flash_prepare+0x10c>
 8005b00:	2632      	movs	r6, #50	; 0x32
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005b02:	f04f 0805 	mov.w	r8, #5
 8005b06:	e003      	b.n	8005b10 <rdc200a_flash_prepare+0xc8>
		if (--milliseconds == 0)
 8005b08:	3e01      	subs	r6, #1
 8005b0a:	d01c      	beq.n	8005b46 <rdc200a_flash_prepare+0xfe>
		VC_M_DELAY(1);
 8005b0c:	f000 fc3e 	bl	800638c <rtiVC_DelayUs>
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005b10:	7829      	ldrb	r1, [r5, #0]
	flash_cmdb[RDC200A_FCMD_POS_CMD] = CMD_READ_STATUS_REG1;
 8005b12:	f884 8002 	strb.w	r8, [r4, #2]
	RDC200A_REG_BURST_SET(flash_cmdb, 4); // Include "DummyForRead"
 8005b16:	464a      	mov	r2, r9
 8005b18:	2304      	movs	r3, #4
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f000 fc8a 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
	RDC200A_REG_BURST_GET(flash_cmdb, 2, sr_buf, 2);
 8005b20:	2302      	movs	r3, #2
 8005b22:	e9cd 7300 	strd	r7, r3, [sp]
 8005b26:	7829      	ldrb	r1, [r5, #0]
 8005b28:	464a      	mov	r2, r9
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f000 fc5c 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
	return sr_buf[1];
 8005b30:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 8005b34:	f013 0301 	ands.w	r3, r3, #1
		VC_M_DELAY(1);
 8005b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		if ((fsr & RDC200_FLASH_SR_WIP) == 0x0)
 8005b3c:	d1e4      	bne.n	8005b08 <rdc200a_flash_prepare+0xc0>
	return 0;
 8005b3e:	4618      	mov	r0, r3
}
 8005b40:	b005      	add	sp, #20
 8005b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return 0;
 8005b46:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005b4a:	b005      	add	sp, #20
 8005b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b50:	2000001d 	.word	0x2000001d
 8005b54:	200005a8 	.word	0x200005a8

08005b58 <RDC200A_ProbeFLASH>:

int RDC200A_ProbeFLASH(VC_RDC_DEV_INFO_T *dev)
{
 8005b58:	b430      	push	{r4, r5}
	dev->sector_size_shift = 12;
	//DMSG("SECTOR SIZE: 0x%X\n", 1 << dev->sector_size_shift);

	dev->flash_prepare = rdc200a_flash_prepare;
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	; (8005b8c <RDC200A_ProbeFLASH+0x34>)
	dev->flash_finish = rdc200a_flash_finish;

	dev->flash_erase_sector = rdc200a_erase_sector;
 8005b5c:	4a0c      	ldr	r2, [pc, #48]	; (8005b90 <RDC200A_ProbeFLASH+0x38>)
 8005b5e:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
	dev->sector_size_shift = 12;
 8005b62:	250c      	movs	r5, #12
	dev->flash_prepare = rdc200a_flash_prepare;
 8005b64:	e9c0 543b 	strd	r5, r4, [r0, #236]	; 0xec
	dev->flash_erase_chip = rdc200a_erase_chip;
	dev->flash_write = rdc200a_flash_write;
 8005b68:	4a0a      	ldr	r2, [pc, #40]	; (8005b94 <RDC200A_ProbeFLASH+0x3c>)
	dev->flash_erase_chip = rdc200a_erase_chip;
 8005b6a:	4c0b      	ldr	r4, [pc, #44]	; (8005b98 <RDC200A_ProbeFLASH+0x40>)
	dev->flash_read = rdc200a_flash_read;

	/* Pre assigned the register address */
	flash_cmdb[0] = RDC200A_FLASH_REG_ADDR_H;
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <RDC200A_ProbeFLASH+0x44>)
	dev->flash_finish = rdc200a_flash_finish;
 8005b6e:	490c      	ldr	r1, [pc, #48]	; (8005ba0 <RDC200A_ProbeFLASH+0x48>)
 8005b70:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
	dev->flash_write = rdc200a_flash_write;
 8005b74:	e9c0 423e 	strd	r4, r2, [r0, #248]	; 0xf8
	flash_cmdb[0] = RDC200A_FLASH_REG_ADDR_H;
 8005b78:	f44f 4201 	mov.w	r2, #33024	; 0x8100
	dev->flash_read = rdc200a_flash_read;
 8005b7c:	4909      	ldr	r1, [pc, #36]	; (8005ba4 <RDC200A_ProbeFLASH+0x4c>)
	flash_cmdb[0] = RDC200A_FLASH_REG_ADDR_H;
 8005b7e:	801a      	strh	r2, [r3, #0]
	dev->flash_read = rdc200a_flash_read;
 8005b80:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	flash_cmdb[1] = RDC200A_FLASH_REG_ADDR_L;

	return 0;
}
 8005b84:	bc30      	pop	{r4, r5}
 8005b86:	2000      	movs	r0, #0
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	08005a49 	.word	0x08005a49
 8005b90:	08005931 	.word	0x08005931
 8005b94:	08005621 	.word	0x08005621
 8005b98:	08005775 	.word	0x08005775
 8005b9c:	200005a8 	.word	0x200005a8
 8005ba0:	08005859 	.word	0x08005859
 8005ba4:	080054f9 	.word	0x080054f9

08005ba8 <rdp551f_get_led_level_range>:
	}
}

static int rdp551f_get_led_level_range(U8_T *min, U8_T *max)
{
	*min = MIN_RDP551F_LED_CURRENT_VALUE;
 8005ba8:	2300      	movs	r3, #0
	*max = MAX_RDP551F_LED_CURRENT_VALUE;
 8005baa:	223f      	movs	r2, #63	; 0x3f
	*min = MIN_RDP551F_LED_CURRENT_VALUE;
 8005bac:	7003      	strb	r3, [r0, #0]

	return 0;
}
 8005bae:	4618      	mov	r0, r3
	*max = MAX_RDP551F_LED_CURRENT_VALUE;
 8005bb0:	700a      	strb	r2, [r1, #0]
}
 8005bb2:	4770      	bx	lr

08005bb4 <rdp551f_get_vertical_pixel_shift>:

	return 0;
}

int rdp551f_get_vertical_pixel_shift(int panel_port, int *shift_val)
{
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	460c      	mov	r4, r1
	*shift_val = RDP_REG_GET(panel_port, 0x001B);
 8005bb8:	211b      	movs	r1, #27
 8005bba:	f001 fb29 	bl	8007210 <RDP_REG_GET>
 8005bbe:	6020      	str	r0, [r4, #0]

	return 0;
}
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	bd10      	pop	{r4, pc}

08005bc4 <rdp551f_get_horizontal_pixel_shift>:

int rdp551f_get_horizontal_pixel_shift(int panel_port, int *shift_val)
{
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	460c      	mov	r4, r1
	*shift_val = RDP_REG_GET(panel_port, 0x001C);
 8005bc8:	211c      	movs	r1, #28
 8005bca:	f001 fb21 	bl	8007210 <RDP_REG_GET>
 8005bce:	6020      	str	r0, [r4, #0]

	return 0;
}
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	bd10      	pop	{r4, pc}

08005bd4 <rdp551f_get_device_id>:

	return 0;
}

int rdp551f_get_device_id(E_VC_PANEL_PORT_T port, U16_T *chip_id, U16_T *rev_num)
{
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	460d      	mov	r5, r1
	U8_T reg0x00, reg0x01;

	reg0x00 = RDP_REG_GET(port, 0x0000);
 8005bd8:	2100      	movs	r1, #0
{
 8005bda:	4614      	mov	r4, r2
 8005bdc:	4607      	mov	r7, r0
	reg0x00 = RDP_REG_GET(port, 0x0000);
 8005bde:	f001 fb17 	bl	8007210 <RDP_REG_GET>
	reg0x01 = RDP_REG_GET(port, 0x0001);
 8005be2:	2101      	movs	r1, #1
	reg0x00 = RDP_REG_GET(port, 0x0000);
 8005be4:	4606      	mov	r6, r0
	reg0x01 = RDP_REG_GET(port, 0x0001);
 8005be6:	4638      	mov	r0, r7
 8005be8:	f001 fb12 	bl	8007210 <RDP_REG_GET>

	*chip_id = ((U16_T)reg0x00<<4) | (reg0x01>>4);
 8005bec:	f3c0 1207 	ubfx	r2, r0, #4, #8
	*rev_num = reg0x01 & 0x0F;
 8005bf0:	f000 030f 	and.w	r3, r0, #15
	*chip_id = ((U16_T)reg0x00<<4) | (reg0x01>>4);
 8005bf4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8005bf8:	802a      	strh	r2, [r5, #0]

	return 0;
}
 8005bfa:	2000      	movs	r0, #0
	*rev_num = reg0x01 & 0x0F;
 8005bfc:	8023      	strh	r3, [r4, #0]
}
 8005bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c00 <rdp551f_read_led_current_from_reg>:
{
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	460d      	mov	r5, r1
	R = RDP_REG_GET(port, 0x10E);
 8005c04:	f44f 7187 	mov.w	r1, #270	; 0x10e
{
 8005c08:	4604      	mov	r4, r0
	R = RDP_REG_GET(port, 0x10E);
 8005c0a:	f001 fb01 	bl	8007210 <RDP_REG_GET>
	G = RDP_REG_GET(port, 0x10F);
 8005c0e:	f240 110f 	movw	r1, #271	; 0x10f
	R = RDP_REG_GET(port, 0x10E);
 8005c12:	4607      	mov	r7, r0
	G = RDP_REG_GET(port, 0x10F);
 8005c14:	4620      	mov	r0, r4
 8005c16:	f001 fafb 	bl	8007210 <RDP_REG_GET>
	B = RDP_REG_GET(port, 0x110);
 8005c1a:	f44f 7188 	mov.w	r1, #272	; 0x110
	G = RDP_REG_GET(port, 0x10F);
 8005c1e:	4606      	mov	r6, r0
	B = RDP_REG_GET(port, 0x110);
 8005c20:	4620      	mov	r0, r4
 8005c22:	f001 faf5 	bl	8007210 <RDP_REG_GET>
	if (rdp551f_otp[port].led_apply == TRUE) {
 8005c26:	4a31      	ldr	r2, [pc, #196]	; (8005cec <rdp551f_read_led_current_from_reg+0xec>)
 8005c28:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005c2c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	B = RDP_REG_GET(port, 0x110);
 8005c30:	4603      	mov	r3, r0
	if (rdp551f_otp[port].led_apply == TRUE) {
 8005c32:	6851      	ldr	r1, [r2, #4]
 8005c34:	2901      	cmp	r1, #1
 8005c36:	d009      	beq.n	8005c4c <rdp551f_read_led_current_from_reg+0x4c>
		info->R = R >> 2; // Used only [7:2]. 4 step
 8005c38:	f3c7 0187 	ubfx	r1, r7, #2, #8
		info->G = G >> 2; // Used only [7:2] 
 8005c3c:	f3c6 0287 	ubfx	r2, r6, #2, #8
		info->B = B >> 2; // Used only [7:2]
 8005c40:	f3c0 0387 	ubfx	r3, r0, #2, #8
		info->G = rdp551f_calculate_ui_level(rdp551f_otp[port].LED_CON, G);
 8005c44:	e9c5 1200 	strd	r1, r2, [r5]
		info->B = rdp551f_calculate_ui_level(rdp551f_otp[port].LED_CON, B);
 8005c48:	60ab      	str	r3, [r5, #8]
}
 8005c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp = ((U32_T)reg_panel_LED*10 * ( U32_T)2550) / (1270 + (S32_T)(otp_LED_CON*10));
 8005c4c:	7a10      	ldrb	r0, [r2, #8]
 8005c4e:	240a      	movs	r4, #10
 8005c50:	f240 42f6 	movw	r2, #1270	; 0x4f6
 8005c54:	fb14 2400 	smlabb	r4, r4, r0, r2
 8005c58:	f246 329c 	movw	r2, #25500	; 0x639c
 8005c5c:	fb02 f007 	mul.w	r0, r2, r7
		level = temp / 10;
 8005c60:	f101 31cc 	add.w	r1, r1, #3435973836	; 0xcccccccc
		temp = ((U32_T)reg_panel_LED*10 * ( U32_T)2550) / (1270 + (S32_T)(otp_LED_CON*10));
 8005c64:	fbb0 f0f4 	udiv	r0, r0, r4
		temp >>= 2; // Divide by 4. (for 6-bit UI level)
 8005c68:	0880      	lsrs	r0, r0, #2
		level = temp / 10;
 8005c6a:	fba1 2100 	umull	r2, r1, r1, r0
 8005c6e:	08ca      	lsrs	r2, r1, #3
		b = temp % 10;
 8005c70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c74:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
		if (b >= 5)
 8005c78:	2804      	cmp	r0, #4
		level = temp / 10;
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <rdp551f_read_led_current_from_reg+0xf0>)
		temp = ((U32_T)reg_panel_LED*10 * ( U32_T)2550) / (1270 + (S32_T)(otp_LED_CON*10));
 8005c7c:	f246 309c 	movw	r0, #25500	; 0x639c
 8005c80:	fb06 f000 	mul.w	r0, r6, r0
 8005c84:	fbb0 f0f4 	udiv	r0, r0, r4
		temp >>= 2; // Divide by 4. (for 6-bit UI level)
 8005c88:	ea4f 0090 	mov.w	r0, r0, lsr #2
		level = temp / 10;
 8005c8c:	fba2 6200 	umull	r6, r2, r2, r0
 8005c90:	ea4f 06d2 	mov.w	r6, r2, lsr #3
 8005c94:	f3c1 01c7 	ubfx	r1, r1, #3, #8
		b = temp % 10;
 8005c98:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005c9c:	eba0 0046 	sub.w	r0, r0, r6, lsl #1
			level++;
 8005ca0:	bf88      	it	hi
 8005ca2:	3101      	addhi	r1, #1
		level = temp / 10;
 8005ca4:	4e12      	ldr	r6, [pc, #72]	; (8005cf0 <rdp551f_read_led_current_from_reg+0xf0>)
			level++;
 8005ca6:	bf88      	it	hi
 8005ca8:	b2c9      	uxtbhi	r1, r1
		if (b >= 5)
 8005caa:	2804      	cmp	r0, #4
		temp = ((U32_T)reg_panel_LED*10 * ( U32_T)2550) / (1270 + (S32_T)(otp_LED_CON*10));
 8005cac:	f246 309c 	movw	r0, #25500	; 0x639c
 8005cb0:	fb00 f303 	mul.w	r3, r0, r3
 8005cb4:	fbb3 f3f4 	udiv	r3, r3, r4
		temp >>= 2; // Divide by 4. (for 6-bit UI level)
 8005cb8:	ea4f 0393 	mov.w	r3, r3, lsr #2
		level = temp / 10;
 8005cbc:	fba6 0403 	umull	r0, r4, r6, r3
 8005cc0:	ea4f 00d4 	mov.w	r0, r4, lsr #3
 8005cc4:	f3c2 02c7 	ubfx	r2, r2, #3, #8
		b = temp % 10;
 8005cc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			level++;
 8005ccc:	bf88      	it	hi
 8005cce:	3201      	addhi	r2, #1
		b = temp % 10;
 8005cd0:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
			level++;
 8005cd4:	bf88      	it	hi
 8005cd6:	b2d2      	uxtbhi	r2, r2
		if (b >= 5)
 8005cd8:	2804      	cmp	r0, #4
		level = temp / 10;
 8005cda:	f3c4 03c7 	ubfx	r3, r4, #3, #8
		if (b >= 5)
 8005cde:	d9b1      	bls.n	8005c44 <rdp551f_read_led_current_from_reg+0x44>
			level++;
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
		info->G = rdp551f_calculate_ui_level(rdp551f_otp[port].LED_CON, G);
 8005ce4:	e9c5 1200 	strd	r1, r2, [r5]
		info->B = rdp551f_calculate_ui_level(rdp551f_otp[port].LED_CON, B);
 8005ce8:	60ab      	str	r3, [r5, #8]
}
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cec:	200007b4 	.word	0x200007b4
 8005cf0:	cccccccd 	.word	0xcccccccd

08005cf4 <rdp551f_set_led_current>:
{
 8005cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (chk_port & 0x1) {
 8005cf8:	f010 0501 	ands.w	r5, r0, #1
{
 8005cfc:	b082      	sub	sp, #8
	chk_port = (U8_T)ctrl_port;
 8005cfe:	b2c6      	uxtb	r6, r0
	for (i = VC_PANEL_PORT_0; i < MAX_NUM_VC_PANEL_PORT; i++) {
 8005d00:	f001 0301 	and.w	r3, r1, #1
 8005d04:	f001 0702 	and.w	r7, r1, #2
 8005d08:	f001 0404 	and.w	r4, r1, #4
		if (chk_port & 0x1) {
 8005d0c:	d06e      	beq.n	8005dec <rdp551f_set_led_current+0xf8>
			if (color & VC_LED_CTRL_COLOR_R) {
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 812a 	bne.w	8005f68 <rdp551f_set_led_current+0x274>
			if (color & VC_LED_CTRL_COLOR_G) {
 8005d14:	b3a7      	cbz	r7, 8005d80 <rdp551f_set_led_current+0x8c>
				if (current_ptr->G < MIN_RDP551F_LED_CURRENT_VALUE) {
 8005d16:	6851      	ldr	r1, [r2, #4]
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	f2c0 81c7 	blt.w	80060ac <rdp551f_set_led_current+0x3b8>
				if (current_ptr->G > MAX_RDP551F_LED_CURRENT_VALUE) {
 8005d1e:	293f      	cmp	r1, #63	; 0x3f
 8005d20:	f340 81e9 	ble.w	80060f6 <rdp551f_set_led_current+0x402>
					current_ptr->G = MAX_RDP551F_LED_CURRENT_VALUE;
 8005d24:	213f      	movs	r1, #63	; 0x3f
 8005d26:	6051      	str	r1, [r2, #4]
 8005d28:	f04f 08fc 	mov.w	r8, #252	; 0xfc
				if (rdp551f_otp[i].led_apply == TRUE)
 8005d2c:	48c1      	ldr	r0, [pc, #772]	; (8006034 <rdp551f_set_led_current+0x340>)
				val[i][1] = current_ptr->G << 2;
 8005d2e:	f88d 8001 	strb.w	r8, [sp, #1]
				if (rdp551f_otp[i].led_apply == TRUE)
 8005d32:	6841      	ldr	r1, [r0, #4]
 8005d34:	2901      	cmp	r1, #1
 8005d36:	d123      	bne.n	8005d80 <rdp551f_set_led_current+0x8c>
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005d38:	f890 e008 	ldrb.w	lr, [r0, #8]
 8005d3c:	f240 4cf6 	movw	ip, #1270	; 0x4f6
 8005d40:	200a      	movs	r0, #10
 8005d42:	fb10 c00e 	smlabb	r0, r0, lr, ip
 8005d46:	fb00 f108 	mul.w	r1, r0, r8
 8005d4a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005d4e:	48ba      	ldr	r0, [pc, #744]	; (8006038 <rdp551f_set_led_current+0x344>)
 8005d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005d54:	f021 0107 	bic.w	r1, r1, #7
 8005d58:	fba0 0101 	umull	r0, r1, r0, r1
	ret = result / 10;
 8005d5c:	48b7      	ldr	r0, [pc, #732]	; (800603c <rdp551f_set_led_current+0x348>)
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005d5e:	0a89      	lsrs	r1, r1, #10
	ret = result / 10;
 8005d60:	fba0 c001 	umull	ip, r0, r0, r1
 8005d64:	ea4f 0cd0 	mov.w	ip, r0, lsr #3
	b = result % 10;
 8005d68:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005d6c:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
	if (b >= 5)
 8005d70:	2904      	cmp	r1, #4
	ret = result / 10;
 8005d72:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	if (b >= 5)
 8005d76:	d901      	bls.n	8005d7c <rdp551f_set_led_current+0x88>
		ret++;
 8005d78:	1c41      	adds	r1, r0, #1
 8005d7a:	b2c8      	uxtb	r0, r1
					val[i][1] = rdp551f_calculate_led_otp(rdp551f_otp[i].LED_CON,
 8005d7c:	f88d 0001 	strb.w	r0, [sp, #1]
			if (color & VC_LED_CTRL_COLOR_B) {
 8005d80:	b3a4      	cbz	r4, 8005dec <rdp551f_set_led_current+0xf8>
				if (current_ptr->B < MIN_RDP551F_LED_CURRENT_VALUE) {
 8005d82:	6891      	ldr	r1, [r2, #8]
 8005d84:	2900      	cmp	r1, #0
 8005d86:	f2c0 8166 	blt.w	8006056 <rdp551f_set_led_current+0x362>
				if (current_ptr->B > MAX_RDP551F_LED_CURRENT_VALUE) {
 8005d8a:	293f      	cmp	r1, #63	; 0x3f
 8005d8c:	f340 81af 	ble.w	80060ee <rdp551f_set_led_current+0x3fa>
					current_ptr->B = MAX_RDP551F_LED_CURRENT_VALUE;
 8005d90:	213f      	movs	r1, #63	; 0x3f
 8005d92:	6091      	str	r1, [r2, #8]
 8005d94:	f04f 08fc 	mov.w	r8, #252	; 0xfc
				if (rdp551f_otp[i].led_apply == TRUE)
 8005d98:	48a6      	ldr	r0, [pc, #664]	; (8006034 <rdp551f_set_led_current+0x340>)
				val[i][2] = current_ptr->B << 2;
 8005d9a:	f88d 8002 	strb.w	r8, [sp, #2]
				if (rdp551f_otp[i].led_apply == TRUE)
 8005d9e:	6841      	ldr	r1, [r0, #4]
 8005da0:	2901      	cmp	r1, #1
 8005da2:	d123      	bne.n	8005dec <rdp551f_set_led_current+0xf8>
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005da4:	f890 e008 	ldrb.w	lr, [r0, #8]
 8005da8:	f240 4cf6 	movw	ip, #1270	; 0x4f6
 8005dac:	200a      	movs	r0, #10
 8005dae:	fb10 c00e 	smlabb	r0, r0, lr, ip
 8005db2:	fb00 f108 	mul.w	r1, r0, r8
 8005db6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005dba:	489f      	ldr	r0, [pc, #636]	; (8006038 <rdp551f_set_led_current+0x344>)
 8005dbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005dc0:	f021 0107 	bic.w	r1, r1, #7
 8005dc4:	fba0 0101 	umull	r0, r1, r0, r1
	ret = result / 10;
 8005dc8:	489c      	ldr	r0, [pc, #624]	; (800603c <rdp551f_set_led_current+0x348>)
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005dca:	0a89      	lsrs	r1, r1, #10
	ret = result / 10;
 8005dcc:	fba0 c001 	umull	ip, r0, r0, r1
 8005dd0:	ea4f 0cd0 	mov.w	ip, r0, lsr #3
	b = result % 10;
 8005dd4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005dd8:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
	if (b >= 5)
 8005ddc:	2904      	cmp	r1, #4
	ret = result / 10;
 8005dde:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	if (b >= 5)
 8005de2:	d901      	bls.n	8005de8 <rdp551f_set_led_current+0xf4>
		ret++;
 8005de4:	1c41      	adds	r1, r0, #1
 8005de6:	b2c8      	uxtb	r0, r1
					val[i][2] = rdp551f_calculate_led_otp(rdp551f_otp[i].LED_CON,
 8005de8:	f88d 0002 	strb.w	r0, [sp, #2]
		if (chk_port & 0x1) {
 8005dec:	07b0      	lsls	r0, r6, #30
 8005dee:	d56c      	bpl.n	8005eca <rdp551f_set_led_current+0x1d6>
			if (color & VC_LED_CTRL_COLOR_R) {
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f040 8082 	bne.w	8005efa <rdp551f_set_led_current+0x206>
			if (color & VC_LED_CTRL_COLOR_G) {
 8005df6:	b3a7      	cbz	r7, 8005e62 <rdp551f_set_led_current+0x16e>
				if (current_ptr->G < MIN_RDP551F_LED_CURRENT_VALUE) {
 8005df8:	6911      	ldr	r1, [r2, #16]
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	f2c0 8161 	blt.w	80060c2 <rdp551f_set_led_current+0x3ce>
				if (current_ptr->G > MAX_RDP551F_LED_CURRENT_VALUE) {
 8005e00:	293f      	cmp	r1, #63	; 0x3f
 8005e02:	f340 817c 	ble.w	80060fe <rdp551f_set_led_current+0x40a>
					current_ptr->G = MAX_RDP551F_LED_CURRENT_VALUE;
 8005e06:	213f      	movs	r1, #63	; 0x3f
 8005e08:	6111      	str	r1, [r2, #16]
 8005e0a:	f04f 08fc 	mov.w	r8, #252	; 0xfc
				if (rdp551f_otp[i].led_apply == TRUE)
 8005e0e:	4889      	ldr	r0, [pc, #548]	; (8006034 <rdp551f_set_led_current+0x340>)
				val[i][1] = current_ptr->G << 2;
 8005e10:	f88d 8004 	strb.w	r8, [sp, #4]
				if (rdp551f_otp[i].led_apply == TRUE)
 8005e14:	6981      	ldr	r1, [r0, #24]
 8005e16:	2901      	cmp	r1, #1
 8005e18:	d123      	bne.n	8005e62 <rdp551f_set_led_current+0x16e>
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005e1a:	f890 e01c 	ldrb.w	lr, [r0, #28]
 8005e1e:	f240 4cf6 	movw	ip, #1270	; 0x4f6
 8005e22:	200a      	movs	r0, #10
 8005e24:	fb10 c00e 	smlabb	r0, r0, lr, ip
 8005e28:	fb00 f108 	mul.w	r1, r0, r8
 8005e2c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005e30:	4881      	ldr	r0, [pc, #516]	; (8006038 <rdp551f_set_led_current+0x344>)
 8005e32:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e36:	f021 0107 	bic.w	r1, r1, #7
 8005e3a:	fba0 0101 	umull	r0, r1, r0, r1
	ret = result / 10;
 8005e3e:	487f      	ldr	r0, [pc, #508]	; (800603c <rdp551f_set_led_current+0x348>)
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005e40:	0a89      	lsrs	r1, r1, #10
	ret = result / 10;
 8005e42:	fba0 c001 	umull	ip, r0, r0, r1
 8005e46:	ea4f 0cd0 	mov.w	ip, r0, lsr #3
	b = result % 10;
 8005e4a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005e4e:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
	if (b >= 5)
 8005e52:	2904      	cmp	r1, #4
	ret = result / 10;
 8005e54:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	if (b >= 5)
 8005e58:	d901      	bls.n	8005e5e <rdp551f_set_led_current+0x16a>
		ret++;
 8005e5a:	1c41      	adds	r1, r0, #1
 8005e5c:	b2c8      	uxtb	r0, r1
					val[i][1] = rdp551f_calculate_led_otp(rdp551f_otp[i].LED_CON,
 8005e5e:	f88d 0004 	strb.w	r0, [sp, #4]
			if (color & VC_LED_CTRL_COLOR_B) {
 8005e62:	b394      	cbz	r4, 8005eca <rdp551f_set_led_current+0x1d6>
				if (current_ptr->B < MIN_RDP551F_LED_CURRENT_VALUE) {
 8005e64:	6951      	ldr	r1, [r2, #20]
 8005e66:	2900      	cmp	r1, #0
 8005e68:	f2c0 8100 	blt.w	800606c <rdp551f_set_led_current+0x378>
				if (current_ptr->B > MAX_RDP551F_LED_CURRENT_VALUE) {
 8005e6c:	293f      	cmp	r1, #63	; 0x3f
 8005e6e:	f340 8137 	ble.w	80060e0 <rdp551f_set_led_current+0x3ec>
					current_ptr->B = MAX_RDP551F_LED_CURRENT_VALUE;
 8005e72:	213f      	movs	r1, #63	; 0x3f
 8005e74:	6151      	str	r1, [r2, #20]
 8005e76:	22fc      	movs	r2, #252	; 0xfc
				if (rdp551f_otp[i].led_apply == TRUE)
 8005e78:	496e      	ldr	r1, [pc, #440]	; (8006034 <rdp551f_set_led_current+0x340>)
				val[i][2] = current_ptr->B << 2;
 8005e7a:	f88d 2005 	strb.w	r2, [sp, #5]
				if (rdp551f_otp[i].led_apply == TRUE)
 8005e7e:	6988      	ldr	r0, [r1, #24]
 8005e80:	2801      	cmp	r0, #1
 8005e82:	d122      	bne.n	8005eca <rdp551f_set_led_current+0x1d6>
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005e84:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8005e88:	f240 40f6 	movw	r0, #1270	; 0x4f6
 8005e8c:	210a      	movs	r1, #10
 8005e8e:	fb11 010c 	smlabb	r1, r1, ip, r0
 8005e92:	fb01 f202 	mul.w	r2, r1, r2
 8005e96:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005e9a:	4967      	ldr	r1, [pc, #412]	; (8006038 <rdp551f_set_led_current+0x344>)
 8005e9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ea0:	f022 0207 	bic.w	r2, r2, #7
 8005ea4:	fba1 1202 	umull	r1, r2, r1, r2
	ret = result / 10;
 8005ea8:	4964      	ldr	r1, [pc, #400]	; (800603c <rdp551f_set_led_current+0x348>)
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005eaa:	0a92      	lsrs	r2, r2, #10
	ret = result / 10;
 8005eac:	fba1 0102 	umull	r0, r1, r1, r2
 8005eb0:	08c8      	lsrs	r0, r1, #3
	b = result % 10;
 8005eb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005eb6:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
	ret = result / 10;
 8005eba:	f3c1 01c7 	ubfx	r1, r1, #3, #8
	if (b >= 5)
 8005ebe:	2a04      	cmp	r2, #4
		ret++;
 8005ec0:	bf84      	itt	hi
 8005ec2:	3101      	addhi	r1, #1
 8005ec4:	b2c9      	uxtbhi	r1, r1
					val[i][2] = rdp551f_calculate_led_otp(rdp551f_otp[i].LED_CON,
 8005ec6:	f88d 1005 	strb.w	r1, [sp, #5]
	if (color & VC_LED_CTRL_COLOR_R) {
 8005eca:	b12b      	cbz	r3, 8005ed8 <rdp551f_set_led_current+0x1e4>
		if (ctrl_port & VC_PANEL_CTRL_PORT_0)
 8005ecc:	2d00      	cmp	r5, #0
 8005ece:	f040 808d 	bne.w	8005fec <rdp551f_set_led_current+0x2f8>
		if (ctrl_port & VC_PANEL_CTRL_PORT_1)
 8005ed2:	07b1      	lsls	r1, r6, #30
 8005ed4:	f100 8094 	bmi.w	8006000 <rdp551f_set_led_current+0x30c>
	if (color & VC_LED_CTRL_COLOR_G) {
 8005ed8:	b12f      	cbz	r7, 8005ee6 <rdp551f_set_led_current+0x1f2>
		if (ctrl_port & VC_PANEL_CTRL_PORT_0)
 8005eda:	2d00      	cmp	r5, #0
 8005edc:	f040 8098 	bne.w	8006010 <rdp551f_set_led_current+0x31c>
		if (ctrl_port & VC_PANEL_CTRL_PORT_1)
 8005ee0:	07b2      	lsls	r2, r6, #30
 8005ee2:	f100 809f 	bmi.w	8006024 <rdp551f_set_led_current+0x330>
	if (color & VC_LED_CTRL_COLOR_B) {
 8005ee6:	b124      	cbz	r4, 8005ef2 <rdp551f_set_led_current+0x1fe>
		if (ctrl_port & VC_PANEL_CTRL_PORT_0)
 8005ee8:	2d00      	cmp	r5, #0
 8005eea:	f040 80a9 	bne.w	8006040 <rdp551f_set_led_current+0x34c>
		if (ctrl_port & VC_PANEL_CTRL_PORT_1)
 8005eee:	07b3      	lsls	r3, r6, #30
 8005ef0:	d471      	bmi.n	8005fd6 <rdp551f_set_led_current+0x2e2>
}
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	b002      	add	sp, #8
 8005ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (current_ptr->R < MIN_RDP551F_LED_CURRENT_VALUE) {
 8005efa:	68d1      	ldr	r1, [r2, #12]
 8005efc:	2900      	cmp	r1, #0
 8005efe:	f2c0 80ca 	blt.w	8006096 <rdp551f_set_led_current+0x3a2>
				if (current_ptr->R > MAX_RDP551F_LED_CURRENT_VALUE) {
 8005f02:	293f      	cmp	r1, #63	; 0x3f
 8005f04:	f340 80ef 	ble.w	80060e6 <rdp551f_set_led_current+0x3f2>
					current_ptr->R = MAX_RDP551F_LED_CURRENT_VALUE;
 8005f08:	213f      	movs	r1, #63	; 0x3f
 8005f0a:	60d1      	str	r1, [r2, #12]
 8005f0c:	f04f 08fc 	mov.w	r8, #252	; 0xfc
				if (rdp551f_otp[i].led_apply == TRUE)
 8005f10:	4848      	ldr	r0, [pc, #288]	; (8006034 <rdp551f_set_led_current+0x340>)
				val[i][0] = current_ptr->R << 2;
 8005f12:	f88d 8003 	strb.w	r8, [sp, #3]
				if (rdp551f_otp[i].led_apply == TRUE)
 8005f16:	6981      	ldr	r1, [r0, #24]
 8005f18:	2901      	cmp	r1, #1
 8005f1a:	f47f af6c 	bne.w	8005df6 <rdp551f_set_led_current+0x102>
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005f1e:	f890 e01c 	ldrb.w	lr, [r0, #28]
 8005f22:	f240 4cf6 	movw	ip, #1270	; 0x4f6
 8005f26:	200a      	movs	r0, #10
 8005f28:	fb10 c00e 	smlabb	r0, r0, lr, ip
 8005f2c:	fb00 f108 	mul.w	r1, r0, r8
 8005f30:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005f34:	4840      	ldr	r0, [pc, #256]	; (8006038 <rdp551f_set_led_current+0x344>)
 8005f36:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005f3a:	f021 0107 	bic.w	r1, r1, #7
 8005f3e:	fba0 0101 	umull	r0, r1, r0, r1
	ret = result / 10;
 8005f42:	483e      	ldr	r0, [pc, #248]	; (800603c <rdp551f_set_led_current+0x348>)
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005f44:	0a89      	lsrs	r1, r1, #10
	ret = result / 10;
 8005f46:	fba0 c001 	umull	ip, r0, r0, r1
 8005f4a:	ea4f 0cd0 	mov.w	ip, r0, lsr #3
	b = result % 10;
 8005f4e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005f52:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
	if (b >= 5)
 8005f56:	2904      	cmp	r1, #4
	ret = result / 10;
 8005f58:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	if (b >= 5)
 8005f5c:	d901      	bls.n	8005f62 <rdp551f_set_led_current+0x26e>
		ret++;
 8005f5e:	1c41      	adds	r1, r0, #1
 8005f60:	b2c8      	uxtb	r0, r1
					val[i][0] = rdp551f_calculate_led_otp(rdp551f_otp[i].LED_CON,
 8005f62:	f88d 0003 	strb.w	r0, [sp, #3]
 8005f66:	e746      	b.n	8005df6 <rdp551f_set_led_current+0x102>
				if (current_ptr->R < MIN_RDP551F_LED_CURRENT_VALUE) {
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	2900      	cmp	r1, #0
 8005f6c:	f2c0 8088 	blt.w	8006080 <rdp551f_set_led_current+0x38c>
				if (current_ptr->R > MAX_RDP551F_LED_CURRENT_VALUE) {
 8005f70:	293f      	cmp	r1, #63	; 0x3f
 8005f72:	f340 80b1 	ble.w	80060d8 <rdp551f_set_led_current+0x3e4>
					current_ptr->R = MAX_RDP551F_LED_CURRENT_VALUE;
 8005f76:	213f      	movs	r1, #63	; 0x3f
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	f04f 08fc 	mov.w	r8, #252	; 0xfc
				if (rdp551f_otp[i].led_apply == TRUE)
 8005f7e:	482d      	ldr	r0, [pc, #180]	; (8006034 <rdp551f_set_led_current+0x340>)
				val[i][0] = current_ptr->R << 2;
 8005f80:	f88d 8000 	strb.w	r8, [sp]
				if (rdp551f_otp[i].led_apply == TRUE)
 8005f84:	6841      	ldr	r1, [r0, #4]
 8005f86:	2901      	cmp	r1, #1
 8005f88:	f47f aec4 	bne.w	8005d14 <rdp551f_set_led_current+0x20>
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005f8c:	f890 e008 	ldrb.w	lr, [r0, #8]
 8005f90:	f240 4cf6 	movw	ip, #1270	; 0x4f6
 8005f94:	200a      	movs	r0, #10
 8005f96:	fb10 c00e 	smlabb	r0, r0, lr, ip
 8005f9a:	fb00 f108 	mul.w	r1, r0, r8
 8005f9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005fa2:	4825      	ldr	r0, [pc, #148]	; (8006038 <rdp551f_set_led_current+0x344>)
 8005fa4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005fa8:	f021 0107 	bic.w	r1, r1, #7
 8005fac:	fba0 0101 	umull	r0, r1, r0, r1
	ret = result / 10;
 8005fb0:	4822      	ldr	r0, [pc, #136]	; (800603c <rdp551f_set_led_current+0x348>)
	result = (U32_T)((1270 + (U32_T)(otp_LED_CON*10)) * (U32_T)(level*10)) / 2550;
 8005fb2:	0a89      	lsrs	r1, r1, #10
	ret = result / 10;
 8005fb4:	fba0 c001 	umull	ip, r0, r0, r1
 8005fb8:	ea4f 0cd0 	mov.w	ip, r0, lsr #3
	b = result % 10;
 8005fbc:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005fc0:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
	if (b >= 5)
 8005fc4:	2904      	cmp	r1, #4
	ret = result / 10;
 8005fc6:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	if (b >= 5)
 8005fca:	d901      	bls.n	8005fd0 <rdp551f_set_led_current+0x2dc>
		ret++;
 8005fcc:	1c41      	adds	r1, r0, #1
 8005fce:	b2c8      	uxtb	r0, r1
					val[i][0] = rdp551f_calculate_led_otp(rdp551f_otp[i].LED_CON,
 8005fd0:	f88d 0000 	strb.w	r0, [sp]
 8005fd4:	e69e      	b.n	8005d14 <rdp551f_set_led_current+0x20>
			RDP_REG_SET(VC_DEVICE_CH_RDP1, 0x110, val[VC_PANEL_PORT_1][2]);
 8005fd6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005fda:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005fde:	2001      	movs	r0, #1
 8005fe0:	f001 f8cc 	bl	800717c <RDP_REG_SET>
}
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	b002      	add	sp, #8
 8005fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			RDP_REG_SET(VC_DEVICE_CH_RDC_RDP0, 0x10E, val[VC_PANEL_PORT_0][0]);
 8005fec:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005ff0:	f89d 2000 	ldrb.w	r2, [sp]
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f001 f8c1 	bl	800717c <RDP_REG_SET>
		if (ctrl_port & VC_PANEL_CTRL_PORT_1)
 8005ffa:	07b1      	lsls	r1, r6, #30
 8005ffc:	f57f af6c 	bpl.w	8005ed8 <rdp551f_set_led_current+0x1e4>
			RDP_REG_SET(VC_DEVICE_CH_RDP1, 0x10E, val[VC_PANEL_PORT_1][0]);
 8006000:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8006004:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006008:	2001      	movs	r0, #1
 800600a:	f001 f8b7 	bl	800717c <RDP_REG_SET>
 800600e:	e763      	b.n	8005ed8 <rdp551f_set_led_current+0x1e4>
			RDP_REG_SET(VC_DEVICE_CH_RDC_RDP0, 0x10F, val[VC_PANEL_PORT_0][1]);
 8006010:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8006014:	f240 110f 	movw	r1, #271	; 0x10f
 8006018:	2000      	movs	r0, #0
 800601a:	f001 f8af 	bl	800717c <RDP_REG_SET>
		if (ctrl_port & VC_PANEL_CTRL_PORT_1)
 800601e:	07b2      	lsls	r2, r6, #30
 8006020:	f57f af61 	bpl.w	8005ee6 <rdp551f_set_led_current+0x1f2>
			RDP_REG_SET(VC_DEVICE_CH_RDP1, 0x10F, val[VC_PANEL_PORT_1][1]);
 8006024:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006028:	f240 110f 	movw	r1, #271	; 0x10f
 800602c:	2001      	movs	r0, #1
 800602e:	f001 f8a5 	bl	800717c <RDP_REG_SET>
 8006032:	e758      	b.n	8005ee6 <rdp551f_set_led_current+0x1f2>
 8006034:	200007b4 	.word	0x200007b4
 8006038:	cd9a6735 	.word	0xcd9a6735
 800603c:	cccccccd 	.word	0xcccccccd
			RDP_REG_SET(VC_DEVICE_CH_RDC_RDP0, 0x110, val[VC_PANEL_PORT_0][2]);
 8006040:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8006044:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006048:	2000      	movs	r0, #0
 800604a:	f001 f897 	bl	800717c <RDP_REG_SET>
		if (ctrl_port & VC_PANEL_CTRL_PORT_1)
 800604e:	07b3      	lsls	r3, r6, #30
 8006050:	f57f af4f 	bpl.w	8005ef2 <rdp551f_set_led_current+0x1fe>
 8006054:	e7bf      	b.n	8005fd6 <rdp551f_set_led_current+0x2e2>
				if (rdp551f_otp[i].led_apply == TRUE)
 8006056:	492c      	ldr	r1, [pc, #176]	; (8006108 <rdp551f_set_led_current+0x414>)
 8006058:	6848      	ldr	r0, [r1, #4]
					current_ptr->B = MIN_RDP551F_LED_CURRENT_VALUE;
 800605a:	2100      	movs	r1, #0
				if (rdp551f_otp[i].led_apply == TRUE)
 800605c:	2801      	cmp	r0, #1
					current_ptr->B = MIN_RDP551F_LED_CURRENT_VALUE;
 800605e:	6091      	str	r1, [r2, #8]
				val[i][2] = current_ptr->B << 2;
 8006060:	f88d 1002 	strb.w	r1, [sp, #2]
				if (rdp551f_otp[i].led_apply == TRUE)
 8006064:	f47f aec2 	bne.w	8005dec <rdp551f_set_led_current+0xf8>
	ret = result / 10;
 8006068:	4608      	mov	r0, r1
 800606a:	e6bd      	b.n	8005de8 <rdp551f_set_led_current+0xf4>
				if (rdp551f_otp[i].led_apply == TRUE)
 800606c:	4926      	ldr	r1, [pc, #152]	; (8006108 <rdp551f_set_led_current+0x414>)
 800606e:	6988      	ldr	r0, [r1, #24]
					current_ptr->B = MIN_RDP551F_LED_CURRENT_VALUE;
 8006070:	2100      	movs	r1, #0
				if (rdp551f_otp[i].led_apply == TRUE)
 8006072:	2801      	cmp	r0, #1
					current_ptr->B = MIN_RDP551F_LED_CURRENT_VALUE;
 8006074:	6151      	str	r1, [r2, #20]
				val[i][2] = current_ptr->B << 2;
 8006076:	f88d 1005 	strb.w	r1, [sp, #5]
				if (rdp551f_otp[i].led_apply == TRUE)
 800607a:	f47f af26 	bne.w	8005eca <rdp551f_set_led_current+0x1d6>
 800607e:	e722      	b.n	8005ec6 <rdp551f_set_led_current+0x1d2>
				if (rdp551f_otp[i].led_apply == TRUE)
 8006080:	4921      	ldr	r1, [pc, #132]	; (8006108 <rdp551f_set_led_current+0x414>)
 8006082:	6848      	ldr	r0, [r1, #4]
					current_ptr->R = MIN_RDP551F_LED_CURRENT_VALUE;
 8006084:	2100      	movs	r1, #0
				if (rdp551f_otp[i].led_apply == TRUE)
 8006086:	2801      	cmp	r0, #1
					current_ptr->R = MIN_RDP551F_LED_CURRENT_VALUE;
 8006088:	6011      	str	r1, [r2, #0]
				val[i][0] = current_ptr->R << 2;
 800608a:	f88d 1000 	strb.w	r1, [sp]
				if (rdp551f_otp[i].led_apply == TRUE)
 800608e:	f47f ae41 	bne.w	8005d14 <rdp551f_set_led_current+0x20>
	ret = result / 10;
 8006092:	4608      	mov	r0, r1
 8006094:	e79c      	b.n	8005fd0 <rdp551f_set_led_current+0x2dc>
				if (rdp551f_otp[i].led_apply == TRUE)
 8006096:	491c      	ldr	r1, [pc, #112]	; (8006108 <rdp551f_set_led_current+0x414>)
 8006098:	6988      	ldr	r0, [r1, #24]
					current_ptr->R = MIN_RDP551F_LED_CURRENT_VALUE;
 800609a:	2100      	movs	r1, #0
				if (rdp551f_otp[i].led_apply == TRUE)
 800609c:	2801      	cmp	r0, #1
					current_ptr->R = MIN_RDP551F_LED_CURRENT_VALUE;
 800609e:	60d1      	str	r1, [r2, #12]
				val[i][0] = current_ptr->R << 2;
 80060a0:	f88d 1003 	strb.w	r1, [sp, #3]
				if (rdp551f_otp[i].led_apply == TRUE)
 80060a4:	f47f aea7 	bne.w	8005df6 <rdp551f_set_led_current+0x102>
	ret = result / 10;
 80060a8:	4608      	mov	r0, r1
 80060aa:	e75a      	b.n	8005f62 <rdp551f_set_led_current+0x26e>
				if (rdp551f_otp[i].led_apply == TRUE)
 80060ac:	4916      	ldr	r1, [pc, #88]	; (8006108 <rdp551f_set_led_current+0x414>)
 80060ae:	6848      	ldr	r0, [r1, #4]
					current_ptr->G = MIN_RDP551F_LED_CURRENT_VALUE;
 80060b0:	2100      	movs	r1, #0
				if (rdp551f_otp[i].led_apply == TRUE)
 80060b2:	2801      	cmp	r0, #1
					current_ptr->G = MIN_RDP551F_LED_CURRENT_VALUE;
 80060b4:	6051      	str	r1, [r2, #4]
				val[i][1] = current_ptr->G << 2;
 80060b6:	f88d 1001 	strb.w	r1, [sp, #1]
				if (rdp551f_otp[i].led_apply == TRUE)
 80060ba:	f47f ae61 	bne.w	8005d80 <rdp551f_set_led_current+0x8c>
	ret = result / 10;
 80060be:	4608      	mov	r0, r1
 80060c0:	e65c      	b.n	8005d7c <rdp551f_set_led_current+0x88>
				if (rdp551f_otp[i].led_apply == TRUE)
 80060c2:	4911      	ldr	r1, [pc, #68]	; (8006108 <rdp551f_set_led_current+0x414>)
 80060c4:	6988      	ldr	r0, [r1, #24]
					current_ptr->G = MIN_RDP551F_LED_CURRENT_VALUE;
 80060c6:	2100      	movs	r1, #0
				if (rdp551f_otp[i].led_apply == TRUE)
 80060c8:	2801      	cmp	r0, #1
					current_ptr->G = MIN_RDP551F_LED_CURRENT_VALUE;
 80060ca:	6111      	str	r1, [r2, #16]
				val[i][1] = current_ptr->G << 2;
 80060cc:	f88d 1004 	strb.w	r1, [sp, #4]
				if (rdp551f_otp[i].led_apply == TRUE)
 80060d0:	f47f aec7 	bne.w	8005e62 <rdp551f_set_led_current+0x16e>
	ret = result / 10;
 80060d4:	4608      	mov	r0, r1
 80060d6:	e6c2      	b.n	8005e5e <rdp551f_set_led_current+0x16a>
				val[i][0] = current_ptr->R << 2;
 80060d8:	0089      	lsls	r1, r1, #2
 80060da:	fa5f f881 	uxtb.w	r8, r1
 80060de:	e74e      	b.n	8005f7e <rdp551f_set_led_current+0x28a>
				val[i][2] = current_ptr->B << 2;
 80060e0:	008a      	lsls	r2, r1, #2
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	e6c8      	b.n	8005e78 <rdp551f_set_led_current+0x184>
				val[i][0] = current_ptr->R << 2;
 80060e6:	0089      	lsls	r1, r1, #2
 80060e8:	fa5f f881 	uxtb.w	r8, r1
 80060ec:	e710      	b.n	8005f10 <rdp551f_set_led_current+0x21c>
				val[i][2] = current_ptr->B << 2;
 80060ee:	0089      	lsls	r1, r1, #2
 80060f0:	fa5f f881 	uxtb.w	r8, r1
 80060f4:	e650      	b.n	8005d98 <rdp551f_set_led_current+0xa4>
				val[i][1] = current_ptr->G << 2;
 80060f6:	0089      	lsls	r1, r1, #2
 80060f8:	fa5f f881 	uxtb.w	r8, r1
 80060fc:	e616      	b.n	8005d2c <rdp551f_set_led_current+0x38>
 80060fe:	0089      	lsls	r1, r1, #2
 8006100:	fa5f f881 	uxtb.w	r8, r1
 8006104:	e683      	b.n	8005e0e <rdp551f_set_led_current+0x11a>
 8006106:	bf00      	nop
 8006108:	200007b4 	.word	0x200007b4

0800610c <rdp551f_set_vertical_pixel_shift>:
{
 800610c:	b538      	push	{r3, r4, r5, lr}
	RDP_REG_SET(panel_port, 0x000A, 0x08);  // PIXEL RESET
 800610e:	2208      	movs	r2, #8
{
 8006110:	4604      	mov	r4, r0
 8006112:	460d      	mov	r5, r1
	RDP_REG_SET(panel_port, 0x000A, 0x08);  // PIXEL RESET
 8006114:	210a      	movs	r1, #10
 8006116:	f001 f831 	bl	800717c <RDP_REG_SET>
	RDP_REG_SET(panel_port, 0x001B, shift_val);
 800611a:	b2ea      	uxtb	r2, r5
 800611c:	4620      	mov	r0, r4
 800611e:	211b      	movs	r1, #27
 8006120:	f001 f82c 	bl	800717c <RDP_REG_SET>
	RDP_REG_SET(panel_port, 0x001D, 0x11); // BPM_STROBE, BPM_MODE
 8006124:	2211      	movs	r2, #17
 8006126:	211d      	movs	r1, #29
 8006128:	4620      	mov	r0, r4
 800612a:	f001 f827 	bl	800717c <RDP_REG_SET>
	VC_M_DELAY(1);
 800612e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006132:	f000 f92b 	bl	800638c <rtiVC_DelayUs>
	RDP_REG_SET(panel_port, 0x000A, 0x00);  // PIXEL RESET
 8006136:	4620      	mov	r0, r4
 8006138:	2200      	movs	r2, #0
 800613a:	210a      	movs	r1, #10
 800613c:	f001 f81e 	bl	800717c <RDP_REG_SET>
}
 8006140:	2000      	movs	r0, #0
 8006142:	bd38      	pop	{r3, r4, r5, pc}

08006144 <rdp551f_set_horizontal_pixel_shift>:
{
 8006144:	b538      	push	{r3, r4, r5, lr}
	RDP_REG_SET(panel_port, 0x000A, 0x08);  // PIXEL RESET
 8006146:	2208      	movs	r2, #8
{
 8006148:	4604      	mov	r4, r0
 800614a:	460d      	mov	r5, r1
	RDP_REG_SET(panel_port, 0x000A, 0x08);  // PIXEL RESET
 800614c:	210a      	movs	r1, #10
 800614e:	f001 f815 	bl	800717c <RDP_REG_SET>
	RDP_REG_SET(panel_port, 0x001C, shift_val);
 8006152:	b2ea      	uxtb	r2, r5
 8006154:	4620      	mov	r0, r4
 8006156:	211c      	movs	r1, #28
 8006158:	f001 f810 	bl	800717c <RDP_REG_SET>
	RDP_REG_SET(panel_port, 0x001D, 0x11); // BPM_STROBE, BPM_MODE
 800615c:	2211      	movs	r2, #17
 800615e:	211d      	movs	r1, #29
 8006160:	4620      	mov	r0, r4
 8006162:	f001 f80b 	bl	800717c <RDP_REG_SET>
	VC_M_DELAY(1);
 8006166:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800616a:	f000 f90f 	bl	800638c <rtiVC_DelayUs>
	RDP_REG_SET(panel_port, 0x000A, 0x00);  // PIXEL RESET
 800616e:	4620      	mov	r0, r4
 8006170:	2200      	movs	r2, #0
 8006172:	210a      	movs	r1, #10
 8006174:	f001 f802 	bl	800717c <RDP_REG_SET>
}
 8006178:	2000      	movs	r0, #0
 800617a:	bd38      	pop	{r3, r4, r5, pc}

0800617c <rdp551f_get_temperature>:
{
 800617c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006180:	b08a      	sub	sp, #40	; 0x28
 8006182:	4605      	mov	r5, r0
 8006184:	4688      	mov	r8, r1
 8006186:	4617      	mov	r7, r2
 8006188:	466c      	mov	r4, sp
 800618a:	ae09      	add	r6, sp, #36	; 0x24
		raw_code[i] = (S32_T)(RDP_REG_GET(panel_port, 0x0175) & 0x3) << 8; // TEMPERATURE<9:8>
 800618c:	f240 1175 	movw	r1, #373	; 0x175
 8006190:	4628      	mov	r0, r5
 8006192:	f001 f83d 	bl	8007210 <RDP_REG_GET>
 8006196:	0203      	lsls	r3, r0, #8
 8006198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619c:	f844 3f04 	str.w	r3, [r4, #4]!
		raw_code[i] |= (S32_T)RDP_REG_GET(panel_port, 0x0176); // TEMPERATURE<7:0>
 80061a0:	f44f 71bb 	mov.w	r1, #374	; 0x176
 80061a4:	4628      	mov	r0, r5
 80061a6:	f001 f833 	bl	8007210 <RDP_REG_GET>
 80061aa:	6823      	ldr	r3, [r4, #0]
	for (i = 0; i < NUM_RDP_TEMP_SENSOR_READ_RAW_CODE_TYPE0; i++) {
 80061ac:	42b4      	cmp	r4, r6
		raw_code[i] |= (S32_T)RDP_REG_GET(panel_port, 0x0176); // TEMPERATURE<7:0>
 80061ae:	ea40 0003 	orr.w	r0, r0, r3
 80061b2:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_RDP_TEMP_SENSOR_READ_RAW_CODE_TYPE0; i++) {
 80061b4:	d1ea      	bne.n	800618c <rdp551f_get_temperature+0x10>
	comp_raw_code = rdp_compensate_temperature(raw_code,
 80061b6:	2109      	movs	r1, #9
	if (otp->tsensor_apply == TRUE)
 80061b8:	4c15      	ldr	r4, [pc, #84]	; (8006210 <rdp551f_get_temperature+0x94>)
	comp_raw_code = rdp_compensate_temperature(raw_code,
 80061ba:	a801      	add	r0, sp, #4
 80061bc:	f000 fa7c 	bl	80066b8 <rdp_compensate_temperature>
	if (otp->tsensor_apply == TRUE)
 80061c0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80061c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061c8:	00aa      	lsls	r2, r5, #2
 80061ca:	68d9      	ldr	r1, [r3, #12]
 80061cc:	2901      	cmp	r1, #1
 80061ce:	d018      	beq.n	8006202 <rdp551f_get_temperature+0x86>
 80061d0:	4601      	mov	r1, r0
 80061d2:	2300      	movs	r3, #0
	if (otp->Temp_V2 == 0)
 80061d4:	442a      	add	r2, r5
	raw_temp = 30*1000 - (S32_T)(0.415*1000) * (comp_raw_code - 320);
 80061d6:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
	if (otp->Temp_V2 == 0)
 80061da:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
	raw_temp = 30*1000 - (S32_T)(0.415*1000) * (comp_raw_code - 320);
 80061de:	f46f 74cf 	mvn.w	r4, #414	; 0x19e
 80061e2:	fb04 3300 	mla	r3, r4, r0, r3
	caled_temp = raw_temp - (S32_T)(1000*0.415) * diff_code;
 80061e6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80061ea:	3330      	adds	r3, #48	; 0x30
	if (otp->Temp_V2 == 0)
 80061ec:	b912      	cbnz	r2, 80061f4 <rdp551f_get_temperature+0x78>
		caled_temp += (S32_T)(4.15*1000);
 80061ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80061f2:	3316      	adds	r3, #22
}
 80061f4:	2000      	movs	r0, #0
	*code = caled_code;
 80061f6:	f8c8 1000 	str.w	r1, [r8]
	*temperature = caled_temp;
 80061fa:	603b      	str	r3, [r7, #0]
}
 80061fc:	b00a      	add	sp, #40	; 0x28
 80061fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		calibration_val = otp->tsensor_otp;
 8006202:	7c19      	ldrb	r1, [r3, #16]
	caled_temp = raw_temp - (S32_T)(1000*0.415) * diff_code;
 8006204:	f240 139f 	movw	r3, #415	; 0x19f
 8006208:	fb01 f303 	mul.w	r3, r1, r3
	caled_code = comp_raw_code - calibration_val;
 800620c:	1a41      	subs	r1, r0, r1
 800620e:	e7e1      	b.n	80061d4 <rdp551f_get_temperature+0x58>
 8006210:	200007b4 	.word	0x200007b4

08006214 <rdp551f_get_led_current>:
{
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4614      	mov	r4, r2
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8006218:	07ca      	lsls	r2, r1, #31
{
 800621a:	4605      	mov	r5, r0
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 800621c:	b2ce      	uxtb	r6, r1
 800621e:	d403      	bmi.n	8006228 <rdp551f_get_led_current+0x14>
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8006220:	07b3      	lsls	r3, r6, #30
 8006222:	d40d      	bmi.n	8006240 <rdp551f_get_led_current+0x2c>
}
 8006224:	2000      	movs	r0, #0
 8006226:	bd70      	pop	{r4, r5, r6, pc}
		rdp551f_read_led_current_from_reg(VC_PANEL_PORT_0, &info[VC_PANEL_PORT_0]);
 8006228:	4621      	mov	r1, r4
 800622a:	2000      	movs	r0, #0
 800622c:	f7ff fce8 	bl	8005c00 <rdp551f_read_led_current_from_reg>
		dev->led_current_info[VC_PANEL_PORT_0] = info[VC_PANEL_PORT_0];
 8006230:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006234:	f105 0318 	add.w	r3, r5, #24
 8006238:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 800623c:	07b3      	lsls	r3, r6, #30
 800623e:	d5f1      	bpl.n	8006224 <rdp551f_get_led_current+0x10>
		rdp551f_read_led_current_from_reg(VC_PANEL_PORT_1, &info[VC_PANEL_PORT_1]);
 8006240:	340c      	adds	r4, #12
 8006242:	4621      	mov	r1, r4
 8006244:	2001      	movs	r0, #1
 8006246:	f7ff fcdb 	bl	8005c00 <rdp551f_read_led_current_from_reg>
		dev->led_current_info[VC_PANEL_PORT_1] = info[VC_PANEL_PORT_1];
 800624a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800624e:	3524      	adds	r5, #36	; 0x24
 8006250:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006254:	2000      	movs	r0, #0
 8006256:	bd70      	pop	{r4, r5, r6, pc}

08006258 <rdp551f_prepare_panel>:

	return 0;
}

static int rdp551f_prepare_panel(VC_PANEL_DEV_INFO_T *dev)
{
 8006258:	b538      	push	{r3, r4, r5, lr}
	rev_num = RDP_REG_GET(panel_port, 0x0001) & 0xF;
 800625a:	2101      	movs	r1, #1
{
 800625c:	4604      	mov	r4, r0
	rev_num = RDP_REG_GET(panel_port, 0x0001) & 0xF;
 800625e:	2000      	movs	r0, #0
 8006260:	f000 ffd6 	bl	8007210 <RDP_REG_GET>
	otp_indicator = RDP_REG_GET(panel_port, 0x0200);
 8006264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006268:	2000      	movs	r0, #0
 800626a:	f000 ffd1 	bl	8007210 <RDP_REG_GET>
	if (otp_indicator & RDP551F_OTP_INDICATOR_LED) {
 800626e:	0703      	lsls	r3, r0, #28
 8006270:	d42e      	bmi.n	80062d0 <rdp551f_prepare_panel+0x78>
	otp_indicator = RDP_REG_GET(panel_port, 0x0201);
 8006272:	f240 2101 	movw	r1, #513	; 0x201
 8006276:	2000      	movs	r0, #0
 8006278:	f000 ffca 	bl	8007210 <RDP_REG_GET>
	if (otp_indicator & RDP551F_OTP_INDICATOR_TEMP_V2)
 800627c:	07c5      	lsls	r5, r0, #31
 800627e:	d502      	bpl.n	8006286 <rdp551f_prepare_panel+0x2e>
		otp->Temp_V2 = 1;
 8006280:	4b27      	ldr	r3, [pc, #156]	; (8006320 <rdp551f_prepare_panel+0xc8>)
 8006282:	2201      	movs	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
	if (otp_indicator & RDP551F_OTP_INDICATOR_TSENSOR) {
 8006286:	0640      	lsls	r0, r0, #25
 8006288:	d43f      	bmi.n	800630a <rdp551f_prepare_panel+0xb2>

	rdp551f_prepare_otp(VC_PANEL_PORT_0);

//	rdp551f_prepare_temperature(dev, VC_PANEL_PORT_0);
	
	rdp551f_read_led_current_from_reg(VC_PANEL_PORT_0,
 800628a:	f104 0118 	add.w	r1, r4, #24
 800628e:	2000      	movs	r0, #0
 8006290:	f7ff fcb6 	bl	8005c00 <rdp551f_read_led_current_from_reg>
	rev_num = RDP_REG_GET(panel_port, 0x0001) & 0xF;
 8006294:	2101      	movs	r1, #1
 8006296:	4608      	mov	r0, r1
 8006298:	f000 ffba 	bl	8007210 <RDP_REG_GET>
	otp_indicator = RDP_REG_GET(panel_port, 0x0200);
 800629c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062a0:	2001      	movs	r0, #1
 80062a2:	f000 ffb5 	bl	8007210 <RDP_REG_GET>
	if (otp_indicator & RDP551F_OTP_INDICATOR_LED) {
 80062a6:	0701      	lsls	r1, r0, #28
 80062a8:	d426      	bmi.n	80062f8 <rdp551f_prepare_panel+0xa0>
	otp_indicator = RDP_REG_GET(panel_port, 0x0201);
 80062aa:	f240 2101 	movw	r1, #513	; 0x201
 80062ae:	2001      	movs	r0, #1
 80062b0:	f000 ffae 	bl	8007210 <RDP_REG_GET>
	if (otp_indicator & RDP551F_OTP_INDICATOR_TEMP_V2)
 80062b4:	07c2      	lsls	r2, r0, #31
 80062b6:	d502      	bpl.n	80062be <rdp551f_prepare_panel+0x66>
		otp->Temp_V2 = 1;
 80062b8:	4b19      	ldr	r3, [pc, #100]	; (8006320 <rdp551f_prepare_panel+0xc8>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	751a      	strb	r2, [r3, #20]
	if (otp_indicator & RDP551F_OTP_INDICATOR_TSENSOR) {
 80062be:	0643      	lsls	r3, r0, #25
 80062c0:	d410      	bmi.n	80062e4 <rdp551f_prepare_panel+0x8c>

	rdp551f_prepare_otp(VC_PANEL_PORT_1);

//	rdp551f_prepare_temperature(dev, VC_PANEL_PORT_1);
	
	rdp551f_read_led_current_from_reg(VC_PANEL_PORT_1,
 80062c2:	2001      	movs	r0, #1
 80062c4:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80062c8:	f7ff fc9a 	bl	8005c00 <rdp551f_read_led_current_from_reg>
									&dev->led_current_info[VC_PANEL_PORT_1]);
#endif

	return 0;
}
 80062cc:	2000      	movs	r0, #0
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
		otp->led_apply = TRUE;
 80062d0:	4d13      	ldr	r5, [pc, #76]	; (8006320 <rdp551f_prepare_panel+0xc8>)
 80062d2:	2301      	movs	r3, #1
		otp_data = RDP_REG_GET(panel_port, 0x025D); // LED_CON_R_POL0<7:0>
 80062d4:	f240 215d 	movw	r1, #605	; 0x25d
 80062d8:	2000      	movs	r0, #0
		otp->led_apply = TRUE;
 80062da:	606b      	str	r3, [r5, #4]
		otp_data = RDP_REG_GET(panel_port, 0x025D); // LED_CON_R_POL0<7:0>
 80062dc:	f000 ff98 	bl	8007210 <RDP_REG_GET>
		otp->LED_CON = (char)otp_data;
 80062e0:	7228      	strb	r0, [r5, #8]
 80062e2:	e7c6      	b.n	8006272 <rdp551f_prepare_panel+0x1a>
		otp->tsensor_apply = TRUE;
 80062e4:	4d0e      	ldr	r5, [pc, #56]	; (8006320 <rdp551f_prepare_panel+0xc8>)
 80062e6:	2001      	movs	r0, #1
		otp_data = RDP_REG_GET(panel_port, 0x0274); // TEMPERATURE<7:0>
 80062e8:	f44f 711d 	mov.w	r1, #628	; 0x274
		otp->tsensor_apply = TRUE;
 80062ec:	6228      	str	r0, [r5, #32]
		otp_data = RDP_REG_GET(panel_port, 0x0274); // TEMPERATURE<7:0>
 80062ee:	f000 ff8f 	bl	8007210 <RDP_REG_GET>
		otp->tsensor_otp = (char)otp_data;
 80062f2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
 80062f6:	e7e4      	b.n	80062c2 <rdp551f_prepare_panel+0x6a>
		otp->led_apply = TRUE;
 80062f8:	4d09      	ldr	r5, [pc, #36]	; (8006320 <rdp551f_prepare_panel+0xc8>)
 80062fa:	2001      	movs	r0, #1
		otp_data = RDP_REG_GET(panel_port, 0x025D); // LED_CON_R_POL0<7:0>
 80062fc:	f240 215d 	movw	r1, #605	; 0x25d
		otp->led_apply = TRUE;
 8006300:	61a8      	str	r0, [r5, #24]
		otp_data = RDP_REG_GET(panel_port, 0x025D); // LED_CON_R_POL0<7:0>
 8006302:	f000 ff85 	bl	8007210 <RDP_REG_GET>
		otp->LED_CON = (char)otp_data;
 8006306:	7728      	strb	r0, [r5, #28]
 8006308:	e7cf      	b.n	80062aa <rdp551f_prepare_panel+0x52>
		otp->tsensor_apply = TRUE;
 800630a:	4d05      	ldr	r5, [pc, #20]	; (8006320 <rdp551f_prepare_panel+0xc8>)
 800630c:	2301      	movs	r3, #1
		otp_data = RDP_REG_GET(panel_port, 0x0274); // TEMPERATURE<7:0>
 800630e:	f44f 711d 	mov.w	r1, #628	; 0x274
 8006312:	2000      	movs	r0, #0
		otp->tsensor_apply = TRUE;
 8006314:	60eb      	str	r3, [r5, #12]
		otp_data = RDP_REG_GET(panel_port, 0x0274); // TEMPERATURE<7:0>
 8006316:	f000 ff7b 	bl	8007210 <RDP_REG_GET>
		otp->tsensor_otp = (char)otp_data;
 800631a:	7428      	strb	r0, [r5, #16]
 800631c:	e7b5      	b.n	800628a <rdp551f_prepare_panel+0x32>
 800631e:	bf00      	nop
 8006320:	200007b4 	.word	0x200007b4

08006324 <RDP551F_PanelProbe>:

int RDP551F_PanelProbe(VC_PANEL_DEV_INFO_T *dev)
{
 8006324:	b510      	push	{r4, lr}
	memset(rdp551f_otp, 0x0, sizeof(rdp551f_otp));
 8006326:	2228      	movs	r2, #40	; 0x28
{
 8006328:	4604      	mov	r4, r0
	memset(rdp551f_otp, 0x0, sizeof(rdp551f_otp));
 800632a:	2100      	movs	r1, #0
 800632c:	480c      	ldr	r0, [pc, #48]	; (8006360 <RDP551F_PanelProbe+0x3c>)
 800632e:	f00c fd21 	bl	8012d74 <memset>

	dev->prepare_panel = rdp551f_prepare_panel;
	dev->get_device_id = rdp551f_get_device_id;

	dev->get_led_current = rdp551f_get_led_current;
 8006332:	480c      	ldr	r0, [pc, #48]	; (8006364 <RDP551F_PanelProbe+0x40>)
	dev->set_led_current = rdp551f_set_led_current;
 8006334:	490c      	ldr	r1, [pc, #48]	; (8006368 <RDP551F_PanelProbe+0x44>)
	dev->prepare_panel = rdp551f_prepare_panel;
 8006336:	4a0d      	ldr	r2, [pc, #52]	; (800636c <RDP551F_PanelProbe+0x48>)
	dev->get_device_id = rdp551f_get_device_id;
 8006338:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <RDP551F_PanelProbe+0x4c>)
	dev->prepare_panel = rdp551f_prepare_panel;
 800633a:	6322      	str	r2, [r4, #48]	; 0x30
	dev->set_led_current = rdp551f_set_led_current;
 800633c:	e9c4 100f 	strd	r1, r0, [r4, #60]	; 0x3c
	dev->get_led_level_range = rdp551f_get_led_level_range;
 8006340:	4a0c      	ldr	r2, [pc, #48]	; (8006374 <RDP551F_PanelProbe+0x50>)

	dev->set_horizontal_pixel_shift = rdp551f_set_horizontal_pixel_shift;
	dev->set_vertical_pixel_shift = rdp551f_set_vertical_pixel_shift;
 8006342:	480d      	ldr	r0, [pc, #52]	; (8006378 <RDP551F_PanelProbe+0x54>)
	dev->get_horizontal_pixel_shift = rdp551f_get_horizontal_pixel_shift;
 8006344:	490d      	ldr	r1, [pc, #52]	; (800637c <RDP551F_PanelProbe+0x58>)
	dev->get_device_id = rdp551f_get_device_id;
 8006346:	64a3      	str	r3, [r4, #72]	; 0x48
	dev->set_horizontal_pixel_shift = rdp551f_set_horizontal_pixel_shift;
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <RDP551F_PanelProbe+0x5c>)
	dev->get_led_level_range = rdp551f_get_led_level_range;
 800634a:	6462      	str	r2, [r4, #68]	; 0x44
	dev->set_horizontal_pixel_shift = rdp551f_set_horizontal_pixel_shift;
 800634c:	64e3      	str	r3, [r4, #76]	; 0x4c
	dev->get_vertical_pixel_shift = rdp551f_get_vertical_pixel_shift;
 800634e:	4a0d      	ldr	r2, [pc, #52]	; (8006384 <RDP551F_PanelProbe+0x60>)

	dev->get_temperature = rdp551f_get_temperature;
 8006350:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <RDP551F_PanelProbe+0x64>)
	dev->get_vertical_pixel_shift = rdp551f_get_vertical_pixel_shift;
 8006352:	65a2      	str	r2, [r4, #88]	; 0x58
	dev->get_horizontal_pixel_shift = rdp551f_get_horizontal_pixel_shift;
 8006354:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
	dev->get_temperature = rdp551f_get_temperature;
 8006358:	6363      	str	r3, [r4, #52]	; 0x34
	    
	return 0;
}
 800635a:	2000      	movs	r0, #0
 800635c:	bd10      	pop	{r4, pc}
 800635e:	bf00      	nop
 8006360:	200007b4 	.word	0x200007b4
 8006364:	08006215 	.word	0x08006215
 8006368:	08005cf5 	.word	0x08005cf5
 800636c:	08006259 	.word	0x08006259
 8006370:	08005bd5 	.word	0x08005bd5
 8006374:	08005ba9 	.word	0x08005ba9
 8006378:	0800610d 	.word	0x0800610d
 800637c:	08005bc5 	.word	0x08005bc5
 8006380:	08006145 	.word	0x08006145
 8006384:	08005bb5 	.word	0x08005bb5
 8006388:	0800617d 	.word	0x0800617d

0800638c <rtiVC_DelayUs>:
#if defined(__APPLE__)
#include <unistd.h>
#endif

void rtiVC_DelayUs(U32_T microseconds)
{
 800638c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	#error "Code not present"
#endif
#else
	uint32_t startval,tickn,delays,wait;

	startval = SysTick->VAL;
 8006390:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
{
 8006394:	4606      	mov	r6, r0
	startval = SysTick->VAL;
 8006396:	69bc      	ldr	r4, [r7, #24]
	tickn = HAL_GetTick();
 8006398:	f003 f9d2 	bl	8009740 <HAL_GetTick>
	//sysc = 72000;  //SystemCoreClock / (1000U / uwTickFreq);
	delays = microseconds * 72; //sysc / 1000 * udelay;
 800639c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
	if(delays > startval)
 80063a0:	ebb4 0fc6 	cmp.w	r4, r6, lsl #3
	tickn = HAL_GetTick();
 80063a4:	4605      	mov	r5, r0
	delays = microseconds * 72; //sysc / 1000 * udelay;
 80063a6:	ea4f 08c6 	mov.w	r8, r6, lsl #3
	if(delays > startval)
 80063aa:	d30b      	bcc.n	80063c4 <rtiVC_DelayUs+0x38>

		}
	}
	else
	{
		wait = startval - delays;
 80063ac:	eba4 0408 	sub.w	r4, r4, r8
		while(wait < SysTick->VAL && HAL_GetTick() == tickn)
 80063b0:	e003      	b.n	80063ba <rtiVC_DelayUs+0x2e>
 80063b2:	f003 f9c5 	bl	8009740 <HAL_GetTick>
 80063b6:	42a8      	cmp	r0, r5
 80063b8:	d102      	bne.n	80063c0 <rtiVC_DelayUs+0x34>
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	42a3      	cmp	r3, r4
 80063be:	d8f8      	bhi.n	80063b2 <rtiVC_DelayUs+0x26>
		{

		}
	}
#endif
}
 80063c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		while(HAL_GetTick() == tickn)
 80063c4:	f003 f9bc 	bl	8009740 <HAL_GetTick>
 80063c8:	42a8      	cmp	r0, r5
 80063ca:	d0fb      	beq.n	80063c4 <rtiVC_DelayUs+0x38>
		wait = 72000 + startval - delays;
 80063cc:	f504 348c 	add.w	r4, r4, #71680	; 0x11800
 80063d0:	f504 74a0 	add.w	r4, r4, #320	; 0x140
 80063d4:	eba4 0408 	sub.w	r4, r4, r8
		while(wait < SysTick->VAL)
 80063d8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80063dc:	6993      	ldr	r3, [r2, #24]
 80063de:	42a3      	cmp	r3, r4
 80063e0:	d8fc      	bhi.n	80063dc <rtiVC_DelayUs+0x50>
}
 80063e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e6:	bf00      	nop

080063e8 <rtiVC_ReadBurstDeviceExt>:
 *
 */
int rtiVC_ReadBurstDeviceExt(E_VC_DEVICE_CH_T dev_ch, U8_T dev_slave_addr,
							U8_T *w_buf, U16_T w_size,
							U8_T *r_buf, U16_T r_size)
{
 80063e8:	b500      	push	{lr}
 80063ea:	b083      	sub	sp, #12
    
#else
//	#error "Code not present"

	// CH: Test if a value of an input variable passed one byte size
	if (w_size == 2) {
 80063ec:	2b02      	cmp	r3, #2
{
 80063ee:	f8bd 0014 	ldrh.w	r0, [sp, #20]
	if (w_size == 2) {
 80063f2:	d005      	beq.n	8006400 <rtiVC_ReadBurstDeviceExt+0x18>
		I2CReadBytes16(&RDC200A_I2C1, dev_slave_addr, ((uint16_t)w_buf[0] << 8) | (uint16_t)w_buf[1], (uint8_t*)r_buf, r_size);
	}
	else if (w_size == 1) {
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d010      	beq.n	800641a <rtiVC_ReadBurstDeviceExt+0x32>
		I2CReadBytes(&RDC200A_I2C1, dev_slave_addr, (uint8_t)w_buf[0], (uint8_t*)r_buf, r_size);
	}
#endif

	return 0;
}
 80063f8:	2000      	movs	r0, #0
 80063fa:	b003      	add	sp, #12
 80063fc:	f85d fb04 	ldr.w	pc, [sp], #4
		I2CReadBytes16(&RDC200A_I2C1, dev_slave_addr, ((uint16_t)w_buf[0] << 8) | (uint16_t)w_buf[1], (uint8_t*)r_buf, r_size);
 8006400:	8812      	ldrh	r2, [r2, #0]
 8006402:	9b04      	ldr	r3, [sp, #16]
 8006404:	b2c0      	uxtb	r0, r0
 8006406:	ba52      	rev16	r2, r2
 8006408:	9000      	str	r0, [sp, #0]
 800640a:	b292      	uxth	r2, r2
 800640c:	4808      	ldr	r0, [pc, #32]	; (8006430 <rtiVC_ReadBurstDeviceExt+0x48>)
 800640e:	f002 f923 	bl	8008658 <I2CReadBytes16>
}
 8006412:	2000      	movs	r0, #0
 8006414:	b003      	add	sp, #12
 8006416:	f85d fb04 	ldr.w	pc, [sp], #4
		I2CReadBytes(&RDC200A_I2C1, dev_slave_addr, (uint8_t)w_buf[0], (uint8_t*)r_buf, r_size);
 800641a:	b2c3      	uxtb	r3, r0
 800641c:	7812      	ldrb	r2, [r2, #0]
 800641e:	4804      	ldr	r0, [pc, #16]	; (8006430 <rtiVC_ReadBurstDeviceExt+0x48>)
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	9b04      	ldr	r3, [sp, #16]
 8006424:	f002 f8ce 	bl	80085c4 <I2CReadBytes>
}
 8006428:	2000      	movs	r0, #0
 800642a:	b003      	add	sp, #12
 800642c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006430:	20003b48 	.word	0x20003b48

08006434 <rtiVC_WriteBurstDeviceExt>:
 *
 * @return 0 on success, otherwise returns a negative number.
 */
int rtiVC_WriteBurstDeviceExt(E_VC_DEVICE_CH_T dev_ch, U8_T dev_slave_addr,
								U8_T *buf, U16_T size)
{
 8006434:	b530      	push	{r4, r5, lr}
 8006436:	b083      	sub	sp, #12
    
#else
//	#error "Code not present"
	uint16_t timeout = 0;

	if(HAL_I2C_Master_Transmit(&RDC200A_I2C1, (dev_slave_addr << 1) | I2C_WRITE , (uint8_t*)buf, size, I2C_TIMEOUT) != HAL_OK)
 8006438:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800643c:	480d      	ldr	r0, [pc, #52]	; (8006474 <rtiVC_WriteBurstDeviceExt+0x40>)
 800643e:	9400      	str	r4, [sp, #0]
 8006440:	0049      	lsls	r1, r1, #1
 8006442:	f004 f8bb 	bl	800a5bc <HAL_I2C_Master_Transmit>
 8006446:	b990      	cbnz	r0, 800646e <rtiVC_WriteBurstDeviceExt+0x3a>
	{
		Error_Handler();
	}
	while (HAL_I2C_GetState(&RDC200A_I2C1) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 8006448:	4d0a      	ldr	r5, [pc, #40]	; (8006474 <rtiVC_WriteBurstDeviceExt+0x40>)
{
 800644a:	f240 34e9 	movw	r4, #1001	; 0x3e9
 800644e:	e002      	b.n	8006456 <rtiVC_WriteBurstDeviceExt+0x22>
	while (HAL_I2C_GetState(&RDC200A_I2C1) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 8006450:	b154      	cbz	r4, 8006468 <rtiVC_WriteBurstDeviceExt+0x34>
 8006452:	f003 f97b 	bl	800974c <HAL_Delay>
 8006456:	4628      	mov	r0, r5
 8006458:	f005 f8ae 	bl	800b5b8 <HAL_I2C_GetState>
 800645c:	3c01      	subs	r4, #1
 800645e:	2820      	cmp	r0, #32
 8006460:	b2a4      	uxth	r4, r4
 8006462:	f04f 000a 	mov.w	r0, #10
 8006466:	d1f3      	bne.n	8006450 <rtiVC_WriteBurstDeviceExt+0x1c>
#endif

	return 0;
}
 8006468:	2000      	movs	r0, #0
 800646a:	b003      	add	sp, #12
 800646c:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 800646e:	f002 fe7b 	bl	8009168 <Error_Handler>
 8006472:	e7e9      	b.n	8006448 <rtiVC_WriteBurstDeviceExt+0x14>
 8006474:	20003b48 	.word	0x20003b48

08006478 <rtiVC_ReadDevice16>:
 *
 * @return A byte read from device.
 *
 */
U8_T rtiVC_ReadDevice16(E_VC_DEVICE_CH_T dev_ch, U8_T dev_slave_addr, U16_T reg)
{
 8006478:	b500      	push	{lr}
 800647a:	b085      	sub	sp, #20
	writeBurst(wbuf[0], &wbuf[1], 1);
	readBurst(rbuf, (unsigned int)r_size);

#else
//	#error "Code not present"
	I2CReadBytes16(&RDC200A_I2C1, (uint16_t)dev_slave_addr, (uint16_t)reg, (uint8_t*)rbuf, 1);
 800647c:	2301      	movs	r3, #1
	U8_T rbuf[1] = {0xFF};
 800647e:	f04f 0cff 	mov.w	ip, #255	; 0xff
	I2CReadBytes16(&RDC200A_I2C1, (uint16_t)dev_slave_addr, (uint16_t)reg, (uint8_t*)rbuf, 1);
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	4805      	ldr	r0, [pc, #20]	; (800649c <rtiVC_ReadDevice16+0x24>)
	U8_T rbuf[1] = {0xFF};
 8006486:	f88d c00c 	strb.w	ip, [sp, #12]
	I2CReadBytes16(&RDC200A_I2C1, (uint16_t)dev_slave_addr, (uint16_t)reg, (uint8_t*)rbuf, 1);
 800648a:	ab03      	add	r3, sp, #12
 800648c:	f002 f8e4 	bl	8008658 <I2CReadBytes16>
#endif

	return rbuf[0];
}
 8006490:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8006494:	b005      	add	sp, #20
 8006496:	f85d fb04 	ldr.w	pc, [sp], #4
 800649a:	bf00      	nop
 800649c:	20003b48 	.word	0x20003b48

080064a0 <rtiVC_WriteDevice16>:
 * @param[in] reg 16-bit Register address to be accessed.
 * @param[in] val Data value to be written.
 */
void rtiVC_WriteDevice16(E_VC_DEVICE_CH_T dev_ch, U8_T dev_slave_addr,
						U16_T reg, U8_T val)
{
 80064a0:	b530      	push	{r4, r5, lr}
 80064a2:	b085      	sub	sp, #20
	while (HAL_I2C_GetState(&RDC200A_I2C1) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
#else
	uint8_t data[3];
	uint16_t size = 3;

	data[0] = (uint8_t)((reg&0xff00)>>8);
 80064a4:	ba52      	rev16	r2, r2
	data[1] = (uint8_t)reg&0xff;
	data[2] = (uint8_t) (val & 0xFF);

	if(HAL_I2C_Master_Transmit(&RDC200A_I2C1, (dev_slave_addr << 1) | I2C_WRITE , (uint8_t*)&data, size, I2C_TIMEOUT) != HAL_OK)
 80064a6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
{
 80064aa:	461c      	mov	r4, r3
	data[0] = (uint8_t)((reg&0xff00)>>8);
 80064ac:	f8ad 200c 	strh.w	r2, [sp, #12]
	if(HAL_I2C_Master_Transmit(&RDC200A_I2C1, (dev_slave_addr << 1) | I2C_WRITE , (uint8_t*)&data, size, I2C_TIMEOUT) != HAL_OK)
 80064b0:	480f      	ldr	r0, [pc, #60]	; (80064f0 <rtiVC_WriteDevice16+0x50>)
 80064b2:	9500      	str	r5, [sp, #0]
 80064b4:	2303      	movs	r3, #3
 80064b6:	0049      	lsls	r1, r1, #1
 80064b8:	aa03      	add	r2, sp, #12
	data[2] = (uint8_t) (val & 0xFF);
 80064ba:	f88d 400e 	strb.w	r4, [sp, #14]
	if(HAL_I2C_Master_Transmit(&RDC200A_I2C1, (dev_slave_addr << 1) | I2C_WRITE , (uint8_t*)&data, size, I2C_TIMEOUT) != HAL_OK)
 80064be:	f004 f87d 	bl	800a5bc <HAL_I2C_Master_Transmit>
 80064c2:	b988      	cbnz	r0, 80064e8 <rtiVC_WriteDevice16+0x48>
	{
		Error_Handler();
	}
	while (HAL_I2C_GetState(&RDC200A_I2C1) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 80064c4:	4d0a      	ldr	r5, [pc, #40]	; (80064f0 <rtiVC_WriteDevice16+0x50>)
{
 80064c6:	f240 34e9 	movw	r4, #1001	; 0x3e9
 80064ca:	e002      	b.n	80064d2 <rtiVC_WriteDevice16+0x32>
	while (HAL_I2C_GetState(&RDC200A_I2C1) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 80064cc:	b154      	cbz	r4, 80064e4 <rtiVC_WriteDevice16+0x44>
 80064ce:	f003 f93d 	bl	800974c <HAL_Delay>
 80064d2:	4628      	mov	r0, r5
 80064d4:	f005 f870 	bl	800b5b8 <HAL_I2C_GetState>
 80064d8:	3c01      	subs	r4, #1
 80064da:	2820      	cmp	r0, #32
 80064dc:	b2a4      	uxth	r4, r4
 80064de:	f04f 000a 	mov.w	r0, #10
 80064e2:	d1f3      	bne.n	80064cc <rtiVC_WriteDevice16+0x2c>
#endif
#endif
}
 80064e4:	b005      	add	sp, #20
 80064e6:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80064e8:	f002 fe3e 	bl	8009168 <Error_Handler>
 80064ec:	e7ea      	b.n	80064c4 <rtiVC_WriteDevice16+0x24>
 80064ee:	bf00      	nop
 80064f0:	20003b48 	.word	0x20003b48

080064f4 <rtiVC_CloseDevice>:
 *
 */
void rtiVC_CloseDevice(void)
{
	devif_close_device();
}
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop

080064f8 <rtiVC_OpenDevice>:
	if(rtiVC_prepare_panel() < 0 ) return -1;
#endif
#endif

	return 0; /* On success. */
}
 80064f8:	2000      	movs	r0, #0
 80064fa:	4770      	bx	lr

080064fc <rtiVC_DeinitDevice>:
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop

08006500 <rtiVC_InitDevice>:
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <rtiVC_RegisterDownloadCallback>:

void rtiVC_RegisterDownloadCallback(VC_DLOAD_ERASE_CALLBACK_T erase_callback,
									VC_DLOAD_PROGRAM_CALLBACK_T program_callback,
									VC_DLOAD_VERIFY_CALLBACK_T verify_callback,
									VC_DLOAD_PROC_CALLBACK_T proc_callback)
{
 8006504:	b410      	push	{r4}
	vc_dload_cb.erase_callback = erase_callback;
 8006506:	4c04      	ldr	r4, [pc, #16]	; (8006518 <rtiVC_RegisterDownloadCallback+0x14>)
	vc_dload_cb.program_callback = program_callback;
 8006508:	e9c4 0109 	strd	r0, r1, [r4, #36]	; 0x24
	vc_dload_cb.verify_callback = verify_callback;
	vc_dload_cb.proc_callback = proc_callback;
 800650c:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
}
 8006510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	200037e0 	.word	0x200037e0

0800651c <rtiVC_DeinitDownload>:

void rtiVC_DeinitDownload(void)
{
 800651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dload_init_flag) {
 8006520:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 80065e4 <rtiVC_DeinitDownload+0xc8>
 8006524:	f8db 3000 	ldr.w	r3, [fp]
{
 8006528:	b083      	sub	sp, #12
	if (dload_init_flag) {
 800652a:	b913      	cbnz	r3, 8006532 <rtiVC_DeinitDownload+0x16>

		vc_dload_cb.state = VC_DLOAD_STATE_INIT;

		dload_init_flag = FALSE;
	}
}
 800652c:	b003      	add	sp, #12
 800652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vc_dload_cb.stop_flag = FALSE;
 8006532:	4d2b      	ldr	r5, [pc, #172]	; (80065e0 <rtiVC_DeinitDownload+0xc4>)
	VLIST_FOREACH_REMOVAL(&vc_dload_cb.item_list.head, pos, tmp) {
 8006534:	46a8      	mov	r8, r5
		vc_dload_cb.stop_flag = FALSE;
 8006536:	f04f 0a00 	mov.w	sl, #0
	VLIST_FOREACH_REMOVAL(&vc_dload_cb.item_list.head, pos, tmp) {
 800653a:	f858 4f18 	ldr.w	r4, [r8, #24]!
		vc_dload_cb.stop_flag = FALSE;
 800653e:	f8c5 a004 	str.w	sl, [r5, #4]
	VLIST_FOREACH_REMOVAL(&vc_dload_cb.item_list.head, pos, tmp) {
 8006542:	4544      	cmp	r4, r8
 8006544:	6826      	ldr	r6, [r4, #0]
 8006546:	d043      	beq.n	80065d0 <rtiVC_DeinitDownload+0xb4>
 8006548:	f105 090c 	add.w	r9, r5, #12
		vc_dload_cb.item_list.cnt--;
 800654c:	6a2a      	ldr	r2, [r5, #32]
}

/* Unlink the specified list. */
static INLINE void VLIST_REMOVE(struct VLIST_T *list)
{
	struct VLIST_T *prev = list->prev;
 800654e:	6861      	ldr	r1, [r4, #4]
		if (vc_dload_cb.proc_callback)
 8006550:	6b2f      	ldr	r7, [r5, #48]	; 0x30
	struct VLIST_T *next = list->next;

	next->prev = prev;
 8006552:	6071      	str	r1, [r6, #4]
		vc_dload_cb.item_list.cnt--;
 8006554:	3a01      	subs	r2, #1
	prev->next = next;
 8006556:	600e      	str	r6, [r1, #0]
			vc_dload_cb.proc_callback(status, item->lut_class, item->pgm_data,
 8006558:	2300      	movs	r3, #0
 800655a:	2008      	movs	r0, #8
		vc_dload_cb.item_list.cnt--;
 800655c:	622a      	str	r2, [r5, #32]
		if (vc_dload_cb.proc_callback)
 800655e:	b197      	cbz	r7, 8006586 <rtiVC_DeinitDownload+0x6a>
			vc_dload_cb.proc_callback(status, item->lut_class, item->pgm_data,
 8006560:	68e2      	ldr	r2, [r4, #12]
 8006562:	7d21      	ldrb	r1, [r4, #20]
 8006564:	f8cd a000 	str.w	sl, [sp]
 8006568:	47b8      	blx	r7
	vc_dload_cb.free_q_cnt++;
 800656a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
	next->prev = new_node;
 800656e:	612c      	str	r4, [r5, #16]
	new_node->prev = prev;
 8006570:	e9c4 9200 	strd	r9, r2, [r4]
 8006574:	3301      	adds	r3, #1
	prev->next = new_node;
 8006576:	6014      	str	r4, [r2, #0]
	VLIST_FOREACH_REMOVAL(&vc_dload_cb.item_list.head, pos, tmp) {
 8006578:	4546      	cmp	r6, r8
 800657a:	6832      	ldr	r2, [r6, #0]
	vc_dload_cb.free_q_cnt++;
 800657c:	616b      	str	r3, [r5, #20]
	VLIST_FOREACH_REMOVAL(&vc_dload_cb.item_list.head, pos, tmp) {
 800657e:	4634      	mov	r4, r6
 8006580:	d026      	beq.n	80065d0 <rtiVC_DeinitDownload+0xb4>
 8006582:	4616      	mov	r6, r2
 8006584:	e7e2      	b.n	800654c <rtiVC_DeinitDownload+0x30>
	VLIST_INSERT(new_node, head->prev, head);
 8006586:	692b      	ldr	r3, [r5, #16]
	next->prev = new_node;
 8006588:	612c      	str	r4, [r5, #16]
	new_node->prev = prev;
 800658a:	e9c4 9300 	strd	r9, r3, [r4]
	prev->next = new_node;
 800658e:	601c      	str	r4, [r3, #0]
	vc_dload_cb.free_q_cnt++;
 8006590:	696b      	ldr	r3, [r5, #20]
	VLIST_FOREACH_REMOVAL(&vc_dload_cb.item_list.head, pos, tmp) {
 8006592:	6832      	ldr	r2, [r6, #0]
	vc_dload_cb.free_q_cnt++;
 8006594:	3301      	adds	r3, #1
	VLIST_FOREACH_REMOVAL(&vc_dload_cb.item_list.head, pos, tmp) {
 8006596:	4546      	cmp	r6, r8
 8006598:	bf18      	it	ne
 800659a:	6a28      	ldrne	r0, [r5, #32]
	vc_dload_cb.free_q_cnt++;
 800659c:	616b      	str	r3, [r5, #20]
	VLIST_FOREACH_REMOVAL(&vc_dload_cb.item_list.head, pos, tmp) {
 800659e:	d017      	beq.n	80065d0 <rtiVC_DeinitDownload+0xb4>
	struct VLIST_T *prev = list->prev;
 80065a0:	6871      	ldr	r1, [r6, #4]
	next->prev = prev;
 80065a2:	6051      	str	r1, [r2, #4]
	prev->next = next;
 80065a4:	600a      	str	r2, [r1, #0]
	VLIST_INSERT(new_node, head->prev, head);
 80065a6:	6929      	ldr	r1, [r5, #16]
	next->prev = new_node;
 80065a8:	612e      	str	r6, [r5, #16]
	new_node->prev = prev;
 80065aa:	e9c6 9100 	strd	r9, r1, [r6]
	prev->next = new_node;
 80065ae:	4614      	mov	r4, r2
 80065b0:	600e      	str	r6, [r1, #0]
 80065b2:	4544      	cmp	r4, r8
 80065b4:	6812      	ldr	r2, [r2, #0]
		vc_dload_cb.item_list.cnt--;
 80065b6:	f100 30ff 	add.w	r0, r0, #4294967295
	vc_dload_cb.free_q_cnt++;
 80065ba:	f103 0301 	add.w	r3, r3, #1
	VLIST_FOREACH_REMOVAL(&vc_dload_cb.item_list.head, pos, tmp) {
 80065be:	d001      	beq.n	80065c4 <rtiVC_DeinitDownload+0xa8>
 80065c0:	4626      	mov	r6, r4
 80065c2:	e7ed      	b.n	80065a0 <rtiVC_DeinitDownload+0x84>
 80065c4:	6228      	str	r0, [r5, #32]
 80065c6:	612e      	str	r6, [r5, #16]
 80065c8:	e9c6 9100 	strd	r9, r1, [r6]
 80065cc:	600e      	str	r6, [r1, #0]
 80065ce:	616b      	str	r3, [r5, #20]
		vc_dload_cb.state = VC_DLOAD_STATE_INIT;
 80065d0:	2201      	movs	r2, #1
		dload_init_flag = FALSE;
 80065d2:	2300      	movs	r3, #0
		vc_dload_cb.state = VC_DLOAD_STATE_INIT;
 80065d4:	702a      	strb	r2, [r5, #0]
		dload_init_flag = FALSE;
 80065d6:	f8cb 3000 	str.w	r3, [fp]
}
 80065da:	b003      	add	sp, #12
 80065dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e0:	200037e0 	.word	0x200037e0
 80065e4:	200007dc 	.word	0x200007dc

080065e8 <rtiVC_InitDownload>:

void rtiVC_InitDownload(void)
{
 80065e8:	b538      	push	{r3, r4, r5, lr}
	memset(&vc_dload_cb, 0, sizeof(vc_dload_cb));
 80065ea:	4c14      	ldr	r4, [pc, #80]	; (800663c <rtiVC_InitDownload+0x54>)
 80065ec:	2100      	movs	r1, #0
 80065ee:	2234      	movs	r2, #52	; 0x34
 80065f0:	4620      	mov	r0, r4
 80065f2:	f00c fbbf 	bl	8012d74 <memset>
	VLIST_HEAD_INIT(&vc_dload_cb.free_q);
 80065f6:	4b12      	ldr	r3, [pc, #72]	; (8006640 <rtiVC_InitDownload+0x58>)
 80065f8:	f104 000c 	add.w	r0, r4, #12
 80065fc:	60e0      	str	r0, [r4, #12]
	for (i = 0; i < MAX_NUM_DLOAD_ITEM_BUF_POOL; i++) {
 80065fe:	f503 5c40 	add.w	ip, r3, #12288	; 0x3000
	VLIST_HEAD_INIT(&vc_dload_cb.free_q);
 8006602:	4601      	mov	r1, r0
		VLIST_INSERT_TAIL(&vc_dload_cb.free_q, &dload_item_buf_pool[i].link);
 8006604:	460a      	mov	r2, r1
	new_node->prev = prev;
 8006606:	e9c3 0100 	strd	r0, r1, [r3]
 800660a:	4619      	mov	r1, r3
	prev->next = new_node;
 800660c:	6013      	str	r3, [r2, #0]
	for (i = 0; i < MAX_NUM_DLOAD_ITEM_BUF_POOL; i++) {
 800660e:	3318      	adds	r3, #24
 8006610:	4563      	cmp	r3, ip
 8006612:	d1f7      	bne.n	8006604 <rtiVC_InitDownload+0x1c>
 8006614:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <rtiVC_InitDownload+0x5c>)

	dload_init_item_pool();

	VC_MUTEX_INIT(&vc_dload_cb.item_lock);
	
	VLIST_HEAD_INIT(&vc_dload_cb.item_list.head);
 8006616:	490c      	ldr	r1, [pc, #48]	; (8006648 <rtiVC_InitDownload+0x60>)
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	6123      	str	r3, [r4, #16]
 800661c:	6018      	str	r0, [r3, #0]
 800661e:	6013      	str	r3, [r2, #0]
	vc_dload_cb.item_list.cnt = 0;

	dload_init_flag = TRUE;
 8006620:	4a0a      	ldr	r2, [pc, #40]	; (800664c <rtiVC_InitDownload+0x64>)
	VLIST_HEAD_INIT(&vc_dload_cb.item_list.head);
 8006622:	61e1      	str	r1, [r4, #28]
 8006624:	f6a3 7ce8 	subw	ip, r3, #4072	; 0xfe8
 8006628:	f44f 7000 	mov.w	r0, #512	; 0x200
	dload_init_flag = TRUE;
 800662c:	2301      	movs	r3, #1
	vc_dload_cb.item_list.cnt = 0;
 800662e:	2500      	movs	r5, #0
	VLIST_HEAD_INIT(&vc_dload_cb.item_list.head);
 8006630:	e9c4 0105 	strd	r0, r1, [r4, #20]
	vc_dload_cb.item_list.cnt = 0;
 8006634:	6225      	str	r5, [r4, #32]
	dload_init_flag = TRUE;
 8006636:	6013      	str	r3, [r2, #0]

	vc_dload_cb.state = VC_DLOAD_STATE_INIT;
 8006638:	7023      	strb	r3, [r4, #0]
}
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	200037e0 	.word	0x200037e0
 8006640:	200007e0 	.word	0x200007e0
 8006644:	200037c8 	.word	0x200037c8
 8006648:	200037f8 	.word	0x200037f8
 800664c:	200007dc 	.word	0x200007dc

08006650 <rtiVC_SetSlaveAddressRDC>:
 *
 */
void rtiVC_SetSlaveAddressRDC(U8_T rdc_i2c_slave_addr)
{
#if defined(CFG_MDC_RDC200A)
	if (vc_prev_rdc_slave_addr != rdc_i2c_slave_addr) {
 8006650:	4b03      	ldr	r3, [pc, #12]	; (8006660 <rtiVC_SetSlaveAddressRDC+0x10>)
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	4282      	cmp	r2, r0
		vc_prev_rdc_slave_addr = rdc_i2c_slave_addr;
 8006656:	bf18      	it	ne
 8006658:	7018      	strbne	r0, [r3, #0]
#endif
	}

#endif // #if defined(CFG_MDC_RDC200A)

	vc_rdc_i2c_slave_addr = rdc_i2c_slave_addr;
 800665a:	4b02      	ldr	r3, [pc, #8]	; (8006664 <rtiVC_SetSlaveAddressRDC+0x14>)
 800665c:	7018      	strb	r0, [r3, #0]

#if 0// (!defined(ECLIPSE_RCP) && !defined(__KERNEL__) && defined(__linux__) /* Linux application */)
	i2c_bus_number[0] = i2c_bus_no;
#endif	
}
 800665e:	4770      	bx	lr
 8006660:	2000001c 	.word	0x2000001c
 8006664:	2000001d 	.word	0x2000001d

08006668 <rtiVC_Denitialize>:

void rtiVC_Denitialize(void)
{
 8006668:	b508      	push	{r3, lr}
	rtiVC_DeinitPanel();
 800666a:	f000 f8db 	bl	8006824 <rtiVC_DeinitPanel>

	rtiVC_DeinitRDC();
 800666e:	f000 fd33 	bl	80070d8 <rtiVC_DeinitRDC>

	rtiVC_DeinitDevice();

	VC_MUTEX_DEINIT(&vc_dev_access_lock);
}
 8006672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	rtiVC_DeinitDevice();
 8006676:	f7ff bf41 	b.w	80064fc <rtiVC_DeinitDevice>
 800667a:	bf00      	nop

0800667c <rtiVC_Initialize>:
 * @param[in] rdc_i2c_slave_addr 7-bit I2C slave address of RDC.
 * @return 0 on success, otherwise returns a negative number.
 *
 */
int rtiVC_Initialize(U8_T rdc_i2c_slave_addr)
{
 800667c:	b538      	push	{r3, r4, r5, lr}
	int ret = 0;

	vc_prev_panel_port = -1; /* Previous panel port */
	vc_prev_rdc_slave_addr = 0xFF; /* Previous RDC slave address */
 800667e:	4c0a      	ldr	r4, [pc, #40]	; (80066a8 <rtiVC_Initialize+0x2c>)
	vc_prev_panel_port = -1; /* Previous panel port */
 8006680:	4d0a      	ldr	r5, [pc, #40]	; (80066ac <rtiVC_Initialize+0x30>)

	vc_rdc_i2c_slave_addr = rdc_i2c_slave_addr;
 8006682:	490b      	ldr	r1, [pc, #44]	; (80066b0 <rtiVC_Initialize+0x34>)
	vc_panel_attached_port_mask |= (1 << VC_PANEL_PORT_1);
 8006684:	4a0b      	ldr	r2, [pc, #44]	; (80066b4 <rtiVC_Initialize+0x38>)
	vc_rdc_i2c_slave_addr = rdc_i2c_slave_addr;
 8006686:	7008      	strb	r0, [r1, #0]
	vc_prev_panel_port = -1; /* Previous panel port */
 8006688:	f04f 33ff 	mov.w	r3, #4294967295
	vc_prev_rdc_slave_addr = 0xFF; /* Previous RDC slave address */
 800668c:	7023      	strb	r3, [r4, #0]
	vc_prev_panel_port = -1; /* Previous panel port */
 800668e:	602b      	str	r3, [r5, #0]
	vc_panel_attached_port_mask |= (1 << VC_PANEL_PORT_1);
 8006690:	2303      	movs	r3, #3
 8006692:	6013      	str	r3, [r2, #0]

	config_panel_port_mask();

	VC_MUTEX_INIT(&vc_dev_access_lock);

	rtiVC_InitDevice();
 8006694:	f7ff ff34 	bl	8006500 <rtiVC_InitDevice>

	ret = rtiVC_InitRDC();
 8006698:	f000 fd20 	bl	80070dc <rtiVC_InitRDC>
	if (ret != 0)
 800669c:	4604      	mov	r4, r0
 800669e:	b908      	cbnz	r0, 80066a4 <rtiVC_Initialize+0x28>
		return ret;

	rtiVC_InitPanel();
 80066a0:	f000 f8c2 	bl	8006828 <rtiVC_InitPanel>

	return 0;
}
 80066a4:	4620      	mov	r0, r4
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	2000001c 	.word	0x2000001c
 80066ac:	20003818 	.word	0x20003818
 80066b0:	2000001d 	.word	0x2000001d
 80066b4:	20003814 	.word	0x20003814

080066b8 <rdp_compensate_temperature>:


#define DISACRD_RAW_CODE_DIFF	3

S32_T rdp_compensate_temperature(S32_T raw_code[], U8_T num_raw_code)
{
 80066b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	static S32_T valid_X[NUM_RDP_TEMP_SENSOR_READ_RAW_CODE_TYPE0];
	S32_T sum_X = 0;
	S32_T comp_raw_code = 0;

	/* Sort to get the median. */
	for (i = 0; i < (num_raw_code-1) ; i++) {
 80066ba:	1e4f      	subs	r7, r1, #1
 80066bc:	2f00      	cmp	r7, #0
 80066be:	dd20      	ble.n	8006702 <rdp_compensate_temperature+0x4a>
 80066c0:	2600      	movs	r6, #0
 80066c2:	46b6      	mov	lr, r6
		for (j = 0; j < (num_raw_code-i-1); j++) {
 80066c4:	eba1 0e0e 	sub.w	lr, r1, lr
 80066c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80066cc:	f1be 0f00 	cmp.w	lr, #0
 80066d0:	bfc8      	it	gt
 80066d2:	f04f 0c00 	movgt.w	ip, #0
 80066d6:	dd0f      	ble.n	80066f8 <rdp_compensate_temperature+0x40>
			if (raw_code[j+1] < raw_code[j]) { 
 80066d8:	f10c 0301 	add.w	r3, ip, #1
 80066dc:	009a      	lsls	r2, r3, #2
 80066de:	3a04      	subs	r2, #4
 80066e0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 80066e4:	5884      	ldr	r4, [r0, r2]
		for (j = 0; j < (num_raw_code-i-1); j++) {
 80066e6:	fa5f fc83 	uxtb.w	ip, r3
			if (raw_code[j+1] < raw_code[j]) { 
 80066ea:	42a5      	cmp	r5, r4
				tmp = raw_code[j];
				raw_code[j] = raw_code[j+1];
 80066ec:	bfbc      	itt	lt
 80066ee:	5085      	strlt	r5, [r0, r2]
				raw_code[j+1] = tmp;
 80066f0:	f840 4023 	strlt.w	r4, [r0, r3, lsl #2]
		for (j = 0; j < (num_raw_code-i-1); j++) {
 80066f4:	45f4      	cmp	ip, lr
 80066f6:	dbef      	blt.n	80066d8 <rdp_compensate_temperature+0x20>
	for (i = 0; i < (num_raw_code-1) ; i++) {
 80066f8:	3601      	adds	r6, #1
 80066fa:	b2f6      	uxtb	r6, r6
 80066fc:	42be      	cmp	r6, r7
 80066fe:	46b6      	mov	lr, r6
 8006700:	dbe0      	blt.n	80066c4 <rdp_compensate_temperature+0xc>
			}
		}
	}

	median_idx = num_raw_code >> 1; // Divied by 2.
	median = raw_code[median_idx]; // The number of element is odd number.
 8006702:	0849      	lsrs	r1, r1, #1

	return median;
}
 8006704:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8006708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800670a:	bf00      	nop

0800670c <rtiVC_DecreaseBrightness>:
int rtiVC_DecreaseBrightness(void)
{
	int ret = -1;
	VC_PANEL_DEV_INFO_T *dev = &vc_panel_cb.dev;

	if (dev->decrease_brightness) {
 800670c:	4b03      	ldr	r3, [pc, #12]	; (800671c <rtiVC_DecreaseBrightness+0x10>)
 800670e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006710:	b103      	cbz	r3, 8006714 <rtiVC_DecreaseBrightness+0x8>
		VC_MUTEX_LOCK(&vc_dev_access_lock);
		
		ret = dev->decrease_brightness();
 8006712:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006714:	f06f 0001 	mvn.w	r0, #1
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	2000381c 	.word	0x2000381c

08006720 <rtiVC_IncreaseBrightness>:
int rtiVC_IncreaseBrightness(void)
{
	int ret = -1;
	VC_PANEL_DEV_INFO_T *dev = &vc_panel_cb.dev;

	if (dev->increase_brightness) {
 8006720:	4b03      	ldr	r3, [pc, #12]	; (8006730 <rtiVC_IncreaseBrightness+0x10>)
 8006722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006724:	b103      	cbz	r3, 8006728 <rtiVC_IncreaseBrightness+0x8>
		VC_MUTEX_LOCK(&vc_dev_access_lock);
	
		ret = dev->increase_brightness();
 8006726:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006728:	f06f 0001 	mvn.w	r0, #1
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	2000381c 	.word	0x2000381c

08006734 <rtiVC_GetTemperature>:
	int i = 0;
	U8_T chk_port = (U8_T)ctrl_port;
	VC_TEMPERATURE_STATUS_T *temp_status;	
	VC_PANEL_DEV_INFO_T *dev = &vc_panel_cb.dev;

	if (ctrl_port < VC_PANEL_CTRL_PORT_0) {
 8006734:	2800      	cmp	r0, #0
 8006736:	dd70      	ble.n	800681a <rtiVC_GetTemperature+0xe6>
{
 8006738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		EMSG("Invalid control panel port\n");
		return -1;
	}

	if (dev->get_temperature) {
 800673c:	4e38      	ldr	r6, [pc, #224]	; (8006820 <rtiVC_GetTemperature+0xec>)
 800673e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006740:	2b00      	cmp	r3, #0
 8006742:	d067      	beq.n	8006814 <rtiVC_GetTemperature+0xe0>
 8006744:	b2c7      	uxtb	r7, r0
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		do {
			if (chk_port & 0x1) {
 8006746:	07f8      	lsls	r0, r7, #31
 8006748:	460c      	mov	r4, r1
 800674a:	d511      	bpl.n	8006770 <rtiVC_GetTemperature+0x3c>
				t = &tinfo[i];
				temp_status = &dev->temperature_status[i];

				t->otp_applied = temp_status->otp_applied;
 800674c:	68b1      	ldr	r1, [r6, #8]
 800674e:	6832      	ldr	r2, [r6, #0]
 8006750:	60a1      	str	r1, [r4, #8]
 8006752:	6871      	ldr	r1, [r6, #4]

				/* Set the last code and temperature from device structure */
				t->prev_tsensor_code = temp_status->last_tsensor_code;
				t->prev_temperature = temp_status->last_temperature;

				ret = dev->get_temperature(i, &t->tsensor_code, &t->temperature);
 8006754:	2000      	movs	r0, #0
				t->otp_applied = temp_status->otp_applied;
 8006756:	e9c4 2100 	strd	r2, r1, [r4]
				ret = dev->get_temperature(i, &t->tsensor_code, &t->temperature);
 800675a:	f104 0210 	add.w	r2, r4, #16
 800675e:	f104 010c 	add.w	r1, r4, #12
 8006762:	4798      	blx	r3
				if (ret)
 8006764:	2800      	cmp	r0, #0
 8006766:	d13f      	bne.n	80067e8 <rtiVC_GetTemperature+0xb4>
					break;

				/* Update the last code and temperature in device structure */
				temp_status->last_tsensor_code = t->tsensor_code;
 8006768:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 800676c:	e9c6 2301 	strd	r2, r3, [r6, #4]
				temp_status->last_temperature = t->temperature;			
			}

			i++;
			chk_port >>= 1;
		} while (chk_port);	
 8006770:	087b      	lsrs	r3, r7, #1
 8006772:	d038      	beq.n	80067e6 <rtiVC_GetTemperature+0xb2>
			if (chk_port & 0x1) {
 8006774:	07d9      	lsls	r1, r3, #31
 8006776:	d511      	bpl.n	800679c <rtiVC_GetTemperature+0x68>
				t->otp_applied = temp_status->otp_applied;
 8006778:	e9d6 3204 	ldrd	r3, r2, [r6, #16]
 800677c:	61a3      	str	r3, [r4, #24]
				ret = dev->get_temperature(i, &t->tsensor_code, &t->temperature);
 800677e:	6b73      	ldr	r3, [r6, #52]	; 0x34
				t->otp_applied = temp_status->otp_applied;
 8006780:	61e2      	str	r2, [r4, #28]
 8006782:	68f2      	ldr	r2, [r6, #12]
 8006784:	6162      	str	r2, [r4, #20]
				ret = dev->get_temperature(i, &t->tsensor_code, &t->temperature);
 8006786:	f104 0120 	add.w	r1, r4, #32
 800678a:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800678e:	2001      	movs	r0, #1
 8006790:	4798      	blx	r3
				if (ret)
 8006792:	bb48      	cbnz	r0, 80067e8 <rtiVC_GetTemperature+0xb4>
				temp_status->last_tsensor_code = t->tsensor_code;
 8006794:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8006798:	e9c6 2304 	strd	r2, r3, [r6, #16]
		} while (chk_port);	
 800679c:	08bb      	lsrs	r3, r7, #2
 800679e:	d022      	beq.n	80067e6 <rtiVC_GetTemperature+0xb2>
			if (chk_port & 0x1) {
 80067a0:	07da      	lsls	r2, r3, #31
 80067a2:	d423      	bmi.n	80067ec <rtiVC_GetTemperature+0xb8>
		} while (chk_port);	
 80067a4:	08ff      	lsrs	r7, r7, #3
 80067a6:	d01e      	beq.n	80067e6 <rtiVC_GetTemperature+0xb2>
 80067a8:	4d1d      	ldr	r5, [pc, #116]	; (8006820 <rtiVC_GetTemperature+0xec>)
			i++;
 80067aa:	f04f 0803 	mov.w	r8, #3
			if (chk_port & 0x1) {
 80067ae:	07fb      	lsls	r3, r7, #31
 80067b0:	d511      	bpl.n	80067d6 <rtiVC_GetTemperature+0xa2>
				t->otp_applied = temp_status->otp_applied;
 80067b2:	e9d5 2309 	ldrd	r2, r3, [r5, #36]	; 0x24
 80067b6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80067b8:	6461      	str	r1, [r4, #68]	; 0x44
 80067ba:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
				ret = dev->get_temperature(i, &t->tsensor_code, &t->temperature);
 80067be:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80067c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80067c4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80067c8:	4640      	mov	r0, r8
 80067ca:	4798      	blx	r3
				if (ret)
 80067cc:	b960      	cbnz	r0, 80067e8 <rtiVC_GetTemperature+0xb4>
				temp_status->last_tsensor_code = t->tsensor_code;
 80067ce:	e9d4 3212 	ldrd	r3, r2, [r4, #72]	; 0x48
 80067d2:	e9c5 320a 	strd	r3, r2, [r5, #40]	; 0x28
		} while (chk_port);	
 80067d6:	087f      	lsrs	r7, r7, #1
			i++;
 80067d8:	f108 0801 	add.w	r8, r8, #1
		} while (chk_port);	
 80067dc:	f104 0414 	add.w	r4, r4, #20
 80067e0:	f105 050c 	add.w	r5, r5, #12
 80067e4:	d1e3      	bne.n	80067ae <rtiVC_GetTemperature+0x7a>

		VC_MUTEX_FREE(&vc_dev_access_lock);
	}
	else {
		EMSG("[rtiVC_GetTemperature] Interface function is NULL\n");
		ret = -2;
 80067e6:	2000      	movs	r0, #0
	}

	return ret;
}
 80067e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				t->otp_applied = temp_status->otp_applied;
 80067ec:	69f3      	ldr	r3, [r6, #28]
 80067ee:	6a32      	ldr	r2, [r6, #32]
 80067f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067f2:	69b3      	ldr	r3, [r6, #24]
 80067f4:	62a3      	str	r3, [r4, #40]	; 0x28
				ret = dev->get_temperature(i, &t->tsensor_code, &t->temperature);
 80067f6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80067fa:	6b73      	ldr	r3, [r6, #52]	; 0x34
				t->otp_applied = temp_status->otp_applied;
 80067fc:	6322      	str	r2, [r4, #48]	; 0x30
				ret = dev->get_temperature(i, &t->tsensor_code, &t->temperature);
 80067fe:	2002      	movs	r0, #2
 8006800:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8006804:	4798      	blx	r3
				if (ret)
 8006806:	2800      	cmp	r0, #0
 8006808:	d1ee      	bne.n	80067e8 <rtiVC_GetTemperature+0xb4>
				temp_status->last_tsensor_code = t->tsensor_code;
 800680a:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
 800680e:	e9c6 2307 	strd	r2, r3, [r6, #28]
 8006812:	e7c7      	b.n	80067a4 <rtiVC_GetTemperature+0x70>
		ret = -2;
 8006814:	f06f 0001 	mvn.w	r0, #1
 8006818:	e7e6      	b.n	80067e8 <rtiVC_GetTemperature+0xb4>
		return -1;
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800681e:	4770      	bx	lr
 8006820:	2000381c 	.word	0x2000381c

08006824 <rtiVC_DeinitPanel>:
/**
 * @brief Denitializes RDP driver.
 */
void rtiVC_DeinitPanel(void)
{
}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop

08006828 <rtiVC_InitPanel>:
 *
 * The function probes RDP driver and initializes the it's context.
 *
 */
void rtiVC_InitPanel(void)
{
 8006828:	b508      	push	{r3, lr}
	memset(&vc_panel_cb, 0, sizeof(vc_panel_cb));
 800682a:	4b06      	ldr	r3, [pc, #24]	; (8006844 <rtiVC_InitPanel+0x1c>)
 800682c:	2274      	movs	r2, #116	; 0x74
 800682e:	4618      	mov	r0, r3
 8006830:	2100      	movs	r1, #0
 8006832:	f00c fa9f 	bl	8012d74 <memset>

//	curligntVal = getCurrentLightVal();

#if defined(CFG_PANEL_RDP551F)
	RDP551F_PanelProbe(&vc_panel_cb.dev);
 8006836:	f7ff fd75 	bl	8006324 <RDP551F_PanelProbe>

#else
	#error "Code not present"
#endif

	rdp550f_f_attached = -1;
 800683a:	4b03      	ldr	r3, [pc, #12]	; (8006848 <rtiVC_InitPanel+0x20>)
 800683c:	f04f 32ff 	mov.w	r2, #4294967295
 8006840:	601a      	str	r2, [r3, #0]
}
 8006842:	bd08      	pop	{r3, pc}
 8006844:	2000381c 	.word	0x2000381c
 8006848:	20000020 	.word	0x20000020

0800684c <rtiVC_MoveTextOSD>:
	int min_handle = 0;
#else
	#error "Code not present"
#endif

	if ((handle < min_handle) || (handle >= NUM_VC_TEXT_DRAWER)) {
 800684c:	2803      	cmp	r0, #3
 800684e:	d817      	bhi.n	8006880 <rtiVC_MoveTextOSD+0x34>
{
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		EMSG("Invalid text handle\n");
		return -1;
	}

	if (dev->move_text_osd) {
 8006852:	4b0e      	ldr	r3, [pc, #56]	; (800688c <rtiVC_MoveTextOSD+0x40>)
 8006854:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
 8006858:	b1af      	cbz	r7, 8006886 <rtiVC_MoveTextOSD+0x3a>
		VC_MUTEX_LOCK(&vc_dev_access_lock);
		drawer_cb = &vc_rdc_cb.text_drawer_cb[handle];
 800685a:	0140      	lsls	r0, r0, #5

		if (drawer_cb->enabled == TRUE) {
 800685c:	181e      	adds	r6, r3, r0
		drawer_cb = &vc_rdc_cb.text_drawer_cb[handle];
 800685e:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8006862:	4418      	add	r0, r3
		if (drawer_cb->enabled == TRUE) {
 8006864:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
 8006868:	2b01      	cmp	r3, #1
 800686a:	d106      	bne.n	800687a <rtiVC_MoveTextOSD+0x2e>
			ret = dev->move_text_osd(drawer_cb, mov_x, mov_y);
 800686c:	460d      	mov	r5, r1
 800686e:	4614      	mov	r4, r2
 8006870:	47b8      	blx	r7
			if (ret == 0) {
 8006872:	b908      	cbnz	r0, 8006878 <rtiVC_MoveTextOSD+0x2c>
				/* Update the position */
				drawer_cb->pos_x = mov_x;
				drawer_cb->pos_y = mov_y;
 8006874:	e9c6 5456 	strd	r5, r4, [r6, #344]	; 0x158
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ret = -3;
 800687a:	f06f 0002 	mvn.w	r0, #2
}
 800687e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006884:	4770      	bx	lr
		ret = -2;
 8006886:	f06f 0001 	mvn.w	r0, #1
}
 800688a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800688c:	20003890 	.word	0x20003890

08006890 <rtiVC_DrawTextOSD>:
						E_VC_OSD_ALPHA_T font_alpha,
						E_VC_OSD_ALPHA_T back_alpha,
						U8_T font_color_idx, U8_T back_color_idx,
						E_VC_OSD_DIMENSTION_T d,
						const char *string)
{
 8006890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	b08b      	sub	sp, #44	; 0x2c
 8006896:	4604      	mov	r4, r0
 8006898:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800689c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80068a0:	f89d c05c 	ldrb.w	ip, [sp, #92]	; 0x5c
 80068a4:	f89d e060 	ldrb.w	lr, [sp, #96]	; 0x60
 80068a8:	f89d b064 	ldrb.w	fp, [sp, #100]	; 0x64
 80068ac:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 80068b0:	2500      	movs	r5, #0
 80068b2:	f360 0507 	bfi	r5, r0, #0, #8
 80068b6:	f367 250f 	bfi	r5, r7, #8, #8
 80068ba:	f36c 4517 	bfi	r5, ip, #16, #8
	int min_handle = 0;
#else
	#error "Code not present"
#endif

	if ((handle < min_handle) || (handle >= NUM_VC_TEXT_DRAWER)) {
 80068be:	2c03      	cmp	r4, #3
{
 80068c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068c4:	f36e 651f 	bfi	r5, lr, #24, #8
	if ((handle < min_handle) || (handle >= NUM_VC_TEXT_DRAWER)) {
 80068c8:	d832      	bhi.n	8006930 <rtiVC_DrawTextOSD+0xa0>
		EMSG("Invalid text handle\n");
		return -1;
	}

	if (dev->draw_text_osd) {		
 80068ca:	4e1c      	ldr	r6, [pc, #112]	; (800693c <rtiVC_DrawTextOSD+0xac>)
 80068cc:	f8d6 90cc 	ldr.w	r9, [r6, #204]	; 0xcc
 80068d0:	f1b9 0f00 	cmp.w	r9, #0
 80068d4:	d02f      	beq.n	8006936 <rtiVC_DrawTextOSD+0xa6>
		VC_MUTEX_LOCK(&vc_dev_access_lock);
		drawer_cb = &vc_rdc_cb.text_drawer_cb[handle];

		ret = dev->draw_text_osd(drawer_cb, pos_x, pos_y,
 80068d6:	e9cd 0701 	strd	r0, r7, [sp, #4]
 80068da:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80068dc:	f8cd b014 	str.w	fp, [sp, #20]
 80068e0:	e9cd a006 	strd	sl, r0, [sp, #24]
		drawer_cb = &vc_rdc_cb.text_drawer_cb[handle];
 80068e4:	0167      	lsls	r7, r4, #5
		ret = dev->draw_text_osd(drawer_cb, pos_x, pos_y,
 80068e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80068e8:	9000      	str	r0, [sp, #0]
		drawer_cb = &vc_rdc_cb.text_drawer_cb[handle];
 80068ea:	f507 70ac 	add.w	r0, r7, #344	; 0x158
		ret = dev->draw_text_osd(drawer_cb, pos_x, pos_y,
 80068ee:	e9cd ce03 	strd	ip, lr, [sp, #12]
 80068f2:	4430      	add	r0, r6
 80068f4:	4688      	mov	r8, r1
 80068f6:	47c8      	blx	r9
								font_addr, palette_addr,
								mag, font_alpha, back_alpha,
								font_color_idx, back_color_idx,
								d, string);
		if (ret == 0) {
 80068f8:	b9b8      	cbnz	r0, 800692a <rtiVC_DrawTextOSD+0x9a>
			drawer_cb->pos_x = pos_x;
 80068fa:	19f3      	adds	r3, r6, r7
			drawer_cb->pos_y = pos_y;
 80068fc:	9a08      	ldr	r2, [sp, #32]
 80068fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			drawer_cb->font_addr = font_addr;
 8006902:	340b      	adds	r4, #11
 8006904:	0162      	lsls	r2, r4, #5
 8006906:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006908:	50b1      	str	r1, [r6, r2]
 800690a:	eb06 1444 	add.w	r4, r6, r4, lsl #5
			drawer_cb->palette_addr = palette_addr;
 800690e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006910:	6062      	str	r2, [r4, #4]
			drawer_cb->font_color_idx = font_color_idx;
			drawer_cb->back_color_idx = back_color_idx;
			drawer_cb->enabled = TRUE;
			drawer_cb->showed = TRUE;
			drawer_cb->mag = mag;
 8006912:	f507 77b8 	add.w	r7, r7, #368	; 0x170
			drawer_cb->enabled = TRUE;
 8006916:	2201      	movs	r2, #1
			drawer_cb->showed = TRUE;
 8006918:	e9c3 225a 	strd	r2, r2, [r3, #360]	; 0x168
			drawer_cb->pos_x = pos_x;
 800691c:	f8c3 8158 	str.w	r8, [r3, #344]	; 0x158
			drawer_cb->back_color_idx = back_color_idx;
 8006920:	f883 b174 	strb.w	fp, [r3, #372]	; 0x174
			drawer_cb->mag = mag;
 8006924:	51f5      	str	r5, [r6, r7]
			drawer_cb->font_alpha = font_alpha;
			drawer_cb->back_alpha = back_alpha;
			drawer_cb->d = d;
 8006926:	f883 a175 	strb.w	sl, [r3, #373]	; 0x175
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 800692a:	b00b      	add	sp, #44	; 0x2c
 800692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	e7f9      	b.n	800692a <rtiVC_DrawTextOSD+0x9a>
		ret = -2;
 8006936:	f06f 0001 	mvn.w	r0, #1
 800693a:	e7f6      	b.n	800692a <rtiVC_DrawTextOSD+0x9a>
 800693c:	20003890 	.word	0x20003890

08006940 <rtiVC_DestoryTextOsdDrawer>:
	int min_handle = 0;
#else
	#error "Code not present"
#endif

	if ((handle < min_handle) || (handle >= NUM_VC_TEXT_DRAWER)) {
 8006940:	2803      	cmp	r0, #3
 8006942:	d835      	bhi.n	80069b0 <rtiVC_DestoryTextOsdDrawer+0x70>
{
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return -1;
	}

	VC_MUTEX_LOCK(&vc_dev_access_lock);

	if (vc_rdc_cb.text_drawer_id_bits & (1<<handle)) {
 8006946:	4d1d      	ldr	r5, [pc, #116]	; (80069bc <rtiVC_DestoryTextOsdDrawer+0x7c>)
 8006948:	f895 21d8 	ldrb.w	r2, [r5, #472]	; 0x1d8
 800694c:	4603      	mov	r3, r0
 800694e:	fa42 f000 	asr.w	r0, r2, r0
 8006952:	f010 0001 	ands.w	r0, r0, #1
 8006956:	d018      	beq.n	800698a <rtiVC_DestoryTextOsdDrawer+0x4a>
		vc_rdc_cb.text_drawer_id_bits &= ~(1 << handle);
 8006958:	2101      	movs	r1, #1
 800695a:	4099      	lsls	r1, r3

		if (dev->hide_bitmap_osd) {
 800695c:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
		vc_rdc_cb.text_drawer_id_bits &= ~(1 << handle);
 8006960:	ea22 0201 	bic.w	r2, r2, r1
 8006964:	f885 21d8 	strb.w	r2, [r5, #472]	; 0x1d8
		if (dev->hide_bitmap_osd) {
 8006968:	b328      	cbz	r0, 80069b6 <rtiVC_DestoryTextOsdDrawer+0x76>
			drawer_cb = &vc_rdc_cb.text_drawer_cb[handle];
 800696a:	015c      	lsls	r4, r3, #5

			if (drawer_cb->showed == TRUE) {
 800696c:	192f      	adds	r7, r5, r4
			drawer_cb = &vc_rdc_cb.text_drawer_cb[handle];
 800696e:	f504 70ac 	add.w	r0, r4, #344	; 0x158
			if (drawer_cb->showed == TRUE) {
 8006972:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006976:	2b01      	cmp	r3, #1
			drawer_cb = &vc_rdc_cb.text_drawer_cb[handle];
 8006978:	eb05 0600 	add.w	r6, r5, r0
			if (drawer_cb->showed == TRUE) {
 800697c:	d00f      	beq.n	800699e <rtiVC_DestoryTextOsdDrawer+0x5e>
	int ret = 0;
 800697e:	2000      	movs	r0, #0
				ret = dev->hide_text_osd(drawer_cb);
				if (ret == 0)
					drawer_cb->showed = FALSE;
			}
		
			if (drawer_cb->enabled == TRUE) {
 8006980:	442c      	add	r4, r5
 8006982:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 8006986:	2b01      	cmp	r3, #1
 8006988:	d000      	beq.n	800698c <rtiVC_DestoryTextOsdDrawer+0x4c>
	}

	VC_MUTEX_FREE(&vc_dev_access_lock);

	return ret;
}
 800698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				ret = dev->disable_text_osd(drawer_cb);
 800698c:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
 8006990:	4630      	mov	r0, r6
 8006992:	4798      	blx	r3
				if (ret == 0)
 8006994:	2800      	cmp	r0, #0
 8006996:	d1f8      	bne.n	800698a <rtiVC_DestoryTextOsdDrawer+0x4a>
					drawer_cb->enabled = FALSE;
 8006998:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
}
 800699c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				ret = dev->hide_text_osd(drawer_cb);
 800699e:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 80069a2:	4630      	mov	r0, r6
 80069a4:	4798      	blx	r3
				if (ret == 0)
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d1ea      	bne.n	8006980 <rtiVC_DestoryTextOsdDrawer+0x40>
					drawer_cb->showed = FALSE;
 80069aa:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 80069ae:	e7e7      	b.n	8006980 <rtiVC_DestoryTextOsdDrawer+0x40>
		return -1;
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80069b4:	4770      	bx	lr
			ret = -2;
 80069b6:	f06f 0001 	mvn.w	r0, #1
}
 80069ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069bc:	20003890 	.word	0x20003890

080069c0 <rtiVC_CreateTextOsdDrawer>:
	int i, handle = -1;

	VC_MUTEX_LOCK(&vc_dev_access_lock);

	for (i = 0; i < NUM_RDC_TEXT_DRAWER; i++) {
		if ((vc_rdc_cb.text_drawer_id_bits & (1<<i)) == 0) {
 80069c0:	4a0f      	ldr	r2, [pc, #60]	; (8006a00 <rtiVC_CreateTextOsdDrawer+0x40>)
 80069c2:	f892 31d8 	ldrb.w	r3, [r2, #472]	; 0x1d8
 80069c6:	f013 0001 	ands.w	r0, r3, #1
 80069ca:	d00b      	beq.n	80069e4 <rtiVC_CreateTextOsdDrawer+0x24>
 80069cc:	0799      	lsls	r1, r3, #30
 80069ce:	d508      	bpl.n	80069e2 <rtiVC_CreateTextOsdDrawer+0x22>
 80069d0:	0758      	lsls	r0, r3, #29
 80069d2:	d512      	bpl.n	80069fa <rtiVC_CreateTextOsdDrawer+0x3a>
 80069d4:	0719      	lsls	r1, r3, #28
	for (i = 0; i < NUM_RDC_TEXT_DRAWER; i++) {
 80069d6:	bf58      	it	pl
 80069d8:	2003      	movpl	r0, #3
		if ((vc_rdc_cb.text_drawer_id_bits & (1<<i)) == 0) {
 80069da:	d503      	bpl.n	80069e4 <rtiVC_CreateTextOsdDrawer+0x24>
	int i, handle = -1;
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295
	}

	VC_MUTEX_FREE(&vc_dev_access_lock);

	return handle;
}
 80069e0:	4770      	bx	lr
	for (i = 0; i < NUM_RDC_TEXT_DRAWER; i++) {
 80069e2:	2001      	movs	r0, #1
			vc_rdc_cb.text_drawer_id_bits |= (1 << i);
 80069e4:	2101      	movs	r1, #1
 80069e6:	4081      	lsls	r1, r0
 80069e8:	430b      	orrs	r3, r1
			vc_rdc_cb.text_drawer_cb[handle].enabled = FALSE;
 80069ea:	eb02 1c40 	add.w	ip, r2, r0, lsl #5
			vc_rdc_cb.text_drawer_id_bits |= (1 << i);
 80069ee:	f882 31d8 	strb.w	r3, [r2, #472]	; 0x1d8
			vc_rdc_cb.text_drawer_cb[handle].enabled = FALSE;
 80069f2:	2300      	movs	r3, #0
			vc_rdc_cb.text_drawer_cb[handle].showed = FALSE;
 80069f4:	e9cc 335a 	strd	r3, r3, [ip, #360]	; 0x168
			break;
 80069f8:	4770      	bx	lr
	for (i = 0; i < NUM_RDC_TEXT_DRAWER; i++) {
 80069fa:	2002      	movs	r0, #2
 80069fc:	e7f2      	b.n	80069e4 <rtiVC_CreateTextOsdDrawer+0x24>
 80069fe:	bf00      	nop
 8006a00:	20003890 	.word	0x20003890

08006a04 <rtiVC_MoveBitmapOSD>:
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;
	VC_BITMAP_DRAWER_CB *drawer_cb;

	if ((handle < 0) || (handle >= NUM_VC_BMP_DRAWER)) {
 8006a04:	2802      	cmp	r0, #2
 8006a06:	d81c      	bhi.n	8006a42 <rtiVC_MoveBitmapOSD+0x3e>
{
 8006a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		EMSG("Invalid bitmap handle\n");
		return -1;
	}

	if (dev->move_bitmap_osd) {
 8006a0c:	4c10      	ldr	r4, [pc, #64]	; (8006a50 <rtiVC_MoveBitmapOSD+0x4c>)
 8006a0e:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 8006a12:	b1cf      	cbz	r7, 8006a48 <rtiVC_MoveBitmapOSD+0x44>
		VC_MUTEX_LOCK(&vc_dev_access_lock);
		drawer_cb = &vc_rdc_cb.bmp_drawer_cb[handle];
 8006a14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006a18:	00c3      	lsls	r3, r0, #3

		if (drawer_cb->enabled == TRUE) {
 8006a1a:	eb04 0803 	add.w	r8, r4, r3
		drawer_cb = &vc_rdc_cb.bmp_drawer_cb[handle];
 8006a1e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8006a22:	18e0      	adds	r0, r4, r3
		if (drawer_cb->enabled == TRUE) {
 8006a24:	f8d8 3118 	ldr.w	r3, [r8, #280]	; 0x118
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d107      	bne.n	8006a3c <rtiVC_MoveBitmapOSD+0x38>
			ret = dev->move_bitmap_osd(drawer_cb, mov_x, mov_y);
 8006a2c:	460e      	mov	r6, r1
 8006a2e:	4615      	mov	r5, r2
 8006a30:	47b8      	blx	r7
			if (ret == 0) {
 8006a32:	b908      	cbnz	r0, 8006a38 <rtiVC_MoveBitmapOSD+0x34>
				/* Update the position */
				drawer_cb->pos_x = mov_x;
				drawer_cb->pos_y = mov_y;
 8006a34:	e9c8 6543 	strd	r6, r5, [r8, #268]	; 0x10c
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ret = -3;
 8006a3c:	f06f 0002 	mvn.w	r0, #2
 8006a40:	e7fa      	b.n	8006a38 <rtiVC_MoveBitmapOSD+0x34>
		return -1;
 8006a42:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006a46:	4770      	bx	lr
		ret = -2;
 8006a48:	f06f 0001 	mvn.w	r0, #1
 8006a4c:	e7f4      	b.n	8006a38 <rtiVC_MoveBitmapOSD+0x34>
 8006a4e:	bf00      	nop
 8006a50:	20003890 	.word	0x20003890

08006a54 <rtiVC_DrawBitmapOSD>:
 */
int rtiVC_DrawBitmapOSD(int handle, U32_T pos_x, U32_T pos_y,
						U32_T bmp_addr, E_VC_OSD_BITMAP_MAG_T mag,
						E_VC_OSD_ALPHA_T alpha,
						E_VC_OSD_DIMENSTION_T d)
{
 8006a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	b087      	sub	sp, #28
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;
	VC_BITMAP_DRAWER_CB *drawer_cb;

	if ((handle < 0) || (handle >= NUM_VC_BMP_DRAWER)) {
 8006a5a:	2802      	cmp	r0, #2
{
 8006a5c:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
 8006a60:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
 8006a64:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8006a68:	9305      	str	r3, [sp, #20]
	if ((handle < 0) || (handle >= NUM_VC_BMP_DRAWER)) {
 8006a6a:	d825      	bhi.n	8006ab8 <rtiVC_DrawBitmapOSD+0x64>
		EMSG("Invalid bitmap handle\n");
		return -1;
	}

	if (dev->draw_bitmap_osd) {		
 8006a6c:	4d15      	ldr	r5, [pc, #84]	; (8006ac4 <rtiVC_DrawBitmapOSD+0x70>)
 8006a6e:	f8d5 80b0 	ldr.w	r8, [r5, #176]	; 0xb0
 8006a72:	f1b8 0f00 	cmp.w	r8, #0
 8006a76:	d022      	beq.n	8006abe <rtiVC_DrawBitmapOSD+0x6a>
		VC_MUTEX_LOCK(&vc_dev_access_lock);
		drawer_cb = &vc_rdc_cb.bmp_drawer_cb[handle];
 8006a78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006a7c:	00c4      	lsls	r4, r0, #3
 8006a7e:	f504 7086 	add.w	r0, r4, #268	; 0x10c

		ret = dev->draw_bitmap_osd(drawer_cb, pos_x, pos_y,
 8006a82:	e9cd a901 	strd	sl, r9, [sp, #4]
 8006a86:	f8cd b000 	str.w	fp, [sp]
 8006a8a:	4428      	add	r0, r5
 8006a8c:	460f      	mov	r7, r1
 8006a8e:	4616      	mov	r6, r2
 8006a90:	47c0      	blx	r8
									bmp_addr, mag, alpha, d);
		if (ret == 0) {
 8006a92:	b970      	cbnz	r0, 8006ab2 <rtiVC_DrawBitmapOSD+0x5e>
			drawer_cb->pos_x = pos_x;
 8006a94:	4425      	add	r5, r4
			drawer_cb->pos_y = pos_y;
			drawer_cb->bmp_addr = bmp_addr;
 8006a96:	9b05      	ldr	r3, [sp, #20]
 8006a98:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
			drawer_cb->enabled = TRUE;
 8006a9c:	2301      	movs	r3, #1
			drawer_cb->pos_y = pos_y;
 8006a9e:	e9c5 7643 	strd	r7, r6, [r5, #268]	; 0x10c
			drawer_cb->showed = TRUE;
 8006aa2:	e9c5 3346 	strd	r3, r3, [r5, #280]	; 0x118
			drawer_cb->mag = mag;
 8006aa6:	f885 b120 	strb.w	fp, [r5, #288]	; 0x120
			drawer_cb->alpha = alpha;
 8006aaa:	f885 a121 	strb.w	sl, [r5, #289]	; 0x121
			drawer_cb->d = d;
 8006aae:	f885 9122 	strb.w	r9, [r5, #290]	; 0x122
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006ab2:	b007      	add	sp, #28
 8006ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	e7f9      	b.n	8006ab2 <rtiVC_DrawBitmapOSD+0x5e>
		ret = -2;
 8006abe:	f06f 0001 	mvn.w	r0, #1
 8006ac2:	e7f6      	b.n	8006ab2 <rtiVC_DrawBitmapOSD+0x5e>
 8006ac4:	20003890 	.word	0x20003890

08006ac8 <rtiVC_DestoryBitmapOsdDrawer>:
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;
	VC_BITMAP_DRAWER_CB *drawer_cb;

	if ((handle < 0) || (handle >= NUM_VC_BMP_DRAWER)) {
 8006ac8:	2802      	cmp	r0, #2
 8006aca:	d83a      	bhi.n	8006b42 <rtiVC_DestoryBitmapOsdDrawer+0x7a>
{
 8006acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		return -1;
	}

	VC_MUTEX_LOCK(&vc_dev_access_lock);

	if (vc_rdc_cb.bmp_drawer_id_bits & (1<<handle)) {
 8006ad0:	4d1f      	ldr	r5, [pc, #124]	; (8006b50 <rtiVC_DestoryBitmapOsdDrawer+0x88>)
 8006ad2:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	fa43 f000 	asr.w	r0, r3, r0
 8006adc:	f010 0001 	ands.w	r0, r0, #1
 8006ae0:	d01d      	beq.n	8006b1e <rtiVC_DestoryBitmapOsdDrawer+0x56>
		vc_rdc_cb.bmp_drawer_id_bits &= ~(1 << handle);
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	40a2      	lsls	r2, r4

		if (dev->hide_bitmap_osd) {
 8006ae6:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
		vc_rdc_cb.bmp_drawer_id_bits &= ~(1 << handle);
 8006aea:	ea23 0302 	bic.w	r3, r3, r2
 8006aee:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
		if (dev->hide_bitmap_osd) {
 8006af2:	b349      	cbz	r1, 8006b48 <rtiVC_DestoryBitmapOsdDrawer+0x80>
			drawer_cb = &vc_rdc_cb.bmp_drawer_cb[handle];
 8006af4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006af8:	00db      	lsls	r3, r3, #3

			if (drawer_cb->showed == TRUE) {
 8006afa:	18ee      	adds	r6, r5, r3
			drawer_cb = &vc_rdc_cb.bmp_drawer_cb[handle];
 8006afc:	f503 7886 	add.w	r8, r3, #268	; 0x10c
			if (drawer_cb->showed == TRUE) {
 8006b00:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
 8006b04:	2b01      	cmp	r3, #1
			drawer_cb = &vc_rdc_cb.bmp_drawer_cb[handle];
 8006b06:	ea4f 0744 	mov.w	r7, r4, lsl #1
 8006b0a:	44a8      	add	r8, r5
			if (drawer_cb->showed == TRUE) {
 8006b0c:	d012      	beq.n	8006b34 <rtiVC_DestoryBitmapOsdDrawer+0x6c>
	int ret = 0;
 8006b0e:	2000      	movs	r0, #0
				ret = dev->hide_bitmap_osd(drawer_cb);
				if (ret == 0)
					drawer_cb->showed = FALSE;
			}
		
			if (drawer_cb->enabled == TRUE) {
 8006b10:	443c      	add	r4, r7
 8006b12:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8006b16:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d001      	beq.n	8006b22 <rtiVC_DestoryBitmapOsdDrawer+0x5a>
	}

	VC_MUTEX_FREE(&vc_dev_access_lock);

	return ret;
}
 8006b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				ret = dev->disable_bitmap_osd(drawer_cb);
 8006b22:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 8006b26:	4640      	mov	r0, r8
 8006b28:	4798      	blx	r3
				if (ret == 0)
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d1f7      	bne.n	8006b1e <rtiVC_DestoryBitmapOsdDrawer+0x56>
					drawer_cb->enabled = FALSE;
 8006b2e:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
 8006b32:	e7f4      	b.n	8006b1e <rtiVC_DestoryBitmapOsdDrawer+0x56>
				ret = dev->hide_bitmap_osd(drawer_cb);
 8006b34:	4640      	mov	r0, r8
 8006b36:	4788      	blx	r1
				if (ret == 0)
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d1e9      	bne.n	8006b10 <rtiVC_DestoryBitmapOsdDrawer+0x48>
					drawer_cb->showed = FALSE;
 8006b3c:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
 8006b40:	e7e6      	b.n	8006b10 <rtiVC_DestoryBitmapOsdDrawer+0x48>
		return -1;
 8006b42:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006b46:	4770      	bx	lr
			ret = -2;
 8006b48:	f06f 0001 	mvn.w	r0, #1
 8006b4c:	e7e7      	b.n	8006b1e <rtiVC_DestoryBitmapOsdDrawer+0x56>
 8006b4e:	bf00      	nop
 8006b50:	20003890 	.word	0x20003890

08006b54 <rtiVC_CreateBitmapOsdDrawer>:
	int i, handle = -1;

	VC_MUTEX_LOCK(&vc_dev_access_lock);

	for (i = 0; i < NUM_VC_BMP_DRAWER; i++) {
		if ((vc_rdc_cb.bmp_drawer_id_bits & (1<<i)) == 0) {
 8006b54:	4a0f      	ldr	r2, [pc, #60]	; (8006b94 <rtiVC_CreateBitmapOsdDrawer+0x40>)
 8006b56:	f892 3154 	ldrb.w	r3, [r2, #340]	; 0x154
 8006b5a:	f013 0001 	ands.w	r0, r3, #1
 8006b5e:	d009      	beq.n	8006b74 <rtiVC_CreateBitmapOsdDrawer+0x20>
 8006b60:	0798      	lsls	r0, r3, #30
 8006b62:	d506      	bpl.n	8006b72 <rtiVC_CreateBitmapOsdDrawer+0x1e>
 8006b64:	0759      	lsls	r1, r3, #29
	for (i = 0; i < NUM_VC_BMP_DRAWER; i++) {
 8006b66:	bf58      	it	pl
 8006b68:	2002      	movpl	r0, #2
		if ((vc_rdc_cb.bmp_drawer_id_bits & (1<<i)) == 0) {
 8006b6a:	d503      	bpl.n	8006b74 <rtiVC_CreateBitmapOsdDrawer+0x20>
	int i, handle = -1;
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	VC_MUTEX_FREE(&vc_dev_access_lock);

	return handle;
}
 8006b70:	4770      	bx	lr
	for (i = 0; i < NUM_VC_BMP_DRAWER; i++) {
 8006b72:	2001      	movs	r0, #1
			vc_rdc_cb.bmp_drawer_id_bits |= (1 << i);
 8006b74:	f04f 0c01 	mov.w	ip, #1
 8006b78:	fa0c fc00 	lsl.w	ip, ip, r0
 8006b7c:	ea43 030c 	orr.w	r3, r3, ip
			vc_rdc_cb.bmp_drawer_cb[handle].enabled = FALSE;
 8006b80:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8006b84:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
			vc_rdc_cb.bmp_drawer_id_bits |= (1 << i);
 8006b88:	f882 3154 	strb.w	r3, [r2, #340]	; 0x154
			vc_rdc_cb.bmp_drawer_cb[handle].enabled = FALSE;
 8006b8c:	2300      	movs	r3, #0
			vc_rdc_cb.bmp_drawer_cb[handle].showed = FALSE;
 8006b8e:	e9c1 3346 	strd	r3, r3, [r1, #280]	; 0x118
			break;
 8006b92:	4770      	bx	lr
 8006b94:	20003890 	.word	0x20003890

08006b98 <rtiVC_DisableVideoSyncInterrupt>:
int rtiVC_DisableVideoSyncInterrupt(void)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->disable_video_sync_interrupt) {
 8006b98:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <rtiVC_DisableVideoSyncInterrupt+0x10>)
 8006b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9e:	b103      	cbz	r3, 8006ba2 <rtiVC_DisableVideoSyncInterrupt+0xa>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->disable_video_sync_interrupt();
 8006ba0:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006ba2:	f06f 0001 	mvn.w	r0, #1
 8006ba6:	4770      	bx	lr
 8006ba8:	20003890 	.word	0x20003890

08006bac <rtiVC_EnableVideoSyncInterrupt>:
int rtiVC_EnableVideoSyncInterrupt(void)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->enable_video_sync_interrupt) {
 8006bac:	4b03      	ldr	r3, [pc, #12]	; (8006bbc <rtiVC_EnableVideoSyncInterrupt+0x10>)
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb2:	b103      	cbz	r3, 8006bb6 <rtiVC_EnableVideoSyncInterrupt+0xa>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->enable_video_sync_interrupt();
 8006bb4:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006bb6:	f06f 0001 	mvn.w	r0, #1
 8006bba:	4770      	bx	lr
 8006bbc:	20003890 	.word	0x20003890

08006bc0 <rtiVC_RequestAtwShiftPixel>:
				RTI_VC_ATW_PIXEL_SHIFT_SET_INFO_T info[MAX_NUM_VC_PANEL_PORT])
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->request_atw_shift_pixel) {
 8006bc0:	4b03      	ldr	r3, [pc, #12]	; (8006bd0 <rtiVC_RequestAtwShiftPixel+0x10>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	b103      	cbz	r3, 8006bca <rtiVC_RequestAtwShiftPixel+0xa>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->request_atw_shift_pixel(ctrl_port, info);
 8006bc8:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006bca:	f06f 0001 	mvn.w	r0, #1
 8006bce:	4770      	bx	lr
 8006bd0:	20003890 	.word	0x20003890

08006bd4 <rtiVC_RequestCoKOAGeneration>:
int rtiVC_RequestCoKOAGeneration(VC_COKOA_PARAM_T *param)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if ((param->lt_x < -256) || (param->lt_x > 255)) {
 8006bd4:	8b03      	ldrh	r3, [r0, #24]
 8006bd6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be0:	d27b      	bcs.n	8006cda <rtiVC_RequestCoKOAGeneration+0x106>
		EMSG("keystone lt_x: Invalid value (-256 ~ 255)\n");
		return -1;
	}

	if ((param->rt_x < -256) || (param->rt_x > 255)) {
 8006be2:	8b43      	ldrh	r3, [r0, #26]
 8006be4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
{
 8006bee:	b5d0      	push	{r4, r6, r7, lr}
 8006bf0:	4604      	mov	r4, r0
	if ((param->rt_x < -256) || (param->rt_x > 255)) {
 8006bf2:	d26f      	bcs.n	8006cd4 <rtiVC_RequestCoKOAGeneration+0x100>
		EMSG("keystone rt_x: Invalid value (-256 ~ 255)\n");
		return -2;
	}

	if ((param->lb_x < -256) || (param->lb_x > 255)) {
 8006bf4:	8b83      	ldrh	r3, [r0, #28]
 8006bf6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c00:	d26e      	bcs.n	8006ce0 <rtiVC_RequestCoKOAGeneration+0x10c>
		EMSG("lb_x: Invalid value (-256 ~ 255)\n");
		return -3;
	}

	if ((param->rb_x < -256) || (param->rb_x > 255)) {
 8006c02:	8bc3      	ldrh	r3, [r0, #30]
 8006c04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0e:	d26a      	bcs.n	8006ce6 <rtiVC_RequestCoKOAGeneration+0x112>
		EMSG("rb_x: Invalid value (-256 ~ 255)\n");
		return -4;
	}

	if ((param->lt_y < -64) || (param->lt_y > 63)) {
 8006c10:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006c14:	3340      	adds	r3, #64	; 0x40
 8006c16:	0618      	lsls	r0, r3, #24
 8006c18:	d471      	bmi.n	8006cfe <rtiVC_RequestCoKOAGeneration+0x12a>
		EMSG("lt_y: Invalid value (-64 ~ 63)\n");
		return -5;
	}

	if ((param->rt_y < -64) || (param->rt_y > 63)) {
 8006c1a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8006c1e:	3340      	adds	r3, #64	; 0x40
 8006c20:	0619      	lsls	r1, r3, #24
 8006c22:	d472      	bmi.n	8006d0a <rtiVC_RequestCoKOAGeneration+0x136>
		EMSG("rt_y: Invalid value (-64 ~ 63)\n");
		return -6;
	}	

	if ((param->lb_y < -64) || (param->lb_y > 63)) {
 8006c24:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8006c28:	3340      	adds	r3, #64	; 0x40
 8006c2a:	061a      	lsls	r2, r3, #24
 8006c2c:	d46a      	bmi.n	8006d04 <rtiVC_RequestCoKOAGeneration+0x130>
		EMSG("lb_y: Invalid value (-64 ~ 63)\n");
		return -7;
	}

	if ((param->rb_y < -64) || (param->rb_y > 63)) {
 8006c2e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8006c32:	3340      	adds	r3, #64	; 0x40
 8006c34:	061b      	lsls	r3, r3, #24
 8006c36:	d46b      	bmi.n	8006d10 <rtiVC_RequestCoKOAGeneration+0x13c>
		EMSG("keystone rb_y: Invalid value (-64 ~ 63)\n");
		return -8;
	}

	if ((param->k1 < -0.500) || (param->k1 > 0.500)) {
 8006c38:	e9d4 6700 	ldrd	r6, r7, [r4]
 8006c3c:	4b36      	ldr	r3, [pc, #216]	; (8006d18 <rtiVC_RequestCoKOAGeneration+0x144>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	4630      	mov	r0, r6
 8006c42:	4639      	mov	r1, r7
 8006c44:	f7f9 ff4a 	bl	8000adc <__aeabi_dcmplt>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d13a      	bne.n	8006cc2 <rtiVC_RequestCoKOAGeneration+0xee>
 8006c4c:	4b33      	ldr	r3, [pc, #204]	; (8006d1c <rtiVC_RequestCoKOAGeneration+0x148>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	4630      	mov	r0, r6
 8006c52:	4639      	mov	r1, r7
 8006c54:	f7f9 ff60 	bl	8000b18 <__aeabi_dcmpgt>
 8006c58:	bb98      	cbnz	r0, 8006cc2 <rtiVC_RequestCoKOAGeneration+0xee>
		EMSG("k1: Invalid range (-0.500 ~ 0.500)\n");
		return -9;
	}

	if ((param->k2 < -0.500) || (param->k2 > 0.500)) {
 8006c5a:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006c5e:	4b2e      	ldr	r3, [pc, #184]	; (8006d18 <rtiVC_RequestCoKOAGeneration+0x144>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 ff39 	bl	8000adc <__aeabi_dcmplt>
 8006c6a:	bb68      	cbnz	r0, 8006cc8 <rtiVC_RequestCoKOAGeneration+0xf4>
 8006c6c:	4b2b      	ldr	r3, [pc, #172]	; (8006d1c <rtiVC_RequestCoKOAGeneration+0x148>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	4630      	mov	r0, r6
 8006c72:	4639      	mov	r1, r7
 8006c74:	f7f9 ff50 	bl	8000b18 <__aeabi_dcmpgt>
 8006c78:	bb30      	cbnz	r0, 8006cc8 <rtiVC_RequestCoKOAGeneration+0xf4>
		EMSG("k2: Invalid range (-0.500 ~ 0.500)\n");
		return -10;
	}

	if (param->chrm_r > 100) {
 8006c7a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006c7e:	2b64      	cmp	r3, #100	; 0x64
 8006c80:	d834      	bhi.n	8006cec <rtiVC_RequestCoKOAGeneration+0x118>
		EMSG("chrm_r: Invalid range (0 ~ 100)%%\n");
		return -12;
	}

	if (param->chrm_g > 100) {
 8006c82:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8006c86:	2b64      	cmp	r3, #100	; 0x64
 8006c88:	d833      	bhi.n	8006cf2 <rtiVC_RequestCoKOAGeneration+0x11e>
		EMSG("chrm_g: Invalid range (0 ~ 100)%%\n");
		return -13;
	}

	if (param->chrm_b > 100) {
 8006c8a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8006c8e:	2b64      	cmp	r3, #100	; 0x64
 8006c90:	d832      	bhi.n	8006cf8 <rtiVC_RequestCoKOAGeneration+0x124>
		EMSG("chrm_b: Invalid range (0 ~ 100)%%\n");
		return -14;
	}

	if ((param->interp < 0.500) || (param->interp > 1.500)) {
 8006c92:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
 8006c96:	4b21      	ldr	r3, [pc, #132]	; (8006d1c <rtiVC_RequestCoKOAGeneration+0x148>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 ff1d 	bl	8000adc <__aeabi_dcmplt>
 8006ca2:	b9a0      	cbnz	r0, 8006cce <rtiVC_RequestCoKOAGeneration+0xfa>
 8006ca4:	4b1e      	ldr	r3, [pc, #120]	; (8006d20 <rtiVC_RequestCoKOAGeneration+0x14c>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 ff34 	bl	8000b18 <__aeabi_dcmpgt>
 8006cb0:	b968      	cbnz	r0, 8006cce <rtiVC_RequestCoKOAGeneration+0xfa>
		EMSG("interp: Invalid range (0.500 ~ 1.500)\n");
		return -15;
	}
	
	if (dev->request_cokoa_generation) {
 8006cb2:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <rtiVC_RequestCoKOAGeneration+0x150>)
 8006cb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006cb8:	b163      	cbz	r3, 8006cd4 <rtiVC_RequestCoKOAGeneration+0x100>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->request_cokoa_generation(param);
 8006cba:	4620      	mov	r0, r4
		ret = -2;
	}

	return ret;

}
 8006cbc:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		ret = dev->request_cokoa_generation(param);
 8006cc0:	4718      	bx	r3
		return -9;
 8006cc2:	f06f 0008 	mvn.w	r0, #8
}
 8006cc6:	bdd0      	pop	{r4, r6, r7, pc}
		return -10;
 8006cc8:	f06f 0009 	mvn.w	r0, #9
}
 8006ccc:	bdd0      	pop	{r4, r6, r7, pc}
		return -15;
 8006cce:	f06f 000e 	mvn.w	r0, #14
}
 8006cd2:	bdd0      	pop	{r4, r6, r7, pc}
		ret = -2;
 8006cd4:	f06f 0001 	mvn.w	r0, #1
}
 8006cd8:	bdd0      	pop	{r4, r6, r7, pc}
		return -1;
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006cde:	4770      	bx	lr
		return -3;
 8006ce0:	f06f 0002 	mvn.w	r0, #2
}
 8006ce4:	bdd0      	pop	{r4, r6, r7, pc}
		return -4;
 8006ce6:	f06f 0003 	mvn.w	r0, #3
}
 8006cea:	bdd0      	pop	{r4, r6, r7, pc}
		return -12;
 8006cec:	f06f 000b 	mvn.w	r0, #11
}
 8006cf0:	bdd0      	pop	{r4, r6, r7, pc}
		return -13;
 8006cf2:	f06f 000c 	mvn.w	r0, #12
}
 8006cf6:	bdd0      	pop	{r4, r6, r7, pc}
		return -14;
 8006cf8:	f06f 000d 	mvn.w	r0, #13
}
 8006cfc:	bdd0      	pop	{r4, r6, r7, pc}
		return -5;
 8006cfe:	f06f 0004 	mvn.w	r0, #4
}
 8006d02:	bdd0      	pop	{r4, r6, r7, pc}
		return -7;
 8006d04:	f06f 0006 	mvn.w	r0, #6
}
 8006d08:	bdd0      	pop	{r4, r6, r7, pc}
		return -6;
 8006d0a:	f06f 0005 	mvn.w	r0, #5
}
 8006d0e:	bdd0      	pop	{r4, r6, r7, pc}
		return -8;
 8006d10:	f06f 0007 	mvn.w	r0, #7
}
 8006d14:	bdd0      	pop	{r4, r6, r7, pc}
 8006d16:	bf00      	nop
 8006d18:	bfe00000 	.word	0xbfe00000
 8006d1c:	3fe00000 	.word	0x3fe00000
 8006d20:	3ff80000 	.word	0x3ff80000
 8006d24:	20003890 	.word	0x20003890

08006d28 <rtiVC_EnableDistortionCorrection>:
 * @return 0 on success, otherwise returns a negative number.
 *
 */
int rtiVC_EnableDistortionCorrection(E_VC_PANEL_CTRL_PORT_T ctrl_port, BOOL_T dc_en,
						UINT_T lut_offset[MAX_NUM_VC_PANEL_PORT], BOOL_T ca_en)
{
 8006d28:	b410      	push	{r4}
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->enable_distortion_correction) {
 8006d2a:	4c06      	ldr	r4, [pc, #24]	; (8006d44 <rtiVC_EnableDistortionCorrection+0x1c>)
 8006d2c:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
 8006d30:	b11c      	cbz	r4, 8006d3a <rtiVC_EnableDistortionCorrection+0x12>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->enable_distortion_correction(ctrl_port, dc_en, lut_offset, ca_en);
 8006d32:	46a4      	mov	ip, r4
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006d34:	f85d 4b04 	ldr.w	r4, [sp], #4
		ret = dev->enable_distortion_correction(ctrl_port, dc_en, lut_offset, ca_en);
 8006d38:	4760      	bx	ip
}
 8006d3a:	f06f 0001 	mvn.w	r0, #1
 8006d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20003890 	.word	0x20003890

08006d48 <rtiVC_EnableGammaCorrection>:
								UINT_T lut_offset[MAX_NUM_VC_PANEL_PORT])
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->enable_gamma_correction) {
 8006d48:	4b03      	ldr	r3, [pc, #12]	; (8006d58 <rtiVC_EnableGammaCorrection+0x10>)
 8006d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d4e:	b103      	cbz	r3, 8006d52 <rtiVC_EnableGammaCorrection+0xa>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->enable_gamma_correction(ctrl_port, enable, lut_offset);
 8006d50:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -1;
	}

	return ret;
}
 8006d52:	f04f 30ff 	mov.w	r0, #4294967295
 8006d56:	4770      	bx	lr
 8006d58:	20003890 	.word	0x20003890

08006d5c <rtiVC_SetImageDisplayFormat>:
								BOOL_T swap_image_3d_mode)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->set_image_display_format) {
 8006d5c:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <rtiVC_SetImageDisplayFormat+0x10>)
 8006d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d60:	b103      	cbz	r3, 8006d64 <rtiVC_SetImageDisplayFormat+0x8>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->set_image_display_format(fmt, swap_image_3d_mode);
 8006d62:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006d64:	f06f 0001 	mvn.w	r0, #1
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20003890 	.word	0x20003890

08006d70 <rtiVC_GetLedDuty>:
 *       use VC_LED_DUTY_TO_PERCENTAGE macro.
 *
 */
int rtiVC_GetLedDuty(E_VC_PANEL_CTRL_PORT_T ctrl_port,
					VC_LED_DUTY_INFO_T info[MAX_NUM_VC_PANEL_PORT])
{
 8006d70:	b410      	push	{r4}
	int ret;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->get_led_duty) {
 8006d72:	4c07      	ldr	r4, [pc, #28]	; (8006d90 <rtiVC_GetLedDuty+0x20>)
 8006d74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006d76:	b12b      	cbz	r3, 8006d84 <rtiVC_GetLedDuty+0x14>
 8006d78:	460a      	mov	r2, r1
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->get_led_duty(dev, ctrl_port, info);
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	1d20      	adds	r0, r4, #4
		EMSG("Interface function is NULL\n");
		ret = -1;
	}

	return ret;
}
 8006d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
		ret = dev->get_led_duty(dev, ctrl_port, info);
 8006d82:	4718      	bx	r3
}
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20003890 	.word	0x20003890

08006d94 <rtiVC_StepDownLedDuty>:
 *
 */
int rtiVC_StepDownLedDuty(E_VC_PANEL_CTRL_PORT_T ctrl_port,
						VC_LED_DUTY_INFO_T applied_duty[MAX_NUM_VC_PANEL_PORT],
							E_VC_LED_CTRL_COLOR_T color)
{
 8006d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	VC_LED_DUTY_INFO_T new_duty[MAX_NUM_VC_PANEL_PORT] = {
 8006d98:	4c32      	ldr	r4, [pc, #200]	; (8006e64 <rtiVC_StepDownLedDuty+0xd0>)
	if (!dev->fill_step_value) {
 8006d9a:	4f33      	ldr	r7, [pc, #204]	; (8006e68 <rtiVC_StepDownLedDuty+0xd4>)
{
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	460e      	mov	r6, r1
 8006da0:	4690      	mov	r8, r2
	VC_LED_DUTY_INFO_T new_duty[MAX_NUM_VC_PANEL_PORT] = {
 8006da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 8006da4:	b086      	sub	sp, #24
	VC_LED_DUTY_INFO_T new_duty[MAX_NUM_VC_PANEL_PORT] = {
 8006da6:	46ec      	mov	ip, sp
 8006da8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006dac:	e894 0003 	ldmia.w	r4, {r0, r1}
	if (!dev->fill_step_value) {
 8006db0:	f8d7 9068 	ldr.w	r9, [r7, #104]	; 0x68
	VC_LED_DUTY_INFO_T new_duty[MAX_NUM_VC_PANEL_PORT] = {
 8006db4:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (!dev->fill_step_value) {
 8006db8:	f1b9 0f00 	cmp.w	r9, #0
 8006dbc:	d04c      	beq.n	8006e58 <rtiVC_StepDownLedDuty+0xc4>
	if (!dev->set_led_duty) {
 8006dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d04c      	beq.n	8006e5e <rtiVC_StepDownLedDuty+0xca>
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8006dc4:	f015 0401 	ands.w	r4, r5, #1
 8006dc8:	fa5f fa85 	uxtb.w	sl, r5
 8006dcc:	d009      	beq.n	8006de2 <rtiVC_StepDownLedDuty+0x4e>
		applied_duty[0] = dev->led_duty_info[0];
 8006dce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006dd6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		dev->fill_step_value(&new_duty[0], color, up, &dev->led_duty_info[0]);
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4641      	mov	r1, r8
 8006dde:	4668      	mov	r0, sp
 8006de0:	47c8      	blx	r9
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8006de2:	f01a 0a02 	ands.w	sl, sl, #2
 8006de6:	d00c      	beq.n	8006e02 <rtiVC_StepDownLedDuty+0x6e>
		applied_duty[1] = dev->led_duty_info[1];
 8006de8:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <rtiVC_StepDownLedDuty+0xd8>)
		dev->fill_step_value(&new_duty[1], color, up, &dev->led_duty_info[1]);
 8006dea:	f8d7 9068 	ldr.w	r9, [r7, #104]	; 0x68
		applied_duty[1] = dev->led_duty_info[1];
 8006dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006df2:	f106 0c0c 	add.w	ip, r6, #12
 8006df6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		dev->fill_step_value(&new_duty[1], color, up, &dev->led_duty_info[1]);
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	a803      	add	r0, sp, #12
 8006e00:	47c8      	blx	r9
	ret = dev->set_led_duty(ctrl_port, color, new_duty);
 8006e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e04:	466a      	mov	r2, sp
 8006e06:	4641      	mov	r1, r8
 8006e08:	4628      	mov	r0, r5
 8006e0a:	4798      	blx	r3
	if (ret == 0) {
 8006e0c:	bb08      	cbnz	r0, 8006e52 <rtiVC_StepDownLedDuty+0xbe>
		if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8006e0e:	b174      	cbz	r4, 8006e2e <rtiVC_StepDownLedDuty+0x9a>
			if (new_duty[port].R != -1) {
 8006e10:	9b00      	ldr	r3, [sp, #0]
 8006e12:	1c59      	adds	r1, r3, #1
				dev->led_duty_info[port].R = new_duty[port].R; /* Update */
 8006e14:	bf1c      	itt	ne
 8006e16:	653b      	strne	r3, [r7, #80]	; 0x50
				applied_duty[port].R = new_duty[port].R;
 8006e18:	6033      	strne	r3, [r6, #0]
			if (new_duty[port].G != -1) {
 8006e1a:	9b01      	ldr	r3, [sp, #4]
 8006e1c:	1c5a      	adds	r2, r3, #1
				dev->led_duty_info[port].G = new_duty[port].G; /* Update */
 8006e1e:	bf1c      	itt	ne
 8006e20:	657b      	strne	r3, [r7, #84]	; 0x54
				applied_duty[port].G = new_duty[port].G;
 8006e22:	6073      	strne	r3, [r6, #4]
			if (new_duty[port].B != -1) {
 8006e24:	9b02      	ldr	r3, [sp, #8]
 8006e26:	1c5d      	adds	r5, r3, #1
				dev->led_duty_info[port].B = new_duty[port].B; /* Update */
 8006e28:	bf1c      	itt	ne
 8006e2a:	65bb      	strne	r3, [r7, #88]	; 0x58
				applied_duty[port].B = new_duty[port].B;
 8006e2c:	60b3      	strne	r3, [r6, #8]
		if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8006e2e:	f1ba 0f00 	cmp.w	sl, #0
 8006e32:	d00e      	beq.n	8006e52 <rtiVC_StepDownLedDuty+0xbe>
			if (new_duty[port].R != -1) {
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	1c5c      	adds	r4, r3, #1
				dev->led_duty_info[port].R = new_duty[port].R; /* Update */
 8006e38:	bf1c      	itt	ne
 8006e3a:	65fb      	strne	r3, [r7, #92]	; 0x5c
				applied_duty[port].R = new_duty[port].R;
 8006e3c:	60f3      	strne	r3, [r6, #12]
			if (new_duty[port].G != -1) {
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	1c59      	adds	r1, r3, #1
				dev->led_duty_info[port].G = new_duty[port].G; /* Update */
 8006e42:	bf1c      	itt	ne
 8006e44:	663b      	strne	r3, [r7, #96]	; 0x60
				applied_duty[port].G = new_duty[port].G;
 8006e46:	6133      	strne	r3, [r6, #16]
			if (new_duty[port].B != -1) {
 8006e48:	9b05      	ldr	r3, [sp, #20]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	d001      	beq.n	8006e52 <rtiVC_StepDownLedDuty+0xbe>
				dev->led_duty_info[port].B = new_duty[port].B; /* Update */
 8006e4e:	667b      	str	r3, [r7, #100]	; 0x64
				applied_duty[port].B = new_duty[port].B;
 8006e50:	6173      	str	r3, [r6, #20]
	ret = step_led_duty(dev, ctrl_port, applied_duty, color, FALSE);

	VC_MUTEX_FREE(&vc_dev_access_lock);

	return ret;
}
 8006e52:	b006      	add	sp, #24
 8006e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	e7f9      	b.n	8006e52 <rtiVC_StepDownLedDuty+0xbe>
		return -2;
 8006e5e:	f06f 0001 	mvn.w	r0, #1
	return ret;
 8006e62:	e7f6      	b.n	8006e52 <rtiVC_StepDownLedDuty+0xbe>
 8006e64:	08016360 	.word	0x08016360
 8006e68:	20003890 	.word	0x20003890
 8006e6c:	200038ec 	.word	0x200038ec

08006e70 <rtiVC_StepUpLedDuty>:
 *
 */
int rtiVC_StepUpLedDuty(E_VC_PANEL_CTRL_PORT_T ctrl_port,
						VC_LED_DUTY_INFO_T applied_duty[MAX_NUM_VC_PANEL_PORT], 
						E_VC_LED_CTRL_COLOR_T color)
{
 8006e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	VC_LED_DUTY_INFO_T new_duty[MAX_NUM_VC_PANEL_PORT] = {
 8006e74:	4c32      	ldr	r4, [pc, #200]	; (8006f40 <rtiVC_StepUpLedDuty+0xd0>)
	if (!dev->fill_step_value) {
 8006e76:	4f33      	ldr	r7, [pc, #204]	; (8006f44 <rtiVC_StepUpLedDuty+0xd4>)
{
 8006e78:	4605      	mov	r5, r0
 8006e7a:	460e      	mov	r6, r1
 8006e7c:	4690      	mov	r8, r2
	VC_LED_DUTY_INFO_T new_duty[MAX_NUM_VC_PANEL_PORT] = {
 8006e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 8006e80:	b086      	sub	sp, #24
	VC_LED_DUTY_INFO_T new_duty[MAX_NUM_VC_PANEL_PORT] = {
 8006e82:	46ec      	mov	ip, sp
 8006e84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006e88:	e894 0003 	ldmia.w	r4, {r0, r1}
	if (!dev->fill_step_value) {
 8006e8c:	f8d7 9068 	ldr.w	r9, [r7, #104]	; 0x68
	VC_LED_DUTY_INFO_T new_duty[MAX_NUM_VC_PANEL_PORT] = {
 8006e90:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (!dev->fill_step_value) {
 8006e94:	f1b9 0f00 	cmp.w	r9, #0
 8006e98:	d04c      	beq.n	8006f34 <rtiVC_StepUpLedDuty+0xc4>
	if (!dev->set_led_duty) {
 8006e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d04c      	beq.n	8006f3a <rtiVC_StepUpLedDuty+0xca>
	if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8006ea0:	f015 0401 	ands.w	r4, r5, #1
 8006ea4:	fa5f fa85 	uxtb.w	sl, r5
 8006ea8:	d009      	beq.n	8006ebe <rtiVC_StepUpLedDuty+0x4e>
		applied_duty[0] = dev->led_duty_info[0];
 8006eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006eb2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		dev->fill_step_value(&new_duty[0], color, up, &dev->led_duty_info[0]);
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4641      	mov	r1, r8
 8006eba:	4668      	mov	r0, sp
 8006ebc:	47c8      	blx	r9
	if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8006ebe:	f01a 0a02 	ands.w	sl, sl, #2
 8006ec2:	d00c      	beq.n	8006ede <rtiVC_StepUpLedDuty+0x6e>
		applied_duty[1] = dev->led_duty_info[1];
 8006ec4:	4b20      	ldr	r3, [pc, #128]	; (8006f48 <rtiVC_StepUpLedDuty+0xd8>)
		dev->fill_step_value(&new_duty[1], color, up, &dev->led_duty_info[1]);
 8006ec6:	f8d7 9068 	ldr.w	r9, [r7, #104]	; 0x68
		applied_duty[1] = dev->led_duty_info[1];
 8006eca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ece:	f106 0c0c 	add.w	ip, r6, #12
 8006ed2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		dev->fill_step_value(&new_duty[1], color, up, &dev->led_duty_info[1]);
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4641      	mov	r1, r8
 8006eda:	a803      	add	r0, sp, #12
 8006edc:	47c8      	blx	r9
	ret = dev->set_led_duty(ctrl_port, color, new_duty);
 8006ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ee0:	466a      	mov	r2, sp
 8006ee2:	4641      	mov	r1, r8
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	4798      	blx	r3
	if (ret == 0) {
 8006ee8:	bb08      	cbnz	r0, 8006f2e <rtiVC_StepUpLedDuty+0xbe>
		if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8006eea:	b174      	cbz	r4, 8006f0a <rtiVC_StepUpLedDuty+0x9a>
			if (new_duty[port].R != -1) {
 8006eec:	9b00      	ldr	r3, [sp, #0]
 8006eee:	1c59      	adds	r1, r3, #1
				dev->led_duty_info[port].R = new_duty[port].R; /* Update */
 8006ef0:	bf1c      	itt	ne
 8006ef2:	653b      	strne	r3, [r7, #80]	; 0x50
				applied_duty[port].R = new_duty[port].R;
 8006ef4:	6033      	strne	r3, [r6, #0]
			if (new_duty[port].G != -1) {
 8006ef6:	9b01      	ldr	r3, [sp, #4]
 8006ef8:	1c5a      	adds	r2, r3, #1
				dev->led_duty_info[port].G = new_duty[port].G; /* Update */
 8006efa:	bf1c      	itt	ne
 8006efc:	657b      	strne	r3, [r7, #84]	; 0x54
				applied_duty[port].G = new_duty[port].G;
 8006efe:	6073      	strne	r3, [r6, #4]
			if (new_duty[port].B != -1) {
 8006f00:	9b02      	ldr	r3, [sp, #8]
 8006f02:	1c5d      	adds	r5, r3, #1
				dev->led_duty_info[port].B = new_duty[port].B; /* Update */
 8006f04:	bf1c      	itt	ne
 8006f06:	65bb      	strne	r3, [r7, #88]	; 0x58
				applied_duty[port].B = new_duty[port].B;
 8006f08:	60b3      	strne	r3, [r6, #8]
		if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8006f0a:	f1ba 0f00 	cmp.w	sl, #0
 8006f0e:	d00e      	beq.n	8006f2e <rtiVC_StepUpLedDuty+0xbe>
			if (new_duty[port].R != -1) {
 8006f10:	9b03      	ldr	r3, [sp, #12]
 8006f12:	1c5c      	adds	r4, r3, #1
				dev->led_duty_info[port].R = new_duty[port].R; /* Update */
 8006f14:	bf1c      	itt	ne
 8006f16:	65fb      	strne	r3, [r7, #92]	; 0x5c
				applied_duty[port].R = new_duty[port].R;
 8006f18:	60f3      	strne	r3, [r6, #12]
			if (new_duty[port].G != -1) {
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	1c59      	adds	r1, r3, #1
				dev->led_duty_info[port].G = new_duty[port].G; /* Update */
 8006f1e:	bf1c      	itt	ne
 8006f20:	663b      	strne	r3, [r7, #96]	; 0x60
				applied_duty[port].G = new_duty[port].G;
 8006f22:	6133      	strne	r3, [r6, #16]
			if (new_duty[port].B != -1) {
 8006f24:	9b05      	ldr	r3, [sp, #20]
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	d001      	beq.n	8006f2e <rtiVC_StepUpLedDuty+0xbe>
				dev->led_duty_info[port].B = new_duty[port].B; /* Update */
 8006f2a:	667b      	str	r3, [r7, #100]	; 0x64
				applied_duty[port].B = new_duty[port].B;
 8006f2c:	6173      	str	r3, [r6, #20]
	ret = step_led_duty(dev, ctrl_port, applied_duty, color, TRUE);

	VC_MUTEX_FREE(&vc_dev_access_lock);

	return ret;
}
 8006f2e:	b006      	add	sp, #24
 8006f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	e7f9      	b.n	8006f2e <rtiVC_StepUpLedDuty+0xbe>
		return -2;
 8006f3a:	f06f 0001 	mvn.w	r0, #1
	return ret;
 8006f3e:	e7f6      	b.n	8006f2e <rtiVC_StepUpLedDuty+0xbe>
 8006f40:	08016360 	.word	0x08016360
 8006f44:	20003890 	.word	0x20003890
 8006f48:	200038ec 	.word	0x200038ec

08006f4c <rtiVC_GetFrameRate>:
S32_T rtiVC_GetFrameRate(void)
{
	S32_T ret;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->get_frame_rate) {
 8006f4c:	4803      	ldr	r0, [pc, #12]	; (8006f5c <rtiVC_GetFrameRate+0x10>)
 8006f4e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006f50:	b10b      	cbz	r3, 8006f56 <rtiVC_GetFrameRate+0xa>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->get_frame_rate(dev);
 8006f52:	3004      	adds	r0, #4
 8006f54:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -1;
	}

	return ret;
}
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	4770      	bx	lr
 8006f5c:	20003890 	.word	0x20003890

08006f60 <rtiVC_StepDownFrameRate>:
S32_T rtiVC_StepDownFrameRate(void)
{
	S32_T ret;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->step_frame_rate) {
 8006f60:	4804      	ldr	r0, [pc, #16]	; (8006f74 <rtiVC_StepDownFrameRate+0x14>)
 8006f62:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006f64:	b113      	cbz	r3, 8006f6c <rtiVC_StepDownFrameRate+0xc>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->step_frame_rate(dev, FALSE);
 8006f66:	2100      	movs	r1, #0
 8006f68:	3004      	adds	r0, #4
 8006f6a:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -1;
	}

	return ret;
}
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20003890 	.word	0x20003890

08006f78 <rtiVC_StepUpFrameRate>:
S32_T rtiVC_StepUpFrameRate(void)
{
	S32_T ret;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->step_frame_rate) {
 8006f78:	4804      	ldr	r0, [pc, #16]	; (8006f8c <rtiVC_StepUpFrameRate+0x14>)
 8006f7a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006f7c:	b113      	cbz	r3, 8006f84 <rtiVC_StepUpFrameRate+0xc>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->step_frame_rate(dev, TRUE);
 8006f7e:	2101      	movs	r1, #1
 8006f80:	3004      	adds	r0, #4
 8006f82:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -1;
	}

	return ret;
}
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20003890 	.word	0x20003890

08006f90 <rtiVC_ConfirmLedControl>:
int rtiVC_ConfirmLedControl(E_VC_RDC_INDEX_T rdc_idx)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->confirm_led_control) {
 8006f90:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <rtiVC_ConfirmLedControl+0x10>)
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	b103      	cbz	r3, 8006f98 <rtiVC_ConfirmLedControl+0x8>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->confirm_led_control(rdc_idx);
 8006f96:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006f98:	f06f 0001 	mvn.w	r0, #1
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20003890 	.word	0x20003890

08006fa4 <rtiVC_ReqeustLedControl>:
 *
 */
int rtiVC_ReqeustLedControl(E_VC_RDC_INDEX_T rdc_idx,
							E_VC_PANEL_CTRL_PORT_T ctrl_port,
							VC_LED_CTRL_INFO_T *led_ctrl_info)
{
 8006fa4:	b410      	push	{r4}
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	VC_MUTEX_LOCK(&vc_dev_access_lock);

	if (led_ctrl_info->mode == VC_LED_CTRL_MODE_BRIGHTNESS) {
 8006fa6:	7814      	ldrb	r4, [r2, #0]
 8006fa8:	b944      	cbnz	r4, 8006fbc <rtiVC_ReqeustLedControl+0x18>
		if (dev->request_led_brightness_mode) {
 8006faa:	4613      	mov	r3, r2
 8006fac:	4a0a      	ldr	r2, [pc, #40]	; (8006fd8 <rtiVC_ReqeustLedControl+0x34>)
 8006fae:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8006fb0:	b154      	cbz	r4, 8006fc8 <rtiVC_ReqeustLedControl+0x24>
			ret = dev->request_led_brightness_mode(rdc_idx, ctrl_port,
 8006fb2:	785a      	ldrb	r2, [r3, #1]
 8006fb4:	4623      	mov	r3, r4
	}

	VC_MUTEX_FREE(&vc_dev_access_lock);

	return ret;
}
 8006fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
			ret = dev->request_led_brightness_mode(rdc_idx, ctrl_port,
 8006fba:	4718      	bx	r3
		if (dev->request_led_color_mode) {
 8006fbc:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <rtiVC_ReqeustLedControl+0x34>)
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc0:	b13b      	cbz	r3, 8006fd2 <rtiVC_ReqeustLedControl+0x2e>
}
 8006fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
			ret = dev->request_led_color_mode(rdc_idx, ctrl_port, led_ctrl_info);
 8006fc6:	4718      	bx	r3
			ret = -2;
 8006fc8:	f06f 0001 	mvn.w	r0, #1
}
 8006fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd0:	4770      	bx	lr
			ret = -3;
 8006fd2:	f06f 0002 	mvn.w	r0, #2
	return ret;
 8006fd6:	e7f9      	b.n	8006fcc <rtiVC_ReqeustLedControl+0x28>
 8006fd8:	20003890 	.word	0x20003890

08006fdc <rtiVC_ShiftHorizontalPixel>:
							E_VC_SHIFT_HORIZONTAL_T h_direction)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->shift_horizontal_pixel) {
 8006fdc:	4b03      	ldr	r3, [pc, #12]	; (8006fec <rtiVC_ShiftHorizontalPixel+0x10>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	b103      	cbz	r3, 8006fe4 <rtiVC_ShiftHorizontalPixel+0x8>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->shift_horizontal_pixel(ctrl_port, h_direction);
 8006fe2:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006fe4:	f06f 0001 	mvn.w	r0, #1
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20003890 	.word	0x20003890

08006ff0 <rtiVC_ShiftVerticalPixel>:
						E_VC_SHIFT_VERTICAL_T v_direction)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->shift_vertical_pixel) {
 8006ff0:	4b03      	ldr	r3, [pc, #12]	; (8007000 <rtiVC_ShiftVerticalPixel+0x10>)
 8006ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff4:	b103      	cbz	r3, 8006ff8 <rtiVC_ShiftVerticalPixel+0x8>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->shift_vertical_pixel(ctrl_port, v_direction);
 8006ff6:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8006ff8:	f06f 0001 	mvn.w	r0, #1
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20003890 	.word	0x20003890

08007004 <rtiVC_GenerateTestPattern>:
int rtiVC_GenerateTestPattern(U8_T R, U8_T G, U8_T B)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->generate_test_pattern) {
 8007004:	4b08      	ldr	r3, [pc, #32]	; (8007028 <rtiVC_GenerateTestPattern+0x24>)
{
 8007006:	b410      	push	{r4}
	if (dev->generate_test_pattern) {
 8007008:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800700a:	b154      	cbz	r4, 8007022 <rtiVC_GenerateTestPattern+0x1e>
		if (vc_rdc_cb.test_pattern_enabled == FALSE) {
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	b11b      	cbz	r3, 8007018 <rtiVC_GenerateTestPattern+0x14>
			return -1;
		}

		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->generate_test_pattern(R, G, B);
 8007010:	4623      	mov	r3, r4
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8007012:	f85d 4b04 	ldr.w	r4, [sp], #4
		ret = dev->generate_test_pattern(R, G, B);
 8007016:	4718      	bx	r3
			return -1;
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
}
 800701c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007020:	4770      	bx	lr
		ret = -2;
 8007022:	f06f 0001 	mvn.w	r0, #1
 8007026:	e7f9      	b.n	800701c <rtiVC_GenerateTestPattern+0x18>
 8007028:	20003890 	.word	0x20003890

0800702c <rtiVC_EnableTestPattern>:
 *
 * @return 0 on success, otherwise returns a negative number.
 *
 */
int rtiVC_EnableTestPattern(BOOL_T en)
{
 800702c:	b538      	push	{r3, r4, r5, lr}
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->enable_test_pattern) {
 800702e:	4d05      	ldr	r5, [pc, #20]	; (8007044 <rtiVC_EnableTestPattern+0x18>)
 8007030:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007032:	b123      	cbz	r3, 800703e <rtiVC_EnableTestPattern+0x12>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->enable_test_pattern(en);
 8007034:	4604      	mov	r4, r0
 8007036:	4798      	blx	r3
		if (ret == 0)
 8007038:	b900      	cbnz	r0, 800703c <rtiVC_EnableTestPattern+0x10>
			vc_rdc_cb.test_pattern_enabled = en;
 800703a:	602c      	str	r4, [r5, #0]
		EMSG("Interface function is NULL\n");
		ret = -1;
	}

	return ret;
}
 800703c:	bd38      	pop	{r3, r4, r5, pc}
		ret = -1;
 800703e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20003890 	.word	0x20003890

08007048 <rtiVC_ChangeInputDisplayInterface>:
										VC_INPUT_DISPLAY_IF_CFG *cfg)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->change_input_display_interface) {
 8007048:	4b03      	ldr	r3, [pc, #12]	; (8007058 <rtiVC_ChangeInputDisplayInterface+0x10>)
 800704a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800704e:	b103      	cbz	r3, 8007052 <rtiVC_ChangeInputDisplayInterface+0xa>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->change_input_display_interface(dif, cfg);
 8007050:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -1;
	}

	return ret;
}
 8007052:	f04f 30ff 	mov.w	r0, #4294967295
 8007056:	4770      	bx	lr
 8007058:	20003890 	.word	0x20003890

0800705c <rtiVC_GetFirmwareVersion>:
int rtiVC_GetFirmwareVersion(U8_T *major_ver, U8_T *minor_ver, U8_T *rel_ver)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->get_fw_version) {
 800705c:	4b03      	ldr	r3, [pc, #12]	; (800706c <rtiVC_GetFirmwareVersion+0x10>)
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	b103      	cbz	r3, 8007064 <rtiVC_GetFirmwareVersion+0x8>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->get_fw_version(major_ver, minor_ver, rel_ver);
 8007062:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -1;
	}

	return ret;
}
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	20003890 	.word	0x20003890

08007070 <rtiVC_ReadFLASH>:
 *
 * @return 0 on success, otherwise returns a negative number.
 *
 */
int rtiVC_ReadFLASH(U32_T addr, U8_T *buf, UINT_T len)
{
 8007070:	b508      	push	{r3, lr}
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev;

	dev = &vc_rdc_cb.dev;

	if (dev->flash_read) {
 8007072:	4b05      	ldr	r3, [pc, #20]	; (8007088 <rtiVC_ReadFLASH+0x18>)
 8007074:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8007078:	b11b      	cbz	r3, 8007082 <rtiVC_ReadFLASH+0x12>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->flash_read(addr, buf, len);
 800707a:	4798      	blx	r3
		if (ret < 0) {
 800707c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 8007080:	bd08      	pop	{r3, pc}
		ret = -2;
 8007082:	f06f 0001 	mvn.w	r0, #1
}
 8007086:	bd08      	pop	{r3, pc}
 8007088:	20003890 	.word	0x20003890

0800708c <rtiVC_EraseSectorFLASH>:
 *
 * @return 0 on success, otherwise returns a negative number.
 *
 */
int rtiVC_EraseSectorFLASH(U32_T sector_addr)
{
 800708c:	b538      	push	{r3, r4, r5, lr}
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev;

	dev = &vc_rdc_cb.dev;

	if (dev->flash_erase_sector) {
 800708e:	4c0c      	ldr	r4, [pc, #48]	; (80070c0 <rtiVC_EraseSectorFLASH+0x34>)
 8007090:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 8007094:	b183      	cbz	r3, 80070b8 <rtiVC_EraseSectorFLASH+0x2c>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

        if (dev->flash_prepare)
 8007096:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
 800709a:	4605      	mov	r5, r0
 800709c:	b112      	cbz	r2, 80070a4 <rtiVC_EraseSectorFLASH+0x18>
            dev->flash_prepare();
 800709e:	4790      	blx	r2
        
		ret = dev->flash_erase_sector(sector_addr);
 80070a0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80070a4:	4628      	mov	r0, r5
 80070a6:	4798      	blx	r3
		if (ret < 0) {
			EMSG("[VC_DLOAD] Can't erase FLASH memory.\n");
			ret = -1;
		}

        if (dev->flash_finish)
 80070a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80070ac:	ea40 74e0 	orr.w	r4, r0, r0, asr #31
 80070b0:	b103      	cbz	r3, 80070b4 <rtiVC_EraseSectorFLASH+0x28>
            dev->flash_finish();
 80070b2:	4798      	blx	r3
		EMSG("Interface function is NULL\n");
		ret = -2;
	}

	return ret;
}
 80070b4:	4620      	mov	r0, r4
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
		ret = -2;
 80070b8:	f06f 0401 	mvn.w	r4, #1
	return ret;
 80070bc:	e7fa      	b.n	80070b4 <rtiVC_EraseSectorFLASH+0x28>
 80070be:	bf00      	nop
 80070c0:	20003890 	.word	0x20003890

080070c4 <rtiVC_GetRdcDeviceID>:
int rtiVC_GetRdcDeviceID(U16_T *chip_id, U16_T *rev_num)
{
	int ret = 0;
	VC_RDC_DEV_INFO_T *dev = &vc_rdc_cb.dev;

	if (dev->get_device_id) {
 80070c4:	4b03      	ldr	r3, [pc, #12]	; (80070d4 <rtiVC_GetRdcDeviceID+0x10>)
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	b103      	cbz	r3, 80070cc <rtiVC_GetRdcDeviceID+0x8>
		VC_MUTEX_LOCK(&vc_dev_access_lock);

		ret = dev->get_device_id(chip_id, rev_num);
 80070ca:	4718      	bx	r3
		EMSG("Interface function is NULL\n");
		ret = -1;
	}

	return ret;
}
 80070cc:	f04f 30ff 	mov.w	r0, #4294967295
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20003890 	.word	0x20003890

080070d8 <rtiVC_DeinitRDC>:
/**
 * @brief Denitializes RDC controller driver.
 */
void rtiVC_DeinitRDC(void)
{
	rtiVC_DeinitDownload();
 80070d8:	f7ff ba20 	b.w	800651c <rtiVC_DeinitDownload>

080070dc <rtiVC_InitRDC>:
 *
 * @return 0 on success, otherwise returns a negative number.
 *
 */
int rtiVC_InitRDC(void)
{
 80070dc:	b538      	push	{r3, r4, r5, lr}
	VC_RDC_DEV_INFO_T *dev;
	int ret = 0;

	memset(&vc_rdc_cb, 0, sizeof(vc_rdc_cb));
 80070de:	4c19      	ldr	r4, [pc, #100]	; (8007144 <rtiVC_InitRDC+0x68>)
 80070e0:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 80070e4:	2100      	movs	r1, #0
 80070e6:	4620      	mov	r0, r4
 80070e8:	f00b fe44 	bl	8012d74 <memset>
	for (i = 0; i < NUM_RDC_TEXT_DRAWER; i++)
		vc_rdc_cb.text_drawer_cb[i].drawer_id = i;
	}
	
#elif defined(CFG_MDC_RDC200A)
	ret = RDC200A_Probe(&vc_rdc_cb.dev);
 80070ec:	1d20      	adds	r0, r4, #4
 80070ee:	f7fd fcdb 	bl	8004aa8 <RDC200A_Probe>

	{
	int i;
	for (i = 0; i < NUM_VC_BMP_DRAWER; i++)
		vc_rdc_cb.bmp_drawer_cb[i].drawer_id = i;
 80070f2:	2100      	movs	r1, #0
 80070f4:	2301      	movs	r3, #1
 80070f6:	2202      	movs	r2, #2
 80070f8:	f884 1123 	strb.w	r1, [r4, #291]	; 0x123

	for (i = 0; i < NUM_RDC_TEXT_DRAWER; i++)
		vc_rdc_cb.text_drawer_cb[i].drawer_id = i;
 80070fc:	f884 1176 	strb.w	r1, [r4, #374]	; 0x176
 8007100:	2103      	movs	r1, #3
		vc_rdc_cb.bmp_drawer_cb[i].drawer_id = i;
 8007102:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
 8007106:	f884 2153 	strb.w	r2, [r4, #339]	; 0x153
		vc_rdc_cb.text_drawer_cb[i].drawer_id = i;
 800710a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
 800710e:	f884 21b6 	strb.w	r2, [r4, #438]	; 0x1b6
 8007112:	f884 11d6 	strb.w	r1, [r4, #470]	; 0x1d6

#else
	#error "Code not present"
#endif

	if (ret != 0)
 8007116:	4605      	mov	r5, r0
 8007118:	b978      	cbnz	r0, 800713a <rtiVC_InitRDC+0x5e>
		return ret;

	dev = &vc_rdc_cb.dev;

	if ((1<<dev->sector_size_shift) > MAX_VC_FLASH_SECTOR_SIZE) {
 800711a:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 800711e:	4093      	lsls	r3, r2
 8007120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007124:	dc0b      	bgt.n	800713e <rtiVC_InitRDC+0x62>
		EMSG("The sector size of FLASH is too big!\n");
		return -1;		
	}

	dev->led_duty_info[0].R = -1;
 8007126:	f04f 33ff 	mov.w	r3, #4294967295
	dev->led_duty_info[0].G = -1;
 800712a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
	dev->led_duty_info[0].B = -1;

	dev->led_duty_info[1].R = -1;
 800712e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
	dev->led_duty_info[1].G = -1;
	dev->led_duty_info[1].B = -1;
 8007132:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60

	rtiVC_InitDownload();
 8007136:	f7ff fa57 	bl	80065e8 <rtiVC_InitDownload>

	return 0;
}
 800713a:	4628      	mov	r0, r5
 800713c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;		
 800713e:	f04f 35ff 	mov.w	r5, #4294967295
 8007142:	e7fa      	b.n	800713a <rtiVC_InitRDC+0x5e>
 8007144:	20003890 	.word	0x20003890

08007148 <RDC_REG_MASK_SET>:
#define RDP_REG_SET_1(reg, val)\
	RDP_REG_SET(1, reg, val)

#elif defined(CFG_MDC_RDC200A)
void RDC_REG_MASK_SET(U16_T reg, U8_T mask, U8_T val)
{
 8007148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	U8_T tmp;

	tmp = (RDC_REG_GET(reg)|(U8_T)(mask))
 800714c:	4f0a      	ldr	r7, [pc, #40]	; (8007178 <RDC_REG_MASK_SET+0x30>)
{
 800714e:	460e      	mov	r6, r1
 8007150:	4605      	mov	r5, r0
	tmp = (RDC_REG_GET(reg)|(U8_T)(mask))
 8007152:	7839      	ldrb	r1, [r7, #0]
{
 8007154:	4614      	mov	r4, r2
	tmp = (RDC_REG_GET(reg)|(U8_T)(mask))
 8007156:	4602      	mov	r2, r0
 8007158:	2000      	movs	r0, #0
 800715a:	f7ff f98d 	bl	8006478 <rtiVC_ReadDevice16>
			& (U8_T)((~(mask))|(val));
 800715e:	ea64 0306 	orn	r3, r4, r6
	tmp = (RDC_REG_GET(reg)|(U8_T)(mask))
 8007162:	4330      	orrs	r0, r6
 8007164:	4003      	ands	r3, r0
	RDC_REG_SET(reg, tmp);
 8007166:	7839      	ldrb	r1, [r7, #0]
 8007168:	462a      	mov	r2, r5
 800716a:	b2db      	uxtb	r3, r3
}
 800716c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	RDC_REG_SET(reg, tmp);
 8007170:	2000      	movs	r0, #0
 8007172:	f7ff b995 	b.w	80064a0 <rtiVC_WriteDevice16>
 8007176:	bf00      	nop
 8007178:	2000001d 	.word	0x2000001d

0800717c <RDP_REG_SET>:

///////////// Panel I2C path via RDC200A ////////////////
#if 1
void RDP_REG_SET(int panel_port, U16_T reg, U8_T val)
{
 800717c:	b570      	push	{r4, r5, r6, lr}
#else
	#error "Code not present"
#endif	
	
	reg_0x550 = panel_port | (RDP_I2C_OP_WRITE<<2) | (addr_size<<3);
	RDC_REG_SET(0x0550, reg_0x550);
 800717e:	4d23      	ldr	r5, [pc, #140]	; (800720c <RDP_REG_SET+0x90>)
	reg_0x550 = panel_port | (RDP_I2C_OP_WRITE<<2) | (addr_size<<3);
 8007180:	f040 0308 	orr.w	r3, r0, #8
{
 8007184:	460c      	mov	r4, r1
 8007186:	4616      	mov	r6, r2
	RDC_REG_SET(0x0550, reg_0x550);
 8007188:	7829      	ldrb	r1, [r5, #0]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8007190:	2000      	movs	r0, #0
 8007192:	f7ff f985 	bl	80064a0 <rtiVC_WriteDevice16>

	RDC_REG_SET(0x0552, reg & 0xFF);
 8007196:	b2e3      	uxtb	r3, r4
 8007198:	7829      	ldrb	r1, [r5, #0]
 800719a:	f240 5252 	movw	r2, #1362	; 0x552
 800719e:	2000      	movs	r0, #0
 80071a0:	f7ff f97e 	bl	80064a0 <rtiVC_WriteDevice16>
#if (VC_RDP_REG_SIZE == 2)	
	RDC_REG_SET(0x0551, reg >> 8);
 80071a4:	0a23      	lsrs	r3, r4, #8
 80071a6:	7829      	ldrb	r1, [r5, #0]
 80071a8:	f240 5251 	movw	r2, #1361	; 0x551
 80071ac:	2000      	movs	r0, #0
 80071ae:	f7ff f977 	bl	80064a0 <rtiVC_WriteDevice16>
#endif
	
	RDC_REG_SET(0x0553, val);
 80071b2:	7829      	ldrb	r1, [r5, #0]
 80071b4:	4633      	mov	r3, r6
 80071b6:	f240 5253 	movw	r2, #1363	; 0x553
 80071ba:	2000      	movs	r0, #0
 80071bc:	f7ff f970 	bl	80064a0 <rtiVC_WriteDevice16>

	// set FW interrupt 
	RDC_REG_SET(0x05A4, 0x01); // INTR_SET<31:24> reg, [24]: button 0
 80071c0:	7829      	ldrb	r1, [r5, #0]
 80071c2:	2301      	movs	r3, #1
 80071c4:	f240 52a4 	movw	r2, #1444	; 0x5a4
 80071c8:	2000      	movs	r0, #0
 80071ca:	f7ff f969 	bl	80064a0 <rtiVC_WriteDevice16>

	/* Wait until done_flag is set. */
	VC_M_DELAY(1); // Minimum 1ms
 80071ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071d2:	f7ff f8db 	bl	800638c <rtiVC_DelayUs>
 80071d6:	24c8      	movs	r4, #200	; 0xc8
 80071d8:	e003      	b.n	80071e2 <RDP_REG_SET+0x66>
				EMSG("[RDP_%d] Register write error (%d)\n", panel_port, -err_flag);

			return;
		}

		VC_U_DELAY(500);
 80071da:	f7ff f8d7 	bl	800638c <rtiVC_DelayUs>
	} while (--retry_cnt);
 80071de:	3c01      	subs	r4, #1
 80071e0:	d013      	beq.n	800720a <RDP_REG_SET+0x8e>
		result_flags = RDC_REG_GET(0x0554);
 80071e2:	7829      	ldrb	r1, [r5, #0]
 80071e4:	f240 5254 	movw	r2, #1364	; 0x554
 80071e8:	2000      	movs	r0, #0
 80071ea:	f7ff f945 	bl	8006478 <rtiVC_ReadDevice16>
 80071ee:	4603      	mov	r3, r0
		if (result_flags & 0x01) { /* Check done_flag bit */
 80071f0:	07db      	lsls	r3, r3, #31
		VC_U_DELAY(500);
 80071f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		if (result_flags & 0x01) { /* Check done_flag bit */
 80071f6:	d5f0      	bpl.n	80071da <RDP_REG_SET+0x5e>
			RDC_REG_SET(0x0554, 0x00); /* Clear done_flag */
 80071f8:	2300      	movs	r3, #0
 80071fa:	7829      	ldrb	r1, [r5, #0]
 80071fc:	f240 5254 	movw	r2, #1364	; 0x554

	EMSG("[RDP_%d] Register write timeout\n", panel_port);
}
 8007200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			RDC_REG_SET(0x0554, 0x00); /* Clear done_flag */
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff b94b 	b.w	80064a0 <rtiVC_WriteDevice16>
}
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	2000001d 	.word	0x2000001d

08007210 <RDP_REG_GET>:

U8_T RDP_REG_GET(int panel_port, U16_T reg)
{
 8007210:	b570      	push	{r4, r5, r6, lr}
#else
	#error "Code not present"
#endif	

	reg_0x550 = panel_port | (RDP_I2C_OP_READ<<2) | (reg_size<<3);
	RDC_REG_SET(0x0550, reg_0x550);
 8007212:	4e24      	ldr	r6, [pc, #144]	; (80072a4 <RDP_REG_GET+0x94>)
	reg_0x550 = panel_port | (RDP_I2C_OP_READ<<2) | (reg_size<<3);
 8007214:	f040 000c 	orr.w	r0, r0, #12
{
 8007218:	460c      	mov	r4, r1
	RDC_REG_SET(0x0550, reg_0x550);
 800721a:	b2c3      	uxtb	r3, r0
 800721c:	7831      	ldrb	r1, [r6, #0]
 800721e:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8007222:	2000      	movs	r0, #0
 8007224:	f7ff f93c 	bl	80064a0 <rtiVC_WriteDevice16>

	RDC_REG_SET(0x0552, reg & 0xFF);
 8007228:	7831      	ldrb	r1, [r6, #0]
 800722a:	b2e3      	uxtb	r3, r4
 800722c:	f240 5252 	movw	r2, #1362	; 0x552
 8007230:	2000      	movs	r0, #0
 8007232:	f7ff f935 	bl	80064a0 <rtiVC_WriteDevice16>
#if (VC_RDP_REG_SIZE == 2)
	RDC_REG_SET(0x0551, reg >> 8);
 8007236:	7831      	ldrb	r1, [r6, #0]
 8007238:	0a23      	lsrs	r3, r4, #8
 800723a:	f240 5251 	movw	r2, #1361	; 0x551
 800723e:	2000      	movs	r0, #0
 8007240:	f7ff f92e 	bl	80064a0 <rtiVC_WriteDevice16>
#endif

	// set FW interrupt
	RDC_REG_SET(0x05A4, 0x01); // INTR_SET<31:24> reg, [24]: button 0
 8007244:	7831      	ldrb	r1, [r6, #0]
 8007246:	2301      	movs	r3, #1
 8007248:	f240 52a4 	movw	r2, #1444	; 0x5a4
 800724c:	2000      	movs	r0, #0
 800724e:	f7ff f927 	bl	80064a0 <rtiVC_WriteDevice16>

	/* Wait until done_flag is set. */
	VC_M_DELAY(1); // Minimum 1ms
 8007252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007256:	f7ff f899 	bl	800638c <rtiVC_DelayUs>
 800725a:	25c8      	movs	r5, #200	; 0xc8
 800725c:	e003      	b.n	8007266 <RDP_REG_GET+0x56>
				EMSG("[RDP_%d] Register read error (%d)\n", panel_port, -err_flag);

			return rdata;
		}

		VC_U_DELAY(500);
 800725e:	f7ff f895 	bl	800638c <rtiVC_DelayUs>
	} while (--retry_cnt);
 8007262:	3d01      	subs	r5, #1
 8007264:	d014      	beq.n	8007290 <RDP_REG_GET+0x80>
		result_flags = RDC_REG_GET(0x0554);
 8007266:	7831      	ldrb	r1, [r6, #0]
 8007268:	f240 5254 	movw	r2, #1364	; 0x554
 800726c:	2000      	movs	r0, #0
 800726e:	f7ff f903 	bl	8006478 <rtiVC_ReadDevice16>
 8007272:	4604      	mov	r4, r0
		VC_U_DELAY(500);
 8007274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		if (result_flags) {
 8007278:	2c00      	cmp	r4, #0
 800727a:	d0f0      	beq.n	800725e <RDP_REG_GET+0x4e>
			RDC_REG_SET(0x0554, 0x00); /* Clear done_flag bit */
 800727c:	2300      	movs	r3, #0
 800727e:	4618      	mov	r0, r3
 8007280:	7831      	ldrb	r1, [r6, #0]
 8007282:	f240 5254 	movw	r2, #1364	; 0x554
 8007286:	f7ff f90b 	bl	80064a0 <rtiVC_WriteDevice16>
			if (!err_flag)
 800728a:	f3c4 0047 	ubfx	r0, r4, #1, #8
 800728e:	b108      	cbz	r0, 8007294 <RDP_REG_GET+0x84>

	EMSG("[RDP_%d] Register read timeout\n", panel_port);
	return 0xFF;
}
 8007290:	20ff      	movs	r0, #255	; 0xff
 8007292:	bd70      	pop	{r4, r5, r6, pc}
				rdata = RDC_REG_GET(0x0553);
 8007294:	7831      	ldrb	r1, [r6, #0]
 8007296:	f240 5253 	movw	r2, #1363	; 0x553
}
 800729a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rdata = RDC_REG_GET(0x0553);
 800729e:	f7ff b8eb 	b.w	8006478 <rtiVC_ReadDevice16>
 80072a2:	bf00      	nop
 80072a4:	2000001d 	.word	0x2000001d

080072a8 <get_rgb_1color_value_from_user>:

	return -1;
}

static int get_rgb_1color_value_from_user(void)
{
 80072a8:	b530      	push	{r4, r5, lr}
 80072aa:	b09b      	sub	sp, #108	; 0x6c
		DMSG("Input 8-bit hex value , q(Quit): 0x");
#if 0
		fgets(read_buf, 100, stdin);
#endif

		token = strtok(read_buf, " \n\r");
 80072ac:	4916      	ldr	r1, [pc, #88]	; (8007308 <get_rgb_1color_value_from_user+0x60>)
 80072ae:	a801      	add	r0, sp, #4
 80072b0:	f00b fd7a 	bl	8012da8 <strtok>
		if (token == NULL)
 80072b4:	b1c8      	cbz	r0, 80072ea <get_rgb_1color_value_from_user+0x42>
			return -1;
//			continue;

		if (token[0] == 'q' || token[0] == 'Q')
 80072b6:	7803      	ldrb	r3, [r0, #0]
 80072b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80072bc:	2b51      	cmp	r3, #81	; 0x51
 80072be:	4605      	mov	r5, r0
 80072c0:	d01e      	beq.n	8007300 <get_rgb_1color_value_from_user+0x58>
			return -50;

		str_len = strlen(token);
 80072c2:	f7f8 ffd5 	bl	8000270 <strlen>
		if (str_len != 2) {
 80072c6:	2802      	cmp	r0, #2
 80072c8:	d10f      	bne.n	80072ea <get_rgb_1color_value_from_user+0x42>
 80072ca:	462c      	mov	r4, r5
		ch = toupper(*s++);
 80072cc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80072d0:	f00a fbb2 	bl	8011a38 <toupper>
		if (ch == 0) /* NULL char */
 80072d4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
		if ((ch < '0' || ch > '9') && (ch < 'A' || ch > 'F'))
 80072d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80072dc:	f1a0 0041 	sub.w	r0, r0, #65	; 0x41
		if (ch == 0) /* NULL char */
 80072e0:	d007      	beq.n	80072f2 <get_rgb_1color_value_from_user+0x4a>
		if ((ch < '0' || ch > '9') && (ch < 'A' || ch > 'F'))
 80072e2:	2b09      	cmp	r3, #9
 80072e4:	d9f2      	bls.n	80072cc <get_rgb_1color_value_from_user+0x24>
 80072e6:	2805      	cmp	r0, #5
 80072e8:	d9f0      	bls.n	80072cc <get_rgb_1color_value_from_user+0x24>
			return -1;
 80072ea:	f04f 30ff 	mov.w	r0, #4294967295
#if 0
	}
#endif

	return -1;
}
 80072ee:	b01b      	add	sp, #108	; 0x6c
 80072f0:	bd30      	pop	{r4, r5, pc}
			color_val = (int)strtol(token, &stopstring, 16);
 80072f2:	2210      	movs	r2, #16
 80072f4:	4669      	mov	r1, sp
 80072f6:	4628      	mov	r0, r5
 80072f8:	f00a fb94 	bl	8011a24 <strtol>
}
 80072fc:	b01b      	add	sp, #108	; 0x6c
 80072fe:	bd30      	pop	{r4, r5, pc}
			return -50;
 8007300:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8007304:	e7fa      	b.n	80072fc <get_rgb_1color_value_from_user+0x54>
 8007306:	bf00      	nop
 8007308:	08016960 	.word	0x08016960

0800730c <test_ShiftVerticalPixel>:
		if (ch == 'q' || ch == 'Q')
 800730c:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8007310:	2b51      	cmp	r3, #81	; 0x51
 8007312:	d003      	beq.n	800731c <test_ShiftVerticalPixel+0x10>
		if (ch == '+') {
 8007314:	282b      	cmp	r0, #43	; 0x2b
 8007316:	d002      	beq.n	800731e <test_ShiftVerticalPixel+0x12>
		else if (ch == '-') {
 8007318:	282d      	cmp	r0, #45	; 0x2d
 800731a:	d004      	beq.n	8007326 <test_ShiftVerticalPixel+0x1a>
}
 800731c:	4770      	bx	lr
			rtiVC_ShiftVerticalPixel((E_VC_PANEL_CTRL_PORT_T)ctrl_port, VC_SHIFT_VERTICAL_UP);
 800731e:	2100      	movs	r1, #0
 8007320:	2003      	movs	r0, #3
 8007322:	f7ff be65 	b.w	8006ff0 <rtiVC_ShiftVerticalPixel>
			rtiVC_ShiftVerticalPixel((E_VC_PANEL_CTRL_PORT_T)ctrl_port, VC_SHIFT_VERTICAL_DOWN);
 8007326:	2101      	movs	r1, #1
 8007328:	2003      	movs	r0, #3
 800732a:	f7ff be61 	b.w	8006ff0 <rtiVC_ShiftVerticalPixel>
 800732e:	bf00      	nop

08007330 <test_ShiftHorizontalPixel>:
		if (ch == 'q' || ch == 'Q')
 8007330:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8007334:	2b51      	cmp	r3, #81	; 0x51
 8007336:	d003      	beq.n	8007340 <test_ShiftHorizontalPixel+0x10>
		if (ch == '+') {
 8007338:	282b      	cmp	r0, #43	; 0x2b
 800733a:	d002      	beq.n	8007342 <test_ShiftHorizontalPixel+0x12>
		else if (ch == '-') {
 800733c:	282d      	cmp	r0, #45	; 0x2d
 800733e:	d004      	beq.n	800734a <test_ShiftHorizontalPixel+0x1a>
}
 8007340:	4770      	bx	lr
			rtiVC_ShiftHorizontalPixel((E_VC_PANEL_CTRL_PORT_T)ctrl_port, VC_SHIFT_HORIZONTAL_RIGHT);
 8007342:	2101      	movs	r1, #1
 8007344:	2003      	movs	r0, #3
 8007346:	f7ff be49 	b.w	8006fdc <rtiVC_ShiftHorizontalPixel>
			rtiVC_ShiftHorizontalPixel((E_VC_PANEL_CTRL_PORT_T)ctrl_port, VC_SHIFT_HORIZONTAL_LEFT);
 800734a:	2100      	movs	r1, #0
 800734c:	2003      	movs	r0, #3
 800734e:	f7ff be45 	b.w	8006fdc <rtiVC_ShiftHorizontalPixel>
 8007352:	bf00      	nop

08007354 <test_FrameRateControl>:
	}
#endif
}

void test_FrameRateControl(char ch)
{
 8007354:	b510      	push	{r4, lr}
 8007356:	4604      	mov	r4, r0
#endif
	int curr_frame_rate;
	int applied_frame_rate;
	double frame_rate_hz;

	curr_frame_rate = rtiVC_GetFrameRate();
 8007358:	f7ff fdf8 	bl	8006f4c <rtiVC_GetFrameRate>
#if 0
	while (1) {
		ch = _getch();
#endif

		if (ch == 'q' || ch == 'Q')
 800735c:	f004 03df 	and.w	r3, r4, #223	; 0xdf
 8007360:	2b51      	cmp	r3, #81	; 0x51
 8007362:	d003      	beq.n	800736c <test_FrameRateControl+0x18>
			return;

		if (ch == '+') {
 8007364:	2c2b      	cmp	r4, #43	; 0x2b
 8007366:	d002      	beq.n	800736e <test_FrameRateControl+0x1a>
			if (applied_frame_rate > 0) {
				frame_rate_hz = VC_FRAME_RATE_TO_HZ(applied_frame_rate);
				DMSG("Changed Frame Rate: %.3f Hz\n", frame_rate_hz);
			}
		}
		else if (ch == '-') {
 8007368:	2c2d      	cmp	r4, #45	; 0x2d
 800736a:	d004      	beq.n	8007376 <test_FrameRateControl+0x22>
			}
		}
#if 0
	}
#endif
}
 800736c:	bd10      	pop	{r4, pc}
 800736e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			applied_frame_rate = rtiVC_StepUpFrameRate();
 8007372:	f7ff be01 	b.w	8006f78 <rtiVC_StepUpFrameRate>
}
 8007376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			applied_frame_rate = rtiVC_StepDownFrameRate();
 800737a:	f7ff bdf1 	b.w	8006f60 <rtiVC_StepDownFrameRate>
 800737e:	bf00      	nop

08007380 <test_TestPattern>:
		FFLUSH;
		key = getc(stdin);				
		CLEAR_STDIN;
#endif
		
		switch(key)
 8007380:	2930      	cmp	r1, #48	; 0x30
 8007382:	d002      	beq.n	800738a <test_TestPattern+0xa>
 8007384:	2931      	cmp	r1, #49	; 0x31
 8007386:	d022      	beq.n	80073ce <test_TestPattern+0x4e>
 8007388:	4770      	bx	lr
{
 800738a:	b530      	push	{r4, r5, lr}
 800738c:	b09b      	sub	sp, #108	; 0x6c
		token = strtok(read_buf, " \n\r");
 800738e:	491d      	ldr	r1, [pc, #116]	; (8007404 <test_TestPattern+0x84>)
 8007390:	a801      	add	r0, sp, #4
 8007392:	f00b fd09 	bl	8012da8 <strtok>
		if (token == NULL)
 8007396:	4605      	mov	r5, r0
 8007398:	b338      	cbz	r0, 80073ea <test_TestPattern+0x6a>
		if (token[0] == 'q' || token[0] == 'Q')
 800739a:	7803      	ldrb	r3, [r0, #0]
 800739c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073a0:	2b51      	cmp	r3, #81	; 0x51
 80073a2:	d022      	beq.n	80073ea <test_TestPattern+0x6a>
		str_len = strlen(token);
 80073a4:	f7f8 ff64 	bl	8000270 <strlen>
		if (str_len != 6) {
 80073a8:	2806      	cmp	r0, #6
 80073aa:	d11e      	bne.n	80073ea <test_TestPattern+0x6a>
 80073ac:	462c      	mov	r4, r5
		ch = toupper(*s++);
 80073ae:	f814 0b01 	ldrb.w	r0, [r4], #1
 80073b2:	f00a fb41 	bl	8011a38 <toupper>
		if (ch == 0) /* NULL char */
 80073b6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
		if ((ch < '0' || ch > '9') && (ch < 'A' || ch > 'F'))
 80073ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80073be:	f1a0 0041 	sub.w	r0, r0, #65	; 0x41
		if (ch == 0) /* NULL char */
 80073c2:	d007      	beq.n	80073d4 <test_TestPattern+0x54>
		if ((ch < '0' || ch > '9') && (ch < 'A' || ch > 'F'))
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d9f2      	bls.n	80073ae <test_TestPattern+0x2e>
 80073c8:	2805      	cmp	r0, #5
 80073ca:	d9f0      	bls.n	80073ae <test_TestPattern+0x2e>
 80073cc:	e00d      	b.n	80073ea <test_TestPattern+0x6a>
				}
			}
			break;

		case '1':
			rtiVC_EnableTestPattern(FALSE);
 80073ce:	2000      	movs	r0, #0
 80073d0:	f7ff be2c 	b.w	800702c <rtiVC_EnableTestPattern>
			color_val = (int)strtol(token, &stopstring, 16);
 80073d4:	2210      	movs	r2, #16
 80073d6:	4669      	mov	r1, sp
 80073d8:	4628      	mov	r0, r5
 80073da:	f00a fb23 	bl	8011a24 <strtol>
			if (ret >= 0) {
 80073de:	1e04      	subs	r4, r0, #0
 80073e0:	db03      	blt.n	80073ea <test_TestPattern+0x6a>
				ret = rtiVC_EnableTestPattern(TRUE);
 80073e2:	2001      	movs	r0, #1
 80073e4:	f7ff fe22 	bl	800702c <rtiVC_EnableTestPattern>
				if (ret == 0) {
 80073e8:	b108      	cbz	r0, 80073ee <test_TestPattern+0x6e>

TEST_TP_EXIT:
	//rtiVC_EnableTestPattern(FALSE);

	return;
}
 80073ea:	b01b      	add	sp, #108	; 0x6c
 80073ec:	bd30      	pop	{r4, r5, pc}
					rtiVC_GenerateTestPattern(R, G, B);
 80073ee:	b2e2      	uxtb	r2, r4
 80073f0:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80073f4:	f3c4 4007 	ubfx	r0, r4, #16, #8
}
 80073f8:	b01b      	add	sp, #108	; 0x6c
 80073fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
					rtiVC_GenerateTestPattern(R, G, B);
 80073fe:	f7ff be01 	b.w	8007004 <rtiVC_GenerateTestPattern>
 8007402:	bf00      	nop
 8007404:	08016960 	.word	0x08016960

08007408 <test_Brightness>:
#if 0
	while (1) {
		ch = _getch();
#endif

		if (ch == 'q' || ch == 'Q')
 8007408:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 800740c:	2b51      	cmp	r3, #81	; 0x51
 800740e:	d003      	beq.n	8007418 <test_Brightness+0x10>
			return;

		if (ch == '+') {
 8007410:	282b      	cmp	r0, #43	; 0x2b
 8007412:	d002      	beq.n	800741a <test_Brightness+0x12>
			DMSG("Increase pressed\n");
			rtiVC_IncreaseBrightness();
		}
		else if (ch == '-') {
 8007414:	282d      	cmp	r0, #45	; 0x2d
 8007416:	d002      	beq.n	800741e <test_Brightness+0x16>
			rtiVC_DecreaseBrightness();
		}
#if 0
	}
#endif
}
 8007418:	4770      	bx	lr
			rtiVC_IncreaseBrightness();
 800741a:	f7ff b981 	b.w	8006720 <rtiVC_IncreaseBrightness>
			rtiVC_DecreaseBrightness();
 800741e:	f7ff b975 	b.w	800670c <rtiVC_DecreaseBrightness>
 8007422:	bf00      	nop

08007424 <test_RequestLEDcontrol>:

void test_RequestLEDcontrol(int key) // using Interrupt
{
 8007424:	b530      	push	{r4, r5, lr}
        switch(key)
 8007426:	f020 0320 	bic.w	r3, r0, #32
{
 800742a:	b09b      	sub	sp, #108	; 0x6c
        switch(key)
 800742c:	2832      	cmp	r0, #50	; 0x32
 800742e:	d00e      	beq.n	800744e <test_RequestLEDcontrol+0x2a>
 8007430:	dc09      	bgt.n	8007446 <test_RequestLEDcontrol+0x22>
 8007432:	2830      	cmp	r0, #48	; 0x30
 8007434:	d019      	beq.n	800746a <test_RequestLEDcontrol+0x46>
 8007436:	2831      	cmp	r0, #49	; 0x31
 8007438:	d1f8      	bne.n	800742c <test_RequestLEDcontrol+0x8>
			break;


		case '1':
			DMSG("Color mode: Red\n");
			color = get_rgb_1color_value_from_user();			
 800743a:	f7ff ff35 	bl	80072a8 <get_rgb_1color_value_from_user>
			if (color >= 0) {
 800743e:	1e03      	subs	r3, r0, #0
 8007440:	da4b      	bge.n	80074da <test_RequestLEDcontrol+0xb6>
	return;

#else
	EMSG("Unsupported!\n");
#endif
}
 8007442:	b01b      	add	sp, #108	; 0x6c
 8007444:	bd30      	pop	{r4, r5, pc}
        switch(key)
 8007446:	2b51      	cmp	r3, #81	; 0x51
 8007448:	d0fb      	beq.n	8007442 <test_RequestLEDcontrol+0x1e>
 800744a:	2832      	cmp	r0, #50	; 0x32
 800744c:	d1f0      	bne.n	8007430 <test_RequestLEDcontrol+0xc>
			color = get_rgb_1color_value_from_user();			
 800744e:	f7ff ff2b 	bl	80072a8 <get_rgb_1color_value_from_user>
			if (color >= 0) {
 8007452:	1e03      	subs	r3, r0, #0
 8007454:	dbf5      	blt.n	8007442 <test_RequestLEDcontrol+0x1e>
				ret = rtiVC_ReqeustLedControl(rdc_idx, ctrl_port, &led_ctrl_info);
 8007456:	aa01      	add	r2, sp, #4
 8007458:	2103      	movs	r1, #3
				led_ctrl_info.mode = VC_LED_CTRL_MODE_COLOR;
 800745a:	f240 2401 	movw	r4, #513	; 0x201
				ret = rtiVC_ReqeustLedControl(rdc_idx, ctrl_port, &led_ctrl_info);
 800745e:	2000      	movs	r0, #0
				led_ctrl_info.param.color.G = color;
 8007460:	f88d 3007 	strb.w	r3, [sp, #7]
				led_ctrl_info.mode = VC_LED_CTRL_MODE_COLOR;
 8007464:	f8ad 4004 	strh.w	r4, [sp, #4]
 8007468:	e02c      	b.n	80074c4 <test_RequestLEDcontrol+0xa0>
		token = strtok(read_buf, " \n\r");
 800746a:	4920      	ldr	r1, [pc, #128]	; (80074ec <test_RequestLEDcontrol+0xc8>)
 800746c:	a801      	add	r0, sp, #4
 800746e:	f00b fc9b 	bl	8012da8 <strtok>
		if (token == NULL)
 8007472:	4604      	mov	r4, r0
 8007474:	2800      	cmp	r0, #0
 8007476:	d0e4      	beq.n	8007442 <test_RequestLEDcontrol+0x1e>
		if (token[0] == 'q' || token[0] == 'Q')
 8007478:	7825      	ldrb	r5, [r4, #0]
 800747a:	f005 03df 	and.w	r3, r5, #223	; 0xdf
 800747e:	2b51      	cmp	r3, #81	; 0x51
 8007480:	d0df      	beq.n	8007442 <test_RequestLEDcontrol+0x1e>
	size_t i = 0;

	if (str[0] == '-') // minus notation
		i = 1; // skip

	for ( ; i < strlen(str); i++) {
 8007482:	f7f8 fef5 	bl	8000270 <strlen>
 8007486:	2d2d      	cmp	r5, #45	; 0x2d
 8007488:	bf0c      	ite	eq
 800748a:	4622      	moveq	r2, r4
 800748c:	1e62      	subne	r2, r4, #1
 800748e:	f1c4 0101 	rsb	r1, r4, #1
 8007492:	e004      	b.n	800749e <test_RequestLEDcontrol+0x7a>
		if (!isdigit(str[i]))
 8007494:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007498:	3b30      	subs	r3, #48	; 0x30
 800749a:	2b09      	cmp	r3, #9
 800749c:	d8d1      	bhi.n	8007442 <test_RequestLEDcontrol+0x1e>
	for ( ; i < strlen(str); i++) {
 800749e:	188b      	adds	r3, r1, r2
 80074a0:	4298      	cmp	r0, r3
 80074a2:	d8f7      	bhi.n	8007494 <test_RequestLEDcontrol+0x70>
			color_val = (int)strtol(token, &stopstring, 10);
 80074a4:	220a      	movs	r2, #10
 80074a6:	4669      	mov	r1, sp
 80074a8:	4620      	mov	r0, r4
 80074aa:	f00a fabb 	bl	8011a24 <strtol>
			if ((color_val < 0) || (color_val > 255)) {
 80074ae:	28ff      	cmp	r0, #255	; 0xff
			color_val = (int)strtol(token, &stopstring, 10);
 80074b0:	4603      	mov	r3, r0
			if ((color_val < 0) || (color_val > 255)) {
 80074b2:	d8c6      	bhi.n	8007442 <test_RequestLEDcontrol+0x1e>
				led_ctrl_info.mode = VC_LED_CTRL_MODE_BRIGHTNESS;
 80074b4:	2400      	movs	r4, #0
				ret = rtiVC_ReqeustLedControl(rdc_idx, ctrl_port, &led_ctrl_info);
 80074b6:	aa01      	add	r2, sp, #4
 80074b8:	2101      	movs	r1, #1
 80074ba:	4620      	mov	r0, r4
				led_ctrl_info.mode = VC_LED_CTRL_MODE_BRIGHTNESS;
 80074bc:	f88d 4004 	strb.w	r4, [sp, #4]
				brightness = color;
 80074c0:	f88d 3005 	strb.w	r3, [sp, #5]
				ret = rtiVC_ReqeustLedControl(rdc_idx, ctrl_port, &led_ctrl_info);
 80074c4:	f7ff fd6e 	bl	8006fa4 <rtiVC_ReqeustLedControl>
				VC_M_DELAY(2);
 80074c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80074cc:	f7fe ff5e 	bl	800638c <rtiVC_DelayUs>
				rtiVC_ConfirmLedControl(rdc_idx);				
 80074d0:	2000      	movs	r0, #0
 80074d2:	f7ff fd5d 	bl	8006f90 <rtiVC_ConfirmLedControl>
}
 80074d6:	b01b      	add	sp, #108	; 0x6c
 80074d8:	bd30      	pop	{r4, r5, pc}
				ret = rtiVC_ReqeustLedControl(rdc_idx, ctrl_port, &led_ctrl_info);
 80074da:	aa01      	add	r2, sp, #4
 80074dc:	2102      	movs	r1, #2
				led_ctrl_info.mode = VC_LED_CTRL_MODE_COLOR;
 80074de:	f240 1401 	movw	r4, #257	; 0x101
				ret = rtiVC_ReqeustLedControl(rdc_idx, ctrl_port, &led_ctrl_info);
 80074e2:	2000      	movs	r0, #0
				led_ctrl_info.param.color.R = color;
 80074e4:	f88d 3006 	strb.w	r3, [sp, #6]
				led_ctrl_info.param.color.ctrl = VC_LED_CTRL_COLOR_R;
 80074e8:	e7bc      	b.n	8007464 <test_RequestLEDcontrol+0x40>
 80074ea:	bf00      	nop
 80074ec:	08016960 	.word	0x08016960

080074f0 <test_ImageDisplayFormat>:
		FFLUSH;
		key = getc(stdin);
		CLEAR_STDIN;
#endif
		
		switch(key)
 80074f0:	3830      	subs	r0, #48	; 0x30
 80074f2:	2805      	cmp	r0, #5
 80074f4:	d806      	bhi.n	8007504 <test_ImageDisplayFormat+0x14>
 80074f6:	e8df f000 	tbb	[pc, r0]
 80074fa:	030b      	.short	0x030b
 80074fc:	0619140f 	.word	0x0619140f
			while(1) {
				DMSG("Swap select (0: None, 1: Swap) : ");
				scanf("%u" , &swap_image_3d_mode);
                CLEAR_STDIN;
#endif
				if ((swap_image_3d_mode != 0) && (swap_image_3d_mode != 1)) {
 8007500:	2901      	cmp	r1, #1
 8007502:	d918      	bls.n	8007536 <test_ImageDisplayFormat+0x46>
#endif

TEST_TP_EXIT:

	return;
}
 8007504:	4770      	bx	lr
				if ((swap_image_3d_mode == 0) || (swap_image_3d_mode == 1))
 8007506:	2901      	cmp	r1, #1
 8007508:	d9fc      	bls.n	8007504 <test_ImageDisplayFormat+0x14>
			rtiVC_SetImageDisplayFormat(VC_IMAGE_DISPLAY_FORMAT_3D_FBF_EX_SIG,
 800750a:	2005      	movs	r0, #5
 800750c:	f7ff bc26 	b.w	8006d5c <rtiVC_SetImageDisplayFormat>
			rtiVC_SetImageDisplayFormat(VC_IMAGE_DISPLAY_FORMAT_2D, 0);
 8007510:	2100      	movs	r1, #0
 8007512:	4608      	mov	r0, r1
 8007514:	f7ff bc22 	b.w	8006d5c <rtiVC_SetImageDisplayFormat>
				if ((swap_image_3d_mode == 0) || (swap_image_3d_mode == 1))
 8007518:	2901      	cmp	r1, #1
 800751a:	d9f3      	bls.n	8007504 <test_ImageDisplayFormat+0x14>
			rtiVC_SetImageDisplayFormat(VC_IMAGE_DISPLAY_FORMAT_3D_TAB,
 800751c:	2002      	movs	r0, #2
 800751e:	f7ff bc1d 	b.w	8006d5c <rtiVC_SetImageDisplayFormat>
				if ((swap_image_3d_mode == 0) || (swap_image_3d_mode == 1))
 8007522:	2901      	cmp	r1, #1
 8007524:	d9ee      	bls.n	8007504 <test_ImageDisplayFormat+0x14>
			rtiVC_SetImageDisplayFormat(VC_IMAGE_DISPLAY_FORMAT_3D_SBS_LL,
 8007526:	2003      	movs	r0, #3
 8007528:	f7ff bc18 	b.w	8006d5c <rtiVC_SetImageDisplayFormat>
				if ((swap_image_3d_mode == 0) || (swap_image_3d_mode == 1))
 800752c:	2901      	cmp	r1, #1
 800752e:	d9e9      	bls.n	8007504 <test_ImageDisplayFormat+0x14>
			rtiVC_SetImageDisplayFormat(VC_IMAGE_DISPLAY_FORMAT_3D_FBF,
 8007530:	2004      	movs	r0, #4
 8007532:	f7ff bc13 	b.w	8006d5c <rtiVC_SetImageDisplayFormat>
			rtiVC_SetImageDisplayFormat(VC_IMAGE_DISPLAY_FORMAT_3D_SBS,
 8007536:	2001      	movs	r0, #1
 8007538:	f7ff bc10 	b.w	8006d5c <rtiVC_SetImageDisplayFormat>

0800753c <test_TemperatureSensorCalibration>:
		FFLUSH;
		key = getc(stdin);				
		CLEAR_STDIN;
#endif
		
		switch (key) {
 800753c:	2930      	cmp	r1, #48	; 0x30
 800753e:	d000      	beq.n	8007542 <test_TemperatureSensorCalibration+0x6>
 8007540:	4770      	bx	lr
{
 8007542:	b500      	push	{lr}
 8007544:	b08b      	sub	sp, #44	; 0x2c
		case '0':
			DMSG("Get Temperature\n");
			ret = rtiVC_GetTemperature(ctrl_port, tinfo);
 8007546:	4669      	mov	r1, sp
 8007548:	2003      	movs	r0, #3
 800754a:	f7ff f8f3 	bl	8006734 <rtiVC_GetTemperature>
#endif

TEST_EXIT:

	return;
}
 800754e:	b00b      	add	sp, #44	; 0x2c
 8007550:	f85d fb04 	ldr.w	pc, [sp], #4

08007554 <vc_dload_proc_callback>:

void vc_dload_proc_callback(E_VC_DLOAD_STATUS_T status,
							E_VC_LUT_CLASS_T lut_class,
							U8_T *pgm_data_buf_ptr,
							U16_T processed_item_cnt, U16_T total_item)
{
 8007554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007558:	b0a3      	sub	sp, #140	; 0x8c
 800755a:	4615      	mov	r5, r2
 800755c:	f8bd 60a8 	ldrh.w	r6, [sp, #168]	; 0xa8
 8007560:	461c      	mov	r4, r3
	int progress_val;
	char str_buf[128];

	switch (status) {
 8007562:	2809      	cmp	r0, #9
 8007564:	d814      	bhi.n	8007590 <vc_dload_proc_callback+0x3c>
 8007566:	e8df f000 	tbb	[pc, r0]
 800756a:	4905      	.short	0x4905
 800756c:	13131322 	.word	0x13131322
 8007570:	16131313 	.word	0x16131313
	if (old_tick == 0)
 8007574:	4f31      	ldr	r7, [pc, #196]	; (800763c <vc_dload_proc_callback+0xe8>)
						progress_val, processed_item_cnt, total_item);
		}
		break;

	case VC_DLOAD_STATUS_STARTING:
		sprintf(str_buf, "Total processing... 0%% (%d/%d items)",
 8007576:	4932      	ldr	r1, [pc, #200]	; (8007640 <vc_dload_proc_callback+0xec>)
 8007578:	4633      	mov	r3, r6
 800757a:	2200      	movs	r2, #0
 800757c:	a802      	add	r0, sp, #8
 800757e:	f00b fad3 	bl	8012b28 <siprintf>
	tick_val = HAL_GetTick();
 8007582:	f002 f8dd 	bl	8009740 <HAL_GetTick>
	if (old_tick == 0)
 8007586:	683b      	ldr	r3, [r7, #0]
		old_tick = 0;
 8007588:	2b00      	cmp	r3, #0
 800758a:	bf18      	it	ne
 800758c:	2000      	movne	r0, #0
 800758e:	6038      	str	r0, [r7, #0]
		strcpy(str_buf, "[VC_RDC] Invaild processing status\n");
		break;
	}

	DMSG("%s\n", str_buf);
}
 8007590:	b023      	add	sp, #140	; 0x8c
 8007592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sprintf(str_buf, "Remove setuped item. lut_class(%d)", lut_class);
 8007596:	468c      	mov	ip, r1
 8007598:	4662      	mov	r2, ip
 800759a:	492a      	ldr	r1, [pc, #168]	; (8007644 <vc_dload_proc_callback+0xf0>)
 800759c:	a802      	add	r0, sp, #8
 800759e:	f00b fac3 	bl	8012b28 <siprintf>
		free(pgm_data_buf_ptr);
 80075a2:	4628      	mov	r0, r5
}
 80075a4:	b023      	add	sp, #140	; 0x8c
 80075a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		free(pgm_data_buf_ptr);
 80075aa:	f009 baef 	b.w	8010b8c <free>
	if (old_tick == 0)
 80075ae:	4f23      	ldr	r7, [pc, #140]	; (800763c <vc_dload_proc_callback+0xe8>)
	tick_val = HAL_GetTick();
 80075b0:	f002 f8c6 	bl	8009740 <HAL_GetTick>
	if (old_tick == 0)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d03c      	beq.n	8007634 <vc_dload_proc_callback+0xe0>
	return (double)time_elapsed;
 80075ba:	1ac0      	subs	r0, r0, r3
 80075bc:	f7f8 ffa2 	bl	8000504 <__aeabi_ui2d>
				processed_item_cnt, total_item, (float)time_elapse()/(float)1000);
 80075c0:	f7f9 fb12 	bl	8000be8 <__aeabi_d2f>
 80075c4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8007648 <vc_dload_proc_callback+0xf4>
		sprintf(str_buf,
 80075c8:	ee07 0a10 	vmov	s14, r0
 80075cc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80075d0:	ee17 0a90 	vmov	r0, s15
 80075d4:	f7f8 ffb8 	bl	8000548 <__aeabi_f2d>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
		old_tick = 0;
 80075dc:	2000      	movs	r0, #0
 80075de:	e9cd 2300 	strd	r2, r3, [sp]
 80075e2:	6038      	str	r0, [r7, #0]
 80075e4:	4919      	ldr	r1, [pc, #100]	; (800764c <vc_dload_proc_callback+0xf8>)
 80075e6:	4633      	mov	r3, r6
 80075e8:	4622      	mov	r2, r4
 80075ea:	a802      	add	r0, sp, #8
 80075ec:	f00b fa9c 	bl	8012b28 <siprintf>
		free(pgm_data_buf_ptr);
 80075f0:	4628      	mov	r0, r5
}
 80075f2:	b023      	add	sp, #140	; 0x8c
 80075f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		free(pgm_data_buf_ptr);
 80075f8:	f009 bac8 	b.w	8010b8c <free>
		progress_val = PROGRESSVALUE(processed_item_cnt, total_item);
 80075fc:	2064      	movs	r0, #100	; 0x64
 80075fe:	fb04 f000 	mul.w	r0, r4, r0
 8007602:	f7f8 ff8f 	bl	8000524 <__aeabi_i2d>
 8007606:	4680      	mov	r8, r0
 8007608:	4630      	mov	r0, r6
 800760a:	4689      	mov	r9, r1
 800760c:	f7f8 ff7a 	bl	8000504 <__aeabi_ui2d>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f9 f918 	bl	800084c <__aeabi_ddiv>
 800761c:	f7f9 fa9c 	bl	8000b58 <__aeabi_d2iz>
		if (progress_val < 100) {
 8007620:	2863      	cmp	r0, #99	; 0x63
 8007622:	dcb5      	bgt.n	8007590 <vc_dload_proc_callback+0x3c>
			sprintf(str_buf, "Total processing... %d%% (%d/%d items)",
 8007624:	4602      	mov	r2, r0
 8007626:	490a      	ldr	r1, [pc, #40]	; (8007650 <vc_dload_proc_callback+0xfc>)
 8007628:	9600      	str	r6, [sp, #0]
 800762a:	4623      	mov	r3, r4
 800762c:	a802      	add	r0, sp, #8
 800762e:	f00b fa7b 	bl	8012b28 <siprintf>
 8007632:	e7ad      	b.n	8007590 <vc_dload_proc_callback+0x3c>
 8007634:	2200      	movs	r2, #0
 8007636:	2300      	movs	r3, #0
 8007638:	e7d1      	b.n	80075de <vc_dload_proc_callback+0x8a>
 800763a:	bf00      	nop
 800763c:	20003a6c 	.word	0x20003a6c
 8007640:	08016994 	.word	0x08016994
 8007644:	080169f8 	.word	0x080169f8
 8007648:	447a0000 	.word	0x447a0000
 800764c:	080169bc 	.word	0x080169bc
 8007650:	0801696c 	.word	0x0801696c

08007654 <vc_dload_verify_callback>:

void vc_dload_verify_callback(E_VC_DLOAD_STATUS_T status,
								E_VC_LUT_CLASS_T lut_class,
								U32_T curr_verify_addr,
								U16_T verified_bytes, U16_T total_verify_bytes)
{
 8007654:	b500      	push	{lr}
 8007656:	b091      	sub	sp, #68	; 0x44
 8007658:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
	char str_buf[64];

	switch (status) {
 800765c:	b120      	cbz	r0, 8007668 <vc_dload_verify_callback+0x14>
 800765e:	2802      	cmp	r0, #2
 8007660:	d00a      	beq.n	8007678 <vc_dload_verify_callback+0x24>
		strcpy(str_buf, "\nInvaild verify status\n");
		break;
	}

	DMSG("%s\n", str_buf);
}
 8007662:	b011      	add	sp, #68	; 0x44
 8007664:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str_buf, "Verifying... 0%% (%d bytes)", total_verify_bytes);
 8007668:	4908      	ldr	r1, [pc, #32]	; (800768c <vc_dload_verify_callback+0x38>)
 800766a:	4662      	mov	r2, ip
 800766c:	4668      	mov	r0, sp
 800766e:	f00b fa5b 	bl	8012b28 <siprintf>
}
 8007672:	b011      	add	sp, #68	; 0x44
 8007674:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str_buf, "\nVerify completed 100%% (%u/%u bytes)",
 8007678:	461a      	mov	r2, r3
 800767a:	4905      	ldr	r1, [pc, #20]	; (8007690 <vc_dload_verify_callback+0x3c>)
 800767c:	4663      	mov	r3, ip
 800767e:	4668      	mov	r0, sp
 8007680:	f00b fa52 	bl	8012b28 <siprintf>
}
 8007684:	b011      	add	sp, #68	; 0x44
 8007686:	f85d fb04 	ldr.w	pc, [sp], #4
 800768a:	bf00      	nop
 800768c:	08016a1c 	.word	0x08016a1c
 8007690:	08016a38 	.word	0x08016a38

08007694 <vc_dload_program_callback>:

void vc_dload_program_callback(E_VC_DLOAD_STATUS_T status,
								E_VC_LUT_CLASS_T lut_class,
								U32_T curr_pgm_addr,
								U16_T programmed_bytes, U16_T total_pgm_bytes)
{
 8007694:	b500      	push	{lr}
 8007696:	b091      	sub	sp, #68	; 0x44
 8007698:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
	char str_buf[64];

	switch (status) {
 800769c:	b120      	cbz	r0, 80076a8 <vc_dload_program_callback+0x14>
 800769e:	2802      	cmp	r0, #2
 80076a0:	d00a      	beq.n	80076b8 <vc_dload_program_callback+0x24>
		strcpy(str_buf, "\n[VC_RDC] Invaild erase status\n");
		break;
	}

	DMSG("%s\n", str_buf);
}
 80076a2:	b011      	add	sp, #68	; 0x44
 80076a4:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str_buf, "Programming... 0%% (%d bytes)", total_pgm_bytes);
 80076a8:	4908      	ldr	r1, [pc, #32]	; (80076cc <vc_dload_program_callback+0x38>)
 80076aa:	4662      	mov	r2, ip
 80076ac:	4668      	mov	r0, sp
 80076ae:	f00b fa3b 	bl	8012b28 <siprintf>
}
 80076b2:	b011      	add	sp, #68	; 0x44
 80076b4:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str_buf, "\nProgram completed 100%% (%u/%u bytes)",
 80076b8:	461a      	mov	r2, r3
 80076ba:	4905      	ldr	r1, [pc, #20]	; (80076d0 <vc_dload_program_callback+0x3c>)
 80076bc:	4663      	mov	r3, ip
 80076be:	4668      	mov	r0, sp
 80076c0:	f00b fa32 	bl	8012b28 <siprintf>
}
 80076c4:	b011      	add	sp, #68	; 0x44
 80076c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80076ca:	bf00      	nop
 80076cc:	08016a60 	.word	0x08016a60
 80076d0:	08016a80 	.word	0x08016a80

080076d4 <vc_dload_erase_callback>:

void vc_dload_erase_callback(E_VC_DLOAD_STATUS_T status,
								E_VC_LUT_CLASS_T lut_class,
								U32_T curr_erase_addr,
								U16_T erased_sector_cnt, U16_T total_sector)
{
 80076d4:	b500      	push	{lr}
 80076d6:	b091      	sub	sp, #68	; 0x44
 80076d8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
	char str_buf[64];

	switch (status) {
 80076dc:	b918      	cbnz	r0, 80076e6 <vc_dload_erase_callback+0x12>
	case VC_DLOAD_STATUS_INPROGRESS:
		DMSG(". ");
		return;

	case VC_DLOAD_STATUS_STARTING:
		sprintf(str_buf, "Erasing... 0%% (%d sectors)", total_sector);
 80076de:	4903      	ldr	r1, [pc, #12]	; (80076ec <vc_dload_erase_callback+0x18>)
 80076e0:	4668      	mov	r0, sp
 80076e2:	f00b fa21 	bl	8012b28 <siprintf>
		strcpy(str_buf, "[VC_RDC] Invaild erase status\n");
		break;
	}

	DMSG("\n%s\n", str_buf);
}
 80076e6:	b011      	add	sp, #68	; 0x44
 80076e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80076ec:	08016aa8 	.word	0x08016aa8

080076f0 <test_RegisterIO_RDP>:

	return gamma_val;
}

void test_RegisterIO_RDP(int panel_port, const char *test_dev_name, int key, unsigned int reg_addr, unsigned int read_cnt, unsigned int write_data)
{
 80076f0:	b570      	push	{r4, r5, r6, lr}
		FFLUSH;
		key = getc(stdin);
		CLEAR_STDIN;
#endif
		
		switch(key)
 80076f2:	2a31      	cmp	r2, #49	; 0x31
{
 80076f4:	461c      	mov	r4, r3
 80076f6:	9e04      	ldr	r6, [sp, #16]
 80076f8:	9b05      	ldr	r3, [sp, #20]
		switch(key)
 80076fa:	d01a      	beq.n	8007732 <test_RegisterIO_RDP+0x42>
 80076fc:	2a32      	cmp	r2, #50	; 0x32
 80076fe:	d007      	beq.n	8007710 <test_RegisterIO_RDP+0x20>
 8007700:	2a30      	cmp	r2, #48	; 0x30
 8007702:	d000      	beq.n	8007706 <test_RegisterIO_RDP+0x16>
	}
#endif

REG_IO_TEST_EXIT:
	return;
}
 8007704:	bd70      	pop	{r4, r5, r6, pc}
			reg_val = RDP_REG_GET(panel_port, reg_addr);
 8007706:	b2a1      	uxth	r1, r4
}
 8007708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			reg_val = RDP_REG_GET(panel_port, reg_addr);
 800770c:	f7ff bd80 	b.w	8007210 <RDP_REG_GET>
				if ((reg_addr + read_cnt) > 0x3FF)
 8007710:	4426      	add	r6, r4
				if ((reg_addr <= 0x3FF) && ((reg_addr + read_cnt) <= 0x3FF))
 8007712:	ea46 0304 	orr.w	r3, r6, r4
 8007716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771a:	d3f3      	bcc.n	8007704 <test_RegisterIO_RDP+0x14>
			for (i = reg_addr; i < (reg_addr + read_cnt); i++) {
 800771c:	42a6      	cmp	r6, r4
 800771e:	4605      	mov	r5, r0
 8007720:	d9f0      	bls.n	8007704 <test_RegisterIO_RDP+0x14>
				reg_val = RDP_REG_GET(panel_port, i);
 8007722:	b2a1      	uxth	r1, r4
 8007724:	4628      	mov	r0, r5
			for (i = reg_addr; i < (reg_addr + read_cnt); i++) {
 8007726:	3401      	adds	r4, #1
				reg_val = RDP_REG_GET(panel_port, i);
 8007728:	f7ff fd72 	bl	8007210 <RDP_REG_GET>
			for (i = reg_addr; i < (reg_addr + read_cnt); i++) {
 800772c:	42a6      	cmp	r6, r4
 800772e:	d1f8      	bne.n	8007722 <test_RegisterIO_RDP+0x32>
}
 8007730:	bd70      	pop	{r4, r5, r6, pc}
			RDP_REG_SET(panel_port, reg_addr, write_data);
 8007732:	b2a1      	uxth	r1, r4
 8007734:	b2da      	uxtb	r2, r3
}
 8007736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			RDP_REG_SET(panel_port, reg_addr, write_data);
 800773a:	f7ff bd1f 	b.w	800717c <RDP_REG_SET>
 800773e:	bf00      	nop

08007740 <rdc200a_test_main>:
/**
 * @brief Main Entry Function
 *        This function initialize Vista Cube then enter the test loop.
 */
int rdc200a_test_main(int test_num, const char * test_param[])
{
 8007740:	b530      	push	{r4, r5, lr}
 8007742:	4604      	mov	r4, r0
 8007744:	b083      	sub	sp, #12
	int ret;
    E_VC_PANEL_DEVICE_T panel_type;
    
	ret = rtiVC_Initialize(RDC_I2C_SLAVE_ADDR);
 8007746:	204a      	movs	r0, #74	; 0x4a
{
 8007748:	460d      	mov	r5, r1
	ret = rtiVC_Initialize(RDC_I2C_SLAVE_ADDR);
 800774a:	f7fe ff97 	bl	800667c <rtiVC_Initialize>
	if (ret != 0) {
 800774e:	b9e8      	cbnz	r0, 800778c <rdc200a_test_main+0x4c>
		EMSG("VC init error (%d)\n", ret);
		return -1;
	}

	rtiVC_RegisterDownloadCallback(vc_dload_erase_callback,
 8007750:	4b10      	ldr	r3, [pc, #64]	; (8007794 <rdc200a_test_main+0x54>)
 8007752:	4a11      	ldr	r2, [pc, #68]	; (8007798 <rdc200a_test_main+0x58>)
 8007754:	4911      	ldr	r1, [pc, #68]	; (800779c <rdc200a_test_main+0x5c>)
 8007756:	4812      	ldr	r0, [pc, #72]	; (80077a0 <rdc200a_test_main+0x60>)
 8007758:	f7fe fed4 	bl	8006504 <rtiVC_RegisterDownloadCallback>
        EMSG("The number of arguments is lack \n");
		ret = -1;
	}

#elif defined(CFG_MDC_RDC200A)
    if(test_num == 1) {
 800775c:	2c01      	cmp	r4, #1
 800775e:	d010      	beq.n	8007782 <rdc200a_test_main+0x42>
        ret = test_RDC200A(panel_type, '5');
	} else if(test_num > 2) {
 8007760:	2c02      	cmp	r4, #2
 8007762:	dc09      	bgt.n	8007778 <rdc200a_test_main+0x38>
        ret = test_RDC200A_auto(panel_type, test_param);
	} else {
        EMSG("The number of arguments is lack \n");
		ret = -1;
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	9001      	str	r0, [sp, #4]

#else
	#error "Code not present"
#endif

	rtiVC_CloseDevice();
 800776a:	f7fe fec3 	bl	80064f4 <rtiVC_CloseDevice>

	rtiVC_Denitialize();
 800776e:	f7fe ff7b 	bl	8006668 <rtiVC_Denitialize>

	return ret;
 8007772:	9801      	ldr	r0, [sp, #4]
}
 8007774:	b003      	add	sp, #12
 8007776:	bd30      	pop	{r4, r5, pc}
        ret = test_RDC200A_auto(panel_type, test_param);
 8007778:	4629      	mov	r1, r5
 800777a:	2004      	movs	r0, #4
 800777c:	f000 fa4a 	bl	8007c14 <test_RDC200A_auto>
 8007780:	e7f2      	b.n	8007768 <rdc200a_test_main+0x28>
        ret = test_RDC200A(panel_type, '5');
 8007782:	2135      	movs	r1, #53	; 0x35
 8007784:	2004      	movs	r0, #4
 8007786:	f000 f80f 	bl	80077a8 <test_RDC200A>
 800778a:	e7ed      	b.n	8007768 <rdc200a_test_main+0x28>
		return -1;
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e7f0      	b.n	8007774 <rdc200a_test_main+0x34>
 8007792:	bf00      	nop
 8007794:	08007555 	.word	0x08007555
 8007798:	08007655 	.word	0x08007655
 800779c:	08007695 	.word	0x08007695
 80077a0:	080076d5 	.word	0x080076d5
 80077a4:	00000000 	.word	0x00000000

080077a8 <test_RDC200A>:
	//enable_3D = TRUE;
	//rtiVC_ChangeInputResolution(VC_INPUT_RES_DUALHD, enable_3D, h_blank, v_blank, frame_rate);
}

int test_RDC200A(E_VC_PANEL_DEVICE_T panel_type, int key)
{
 80077a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ac:	b094      	sub	sp, #80	; 0x50
 80077ae:	460c      	mov	r4, r1
    unsigned int reg_addr, write_data;
	reg_addr = 0x0550;
	write_data = 0;

    // Open device
    ret = rtiVC_OpenDevice();
 80077b0:	f7fe fea2 	bl	80064f8 <rtiVC_OpenDevice>
    if (ret)
 80077b4:	2800      	cmp	r0, #0
 80077b6:	f040 81d3 	bne.w	8007b60 <test_RDC200A+0x3b8>
        return -1;
    
    rtiVC_GetFirmwareVersion(&major_ver, &minor_ver, &rel_ver);
 80077ba:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 80077be:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 80077c2:	4607      	mov	r7, r0
 80077c4:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 80077c8:	f7ff fc48 	bl	800705c <rtiVC_GetFirmwareVersion>
	DMSG("RDC200A firmware version: %d.%d.%d\n", major_ver, minor_ver, rel_ver);

	rtiVC_GetRdcDeviceID(&chip_id, &rev_num);
 80077cc:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 80077d0:	a809      	add	r0, sp, #36	; 0x24
 80077d2:	f7ff fc77 	bl	80070c4 <rtiVC_GetRdcDeviceID>
		FFLUSH;
		key = getc(stdin);				
		CLEAR_STDIN;
#endif

		switch(key)
 80077d6:	f1a4 0335 	sub.w	r3, r4, #53	; 0x35
 80077da:	2b45      	cmp	r3, #69	; 0x45
 80077dc:	d84a      	bhi.n	8007874 <test_RDC200A+0xcc>
 80077de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80077e2:	0046      	.short	0x0046
 80077e4:	00490049 	.word	0x00490049
 80077e8:	00490049 	.word	0x00490049
 80077ec:	00490049 	.word	0x00490049
 80077f0:	00490049 	.word	0x00490049
 80077f4:	00490049 	.word	0x00490049
 80077f8:	00490049 	.word	0x00490049
 80077fc:	00490049 	.word	0x00490049
 8007800:	00490049 	.word	0x00490049
 8007804:	00490049 	.word	0x00490049
 8007808:	00490049 	.word	0x00490049
 800780c:	00490049 	.word	0x00490049
 8007810:	00490049 	.word	0x00490049
 8007814:	00490049 	.word	0x00490049
 8007818:	00490049 	.word	0x00490049
 800781c:	00490049 	.word	0x00490049
 8007820:	00490049 	.word	0x00490049
 8007824:	00490049 	.word	0x00490049
 8007828:	00490049 	.word	0x00490049
 800782c:	00490049 	.word	0x00490049
 8007830:	00490049 	.word	0x00490049
 8007834:	00490049 	.word	0x00490049
 8007838:	00490049 	.word	0x00490049
 800783c:	0065005f 	.word	0x0065005f
 8007840:	00490049 	.word	0x00490049
 8007844:	0073006c 	.word	0x0073006c
 8007848:	0049007a 	.word	0x0049007a
 800784c:	00860081 	.word	0x00860081
 8007850:	00490049 	.word	0x00490049
 8007854:	0049008b 	.word	0x0049008b
 8007858:	00490049 	.word	0x00490049
 800785c:	00490049 	.word	0x00490049
 8007860:	010200a9 	.word	0x010200a9
 8007864:	004901b3 	.word	0x004901b3
 8007868:	01420049 	.word	0x01420049
 800786c:	004d      	.short	0x004d
#endif
			break;

		case '5':
			DMSG("[LED Control] Request LED backlight\n");
			test_RequestLEDcontrol('0');
 800786e:	2030      	movs	r0, #48	; 0x30
 8007870:	f7ff fdd8 	bl	8007424 <test_RequestLEDcontrol>
#endif

REG_IO_TEST_EXIT:

	return 0;
}
 8007874:	4638      	mov	r0, r7
 8007876:	b014      	add	sp, #80	; 0x50
 8007878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			sprintf(name_buf, "Panel 1: %s", g_panel_name);
 800787c:	4bc6      	ldr	r3, [pc, #792]	; (8007b98 <test_RDC200A+0x3f0>)
 800787e:	49c7      	ldr	r1, [pc, #796]	; (8007b9c <test_RDC200A+0x3f4>)
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	48c7      	ldr	r0, [pc, #796]	; (8007ba0 <test_RDC200A+0x3f8>)
 8007884:	f00b f950 	bl	8012b28 <siprintf>
			test_RegisterIO_RDP(1, name_buf, '0', reg_addr, 10, write_data);
 8007888:	2200      	movs	r2, #0
 800788a:	230a      	movs	r3, #10
 800788c:	e9cd 3200 	strd	r3, r2, [sp]
 8007890:	49c3      	ldr	r1, [pc, #780]	; (8007ba0 <test_RDC200A+0x3f8>)
 8007892:	f44f 63aa 	mov.w	r3, #1360	; 0x550
 8007896:	2230      	movs	r2, #48	; 0x30
 8007898:	2001      	movs	r0, #1
 800789a:	f7ff ff29 	bl	80076f0 <test_RegisterIO_RDP>
			break;
 800789e:	e7e9      	b.n	8007874 <test_RDC200A+0xcc>
			test_TemperatureSensorCalibration(g_panel_name, '0');
 80078a0:	4bbd      	ldr	r3, [pc, #756]	; (8007b98 <test_RDC200A+0x3f0>)
 80078a2:	2130      	movs	r1, #48	; 0x30
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	f7ff fe49 	bl	800753c <test_TemperatureSensorCalibration>
			break;
 80078aa:	e7e3      	b.n	8007874 <test_RDC200A+0xcc>
			test_Brightness('+');
 80078ac:	202b      	movs	r0, #43	; 0x2b
 80078ae:	f7ff fdab 	bl	8007408 <test_Brightness>
			test_Brightness('-');
 80078b2:	202d      	movs	r0, #45	; 0x2d
 80078b4:	f7ff fda8 	bl	8007408 <test_Brightness>
			break;
 80078b8:	e7dc      	b.n	8007874 <test_RDC200A+0xcc>
			test_ShiftHorizontalPixel('+');
 80078ba:	202b      	movs	r0, #43	; 0x2b
 80078bc:	f7ff fd38 	bl	8007330 <test_ShiftHorizontalPixel>
			test_ShiftHorizontalPixel('-');
 80078c0:	202d      	movs	r0, #45	; 0x2d
 80078c2:	f7ff fd35 	bl	8007330 <test_ShiftHorizontalPixel>
			break;
 80078c6:	e7d5      	b.n	8007874 <test_RDC200A+0xcc>
			test_ShiftVerticalPixel('+');
 80078c8:	202b      	movs	r0, #43	; 0x2b
 80078ca:	f7ff fd1f 	bl	800730c <test_ShiftVerticalPixel>
			test_ShiftVerticalPixel('-');
 80078ce:	202d      	movs	r0, #45	; 0x2d
 80078d0:	f7ff fd1c 	bl	800730c <test_ShiftVerticalPixel>
			break;
 80078d4:	e7ce      	b.n	8007874 <test_RDC200A+0xcc>
			test_FrameRateControl('+');
 80078d6:	202b      	movs	r0, #43	; 0x2b
 80078d8:	f7ff fd3c 	bl	8007354 <test_FrameRateControl>
			test_FrameRateControl('-');
 80078dc:	202d      	movs	r0, #45	; 0x2d
 80078de:	f7ff fd39 	bl	8007354 <test_FrameRateControl>
			break;
 80078e2:	e7c7      	b.n	8007874 <test_RDC200A+0xcc>
			test_TestPattern("RDC200A", '0');
 80078e4:	48af      	ldr	r0, [pc, #700]	; (8007ba4 <test_RDC200A+0x3fc>)
 80078e6:	2130      	movs	r1, #48	; 0x30
 80078e8:	f7ff fd4a 	bl	8007380 <test_TestPattern>
			break;
 80078ec:	e7c2      	b.n	8007874 <test_RDC200A+0xcc>
			test_ImageDisplayFormat('0', 0);
 80078ee:	2100      	movs	r1, #0
 80078f0:	2030      	movs	r0, #48	; 0x30
 80078f2:	f7ff fdfd 	bl	80074f0 <test_ImageDisplayFormat>
			break;
 80078f6:	e7bd      	b.n	8007874 <test_RDC200A+0xcc>
	rtiVC_EnableVideoSyncInterrupt();
 80078f8:	f7ff f958 	bl	8006bac <rtiVC_EnableVideoSyncInterrupt>
			info[0].shift_x = 100;
 80078fc:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8007bb8 <test_RDC200A+0x410>
			info[0].shift_x = -400;
 8007900:	4ea9      	ldr	r6, [pc, #676]	; (8007ba8 <test_RDC200A+0x400>)
	for (i = 0; i < 1000; i++) {
 8007902:	2400      	movs	r4, #0
 8007904:	ad0a      	add	r5, sp, #40	; 0x28
		if (i & 0x1) {
 8007906:	f014 0f01 	tst.w	r4, #1
			rtiVC_RequestAtwShiftPixel(ctrl_port, info);
 800790a:	4629      	mov	r1, r5
 800790c:	f04f 0003 	mov.w	r0, #3
			rtiVC_RequestAtwShiftPixel(ctrl_port, info);
 8007910:	bf04      	itt	eq
 8007912:	4629      	moveq	r1, r5
 8007914:	2003      	moveq	r0, #3
	for (i = 0; i < 1000; i++) {
 8007916:	f104 0401 	add.w	r4, r4, #1
			info[0].shift_x = -400;
 800791a:	bf14      	ite	ne
 800791c:	e9cd 660a 	strdne	r6, r6, [sp, #40]	; 0x28
			info[0].shift_x = 100;
 8007920:	e9cd 880a 	strdeq	r8, r8, [sp, #40]	; 0x28
			rtiVC_RequestAtwShiftPixel(ctrl_port, info);
 8007924:	f7ff f94c 	bl	8006bc0 <rtiVC_RequestAtwShiftPixel>
	for (i = 0; i < 1000; i++) {
 8007928:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800792c:	d1eb      	bne.n	8007906 <test_RDC200A+0x15e>
	rtiVC_DisableVideoSyncInterrupt();
 800792e:	f7ff f933 	bl	8006b98 <rtiVC_DisableVideoSyncInterrupt>
}
 8007932:	e79f      	b.n	8007874 <test_RDC200A+0xcc>
	param.k1 = 0;
 8007934:	2200      	movs	r2, #0
 8007936:	2300      	movs	r3, #0
	rtiVC_RequestCoKOAGeneration(&param);
 8007938:	ad0a      	add	r5, sp, #40	; 0x28
	param.interp = 1;
 800793a:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8007bbc <test_RDC200A+0x414>
	param.lt_x = 255;
 800793e:	2400      	movs	r4, #0
 8007940:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
	param.k1 = 0;
 8007944:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	param.k2 = 0;
 8007948:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	param.interp = 1;
 800794c:	f04f 0800 	mov.w	r8, #0
	param.chrm_b = 10;
 8007950:	230a      	movs	r3, #10
	rtiVC_RequestCoKOAGeneration(&param);
 8007952:	4628      	mov	r0, r5
	param.lt_x = 255;
 8007954:	e9cd 1410 	strd	r1, r4, [sp, #64]	; 0x40
	param.interp = 1;
 8007958:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
	param.chrm_b = 10;
 800795c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	param.lt_y = 0;
 8007960:	9412      	str	r4, [sp, #72]	; 0x48
	param.chrm_r = 0;
 8007962:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
	rtiVC_RequestCoKOAGeneration(&param);
 8007966:	f7ff f935 	bl	8006bd4 <rtiVC_RequestCoKOAGeneration>
	param.chrm_r = 70;
 800796a:	f641 6346 	movw	r3, #7750	; 0x1e46
 800796e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	param.k1 = 0.1;
 8007972:	a387      	add	r3, pc, #540	; (adr r3, 8007b90 <test_RDC200A+0x3e8>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
	rtiVC_RequestCoKOAGeneration(&param);
 8007978:	4628      	mov	r0, r5
	param.k1 = 0.1;
 800797a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	param.interp = 1;
 800797e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
	param.lt_x = 0;
 8007982:	9410      	str	r4, [sp, #64]	; 0x40
	rtiVC_RequestCoKOAGeneration(&param);
 8007984:	f7ff f926 	bl	8006bd4 <rtiVC_RequestCoKOAGeneration>
	lut_offset[VC_PANEL_PORT_1] = 1;
 8007988:	2301      	movs	r3, #1
	rtiVC_EnableGammaCorrection((E_VC_PANEL_CTRL_PORT_T)ctrl_port, FALSE, lut_offset);
 800798a:	4621      	mov	r1, r4
 800798c:	462a      	mov	r2, r5
 800798e:	2003      	movs	r0, #3
	int lut_idx = 0;
 8007990:	4626      	mov	r6, r4
	rtiVC_EnableGammaCorrection((E_VC_PANEL_CTRL_PORT_T)ctrl_port, FALSE, lut_offset);
 8007992:	f04f 0814 	mov.w	r8, #20
	lut_offset[VC_PANEL_PORT_0] = 0;
 8007996:	940a      	str	r4, [sp, #40]	; 0x28
	lut_offset[VC_PANEL_PORT_1] = 1;
 8007998:	930b      	str	r3, [sp, #44]	; 0x2c
	rtiVC_EnableGammaCorrection((E_VC_PANEL_CTRL_PORT_T)ctrl_port, FALSE, lut_offset);
 800799a:	f7ff f9d5 	bl	8006d48 <rtiVC_EnableGammaCorrection>
		if ((lut_idx == 0) || (lut_idx == 1)) { // CoKOA_fhd_color_ab_barrel.lut, CoKOA_fhd_color_ab_pinc.lut
 800799e:	2e01      	cmp	r6, #1
 80079a0:	dc72      	bgt.n	8007a88 <test_RDC200A+0x2e0>
				lut_offset[VC_PANEL_PORT_1] = 1;
 80079a2:	2e00      	cmp	r6, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2300      	movne	r3, #0
 80079a8:	2301      	moveq	r3, #1
 80079aa:	930b      	str	r3, [sp, #44]	; 0x2c
			rtiVC_EnableDistortionCorrection((E_VC_PANEL_CTRL_PORT_T)ctrl_port,
 80079ac:	f04f 0301 	mov.w	r3, #1
				lut_offset[VC_PANEL_PORT_1] = 1;
 80079b0:	bf14      	ite	ne
 80079b2:	461a      	movne	r2, r3
 80079b4:	2200      	moveq	r2, #0
 80079b6:	920a      	str	r2, [sp, #40]	; 0x28
			rtiVC_EnableDistortionCorrection((E_VC_PANEL_CTRL_PORT_T)ctrl_port,
 80079b8:	4619      	mov	r1, r3
 80079ba:	462a      	mov	r2, r5
 80079bc:	2003      	movs	r0, #3
		if (++lut_idx == 7)
 80079be:	441e      	add	r6, r3
			rtiVC_EnableDistortionCorrection((E_VC_PANEL_CTRL_PORT_T)ctrl_port,
 80079c0:	f7ff f9b2 	bl	8006d28 <rtiVC_EnableDistortionCorrection>
			lut_idx = 0;
 80079c4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		VC_M_DELAY(1000);
 80079c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079cc:	f7fe fcde 	bl	800638c <rtiVC_DelayUs>
 80079d0:	3c01      	subs	r4, #1
 80079d2:	d1f9      	bne.n	80079c8 <test_RDC200A+0x220>
	for(i = 0; i < 20; i++)	{
 80079d4:	f1b8 0801 	subs.w	r8, r8, #1
 80079d8:	d1e1      	bne.n	800799e <test_RDC200A+0x1f6>
	rtiVC_EnableGammaCorrection((E_VC_PANEL_CTRL_PORT_T)ctrl_port, TRUE, lut_offset);
 80079da:	462a      	mov	r2, r5
 80079dc:	2101      	movs	r1, #1
 80079de:	2003      	movs	r0, #3
 80079e0:	f7ff f9b2 	bl	8006d48 <rtiVC_EnableGammaCorrection>
}
 80079e4:	e746      	b.n	8007874 <test_RDC200A+0xcc>
	text_drawer_handle = rtiVC_CreateTextOsdDrawer();
 80079e6:	f7fe ffeb 	bl	80069c0 <rtiVC_CreateTextOsdDrawer>
	if (text_drawer_handle < 0) {
 80079ea:	f1b0 0900 	subs.w	r9, r0, #0
 80079ee:	f6ff af41 	blt.w	8007874 <test_RDC200A+0xcc>
	bmp_drawer_handle = rtiVC_CreateBitmapOsdDrawer();
 80079f2:	f7ff f8af 	bl	8006b54 <rtiVC_CreateBitmapOsdDrawer>
	if (bmp_drawer_handle < 0) {
 80079f6:	f1b0 0a00 	subs.w	sl, r0, #0
 80079fa:	f2c0 80b6 	blt.w	8007b6a <test_RDC200A+0x3c2>
	rtiVC_DrawBitmapOSD(bmp_drawer_handle, 100, 100, FLASH_PART_OFFSET_BMP,
 80079fe:	2500      	movs	r5, #0
 8007a00:	2264      	movs	r2, #100	; 0x64
 8007a02:	2301      	movs	r3, #1
 8007a04:	2408      	movs	r4, #8
 8007a06:	4611      	mov	r1, r2
 8007a08:	e9cd 3400 	strd	r3, r4, [sp]
 8007a0c:	9502      	str	r5, [sp, #8]
 8007a0e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8007a12:	f7ff f81f 	bl	8006a54 <rtiVC_DrawBitmapOSD>
	rtiVC_DrawTextOSD(text_drawer_handle, text_mov_x, 900, font_addr, palette_addr,
 8007a16:	4a65      	ldr	r2, [pc, #404]	; (8007bac <test_RDC200A+0x404>)
 8007a18:	9207      	str	r2, [sp, #28]
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	220a      	movs	r2, #10
 8007a20:	4b63      	ldr	r3, [pc, #396]	; (8007bb0 <test_RDC200A+0x408>)
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	2109      	movs	r1, #9
 8007a26:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8007a2a:	9402      	str	r4, [sp, #8]
 8007a2c:	9506      	str	r5, [sp, #24]
 8007a2e:	9503      	str	r5, [sp, #12]
 8007a30:	f44f 234e 	mov.w	r3, #843776	; 0xce000
 8007a34:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007a38:	2164      	movs	r1, #100	; 0x64
 8007a3a:	4648      	mov	r0, r9
 8007a3c:	f7fe ff28 	bl	8006890 <rtiVC_DrawTextOSD>
 8007a40:	f04f 0814 	mov.w	r8, #20
	text_mov_x = 100;
 8007a44:	2664      	movs	r6, #100	; 0x64
			lut_idx = 0;
 8007a46:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		VC_M_DELAY(1000);
 8007a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a4e:	f7fe fc9d 	bl	800638c <rtiVC_DelayUs>
 8007a52:	3c01      	subs	r4, #1
 8007a54:	d1f9      	bne.n	8007a4a <test_RDC200A+0x2a2>
		switch (display_cnt) {
 8007a56:	2d04      	cmp	r5, #4
 8007a58:	f200 808b 	bhi.w	8007b72 <test_RDC200A+0x3ca>
 8007a5c:	e8df f005 	tbb	[pc, r5]
 8007a60:	3d5b5362 	.word	0x3d5b5362
 8007a64:	1f          	.byte	0x1f
 8007a65:	00          	.byte	0x00
			sprintf(name_buf, "Panel 0: %s", g_panel_name);
 8007a66:	4b4c      	ldr	r3, [pc, #304]	; (8007b98 <test_RDC200A+0x3f0>)
 8007a68:	4952      	ldr	r1, [pc, #328]	; (8007bb4 <test_RDC200A+0x40c>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	484c      	ldr	r0, [pc, #304]	; (8007ba0 <test_RDC200A+0x3f8>)
 8007a6e:	f00b f85b 	bl	8012b28 <siprintf>
			test_RegisterIO_RDP(0, name_buf, '0', reg_addr, 10, write_data);
 8007a72:	2000      	movs	r0, #0
 8007a74:	230a      	movs	r3, #10
 8007a76:	e9cd 3000 	strd	r3, r0, [sp]
 8007a7a:	4949      	ldr	r1, [pc, #292]	; (8007ba0 <test_RDC200A+0x3f8>)
 8007a7c:	f44f 63aa 	mov.w	r3, #1360	; 0x550
 8007a80:	2230      	movs	r2, #48	; 0x30
 8007a82:	f7ff fe35 	bl	80076f0 <test_RegisterIO_RDP>
			break;
 8007a86:	e6f5      	b.n	8007874 <test_RDC200A+0xcc>
		if (++lut_idx == 7)
 8007a88:	3601      	adds	r6, #1
			rtiVC_EnableDistortionCorrection((E_VC_PANEL_CTRL_PORT_T)ctrl_port,
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	462a      	mov	r2, r5
 8007a8e:	2101      	movs	r1, #1
 8007a90:	2003      	movs	r0, #3
 8007a92:	f7ff f949 	bl	8006d28 <rtiVC_EnableDistortionCorrection>
			lut_idx = 0;
 8007a96:	2e07      	cmp	r6, #7
 8007a98:	bf08      	it	eq
 8007a9a:	2600      	moveq	r6, #0
 8007a9c:	e792      	b.n	80079c4 <test_RDC200A+0x21c>
			rtiVC_MoveBitmapOSD(bmp_drawer_handle, 100, 100);
 8007a9e:	2264      	movs	r2, #100	; 0x64
 8007aa0:	4611      	mov	r1, r2
		text_mov_x += 100;
 8007aa2:	3664      	adds	r6, #100	; 0x64
			rtiVC_MoveBitmapOSD(bmp_drawer_handle, 100, 100);
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	f7fe ffad 	bl	8006a04 <rtiVC_MoveBitmapOSD>
		rtiVC_MoveTextOSD(text_drawer_handle, text_mov_x, 900);
 8007aaa:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007aae:	4631      	mov	r1, r6
 8007ab0:	4648      	mov	r0, r9
 8007ab2:	f7fe fecb 	bl	800684c <rtiVC_MoveTextOSD>
		if (text_mov_x == 900)
 8007ab6:	f5b6 7f61 	cmp.w	r6, #900	; 0x384
			display_cnt = 0;
 8007aba:	f04f 0500 	mov.w	r5, #0
		if (text_mov_x == 900)
 8007abe:	d04d      	beq.n	8007b5c <test_RDC200A+0x3b4>
	for (loop = 0; loop < 20; loop++) {
 8007ac0:	f1b8 0801 	subs.w	r8, r8, #1
 8007ac4:	d1bf      	bne.n	8007a46 <test_RDC200A+0x29e>
	rtiVC_DestoryBitmapOsdDrawer(bmp_drawer_handle);
 8007ac6:	4650      	mov	r0, sl
 8007ac8:	f7fe fffe 	bl	8006ac8 <rtiVC_DestoryBitmapOsdDrawer>
	rtiVC_DestoryTextOsdDrawer(text_drawer_handle);
 8007acc:	4648      	mov	r0, r9
 8007ace:	f7fe ff37 	bl	8006940 <rtiVC_DestoryTextOsdDrawer>
	rtiVC_EnableTestPattern(FALSE);	
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	f7ff faaa 	bl	800702c <rtiVC_EnableTestPattern>
 8007ad8:	e6cc      	b.n	8007874 <test_RDC200A+0xcc>
			rtiVC_MoveBitmapOSD(bmp_drawer_handle, 1400, 600);
 8007ada:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007ade:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	f7fe ff8e 	bl	8006a04 <rtiVC_MoveBitmapOSD>
		text_mov_x += 100;
 8007ae8:	3664      	adds	r6, #100	; 0x64
		rtiVC_MoveTextOSD(text_drawer_handle, text_mov_x, 900);
 8007aea:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007aee:	4631      	mov	r1, r6
 8007af0:	4648      	mov	r0, r9
 8007af2:	f7fe feab 	bl	800684c <rtiVC_MoveTextOSD>
		if (text_mov_x == 900)
 8007af6:	f5b6 7f61 	cmp.w	r6, #900	; 0x384
 8007afa:	d02e      	beq.n	8007b5a <test_RDC200A+0x3b2>
		display_cnt++;
 8007afc:	3501      	adds	r5, #1
			display_cnt = 0;
 8007afe:	2d05      	cmp	r5, #5
 8007b00:	bf08      	it	eq
 8007b02:	2500      	moveq	r5, #0
 8007b04:	e7dc      	b.n	8007ac0 <test_RDC200A+0x318>
			rtiVC_MoveBitmapOSD(bmp_drawer_handle, 800, 400); // center
 8007b06:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007b0a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b0e:	4650      	mov	r0, sl
 8007b10:	f7fe ff78 	bl	8006a04 <rtiVC_MoveBitmapOSD>
			break;
 8007b14:	e7e8      	b.n	8007ae8 <test_RDC200A+0x340>
			rtiVC_MoveBitmapOSD(bmp_drawer_handle, 100, 600);
 8007b16:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007b1a:	2164      	movs	r1, #100	; 0x64
 8007b1c:	4650      	mov	r0, sl
 8007b1e:	f7fe ff71 	bl	8006a04 <rtiVC_MoveBitmapOSD>
			break;
 8007b22:	e7e1      	b.n	8007ae8 <test_RDC200A+0x340>
		text_mov_x += 100;
 8007b24:	3664      	adds	r6, #100	; 0x64
			rtiVC_MoveBitmapOSD(bmp_drawer_handle, 1400, 100);
 8007b26:	2264      	movs	r2, #100	; 0x64
 8007b28:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8007b2c:	4650      	mov	r0, sl
 8007b2e:	f7fe ff69 	bl	8006a04 <rtiVC_MoveBitmapOSD>
		rtiVC_MoveTextOSD(text_drawer_handle, text_mov_x, 900);
 8007b32:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007b36:	4631      	mov	r1, r6
 8007b38:	4648      	mov	r0, r9
 8007b3a:	f7fe fe87 	bl	800684c <rtiVC_MoveTextOSD>
		if (text_mov_x == 900)
 8007b3e:	f5b6 7f61 	cmp.w	r6, #900	; 0x384
 8007b42:	d010      	beq.n	8007b66 <test_RDC200A+0x3be>
		display_cnt++;
 8007b44:	2501      	movs	r5, #1
 8007b46:	e7bb      	b.n	8007ac0 <test_RDC200A+0x318>
 8007b48:	ad0a      	add	r5, sp, #40	; 0x28
			cfg.lvds.color_depth = VC_LVDS_COLOR_DEPTH_24;
 8007b4a:	2400      	movs	r4, #0
			ret = rtiVC_ChangeInputDisplayInterface(VC_INPUT_DISPLAY_IF_LVDS_0,
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	2000      	movs	r0, #0
			cfg.lvds.color_depth = VC_LVDS_COLOR_DEPTH_24;
 8007b50:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
			ret = rtiVC_ChangeInputDisplayInterface(VC_INPUT_DISPLAY_IF_LVDS_0,
 8007b54:	f7ff fa78 	bl	8007048 <rtiVC_ChangeInputDisplayInterface>
			break;
 8007b58:	e7f8      	b.n	8007b4c <test_RDC200A+0x3a4>
		display_cnt++;
 8007b5a:	3501      	adds	r5, #1
			text_mov_x = 100;
 8007b5c:	2664      	movs	r6, #100	; 0x64
 8007b5e:	e7af      	b.n	8007ac0 <test_RDC200A+0x318>
        return -1;
 8007b60:	f04f 37ff 	mov.w	r7, #4294967295
 8007b64:	e686      	b.n	8007874 <test_RDC200A+0xcc>
			text_mov_x = 100;
 8007b66:	2664      	movs	r6, #100	; 0x64
 8007b68:	e7ec      	b.n	8007b44 <test_RDC200A+0x39c>
		rtiVC_DestoryTextOsdDrawer(text_drawer_handle);
 8007b6a:	4648      	mov	r0, r9
 8007b6c:	f7fe fee8 	bl	8006940 <rtiVC_DestoryTextOsdDrawer>
		return;
 8007b70:	e680      	b.n	8007874 <test_RDC200A+0xcc>
		text_mov_x += 100;
 8007b72:	3664      	adds	r6, #100	; 0x64
		rtiVC_MoveTextOSD(text_drawer_handle, text_mov_x, 900);
 8007b74:	4631      	mov	r1, r6
 8007b76:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007b7a:	4648      	mov	r0, r9
 8007b7c:	f7fe fe66 	bl	800684c <rtiVC_MoveTextOSD>
			text_mov_x = 100;
 8007b80:	f5b6 7f61 	cmp.w	r6, #900	; 0x384
 8007b84:	bf08      	it	eq
 8007b86:	2664      	moveq	r6, #100	; 0x64
 8007b88:	e7b8      	b.n	8007afc <test_RDC200A+0x354>
 8007b8a:	bf00      	nop
 8007b8c:	f3af 8000 	nop.w
 8007b90:	9999999a 	.word	0x9999999a
 8007b94:	3fb99999 	.word	0x3fb99999
 8007b98:	20000024 	.word	0x20000024
 8007b9c:	08016ad8 	.word	0x08016ad8
 8007ba0:	20003a70 	.word	0x20003a70
 8007ba4:	08016ac4 	.word	0x08016ac4
 8007ba8:	fed4fe70 	.word	0xfed4fe70
 8007bac:	08016ae4 	.word	0x08016ae4
 8007bb0:	000de100 	.word	0x000de100
 8007bb4:	08016acc 	.word	0x08016acc
 8007bb8:	00500064 	.word	0x00500064
 8007bbc:	3ff00000 	.word	0x3ff00000

08007bc0 <test_auto_patch_manage>:
#endif
	return ret;
}

static int test_auto_patch_manage(const char* argv[])
{
 8007bc0:	b510      	push	{r4, lr}
    char mode = (*argv)[0];
	int param;
    int base_patch_addr = 0;

	argv++;
    param = atoi(*argv);
 8007bc2:	e9d0 3000 	ldrd	r3, r0, [r0]
{
 8007bc6:	b0c0      	sub	sp, #256	; 0x100
    char mode = (*argv)[0];
 8007bc8:	781c      	ldrb	r4, [r3, #0]
    param = atoi(*argv);
 8007bca:	f008 ffc1 	bl	8010b50 <atoi>
    argv++;
    
    if(param == 0)
 8007bce:	b160      	cbz	r0, 8007bea <test_auto_patch_manage+0x2a>
        base_patch_addr  =FLASH_PART_OFFSET_RDC_PATCH_BASE;
    else if(param == 1)
 8007bd0:	2801      	cmp	r0, #1
 8007bd2:	d018      	beq.n	8007c06 <test_auto_patch_manage+0x46>
        base_patch_addr  =FLASH_PART_OFFSET_PANEL_0_PATCH_BASE;
    else if(param == 2)
 8007bd4:	2802      	cmp	r0, #2
 8007bd6:	d119      	bne.n	8007c0c <test_auto_patch_manage+0x4c>
        base_patch_addr  =FLASH_PART_OFFSET_PANEL_1_PATCH_BASE;
    else
        return -1;
    
    switch(mode)
 8007bd8:	2c64      	cmp	r4, #100	; 0x64
 8007bda:	f44f 204d 	mov.w	r0, #839680	; 0xcd000
 8007bde:	d108      	bne.n	8007bf2 <test_auto_patch_manage+0x32>
    {
        case 'd':
        {
            rtiVC_EraseSectorFLASH(base_patch_addr);
 8007be0:	f7ff fa54 	bl	800708c <rtiVC_EraseSectorFLASH>
            }
            IMSG("\n");
        }
        break;
    }
	return 0;
 8007be4:	2000      	movs	r0, #0
}
 8007be6:	b040      	add	sp, #256	; 0x100
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	f44f 204b 	mov.w	r0, #831488	; 0xcb000
    switch(mode)
 8007bee:	2c64      	cmp	r4, #100	; 0x64
 8007bf0:	d0f6      	beq.n	8007be0 <test_auto_patch_manage+0x20>
 8007bf2:	2c76      	cmp	r4, #118	; 0x76
 8007bf4:	d1f6      	bne.n	8007be4 <test_auto_patch_manage+0x24>
			rtiVC_ReadFLASH(base_patch_addr, buffer, 256);
 8007bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bfa:	4669      	mov	r1, sp
 8007bfc:	f7ff fa38 	bl	8007070 <rtiVC_ReadFLASH>
	return 0;
 8007c00:	2000      	movs	r0, #0
}
 8007c02:	b040      	add	sp, #256	; 0x100
 8007c04:	bd10      	pop	{r4, pc}
 8007c06:	f44f 204c 	mov.w	r0, #835584	; 0xcc000
 8007c0a:	e7f0      	b.n	8007bee <test_auto_patch_manage+0x2e>
        return -1;
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e7e9      	b.n	8007be6 <test_auto_patch_manage+0x26>
 8007c12:	bf00      	nop

08007c14 <test_RDC200A_auto>:
    return ret;
}


int test_RDC200A_auto(E_VC_PANEL_DEVICE_T panel_type, const char * test_param[])
{
 8007c14:	b530      	push	{r4, r5, lr}
 8007c16:	b0b5      	sub	sp, #212	; 0xd4
 8007c18:	460d      	mov	r5, r1
    static char name_buf[64];
    char filename[1024];
    U8_T major_ver, minor_ver, rel_ver;

	// Open device
    if((ret = rtiVC_OpenDevice()) < 0)
 8007c1a:	f7fe fc6d 	bl	80064f8 <rtiVC_OpenDevice>
 8007c1e:	1e04      	subs	r4, r0, #0
 8007c20:	db27      	blt.n	8007c72 <test_RDC200A_auto+0x5e>
	sscanf(test_param[1], "%x" , &slave_addr);
 8007c22:	49b7      	ldr	r1, [pc, #732]	; (8007f00 <test_RDC200A_auto+0x2ec>)
 8007c24:	6868      	ldr	r0, [r5, #4]
 8007c26:	aa16      	add	r2, sp, #88	; 0x58
 8007c28:	f00a ff9e 	bl	8012b68 <siscanf>
    if(slave_addr < 0) return -1;
 8007c2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	db1d      	blt.n	8007c6e <test_RDC200A_auto+0x5a>
	rtiVC_SetSlaveAddressRDC(slave_addr);
 8007c32:	b2c0      	uxtb	r0, r0
 8007c34:	f7fe fd0c 	bl	8006650 <rtiVC_SetSlaveAddressRDC>
#if 0
    // temp. flag and file path are will be recv from UI
    vc_SetLutDirectoryPath(RDC200A_LUT_FILE_PATH);
#endif
  
    if(test_param[0] == NULL) {
 8007c38:	68ab      	ldr	r3, [r5, #8]
 8007c3a:	b1c3      	cbz	r3, 8007c6e <test_RDC200A_auto+0x5a>
        DMSG("unknown\n");
        return -1;
    }

    switch(*test_param[0])
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b77      	cmp	r3, #119	; 0x77
 8007c40:	d81a      	bhi.n	8007c78 <test_RDC200A_auto+0x64>
 8007c42:	2b6a      	cmp	r3, #106	; 0x6a
 8007c44:	d824      	bhi.n	8007c90 <test_RDC200A_auto+0x7c>
 8007c46:	2b61      	cmp	r3, #97	; 0x61
 8007c48:	d90d      	bls.n	8007c66 <test_RDC200A_auto+0x52>
 8007c4a:	3b62      	subs	r3, #98	; 0x62
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d80e      	bhi.n	8007c6e <test_RDC200A_auto+0x5a>
 8007c50:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007c54:	00400044 	.word	0x00400044
 8007c58:	000d000d 	.word	0x000d000d
 8007c5c:	000d000d 	.word	0x000d000d
 8007c60:	0071000d 	.word	0x0071000d
 8007c64:	00e8      	.short	0x00e8
 8007c66:	2b34      	cmp	r3, #52	; 0x34
 8007c68:	d832      	bhi.n	8007cd0 <test_RDC200A_auto+0xbc>
 8007c6a:	2b2f      	cmp	r3, #47	; 0x2f
 8007c6c:	d832      	bhi.n	8007cd4 <test_RDC200A_auto+0xc0>
 8007c6e:	f04f 34ff 	mov.w	r4, #4294967295
            DMSG("Wrong input : [%c]\n", *test_param[0]);
            ret = -1;
    }

	return ret;
}
 8007c72:	4620      	mov	r0, r4
 8007c74:	b035      	add	sp, #212	; 0xd4
 8007c76:	bd30      	pop	{r4, r5, pc}
    switch(*test_param[0])
 8007c78:	2b79      	cmp	r3, #121	; 0x79
 8007c7a:	f000 8175 	beq.w	8007f68 <test_RDC200A_auto+0x354>
 8007c7e:	2b7a      	cmp	r3, #122	; 0x7a
 8007c80:	d119      	bne.n	8007cb6 <test_RDC200A_auto+0xa2>
            ret = test_auto_patch_manage(++test_param);
 8007c82:	f105 000c 	add.w	r0, r5, #12
}
 8007c86:	b035      	add	sp, #212	; 0xd4
 8007c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            ret = test_auto_patch_manage(++test_param);
 8007c8c:	f7ff bf98 	b.w	8007bc0 <test_auto_patch_manage>
    switch(*test_param[0])
 8007c90:	f1a3 026b 	sub.w	r2, r3, #107	; 0x6b
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	2101      	movs	r1, #1
 8007c98:	fa01 f202 	lsl.w	r2, r1, r2
 8007c9c:	f241 14b2 	movw	r4, #4530	; 0x11b2
 8007ca0:	4014      	ands	r4, r2
 8007ca2:	d117      	bne.n	8007cd4 <test_RDC200A_auto+0xc0>
 8007ca4:	2b76      	cmp	r3, #118	; 0x76
 8007ca6:	f000 80da 	beq.w	8007e5e <test_RDC200A_auto+0x24a>
 8007caa:	07d0      	lsls	r0, r2, #31
 8007cac:	d5df      	bpl.n	8007c6e <test_RDC200A_auto+0x5a>
            test_ImageDisplayFormat('0', 1);
 8007cae:	2030      	movs	r0, #48	; 0x30
 8007cb0:	f7ff fc1e 	bl	80074f0 <test_ImageDisplayFormat>
            break;
 8007cb4:	e7dd      	b.n	8007c72 <test_RDC200A_auto+0x5e>
    switch(*test_param[0])
 8007cb6:	2b78      	cmp	r3, #120	; 0x78
 8007cb8:	d1d9      	bne.n	8007c6e <test_RDC200A_auto+0x5a>
    switch(*argv[0]) {
 8007cba:	68eb      	ldr	r3, [r5, #12]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	3b30      	subs	r3, #48	; 0x30
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d807      	bhi.n	8007cd4 <test_RDC200A_auto+0xc0>
 8007cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007cc8:	00ee0106 	.word	0x00ee0106
 8007ccc:	00df00f7 	.word	0x00df00f7
    switch(*test_param[0])
 8007cd0:	2b37      	cmp	r3, #55	; 0x37
 8007cd2:	d1cc      	bne.n	8007c6e <test_RDC200A_auto+0x5a>
            ret = test_auto_RegisterIO_RDP(name_buf, ++test_param);
 8007cd4:	2400      	movs	r4, #0
}
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	b035      	add	sp, #212	; 0xd4
 8007cda:	bd30      	pop	{r4, r5, pc}
    ctrl_port = (E_VC_PANEL_CTRL_PORT_T)(atoi(*argv)+1);
 8007cdc:	68e8      	ldr	r0, [r5, #12]
 8007cde:	f008 ff37 	bl	8010b50 <atoi>
    switch (*argv[0]) {
 8007ce2:	692b      	ldr	r3, [r5, #16]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
    ctrl_port = (E_VC_PANEL_CTRL_PORT_T)(atoi(*argv)+1);
 8007ce6:	3001      	adds	r0, #1
    switch (*argv[0]) {
 8007ce8:	2b30      	cmp	r3, #48	; 0x30
    ctrl_port = (E_VC_PANEL_CTRL_PORT_T)(atoi(*argv)+1);
 8007cea:	b2c5      	uxtb	r5, r0
 8007cec:	b240      	sxtb	r0, r0
    switch (*argv[0]) {
 8007cee:	d1be      	bne.n	8007c6e <test_RDC200A_auto+0x5a>
            ret = rtiVC_GetTemperature(ctrl_port, tinfo);
 8007cf0:	a916      	add	r1, sp, #88	; 0x58
 8007cf2:	f7fe fd1f 	bl	8006734 <rtiVC_GetTemperature>
            if (ret == 0) {
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d1ba      	bne.n	8007c72 <test_RDC200A_auto+0x5e>
                if (ctrl_port & VC_PANEL_CTRL_PORT_0) {
 8007cfc:	07ea      	lsls	r2, r5, #31
 8007cfe:	d50b      	bpl.n	8007d18 <test_RDC200A_auto+0x104>
                    curr_tpe = (float)t->temperature/(float)VC_TEMPERATURE_DEGREE_DIV;
 8007d00:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8007d04:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8007f04 <test_RDC200A_auto+0x2f0>
 8007d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
                    ret = (int)curr_tpe;
 8007d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d14:	ee17 4a90 	vmov	r4, s15
                if (ctrl_port & VC_PANEL_CTRL_PORT_1) {
 8007d18:	07ab      	lsls	r3, r5, #30
 8007d1a:	d5aa      	bpl.n	8007c72 <test_RDC200A_auto+0x5e>
                    curr_tpe = (float)t->temperature/(float)VC_TEMPERATURE_DEGREE_DIV;
 8007d1c:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8007d20:	eddf 6a78 	vldr	s13, [pc, #480]	; 8007f04 <test_RDC200A_auto+0x2f0>
 8007d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d28:	eec7 7a26 	vdiv.f32	s15, s14, s13
                    ret = (int)curr_tpe;
 8007d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d30:	ee17 4a90 	vmov	r4, s15
 8007d34:	e79d      	b.n	8007c72 <test_RDC200A_auto+0x5e>
    E_VC_PANEL_CTRL_PORT_T ctrl_port = (E_VC_PANEL_CTRL_PORT_T)(atoi(*test_param)+1);
 8007d36:	68e8      	ldr	r0, [r5, #12]
 8007d38:	f008 ff0a 	bl	8010b50 <atoi>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	b244      	sxtb	r4, r0
    rtiVC_GetLedDuty(ctrl_port, duty);
 8007d40:	a916      	add	r1, sp, #88	; 0x58
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7ff f814 	bl	8006d70 <rtiVC_GetLedDuty>
	if(test_param[0] == NULL) {
 8007d48:	692b      	ldr	r3, [r5, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d08f      	beq.n	8007c6e <test_RDC200A_auto+0x5a>
    switch (*test_param[0]) {
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	3b41      	subs	r3, #65	; 0x41
 8007d52:	2b31      	cmp	r3, #49	; 0x31
 8007d54:	d88b      	bhi.n	8007c6e <test_RDC200A_auto+0x5a>
 8007d56:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <test_RDC200A_auto+0x148>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007f4d 	.word	0x08007f4d
 8007d60:	08007f31 	.word	0x08007f31
 8007d64:	08007c6f 	.word	0x08007c6f
 8007d68:	08007c6f 	.word	0x08007c6f
 8007d6c:	08007c6f 	.word	0x08007c6f
 8007d70:	08007c6f 	.word	0x08007c6f
 8007d74:	08007f15 	.word	0x08007f15
 8007d78:	08007c6f 	.word	0x08007c6f
 8007d7c:	08007c6f 	.word	0x08007c6f
 8007d80:	08007c6f 	.word	0x08007c6f
 8007d84:	08007c6f 	.word	0x08007c6f
 8007d88:	08007c6f 	.word	0x08007c6f
 8007d8c:	08007c6f 	.word	0x08007c6f
 8007d90:	08007c6f 	.word	0x08007c6f
 8007d94:	08007c6f 	.word	0x08007c6f
 8007d98:	08007c6f 	.word	0x08007c6f
 8007d9c:	08007c6f 	.word	0x08007c6f
 8007da0:	08007ee5 	.word	0x08007ee5
 8007da4:	08007c6f 	.word	0x08007c6f
 8007da8:	08007c6f 	.word	0x08007c6f
 8007dac:	08007c6f 	.word	0x08007c6f
 8007db0:	08007c6f 	.word	0x08007c6f
 8007db4:	08007c6f 	.word	0x08007c6f
 8007db8:	08007c6f 	.word	0x08007c6f
 8007dbc:	08007c6f 	.word	0x08007c6f
 8007dc0:	08007c6f 	.word	0x08007c6f
 8007dc4:	08007c6f 	.word	0x08007c6f
 8007dc8:	08007c6f 	.word	0x08007c6f
 8007dcc:	08007c6f 	.word	0x08007c6f
 8007dd0:	08007c6f 	.word	0x08007c6f
 8007dd4:	08007c6f 	.word	0x08007c6f
 8007dd8:	08007c6f 	.word	0x08007c6f
 8007ddc:	08007f4d 	.word	0x08007f4d
 8007de0:	08007f31 	.word	0x08007f31
 8007de4:	08007c6f 	.word	0x08007c6f
 8007de8:	08007c6f 	.word	0x08007c6f
 8007dec:	08007c6f 	.word	0x08007c6f
 8007df0:	08007c6f 	.word	0x08007c6f
 8007df4:	08007f15 	.word	0x08007f15
 8007df8:	08007c6f 	.word	0x08007c6f
 8007dfc:	08007c6f 	.word	0x08007c6f
 8007e00:	08007c6f 	.word	0x08007c6f
 8007e04:	08007c6f 	.word	0x08007c6f
 8007e08:	08007c6f 	.word	0x08007c6f
 8007e0c:	08007c6f 	.word	0x08007c6f
 8007e10:	08007c6f 	.word	0x08007c6f
 8007e14:	08007c6f 	.word	0x08007c6f
 8007e18:	08007c6f 	.word	0x08007c6f
 8007e1c:	08007c6f 	.word	0x08007c6f
 8007e20:	08007ee5 	.word	0x08007ee5
    switch(*argv[0])
 8007e24:	68eb      	ldr	r3, [r5, #12]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2b30      	cmp	r3, #48	; 0x30
 8007e2a:	f000 80b3 	beq.w	8007f94 <test_RDC200A_auto+0x380>
 8007e2e:	2b31      	cmp	r3, #49	; 0x31
 8007e30:	f47f af1d 	bne.w	8007c6e <test_RDC200A_auto+0x5a>
	int ret = rtiVC_ReadFLASH(FLASH_PART_OFFSET_FW_CFG,
 8007e34:	2278      	movs	r2, #120	; 0x78
 8007e36:	a916      	add	r1, sp, #88	; 0x58
 8007e38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007e3c:	f7ff f918 	bl	8007070 <rtiVC_ReadFLASH>
	if (ret != 0) {
 8007e40:	4604      	mov	r4, r0
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f47f af13 	bne.w	8007c6e <test_RDC200A_auto+0x5a>
	if(cfg.dif_path < 6)
 8007e48:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8007e4c:	2a05      	cmp	r2, #5
 8007e4e:	f63f af0e 	bhi.w	8007c6e <test_RDC200A_auto+0x5a>
		RDC_REG_MASK_SET(0x200, 0x07, cfg.dif_path);
 8007e52:	2107      	movs	r1, #7
 8007e54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007e58:	f7ff f976 	bl	8007148 <RDC_REG_MASK_SET>
	return 0;
 8007e5c:	e709      	b.n	8007c72 <test_RDC200A_auto+0x5e>
            rtiVC_GetFirmwareVersion(&major_ver, &minor_ver, &rel_ver);
 8007e5e:	aa16      	add	r2, sp, #88	; 0x58
 8007e60:	a906      	add	r1, sp, #24
 8007e62:	f10d 0017 	add.w	r0, sp, #23
 8007e66:	f7ff f8f9 	bl	800705c <rtiVC_GetFirmwareVersion>
            ret = (major_ver << 8 | minor_ver);
 8007e6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007e6e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8007e72:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
            reg_val = RDC_REG_GET(reg_addr);
 8007e76:	9003      	str	r0, [sp, #12]
    rtiVC_CloseDevice();
 8007e78:	f7fe fb3c 	bl	80064f4 <rtiVC_CloseDevice>
    rtiVC_Denitialize();
 8007e7c:	f7fe fbf4 	bl	8006668 <rtiVC_Denitialize>
    exit(val_exit);
 8007e80:	9803      	ldr	r0, [sp, #12]
 8007e82:	f008 fe69 	bl	8010b58 <exit>
            rtiVC_WriteBurstDeviceExt(VC_DEVICE_CH_RDC_RDP0, vc_rdc_i2c_slave_addr,
 8007e86:	4b20      	ldr	r3, [pc, #128]	; (8007f08 <test_RDC200A_auto+0x2f4>)
            burst_buf[write_size++] = reg_addr;
 8007e88:	4820      	ldr	r0, [pc, #128]	; (8007f0c <test_RDC200A_auto+0x2f8>)
 8007e8a:	4a21      	ldr	r2, [pc, #132]	; (8007f10 <test_RDC200A_auto+0x2fc>)
            rtiVC_WriteBurstDeviceExt(VC_DEVICE_CH_RDC_RDP0, vc_rdc_i2c_slave_addr,
 8007e8c:	7819      	ldrb	r1, [r3, #0]
            burst_buf[write_size++] = reg_addr;
 8007e8e:	e9cd 0206 	strd	r0, r2, [sp, #24]
            burst_buf[write_size++] = 0xCA;
 8007e92:	24ca      	movs	r4, #202	; 0xca
            rtiVC_WriteBurstDeviceExt(VC_DEVICE_CH_RDC_RDP0, vc_rdc_i2c_slave_addr,
 8007e94:	2309      	movs	r3, #9
 8007e96:	aa06      	add	r2, sp, #24
 8007e98:	2000      	movs	r0, #0
            burst_buf[write_size++] = 0xCA;
 8007e9a:	f88d 4020 	strb.w	r4, [sp, #32]
            rtiVC_WriteBurstDeviceExt(VC_DEVICE_CH_RDC_RDP0, vc_rdc_i2c_slave_addr,
 8007e9e:	f7fe fac9 	bl	8006434 <rtiVC_WriteBurstDeviceExt>
            break;
 8007ea2:	e717      	b.n	8007cd4 <test_RDC200A_auto+0xc0>
            RDC_REG_SET(reg_addr, write_data);
 8007ea4:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <test_RDC200A_auto+0x2f4>)
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	7811      	ldrb	r1, [r2, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8007eb0:	f7fe faf6 	bl	80064a0 <rtiVC_WriteDevice16>
            break;
 8007eb4:	e70e      	b.n	8007cd4 <test_RDC200A_auto+0xc0>
            rtiVC_ReadBurstDeviceExt(VC_DEVICE_CH_RDC_RDP0, vc_rdc_i2c_slave_addr,
 8007eb6:	4914      	ldr	r1, [pc, #80]	; (8007f08 <test_RDC200A_auto+0x2f4>)
 8007eb8:	ab06      	add	r3, sp, #24
 8007eba:	2200      	movs	r2, #0
 8007ebc:	7809      	ldrb	r1, [r1, #0]
            burst_wbuf[0] = reg_addr;
 8007ebe:	2450      	movs	r4, #80	; 0x50
            rtiVC_ReadBurstDeviceExt(VC_DEVICE_CH_RDC_RDP0, vc_rdc_i2c_slave_addr,
 8007ec0:	e9cd 3200 	strd	r3, r2, [sp]
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	aa16      	add	r2, sp, #88	; 0x58
            burst_wbuf[0] = reg_addr;
 8007eca:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
            rtiVC_ReadBurstDeviceExt(VC_DEVICE_CH_RDC_RDP0, vc_rdc_i2c_slave_addr,
 8007ece:	f7fe fa8b 	bl	80063e8 <rtiVC_ReadBurstDeviceExt>
            for (i = 0; i < read_cnt; i++)
 8007ed2:	e6ff      	b.n	8007cd4 <test_RDC200A_auto+0xc0>
            reg_val = RDC_REG_GET(reg_addr);
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <test_RDC200A_auto+0x2f4>)
 8007ed6:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8007eda:	7819      	ldrb	r1, [r3, #0]
 8007edc:	2000      	movs	r0, #0
 8007ede:	f7fe facb 	bl	8006478 <rtiVC_ReadDevice16>
 8007ee2:	e7c8      	b.n	8007e76 <test_RDC200A_auto+0x262>
			if (*test_param[1] == '+')
 8007ee4:	696b      	ldr	r3, [r5, #20]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b2b      	cmp	r3, #43	; 0x2b
 8007eea:	d060      	beq.n	8007fae <test_RDC200A_auto+0x39a>
            else if (*test_param[1] == '-')
 8007eec:	2b2d      	cmp	r3, #45	; 0x2d
 8007eee:	f47f aebe 	bne.w	8007c6e <test_RDC200A_auto+0x5a>
                ret = rtiVC_StepDownLedDuty((E_VC_PANEL_CTRL_PORT_T)ctrl_port, duty, VC_LED_CTRL_COLOR_R);
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	a916      	add	r1, sp, #88	; 0x58
 8007ef8:	f7fe ff4c 	bl	8006d94 <rtiVC_StepDownLedDuty>
 8007efc:	4604      	mov	r4, r0
 8007efe:	e6b8      	b.n	8007c72 <test_RDC200A_auto+0x5e>
 8007f00:	08016af8 	.word	0x08016af8
 8007f04:	447a0000 	.word	0x447a0000
 8007f08:	2000001d 	.word	0x2000001d
 8007f0c:	ccbbaa50 	.word	0xccbbaa50
 8007f10:	baa5eedd 	.word	0xbaa5eedd
			if (*test_param[1] == '+')
 8007f14:	696b      	ldr	r3, [r5, #20]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b2b      	cmp	r3, #43	; 0x2b
 8007f1a:	d04f      	beq.n	8007fbc <test_RDC200A_auto+0x3a8>
            else if (*test_param[1] == '-')
 8007f1c:	2b2d      	cmp	r3, #45	; 0x2d
 8007f1e:	f47f aea6 	bne.w	8007c6e <test_RDC200A_auto+0x5a>
                ret = rtiVC_StepDownLedDuty((E_VC_PANEL_CTRL_PORT_T)ctrl_port, duty, VC_LED_CTRL_COLOR_G);
 8007f22:	4620      	mov	r0, r4
 8007f24:	2202      	movs	r2, #2
 8007f26:	a916      	add	r1, sp, #88	; 0x58
 8007f28:	f7fe ff34 	bl	8006d94 <rtiVC_StepDownLedDuty>
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	e6a0      	b.n	8007c72 <test_RDC200A_auto+0x5e>
			if (*test_param[1] == '+')
 8007f30:	696b      	ldr	r3, [r5, #20]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b2b      	cmp	r3, #43	; 0x2b
 8007f36:	d048      	beq.n	8007fca <test_RDC200A_auto+0x3b6>
            else if (*test_param[1] == '-')
 8007f38:	2b2d      	cmp	r3, #45	; 0x2d
 8007f3a:	f47f ae98 	bne.w	8007c6e <test_RDC200A_auto+0x5a>
                ret = rtiVC_StepDownLedDuty((E_VC_PANEL_CTRL_PORT_T)ctrl_port, duty, VC_LED_CTRL_COLOR_B);
 8007f3e:	4620      	mov	r0, r4
 8007f40:	2204      	movs	r2, #4
 8007f42:	a916      	add	r1, sp, #88	; 0x58
 8007f44:	f7fe ff26 	bl	8006d94 <rtiVC_StepDownLedDuty>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	e692      	b.n	8007c72 <test_RDC200A_auto+0x5e>
            if (*test_param[1] == '+')
 8007f4c:	696b      	ldr	r3, [r5, #20]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b2b      	cmp	r3, #43	; 0x2b
 8007f52:	d041      	beq.n	8007fd8 <test_RDC200A_auto+0x3c4>
            else if (*test_param[1] == '-')
 8007f54:	2b2d      	cmp	r3, #45	; 0x2d
 8007f56:	f47f ae8a 	bne.w	8007c6e <test_RDC200A_auto+0x5a>
                ret = rtiVC_StepDownLedDuty((E_VC_PANEL_CTRL_PORT_T)ctrl_port, duty, VC_LED_CTRL_COLOR_ALL);
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	a916      	add	r1, sp, #88	; 0x58
 8007f60:	f7fe ff18 	bl	8006d94 <rtiVC_StepDownLedDuty>
 8007f64:	4604      	mov	r4, r0
 8007f66:	e684      	b.n	8007c72 <test_RDC200A_auto+0x5e>
            sprintf(name_buf, "Panel : %s", g_panel_name);
 8007f68:	4b21      	ldr	r3, [pc, #132]	; (8007ff0 <test_RDC200A_auto+0x3dc>)
 8007f6a:	4922      	ldr	r1, [pc, #136]	; (8007ff4 <test_RDC200A_auto+0x3e0>)
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4822      	ldr	r0, [pc, #136]	; (8007ff8 <test_RDC200A_auto+0x3e4>)
 8007f70:	f00a fdda 	bl	8012b28 <siprintf>
    int panel_port = atoi(*test_param);
 8007f74:	68e8      	ldr	r0, [r5, #12]
 8007f76:	f008 fdeb 	bl	8010b50 <atoi>
    switch(*test_param[0])
 8007f7a:	692b      	ldr	r3, [r5, #16]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b30      	cmp	r3, #48	; 0x30
 8007f80:	d031      	beq.n	8007fe6 <test_RDC200A_auto+0x3d2>
 8007f82:	2b31      	cmp	r3, #49	; 0x31
 8007f84:	f47f aea6 	bne.w	8007cd4 <test_RDC200A_auto+0xc0>
        	RDP_REG_SET(panel_port, reg_addr, write_data);
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8007f8e:	f7ff f8f5 	bl	800717c <RDP_REG_SET>
 8007f92:	e69f      	b.n	8007cd4 <test_RDC200A_auto+0xc0>
            ret = rtiVC_EnableTestPattern(TRUE);
 8007f94:	2001      	movs	r0, #1
 8007f96:	f7ff f849 	bl	800702c <rtiVC_EnableTestPattern>
            if (ret == 0) {
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f47f ae68 	bne.w	8007c72 <test_RDC200A_auto+0x5e>
                rtiVC_GenerateTestPattern(R, G, B);
 8007fa2:	2293      	movs	r2, #147	; 0x93
 8007fa4:	2133      	movs	r1, #51	; 0x33
 8007fa6:	20f3      	movs	r0, #243	; 0xf3
 8007fa8:	f7ff f82c 	bl	8007004 <rtiVC_GenerateTestPattern>
 8007fac:	e661      	b.n	8007c72 <test_RDC200A_auto+0x5e>
                ret = rtiVC_StepUpLedDuty((E_VC_PANEL_CTRL_PORT_T)ctrl_port, duty, VC_LED_CTRL_COLOR_R);
 8007fae:	4620      	mov	r0, r4
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	a916      	add	r1, sp, #88	; 0x58
 8007fb4:	f7fe ff5c 	bl	8006e70 <rtiVC_StepUpLedDuty>
 8007fb8:	4604      	mov	r4, r0
 8007fba:	e65a      	b.n	8007c72 <test_RDC200A_auto+0x5e>
                ret = rtiVC_StepUpLedDuty((E_VC_PANEL_CTRL_PORT_T)ctrl_port, duty, VC_LED_CTRL_COLOR_G);
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	a916      	add	r1, sp, #88	; 0x58
 8007fc2:	f7fe ff55 	bl	8006e70 <rtiVC_StepUpLedDuty>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	e653      	b.n	8007c72 <test_RDC200A_auto+0x5e>
                ret = rtiVC_StepUpLedDuty((E_VC_PANEL_CTRL_PORT_T)ctrl_port, duty, VC_LED_CTRL_COLOR_B);
 8007fca:	4620      	mov	r0, r4
 8007fcc:	2204      	movs	r2, #4
 8007fce:	a916      	add	r1, sp, #88	; 0x58
 8007fd0:	f7fe ff4e 	bl	8006e70 <rtiVC_StepUpLedDuty>
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	e64c      	b.n	8007c72 <test_RDC200A_auto+0x5e>
                ret = rtiVC_StepUpLedDuty((E_VC_PANEL_CTRL_PORT_T)ctrl_port, duty, VC_LED_CTRL_COLOR_ALL);
 8007fd8:	4620      	mov	r0, r4
 8007fda:	2207      	movs	r2, #7
 8007fdc:	a916      	add	r1, sp, #88	; 0x58
 8007fde:	f7fe ff47 	bl	8006e70 <rtiVC_StepUpLedDuty>
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	e645      	b.n	8007c72 <test_RDC200A_auto+0x5e>
        	reg_val = RDP_REG_GET(panel_port, reg_addr);
 8007fe6:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8007fea:	f7ff f911 	bl	8007210 <RDP_REG_GET>
 8007fee:	e742      	b.n	8007e76 <test_RDC200A_auto+0x262>
 8007ff0:	20000024 	.word	0x20000024
 8007ff4:	08016afc 	.word	0x08016afc
 8007ff8:	20003ab0 	.word	0x20003ab0

08007ffc <VCNL36828P_SET_PS_LowThreshold>:
 *
 *  LowThreshold: Value between 0d0 and 0d4095
 *
 */
void VCNL36828P_SET_PS_LowThreshold(uint16_t LowThreshold)
{
 8007ffc:	b500      	push	{lr}
 8007ffe:	b085      	sub	sp, #20
 *  val: the input data
 *
 */
void VCNL36828P_write_word(uint8_t command, uint16_t val)
{
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008000:	2302      	movs	r3, #2
{
 8008002:	4684      	mov	ip, r0
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	4806      	ldr	r0, [pc, #24]	; (8008020 <VCNL36828P_SET_PS_LowThreshold+0x24>)
 8008008:	f8ad c00e 	strh.w	ip, [sp, #14]
 800800c:	f10d 030e 	add.w	r3, sp, #14
 8008010:	2203      	movs	r2, #3
 8008012:	2160      	movs	r1, #96	; 0x60
 8008014:	f000 fafa 	bl	800860c <I2CWriteBytes>
}
 8008018:	b005      	add	sp, #20
 800801a:	f85d fb04 	ldr.w	pc, [sp], #4
 800801e:	bf00      	nop
 8008020:	20003b48 	.word	0x20003b48

08008024 <VCNL36828P_SET_PS_HighThreshold>:
{
 8008024:	b500      	push	{lr}
 8008026:	b085      	sub	sp, #20
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008028:	2302      	movs	r3, #2
{
 800802a:	4684      	mov	ip, r0
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4806      	ldr	r0, [pc, #24]	; (8008048 <VCNL36828P_SET_PS_HighThreshold+0x24>)
 8008030:	f8ad c00e 	strh.w	ip, [sp, #14]
 8008034:	f10d 030e 	add.w	r3, sp, #14
 8008038:	2204      	movs	r2, #4
 800803a:	2160      	movs	r1, #96	; 0x60
 800803c:	f000 fae6 	bl	800860c <I2CWriteBytes>
}
 8008040:	b005      	add	sp, #20
 8008042:	f85d fb04 	ldr.w	pc, [sp], #4
 8008046:	bf00      	nop
 8008048:	20003b48 	.word	0x20003b48

0800804c <Reset_Sensor>:
{
 800804c:	b570      	push	{r4, r5, r6, lr}
	DPRINTF("Reset_Sensor");
 800804e:	481f      	ldr	r0, [pc, #124]	; (80080cc <Reset_Sensor+0x80>)
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008050:	4e1f      	ldr	r6, [pc, #124]	; (80080d0 <Reset_Sensor+0x84>)
{
 8008052:	b084      	sub	sp, #16
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008054:	2402      	movs	r4, #2
	DPRINTF("Reset_Sensor");
 8008056:	f00a fcf1 	bl	8012a3c <iprintf>
 800805a:	481e      	ldr	r0, [pc, #120]	; (80080d4 <Reset_Sensor+0x88>)
 800805c:	f00a fd5c 	bl	8012b18 <puts>
	VCNL36828P_write_word(VCNL36828P_PS_CONF2_L, 0x0000);
 8008060:	2500      	movs	r5, #0
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008062:	f10d 030e 	add.w	r3, sp, #14
 8008066:	4630      	mov	r0, r6
 8008068:	9400      	str	r4, [sp, #0]
 800806a:	2201      	movs	r2, #1
 800806c:	2160      	movs	r1, #96	; 0x60
 800806e:	f8ad 500e 	strh.w	r5, [sp, #14]
 8008072:	f000 facb 	bl	800860c <I2CWriteBytes>
 8008076:	f10d 030e 	add.w	r3, sp, #14
 800807a:	4622      	mov	r2, r4
 800807c:	4630      	mov	r0, r6
 800807e:	9400      	str	r4, [sp, #0]
 8008080:	2160      	movs	r1, #96	; 0x60
 8008082:	f8ad 500e 	strh.w	r5, [sp, #14]
 8008086:	f000 fac1 	bl	800860c <I2CWriteBytes>
 800808a:	f10d 030e 	add.w	r3, sp, #14
 800808e:	4630      	mov	r0, r6
 8008090:	9400      	str	r4, [sp, #0]
 8008092:	2203      	movs	r2, #3
 8008094:	2160      	movs	r1, #96	; 0x60
 8008096:	f8ad 500e 	strh.w	r5, [sp, #14]
 800809a:	f000 fab7 	bl	800860c <I2CWriteBytes>
 800809e:	f10d 030e 	add.w	r3, sp, #14
 80080a2:	4630      	mov	r0, r6
 80080a4:	9400      	str	r4, [sp, #0]
 80080a6:	2204      	movs	r2, #4
 80080a8:	2160      	movs	r1, #96	; 0x60
 80080aa:	f8ad 500e 	strh.w	r5, [sp, #14]
 80080ae:	f000 faad 	bl	800860c <I2CWriteBytes>
 80080b2:	9400      	str	r4, [sp, #0]
 80080b4:	f10d 030e 	add.w	r3, sp, #14
 80080b8:	2205      	movs	r2, #5
 80080ba:	2160      	movs	r1, #96	; 0x60
 80080bc:	4630      	mov	r0, r6
 80080be:	f8ad 500e 	strh.w	r5, [sp, #14]
 80080c2:	f000 faa3 	bl	800860c <I2CWriteBytes>
}
 80080c6:	b004      	add	sp, #16
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
 80080ca:	bf00      	nop
 80080cc:	08016b2c 	.word	0x08016b2c
 80080d0:	20003b48 	.word	0x20003b48
 80080d4:	080163a0 	.word	0x080163a0

080080d8 <VCNL36828P_GET_PS_DATA>:
{
 80080d8:	b530      	push	{r4, r5, lr}
 80080da:	b085      	sub	sp, #20
 */
uint16_t VCNL36828P_read_word(uint8_t command)
{
	uint8_t data[2] = {0};

	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80080dc:	2502      	movs	r5, #2
 80080de:	ab03      	add	r3, sp, #12
 80080e0:	22f8      	movs	r2, #248	; 0xf8
 80080e2:	2160      	movs	r1, #96	; 0x60
	uint8_t data[2] = {0};
 80080e4:	2400      	movs	r4, #0
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80080e6:	9500      	str	r5, [sp, #0]
 80080e8:	4806      	ldr	r0, [pc, #24]	; (8008104 <VCNL36828P_GET_PS_DATA+0x2c>)
	uint8_t data[2] = {0};
 80080ea:	f8ad 400c 	strh.w	r4, [sp, #12]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80080ee:	f000 fa69 	bl	80085c4 <I2CReadBytes>
	HAL_Delay(100);
 80080f2:	2064      	movs	r0, #100	; 0x64
 80080f4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80080f8:	f001 fb28 	bl	800974c <HAL_Delay>
}
 80080fc:	4620      	mov	r0, r4
 80080fe:	b005      	add	sp, #20
 8008100:	bd30      	pop	{r4, r5, pc}
 8008102:	bf00      	nop
 8008104:	20003b48 	.word	0x20003b48

08008108 <get_ps_if>:
{
 8008108:	b500      	push	{lr}
 800810a:	b085      	sub	sp, #20
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 800810c:	2302      	movs	r3, #2
	uint8_t data[2] = {0};
 800810e:	f04f 0c00 	mov.w	ip, #0
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	22f9      	movs	r2, #249	; 0xf9
 8008116:	ab03      	add	r3, sp, #12
 8008118:	2160      	movs	r1, #96	; 0x60
 800811a:	4807      	ldr	r0, [pc, #28]	; (8008138 <get_ps_if+0x30>)
	uint8_t data[2] = {0};
 800811c:	f8ad c00c 	strh.w	ip, [sp, #12]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008120:	f000 fa50 	bl	80085c4 <I2CReadBytes>
	Interrupt = VCNL36828P_GET_PS_INT_FLAG();
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <get_ps_if+0x34>)
 8008126:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800812a:	801a      	strh	r2, [r3, #0]
	return Interrupt;
 800812c:	8818      	ldrh	r0, [r3, #0]
}
 800812e:	b280      	uxth	r0, r0
 8008130:	b005      	add	sp, #20
 8008132:	f85d fb04 	ldr.w	pc, [sp], #4
 8008136:	bf00      	nop
 8008138:	20003b48 	.word	0x20003b48
 800813c:	20003af0 	.word	0x20003af0

08008140 <AF_Mode>:
{
 8008140:	b570      	push	{r4, r5, r6, lr}
	DPRINTF("do AF_Mode\r\n");
 8008142:	48c2      	ldr	r0, [pc, #776]	; (800844c <AF_Mode+0x30c>)
{
 8008144:	b086      	sub	sp, #24
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008146:	2402      	movs	r4, #2
	DPRINTF("do AF_Mode\r\n");
 8008148:	f00a fce6 	bl	8012b18 <puts>
 800814c:	48c0      	ldr	r0, [pc, #768]	; (8008450 <AF_Mode+0x310>)
	uint8_t data[2] = {0};
 800814e:	2500      	movs	r5, #0
	DPRINTF("do AF_Mode\r\n");
 8008150:	f00a fce2 	bl	8012b18 <puts>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008154:	4622      	mov	r2, r4
 8008156:	ab04      	add	r3, sp, #16
 8008158:	9400      	str	r4, [sp, #0]
 800815a:	2160      	movs	r1, #96	; 0x60
 800815c:	48bd      	ldr	r0, [pc, #756]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 800815e:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008162:	f000 fa2f 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 8008166:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 800816a:	48ba      	ldr	r0, [pc, #744]	; (8008454 <AF_Mode+0x314>)
 800816c:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_AF_EN|VCNL36828P_PS_AF_DIS))|ps_af;
 800816e:	f022 0210 	bic.w	r2, r2, #16
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008172:	ab04      	add	r3, sp, #16
 8008174:	f8ad 2010 	strh.w	r2, [sp, #16]
 8008178:	2160      	movs	r1, #96	; 0x60
 800817a:	4622      	mov	r2, r4
 800817c:	f000 fa46 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008180:	ab04      	add	r3, sp, #16
 8008182:	2201      	movs	r2, #1
 8008184:	9400      	str	r4, [sp, #0]
 8008186:	2160      	movs	r1, #96	; 0x60
 8008188:	48b2      	ldr	r0, [pc, #712]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 800818a:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 800818e:	f000 fa19 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 8008192:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008196:	48af      	ldr	r0, [pc, #700]	; (8008454 <AF_Mode+0x314>)
 8008198:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_PERIOD_50ms|VCNL36828P_PS_PERIOD_100ms|VCNL36828P_PS_PERIOD_200ms|VCNL36828P_PS_PERIOD_400ms))|ps_period;
 800819a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800819e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80081a2:	ab04      	add	r3, sp, #16
 80081a4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80081a8:	2160      	movs	r1, #96	; 0x60
 80081aa:	2201      	movs	r2, #1
 80081ac:	f000 fa2e 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80081b0:	462a      	mov	r2, r5
 80081b2:	ab04      	add	r3, sp, #16
 80081b4:	9400      	str	r4, [sp, #0]
 80081b6:	2160      	movs	r1, #96	; 0x60
 80081b8:	48a6      	ldr	r0, [pc, #664]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 80081ba:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80081be:	f000 fa01 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 80081c2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80081c6:	48a3      	ldr	r0, [pc, #652]	; (8008454 <AF_Mode+0x314>)
 80081c8:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_PERS_1|VCNL36828P_PS_PERS_2|VCNL36828P_PS_PERS_3|VCNL36828P_PS_PERS_4))|ps_pers;
 80081ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80081ce:	ab04      	add	r3, sp, #16
 80081d0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80081d4:	2160      	movs	r1, #96	; 0x60
 80081d6:	462a      	mov	r2, r5
 80081d8:	f000 fa18 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80081dc:	462a      	mov	r2, r5
 80081de:	ab04      	add	r3, sp, #16
 80081e0:	9400      	str	r4, [sp, #0]
 80081e2:	2160      	movs	r1, #96	; 0x60
 80081e4:	489b      	ldr	r0, [pc, #620]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 80081e6:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80081ea:	f000 f9eb 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 80081ee:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
	DPRINTF("VCNL36828P_SET_PS_INT: value=%x\r\n", value);
 80081f2:	4899      	ldr	r0, [pc, #612]	; (8008458 <AF_Mode+0x318>)
	value = (value&~(VCNL36828P_PS_INT_DIS|VCNL36828P_PS_INT_LOGIC|VCNL36828P_PS_INT_FIRST_HIGH|VCNL36828P_PS_INT_EN))|ps_int;
 80081f4:	f446 7640 	orr.w	r6, r6, #768	; 0x300
 80081f8:	b2b6      	uxth	r6, r6
	DPRINTF("VCNL36828P_SET_PS_INT: value=%x\r\n", value);
 80081fa:	4631      	mov	r1, r6
 80081fc:	f00a fc1e 	bl	8012a3c <iprintf>
 8008200:	4893      	ldr	r0, [pc, #588]	; (8008450 <AF_Mode+0x310>)
 8008202:	f00a fc89 	bl	8012b18 <puts>
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008206:	462a      	mov	r2, r5
 8008208:	4892      	ldr	r0, [pc, #584]	; (8008454 <AF_Mode+0x314>)
 800820a:	9400      	str	r4, [sp, #0]
 800820c:	ab04      	add	r3, sp, #16
 800820e:	2160      	movs	r1, #96	; 0x60
 8008210:	f8ad 6010 	strh.w	r6, [sp, #16]
 8008214:	f000 f9fa 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008218:	462a      	mov	r2, r5
 800821a:	ab04      	add	r3, sp, #16
 800821c:	9400      	str	r4, [sp, #0]
 800821e:	2160      	movs	r1, #96	; 0x60
 8008220:	488c      	ldr	r0, [pc, #560]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 8008222:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008226:	f000 f9cd 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 800822a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 800822e:	4889      	ldr	r0, [pc, #548]	; (8008454 <AF_Mode+0x314>)
 8008230:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_SMART_PERS_DIS|VCNL36828P_PS_SMART_PERS_EN))|Pers;
 8008232:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008236:	ab04      	add	r3, sp, #16
 8008238:	f8ad 2010 	strh.w	r2, [sp, #16]
 800823c:	2160      	movs	r1, #96	; 0x60
 800823e:	462a      	mov	r2, r5
 8008240:	f000 f9e4 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008244:	ab04      	add	r3, sp, #16
 8008246:	2201      	movs	r2, #1
 8008248:	9400      	str	r4, [sp, #0]
 800824a:	2160      	movs	r1, #96	; 0x60
 800824c:	4881      	ldr	r0, [pc, #516]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 800824e:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008252:	f000 f9b7 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 8008256:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 800825a:	487e      	ldr	r0, [pc, #504]	; (8008454 <AF_Mode+0x314>)
 800825c:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_IT_1T|VCNL36828P_PS_IT_2T|VCNL36828P_PS_IT_4T|VCNL36828P_PS_IT_8T))|ps_it;
 800825e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008262:	ab04      	add	r3, sp, #16
 8008264:	f8ad 2010 	strh.w	r2, [sp, #16]
 8008268:	2160      	movs	r1, #96	; 0x60
 800826a:	2201      	movs	r2, #1
 800826c:	f000 f9ce 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008270:	ab04      	add	r3, sp, #16
 8008272:	2201      	movs	r2, #1
 8008274:	9400      	str	r4, [sp, #0]
 8008276:	2160      	movs	r1, #96	; 0x60
 8008278:	4876      	ldr	r0, [pc, #472]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 800827a:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 800827e:	f000 f9a1 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 8008282:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008286:	4873      	ldr	r0, [pc, #460]	; (8008454 <AF_Mode+0x314>)
 8008288:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_MPS_1|VCNL36828P_PS_MPS_2|VCNL36828P_PS_MPS_4|VCNL36828P_PS_MPS_8))|ps_mps;
 800828a:	f022 020c 	bic.w	r2, r2, #12
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 800828e:	ab04      	add	r3, sp, #16
 8008290:	f8ad 2010 	strh.w	r2, [sp, #16]
 8008294:	2160      	movs	r1, #96	; 0x60
 8008296:	2201      	movs	r2, #1
 8008298:	f000 f9b8 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 800829c:	ab04      	add	r3, sp, #16
 800829e:	2201      	movs	r2, #1
 80082a0:	9400      	str	r4, [sp, #0]
 80082a2:	2160      	movs	r1, #96	; 0x60
 80082a4:	486b      	ldr	r0, [pc, #428]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 80082a6:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80082aa:	f000 f98b 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 80082ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80082b2:	4868      	ldr	r0, [pc, #416]	; (8008454 <AF_Mode+0x314>)
 80082b4:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_ITB_25|VCNL36828P_PS_ITB_50))|ps_itb;
 80082b6:	4322      	orrs	r2, r4
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80082b8:	ab04      	add	r3, sp, #16
 80082ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 80082be:	2160      	movs	r1, #96	; 0x60
 80082c0:	2201      	movs	r2, #1
 80082c2:	f000 f9a3 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80082c6:	ab04      	add	r3, sp, #16
 80082c8:	2201      	movs	r2, #1
 80082ca:	9400      	str	r4, [sp, #0]
 80082cc:	2160      	movs	r1, #96	; 0x60
 80082ce:	4861      	ldr	r0, [pc, #388]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 80082d0:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80082d4:	f000 f976 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 80082d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80082dc:	485d      	ldr	r0, [pc, #372]	; (8008454 <AF_Mode+0x314>)
 80082de:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_HG_x1|VCNL36828P_PS_HG_x2))|ps_hg;
 80082e0:	f022 0201 	bic.w	r2, r2, #1
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80082e4:	ab04      	add	r3, sp, #16
 80082e6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80082ea:	2160      	movs	r1, #96	; 0x60
 80082ec:	2201      	movs	r2, #1
 80082ee:	f000 f98d 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80082f2:	ab04      	add	r3, sp, #16
 80082f4:	2201      	movs	r2, #1
 80082f6:	9400      	str	r4, [sp, #0]
 80082f8:	2160      	movs	r1, #96	; 0x60
 80082fa:	4856      	ldr	r0, [pc, #344]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 80082fc:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008300:	f000 f960 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 8008304:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008308:	4852      	ldr	r0, [pc, #328]	; (8008454 <AF_Mode+0x314>)
 800830a:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_SENS_NORMAL|VCNL36828P_PS_SENS_HIGH))|ps_sens;
 800830c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008310:	ab04      	add	r3, sp, #16
 8008312:	f8ad 2010 	strh.w	r2, [sp, #16]
 8008316:	2160      	movs	r1, #96	; 0x60
 8008318:	2201      	movs	r2, #1
 800831a:	f000 f977 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 800831e:	ab04      	add	r3, sp, #16
 8008320:	2201      	movs	r2, #1
 8008322:	9400      	str	r4, [sp, #0]
 8008324:	2160      	movs	r1, #96	; 0x60
 8008326:	484b      	ldr	r0, [pc, #300]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 8008328:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 800832c:	f000 f94a 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 8008330:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008334:	4847      	ldr	r0, [pc, #284]	; (8008454 <AF_Mode+0x314>)
 8008336:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_OFFSET_DIS|VCNL36828P_PS_OFFSET_EN))|ps_offset;
 8008338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 800833c:	ab04      	add	r3, sp, #16
 800833e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8008342:	2160      	movs	r1, #96	; 0x60
 8008344:	2201      	movs	r2, #1
 8008346:	f000 f961 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 800834a:	ab04      	add	r3, sp, #16
 800834c:	2201      	movs	r2, #1
 800834e:	9400      	str	r4, [sp, #0]
 8008350:	2160      	movs	r1, #96	; 0x60
 8008352:	4840      	ldr	r0, [pc, #256]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 8008354:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008358:	f000 f934 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 800835c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008360:	483c      	ldr	r0, [pc, #240]	; (8008454 <AF_Mode+0x314>)
 8008362:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_LED_8_3mA|VCNL36828P_PS_LED_9_7mA|
 8008364:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 800836c:	ab04      	add	r3, sp, #16
 800836e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8008372:	2160      	movs	r1, #96	; 0x60
 8008374:	2201      	movs	r2, #1
 8008376:	f000 f949 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 800837a:	462a      	mov	r2, r5
 800837c:	ab04      	add	r3, sp, #16
 800837e:	9400      	str	r4, [sp, #0]
 8008380:	2160      	movs	r1, #96	; 0x60
 8008382:	4834      	ldr	r0, [pc, #208]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 8008384:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008388:	f000 f91c 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 800838c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008390:	4830      	ldr	r0, [pc, #192]	; (8008454 <AF_Mode+0x314>)
 8008392:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_HD_DIS|VCNL36828P_PS_HD_EN))|ps_hd;
 8008394:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008398:	ab04      	add	r3, sp, #16
 800839a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800839e:	2160      	movs	r1, #96	; 0x60
 80083a0:	462a      	mov	r2, r5
 80083a2:	f000 f933 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80083a6:	462a      	mov	r2, r5
 80083a8:	ab04      	add	r3, sp, #16
 80083aa:	9400      	str	r4, [sp, #0]
 80083ac:	2160      	movs	r1, #96	; 0x60
 80083ae:	4829      	ldr	r0, [pc, #164]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 80083b0:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80083b4:	f000 f906 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 80083b8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80083bc:	4825      	ldr	r0, [pc, #148]	; (8008454 <AF_Mode+0x314>)
 80083be:	9400      	str	r4, [sp, #0]
	value = (value&~(uint16_t)VCNL36828P_START)|ps_st;
 80083c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80083c4:	ab04      	add	r3, sp, #16
 80083c6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80083ca:	2160      	movs	r1, #96	; 0x60
 80083cc:	462a      	mov	r2, r5
 80083ce:	f000 f91d 	bl	800860c <I2CWriteBytes>
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80083d2:	462a      	mov	r2, r5
 80083d4:	ab04      	add	r3, sp, #16
 80083d6:	9400      	str	r4, [sp, #0]
 80083d8:	2160      	movs	r1, #96	; 0x60
 80083da:	481e      	ldr	r0, [pc, #120]	; (8008454 <AF_Mode+0x314>)
	uint8_t data[2] = {0};
 80083dc:	f8ad 5010 	strh.w	r5, [sp, #16]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80083e0:	f000 f8f0 	bl	80085c4 <I2CReadBytes>
	uint16_t val = ((uint16_t)data[1] << 8) | (uint16_t)data[0];
 80083e4:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80083e8:	481a      	ldr	r0, [pc, #104]	; (8008454 <AF_Mode+0x314>)
 80083ea:	9400      	str	r4, [sp, #0]
	value = (value&~(VCNL36828P_PS_SD_EN|VCNL36828P_PS_SD_DIS))|ps_on;
 80083ec:	f041 0101 	orr.w	r1, r1, #1
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 80083f0:	462a      	mov	r2, r5
 80083f2:	ab04      	add	r3, sp, #16
 80083f4:	f8ad 1010 	strh.w	r1, [sp, #16]
 80083f8:	2160      	movs	r1, #96	; 0x60
 80083fa:	f000 f907 	bl	800860c <I2CWriteBytes>
 80083fe:	4815      	ldr	r0, [pc, #84]	; (8008454 <AF_Mode+0x314>)
 8008400:	9400      	str	r4, [sp, #0]
 8008402:	ab04      	add	r3, sp, #16
 8008404:	2205      	movs	r2, #5
 8008406:	2160      	movs	r1, #96	; 0x60
 8008408:	f8ad 4010 	strh.w	r4, [sp, #16]
 800840c:	f000 f8fe 	bl	800860c <I2CWriteBytes>
	Flash_Read_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, User_Data, USER_DATA_SIZE);
 8008410:	4622      	mov	r2, r4
 8008412:	4812      	ldr	r0, [pc, #72]	; (800845c <AF_Mode+0x31c>)
		HighThreshold = DEFALUT_HI_THRESHOLD;
 8008414:	4c12      	ldr	r4, [pc, #72]	; (8008460 <AF_Mode+0x320>)
		LowThreshold = DEFALUT_LO_THRESHOLD;
 8008416:	4d13      	ldr	r5, [pc, #76]	; (8008464 <AF_Mode+0x324>)
	Flash_Read_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, User_Data, USER_DATA_SIZE);
 8008418:	a904      	add	r1, sp, #16
 800841a:	f001 fbc5 	bl	8009ba8 <Flash_Read_Data>
	if (User_Data[proximity]>1000) {
 800841e:	9a04      	ldr	r2, [sp, #16]
 8008420:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8008424:	d944      	bls.n	80084b0 <AF_Mode+0x370>
	if (User_Data[brightness]>5||User_Data[brightness]<0) {
 8008426:	9a05      	ldr	r2, [sp, #20]
		HighThreshold = DEFALUT_HI_THRESHOLD;
 8008428:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 800842c:	6023      	str	r3, [r4, #0]
		User_Data[proximity]=HighThreshold;
 800842e:	9304      	str	r3, [sp, #16]
	if (User_Data[brightness]>5||User_Data[brightness]<0) {
 8008430:	2a05      	cmp	r2, #5
		LowThreshold = DEFALUT_LO_THRESHOLD;
 8008432:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8008436:	602b      	str	r3, [r5, #0]
	if (User_Data[brightness]>5||User_Data[brightness]<0) {
 8008438:	d841      	bhi.n	80084be <AF_Mode+0x37e>
		Flash_Write_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, (uint64_t *)User_Data, USER_DATA_SIZE, FLASH_TYPEPROGRAM_DOUBLEWORD);
 800843a:	2202      	movs	r2, #2
 800843c:	4807      	ldr	r0, [pc, #28]	; (800845c <AF_Mode+0x31c>)
 800843e:	2300      	movs	r3, #0
 8008440:	a904      	add	r1, sp, #16
 8008442:	f001 fb45 	bl	8009ad0 <Flash_Write_Data>
	VCNL36828P_SET_PS_HighThreshold(HighThreshold);
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	e00e      	b.n	8008468 <AF_Mode+0x328>
 800844a:	bf00      	nop
 800844c:	08016b3c 	.word	0x08016b3c
 8008450:	080163a0 	.word	0x080163a0
 8008454:	20003b48 	.word	0x20003b48
 8008458:	08016b08 	.word	0x08016b08
 800845c:	0801ffd0 	.word	0x0801ffd0
 8008460:	20000028 	.word	0x20000028
 8008464:	2000002c 	.word	0x2000002c
 8008468:	f8ad 200c 	strh.w	r2, [sp, #12]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 800846c:	2402      	movs	r4, #2
 800846e:	ab03      	add	r3, sp, #12
 8008470:	4814      	ldr	r0, [pc, #80]	; (80084c4 <AF_Mode+0x384>)
 8008472:	9400      	str	r4, [sp, #0]
 8008474:	2204      	movs	r2, #4
 8008476:	2160      	movs	r1, #96	; 0x60
 8008478:	f000 f8c8 	bl	800860c <I2CWriteBytes>
	VCNL36828P_SET_PS_LowThreshold(LowThreshold);
 800847c:	6829      	ldr	r1, [r5, #0]
 800847e:	f8ad 100c 	strh.w	r1, [sp, #12]
	I2CWriteBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, (uint8_t*)&val, sizeof(val));
 8008482:	ab03      	add	r3, sp, #12
 8008484:	480f      	ldr	r0, [pc, #60]	; (80084c4 <AF_Mode+0x384>)
 8008486:	9400      	str	r4, [sp, #0]
 8008488:	2203      	movs	r2, #3
 800848a:	2160      	movs	r1, #96	; 0x60
 800848c:	f000 f8be 	bl	800860c <I2CWriteBytes>
	uint8_t data[2] = {0};
 8008490:	2500      	movs	r5, #0
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 8008492:	ab03      	add	r3, sp, #12
 8008494:	22f9      	movs	r2, #249	; 0xf9
 8008496:	2160      	movs	r1, #96	; 0x60
 8008498:	9400      	str	r4, [sp, #0]
 800849a:	480a      	ldr	r0, [pc, #40]	; (80084c4 <AF_Mode+0x384>)
	uint8_t data[2] = {0};
 800849c:	f8ad 500c 	strh.w	r5, [sp, #12]
	I2CReadBytes(&VCNL36828P_I2C1, VCNL36828P_SLAVE_ADD1_7bit, command, data, sizeof(data));
 80084a0:	f000 f890 	bl	80085c4 <I2CReadBytes>
	HAL_Delay(1000);
 80084a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084a8:	f001 f950 	bl	800974c <HAL_Delay>
}
 80084ac:	b006      	add	sp, #24
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
		LowThreshold = User_Data[proximity]-20;
 80084b0:	f1a2 0314 	sub.w	r3, r2, #20
 80084b4:	602b      	str	r3, [r5, #0]
	if (User_Data[brightness]>5||User_Data[brightness]<0) {
 80084b6:	9b05      	ldr	r3, [sp, #20]
		HighThreshold = User_Data[proximity];
 80084b8:	6022      	str	r2, [r4, #0]
	if (User_Data[brightness]>5||User_Data[brightness]<0) {
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	d9d4      	bls.n	8008468 <AF_Mode+0x328>
		User_Data[brightness]=5;
 80084be:	2305      	movs	r3, #5
 80084c0:	9305      	str	r3, [sp, #20]
	if (use_default)
 80084c2:	e7ba      	b.n	800843a <AF_Mode+0x2fa>
 80084c4:	20003b48 	.word	0x20003b48

080084c8 <initialize_VCNL36828P>:
{
 80084c8:	b508      	push	{r3, lr}
	DPRINTF("initialize_VCNL36828P\r\n");
 80084ca:	4808      	ldr	r0, [pc, #32]	; (80084ec <initialize_VCNL36828P+0x24>)
 80084cc:	f00a fb24 	bl	8012b18 <puts>
 80084d0:	4807      	ldr	r0, [pc, #28]	; (80084f0 <initialize_VCNL36828P+0x28>)
 80084d2:	f00a fb21 	bl	8012b18 <puts>
	Reset_Sensor(VCNL36828P_SLAVE_ADD1_7bit);
 80084d6:	2060      	movs	r0, #96	; 0x60
 80084d8:	f7ff fdb8 	bl	800804c <Reset_Sensor>
	SEL_Offset = 1;
 80084dc:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <initialize_VCNL36828P+0x2c>)
 80084de:	2201      	movs	r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
}
 80084e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	AF_Mode();
 80084e6:	f7ff be2b 	b.w	8008140 <AF_Mode>
 80084ea:	bf00      	nop
 80084ec:	08016b48 	.word	0x08016b48
 80084f0:	080163a0 	.word	0x080163a0
 80084f4:	20003af4 	.word	0x20003af4

080084f8 <read_button_states>:
		return (int8_t) lux_level;
}


bool read_button_states(int8_t *led_brightness_buttons)
{
 80084f8:	b510      	push	{r4, lr}
	bool sts=FALSE;
	//uint8_t UserTxBufferFS[4];// betta added
	uint8_t tmp[30]={0};
	uint32_t User_Data[USER_DATA_SIZE];

	if(HAL_GPIO_ReadPin(BRIGHTNESS_MINUS_GPIO_Port,BRIGHTNESS_MINUS_Pin)==0) {
 80084fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
 80084fe:	b082      	sub	sp, #8
 8008500:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(BRIGHTNESS_MINUS_GPIO_Port,BRIGHTNESS_MINUS_Pin)==0) {
 8008502:	4818      	ldr	r0, [pc, #96]	; (8008564 <read_button_states+0x6c>)
 8008504:	f001 fd18 	bl	8009f38 <HAL_GPIO_ReadPin>
 8008508:	b9d0      	cbnz	r0, 8008540 <read_button_states+0x48>
		// Set Mode on button release
	    //*led_brightness_buttons = convert_lux_to_brightness(lux_level_current);

		*led_brightness_buttons -= led_button_change_size;
 800850a:	4a17      	ldr	r2, [pc, #92]	; (8008568 <read_button_states+0x70>)
 800850c:	7823      	ldrb	r3, [r4, #0]
 800850e:	7812      	ldrb	r2, [r2, #0]
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	b25b      	sxtb	r3, r3
		if(*led_brightness_buttons < 0)
 8008514:	2b00      	cmp	r3, #0
 8008516:	db11      	blt.n	800853c <read_button_states+0x44>
		//*led_brightness_buttons = convert_lux_to_brightness(lux_level_current);
		// Increase Brightness
		*led_brightness_buttons += led_button_change_size;
		if(*led_brightness_buttons > 5)
		{
			*led_brightness_buttons = 5;
 8008518:	7023      	strb	r3, [r4, #0]
	    sts = TRUE;
	}

out:
	if (sts) {
		Flash_Read_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, User_Data, USER_DATA_SIZE);
 800851a:	4669      	mov	r1, sp
 800851c:	2202      	movs	r2, #2
 800851e:	4813      	ldr	r0, [pc, #76]	; (800856c <read_button_states+0x74>)
 8008520:	f001 fb42 	bl	8009ba8 <Flash_Read_Data>
		User_Data[brightness]= *led_brightness_buttons;
 8008524:	f994 4000 	ldrsb.w	r4, [r4]
		Flash_Write_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, (uint64_t *)User_Data, USER_DATA_SIZE, FLASH_TYPEPROGRAM_DOUBLEWORD);
 8008528:	4810      	ldr	r0, [pc, #64]	; (800856c <read_button_states+0x74>)
		User_Data[brightness]= *led_brightness_buttons;
 800852a:	9401      	str	r4, [sp, #4]
		Flash_Write_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, (uint64_t *)User_Data, USER_DATA_SIZE, FLASH_TYPEPROGRAM_DOUBLEWORD);
 800852c:	2300      	movs	r3, #0
 800852e:	2202      	movs	r2, #2
 8008530:	4669      	mov	r1, sp
 8008532:	f001 facd 	bl	8009ad0 <Flash_Write_Data>
 8008536:	2001      	movs	r0, #1
		sprintf(tmp, "brightness_level=%d\n",User_Data[brightness]);
		sendCdcData((uint8_t*)tmp, strlen(tmp));
		#endif
	}
	return sts;
}
 8008538:	b002      	add	sp, #8
 800853a:	bd10      	pop	{r4, pc}
			*led_brightness_buttons = 0;
 800853c:	7020      	strb	r0, [r4, #0]
 800853e:	e7ec      	b.n	800851a <read_button_states+0x22>
	if(HAL_GPIO_ReadPin(BRIGHTNESS_PLUS_GPIO_Port,BRIGHTNESS_PLUS_Pin)== 0) {
 8008540:	4808      	ldr	r0, [pc, #32]	; (8008564 <read_button_states+0x6c>)
 8008542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008546:	f001 fcf7 	bl	8009f38 <HAL_GPIO_ReadPin>
 800854a:	b940      	cbnz	r0, 800855e <read_button_states+0x66>
		*led_brightness_buttons += led_button_change_size;
 800854c:	4a06      	ldr	r2, [pc, #24]	; (8008568 <read_button_states+0x70>)
 800854e:	7823      	ldrb	r3, [r4, #0]
 8008550:	7812      	ldrb	r2, [r2, #0]
 8008552:	4413      	add	r3, r2
 8008554:	b25b      	sxtb	r3, r3
		if(*led_brightness_buttons > 5)
 8008556:	2b05      	cmp	r3, #5
			*led_brightness_buttons = 5;
 8008558:	bfc8      	it	gt
 800855a:	2305      	movgt	r3, #5
 800855c:	e7dc      	b.n	8008518 <read_button_states+0x20>
	bool sts=FALSE;
 800855e:	2000      	movs	r0, #0
}
 8008560:	b002      	add	sp, #8
 8008562:	bd10      	pop	{r4, pc}
 8008564:	48000400 	.word	0x48000400
 8008568:	20000031 	.word	0x20000031
 800856c:	0801ffd0 	.word	0x0801ffd0

08008570 <set_led_brightness>:

void set_led_brightness(int8_t brightness)
{
 8008570:	b510      	push	{r4, lr}
#endif
	if(brightness < 0)
	{
		brightness = 0;
	}
	if(led_brightness_current != brightness)
 8008572:	4a12      	ldr	r2, [pc, #72]	; (80085bc <set_led_brightness+0x4c>)
 8008574:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 8008578:	2c05      	cmp	r4, #5
 800857a:	7811      	ldrb	r1, [r2, #0]
{
 800857c:	b088      	sub	sp, #32
 800857e:	bfa8      	it	ge
 8008580:	2405      	movge	r4, #5
	uint8_t tmp[25]={0};
 8008582:	2300      	movs	r3, #0
	if(led_brightness_current != brightness)
 8008584:	42a1      	cmp	r1, r4
	uint8_t tmp[25]={0};
 8008586:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800858a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800858e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008592:	f88d 301c 	strb.w	r3, [sp, #28]
	if(led_brightness_current != brightness)
 8008596:	d003      	beq.n	80085a0 <set_led_brightness+0x30>
	{
		led_brightness_current = brightness;
 8008598:	b2e0      	uxtb	r0, r4
 800859a:	7010      	strb	r0, [r2, #0]
		//DPRINTF("set_led_brightness: Brightness=%d\r\n", brightness);
		LM3435_Write_Current_LED((uint8_t) brightness);
 800859c:	f7f9 fc66 	bl	8001e6c <LM3435_Write_Current_LED>
		//HAL_Delay(50);
	}
	sprintf(tmp, "BRIGHTNESS-LEVEL=%d:5",brightness);
 80085a0:	4622      	mov	r2, r4
 80085a2:	4907      	ldr	r1, [pc, #28]	; (80085c0 <set_led_brightness+0x50>)
 80085a4:	a801      	add	r0, sp, #4
 80085a6:	f00a fabf 	bl	8012b28 <siprintf>
	sendCdcData((uint8_t*)tmp, strlen(tmp));
 80085aa:	a801      	add	r0, sp, #4
 80085ac:	f7f7 fe60 	bl	8000270 <strlen>
 80085b0:	4601      	mov	r1, r0
 80085b2:	a801      	add	r0, sp, #4
 80085b4:	f000 f90e 	bl	80087d4 <sendCdcData>
}
 80085b8:	b008      	add	sp, #32
 80085ba:	bd10      	pop	{r4, pc}
 80085bc:	20000030 	.word	0x20000030
 80085c0:	08016b60 	.word	0x08016b60

080085c4 <I2CReadBytes>:
 *
 *  returns: value of the byte returned
 *
 */
HAL_StatusTypeDef I2CReadBytes(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t reg, uint8_t* Buffer, uint8_t BufferSize)
{
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	b084      	sub	sp, #16
	{
		Error_Handler();
	}
#else
	uint16_t timeout = 0;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, (DevAddress << 1)&0xFE, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)Buffer, BufferSize, I2C_TIMEOUT);
 80085c8:	0049      	lsls	r1, r1, #1
 80085ca:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80085ce:	9401      	str	r4, [sp, #4]
 80085d0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	9402      	str	r4, [sp, #8]
 80085d8:	2301      	movs	r3, #1
 80085da:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
{
 80085de:	4605      	mov	r5, r0
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, (DevAddress << 1)&0xFE, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)Buffer, BufferSize, I2C_TIMEOUT);
 80085e0:	f002 fba4 	bl	800ad2c <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 80085e4:	f240 34e9 	movw	r4, #1001	; 0x3e9
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, (DevAddress << 1)&0xFE, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)Buffer, BufferSize, I2C_TIMEOUT);
 80085e8:	4606      	mov	r6, r0
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 80085ea:	e002      	b.n	80085f2 <I2CReadBytes+0x2e>
 80085ec:	b154      	cbz	r4, 8008604 <I2CReadBytes+0x40>
 80085ee:	f001 f8ad 	bl	800974c <HAL_Delay>
 80085f2:	4628      	mov	r0, r5
 80085f4:	f002 ffe0 	bl	800b5b8 <HAL_I2C_GetState>
 80085f8:	3c01      	subs	r4, #1
 80085fa:	2820      	cmp	r0, #32
 80085fc:	b2a4      	uxth	r4, r4
 80085fe:	f04f 000a 	mov.w	r0, #10
 8008602:	d1f3      	bne.n	80085ec <I2CReadBytes+0x28>
//	HAL_I2C_Master_Receive(hi2c, (DevAddress << 1) | I2C_READ , Buffer, 0, I2C_TIMEOUT);
#endif
	return status;
}
 8008604:	4630      	mov	r0, r6
 8008606:	b004      	add	sp, #16
 8008608:	bd70      	pop	{r4, r5, r6, pc}
 800860a:	bf00      	nop

0800860c <I2CWriteBytes>:
 *  reg: register address
 *  val: value of the byte to be written
 *
 */
void I2CWriteBytes(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t reg, uint8_t* Buffer, uint8_t BufferSize)
{
 800860c:	b530      	push	{r4, r5, lr}
 800860e:	b085      	sub	sp, #20
	uint16_t timeout = 0;

	if(HAL_I2C_Mem_Write(hi2c, (DevAddress << 1)&0xFE, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)Buffer, BufferSize, I2C_TIMEOUT) != HAL_OK)
 8008610:	0049      	lsls	r1, r1, #1
 8008612:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8008616:	9401      	str	r4, [sp, #4]
 8008618:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8008622:	2301      	movs	r3, #1
 8008624:	9402      	str	r4, [sp, #8]
{
 8008626:	4605      	mov	r5, r0
	if(HAL_I2C_Mem_Write(hi2c, (DevAddress << 1)&0xFE, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)Buffer, BufferSize, I2C_TIMEOUT) != HAL_OK)
 8008628:	f002 fa50 	bl	800aacc <HAL_I2C_Mem_Write>
 800862c:	b980      	cbnz	r0, 8008650 <I2CWriteBytes+0x44>
{
 800862e:	f240 34e9 	movw	r4, #1001	; 0x3e9
 8008632:	e002      	b.n	800863a <I2CWriteBytes+0x2e>
	{
		Error_Handler();
	}
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 8008634:	b154      	cbz	r4, 800864c <I2CWriteBytes+0x40>
 8008636:	f001 f889 	bl	800974c <HAL_Delay>
 800863a:	4628      	mov	r0, r5
 800863c:	f002 ffbc 	bl	800b5b8 <HAL_I2C_GetState>
 8008640:	3c01      	subs	r4, #1
 8008642:	2820      	cmp	r0, #32
 8008644:	b2a4      	uxth	r4, r4
 8008646:	f04f 000a 	mov.w	r0, #10
 800864a:	d1f3      	bne.n	8008634 <I2CWriteBytes+0x28>
}
 800864c:	b005      	add	sp, #20
 800864e:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8008650:	f000 fd8a 	bl	8009168 <Error_Handler>
 8008654:	e7eb      	b.n	800862e <I2CWriteBytes+0x22>
 8008656:	bf00      	nop

08008658 <I2CReadBytes16>:
 *
 *  returns: value of the byte returned
 *
 */
HAL_StatusTypeDef I2CReadBytes16(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t reg, uint8_t* Buffer, uint8_t BufferSize)
{
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	b084      	sub	sp, #16
	{
		Error_Handler();
	}
#else
	uint16_t timeout = 0;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, (DevAddress << 1)&0xFE, reg, I2C_MEMADD_SIZE_16BIT, (uint8_t *)Buffer, BufferSize, I2C_TIMEOUT);
 800865c:	0049      	lsls	r1, r1, #1
 800865e:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8008662:	9401      	str	r4, [sp, #4]
 8008664:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	9402      	str	r4, [sp, #8]
 800866c:	2302      	movs	r3, #2
 800866e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
{
 8008672:	4605      	mov	r5, r0
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, (DevAddress << 1)&0xFE, reg, I2C_MEMADD_SIZE_16BIT, (uint8_t *)Buffer, BufferSize, I2C_TIMEOUT);
 8008674:	f002 fb5a 	bl	800ad2c <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 8008678:	f240 34e9 	movw	r4, #1001	; 0x3e9
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, (DevAddress << 1)&0xFE, reg, I2C_MEMADD_SIZE_16BIT, (uint8_t *)Buffer, BufferSize, I2C_TIMEOUT);
 800867c:	4606      	mov	r6, r0
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 800867e:	e002      	b.n	8008686 <I2CReadBytes16+0x2e>
 8008680:	b154      	cbz	r4, 8008698 <I2CReadBytes16+0x40>
 8008682:	f001 f863 	bl	800974c <HAL_Delay>
 8008686:	4628      	mov	r0, r5
 8008688:	f002 ff96 	bl	800b5b8 <HAL_I2C_GetState>
 800868c:	3c01      	subs	r4, #1
 800868e:	2820      	cmp	r0, #32
 8008690:	b2a4      	uxth	r4, r4
 8008692:	f04f 000a 	mov.w	r0, #10
 8008696:	d1f3      	bne.n	8008680 <I2CReadBytes16+0x28>
//	HAL_I2C_Master_Receive(hi2c, (DevAddress << 1) | I2C_READ , Buffer, 0, I2C_TIMEOUT);
#endif
	return status;
}
 8008698:	4630      	mov	r0, r6
 800869a:	b004      	add	sp, #16
 800869c:	bd70      	pop	{r4, r5, r6, pc}
 800869e:	bf00      	nop

080086a0 <I2CReadByte>:
 *
 *  returns: value of the byte returned
 *
 */
uint8_t I2CReadByte(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t reg)
{
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	b086      	sub	sp, #24
	uint16_t timeout = 0;
	uint8_t read_data = 0;
	if(HAL_I2C_Master_Transmit(hi2c, (DevAddress << 1) | I2C_WRITE , (uint8_t*)&reg, 1, I2C_TIMEOUT) != HAL_OK)
 80086a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086a8:	004e      	lsls	r6, r1, #1
 80086aa:	9300      	str	r3, [sp, #0]
	uint8_t read_data = 0;
 80086ac:	2300      	movs	r3, #0
{
 80086ae:	f88d 200f 	strb.w	r2, [sp, #15]
	uint8_t read_data = 0;
 80086b2:	f88d 3017 	strb.w	r3, [sp, #23]
	if(HAL_I2C_Master_Transmit(hi2c, (DevAddress << 1) | I2C_WRITE , (uint8_t*)&reg, 1, I2C_TIMEOUT) != HAL_OK)
 80086b6:	b2b1      	uxth	r1, r6
 80086b8:	2301      	movs	r3, #1
 80086ba:	f10d 020f 	add.w	r2, sp, #15
{
 80086be:	4605      	mov	r5, r0
	if(HAL_I2C_Master_Transmit(hi2c, (DevAddress << 1) | I2C_WRITE , (uint8_t*)&reg, 1, I2C_TIMEOUT) != HAL_OK)
 80086c0:	f001 ff7c 	bl	800a5bc <HAL_I2C_Master_Transmit>
 80086c4:	b9f8      	cbnz	r0, 8008706 <I2CReadByte+0x66>
{
 80086c6:	f240 34e9 	movw	r4, #1001	; 0x3e9
 80086ca:	e002      	b.n	80086d2 <I2CReadByte+0x32>
	{
		Error_Handler();
	}
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 80086cc:	b154      	cbz	r4, 80086e4 <I2CReadByte+0x44>
 80086ce:	f001 f83d 	bl	800974c <HAL_Delay>
 80086d2:	4628      	mov	r0, r5
 80086d4:	f002 ff70 	bl	800b5b8 <HAL_I2C_GetState>
 80086d8:	3c01      	subs	r4, #1
 80086da:	2820      	cmp	r0, #32
 80086dc:	b2a4      	uxth	r4, r4
 80086de:	f04f 000a 	mov.w	r0, #10
 80086e2:	d1f3      	bne.n	80086cc <I2CReadByte+0x2c>

	if(HAL_I2C_Master_Receive(hi2c, (DevAddress << 1) | I2C_READ , (uint8_t*)&read_data, 1, I2C_TIMEOUT) != HAL_OK)
 80086e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086e8:	f046 0101 	orr.w	r1, r6, #1
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	f10d 0217 	add.w	r2, sp, #23
 80086f2:	2301      	movs	r3, #1
 80086f4:	b289      	uxth	r1, r1
 80086f6:	4628      	mov	r0, r5
 80086f8:	f002 f90c 	bl	800a914 <HAL_I2C_Master_Receive>
 80086fc:	b930      	cbnz	r0, 800870c <I2CReadByte+0x6c>
	{
		Error_Handler();
	}
	return read_data;

}
 80086fe:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8008702:	b006      	add	sp, #24
 8008704:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 8008706:	f000 fd2f 	bl	8009168 <Error_Handler>
 800870a:	e7dc      	b.n	80086c6 <I2CReadByte+0x26>
		Error_Handler();
 800870c:	f000 fd2c 	bl	8009168 <Error_Handler>
}
 8008710:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8008714:	b006      	add	sp, #24
 8008716:	bd70      	pop	{r4, r5, r6, pc}

08008718 <I2CWriteByte>:
 *  reg: register address
 *  val: value of the byte to be written
 *
 */
void I2CWriteByte(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t reg, uint8_t val)
{
 8008718:	b530      	push	{r4, r5, lr}
 800871a:	b085      	sub	sp, #20
	uint16_t timeout = 0;
	uint16_t write_data = reg | (val<<8);
 800871c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	if(HAL_I2C_Master_Transmit(hi2c, (DevAddress << 1) | I2C_WRITE , (uint8_t*)&write_data, 2, I2C_TIMEOUT) != HAL_OK)
 8008720:	0049      	lsls	r1, r1, #1
 8008722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008726:	9300      	str	r3, [sp, #0]
	uint16_t write_data = reg | (val<<8);
 8008728:	f8ad 200e 	strh.w	r2, [sp, #14]
	if(HAL_I2C_Master_Transmit(hi2c, (DevAddress << 1) | I2C_WRITE , (uint8_t*)&write_data, 2, I2C_TIMEOUT) != HAL_OK)
 800872c:	b289      	uxth	r1, r1
 800872e:	2302      	movs	r3, #2
 8008730:	f10d 020e 	add.w	r2, sp, #14
{
 8008734:	4605      	mov	r5, r0
	if(HAL_I2C_Master_Transmit(hi2c, (DevAddress << 1) | I2C_WRITE , (uint8_t*)&write_data, 2, I2C_TIMEOUT) != HAL_OK)
 8008736:	f001 ff41 	bl	800a5bc <HAL_I2C_Master_Transmit>
 800873a:	b980      	cbnz	r0, 800875e <I2CWriteByte+0x46>
{
 800873c:	f240 34e9 	movw	r4, #1001	; 0x3e9
 8008740:	e002      	b.n	8008748 <I2CWriteByte+0x30>
	{
		Error_Handler();
	}
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY && timeout++<I2C_TIMEOUT) HAL_Delay(10);
 8008742:	b154      	cbz	r4, 800875a <I2CWriteByte+0x42>
 8008744:	f001 f802 	bl	800974c <HAL_Delay>
 8008748:	4628      	mov	r0, r5
 800874a:	f002 ff35 	bl	800b5b8 <HAL_I2C_GetState>
 800874e:	3c01      	subs	r4, #1
 8008750:	2820      	cmp	r0, #32
 8008752:	b2a4      	uxth	r4, r4
 8008754:	f04f 000a 	mov.w	r0, #10
 8008758:	d1f3      	bne.n	8008742 <I2CWriteByte+0x2a>
}
 800875a:	b005      	add	sp, #20
 800875c:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 800875e:	f000 fd03 	bl	8009168 <Error_Handler>
 8008762:	e7eb      	b.n	800873c <I2CWriteByte+0x24>

08008764 <init_imu>:
static uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];

uint8_t imu_buffer[24] = {0x55};

bool init_imu(void)
{
 8008764:	b510      	push	{r4, lr}
	bool status = true;
	if (ak09918_init()) {
 8008766:	f7f8 fc43 	bl	8000ff0 <ak09918_init>
 800876a:	b180      	cbz	r0, 800878e <init_imu+0x2a>
		DPRINTF("icm42688_init OK");
 800876c:	4816      	ldr	r0, [pc, #88]	; (80087c8 <init_imu+0x64>)
 800876e:	f00a f965 	bl	8012a3c <iprintf>
 8008772:	4816      	ldr	r0, [pc, #88]	; (80087cc <init_imu+0x68>)
 8008774:	f00a f9d0 	bl	8012b18 <puts>
	}
	else {
		DPRINTF("icm42688_init Failed");
		status = false;
	}
	if (icm42688_init()) {
 8008778:	f7f9 f99a 	bl	8001ab0 <icm42688_init>
 800877c:	b9d0      	cbnz	r0, 80087b4 <init_imu+0x50>
		DPRINTF("icm42688_init OK");
	}
	else {
		DPRINTF("icm42688_init Failed");
 800877e:	4814      	ldr	r0, [pc, #80]	; (80087d0 <init_imu+0x6c>)
 8008780:	f00a f95c 	bl	8012a3c <iprintf>
 8008784:	4811      	ldr	r0, [pc, #68]	; (80087cc <init_imu+0x68>)
 8008786:	f00a f9c7 	bl	8012b18 <puts>
		status = false;
 800878a:	2000      	movs	r0, #0
	}
	if (status==true) icm42688_enable_data_ready_interrupt();
	return status;

}
 800878c:	bd10      	pop	{r4, pc}
		DPRINTF("icm42688_init Failed");
 800878e:	4604      	mov	r4, r0
 8008790:	480f      	ldr	r0, [pc, #60]	; (80087d0 <init_imu+0x6c>)
 8008792:	f00a f953 	bl	8012a3c <iprintf>
 8008796:	480d      	ldr	r0, [pc, #52]	; (80087cc <init_imu+0x68>)
 8008798:	f00a f9be 	bl	8012b18 <puts>
	if (icm42688_init()) {
 800879c:	f7f9 f988 	bl	8001ab0 <icm42688_init>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d0ec      	beq.n	800877e <init_imu+0x1a>
		DPRINTF("icm42688_init OK");
 80087a4:	4808      	ldr	r0, [pc, #32]	; (80087c8 <init_imu+0x64>)
 80087a6:	f00a f949 	bl	8012a3c <iprintf>
 80087aa:	4808      	ldr	r0, [pc, #32]	; (80087cc <init_imu+0x68>)
 80087ac:	f00a f9b4 	bl	8012b18 <puts>
 80087b0:	4620      	mov	r0, r4
}
 80087b2:	bd10      	pop	{r4, pc}
		DPRINTF("icm42688_init OK");
 80087b4:	4804      	ldr	r0, [pc, #16]	; (80087c8 <init_imu+0x64>)
 80087b6:	f00a f941 	bl	8012a3c <iprintf>
 80087ba:	4804      	ldr	r0, [pc, #16]	; (80087cc <init_imu+0x68>)
 80087bc:	f00a f9ac 	bl	8012b18 <puts>
	if (status==true) icm42688_enable_data_ready_interrupt();
 80087c0:	f7f8 ff56 	bl	8001670 <icm42688_enable_data_ready_interrupt>
 80087c4:	2001      	movs	r0, #1
}
 80087c6:	bd10      	pop	{r4, pc}
 80087c8:	08016b78 	.word	0x08016b78
 80087cc:	080163a0 	.word	0x080163a0
 80087d0:	08016b8c 	.word	0x08016b8c

080087d4 <sendCdcData>:
//
//	if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
//	{
//		UserTxBufPtrOut = 0;
//	}
	CDC_Transmit_FS(pbuff, length);
 80087d4:	b289      	uxth	r1, r1
 80087d6:	f007 beef 	b.w	80105b8 <CDC_Transmit_FS>
 80087da:	bf00      	nop

080087dc <USBD_Composite_Init>:
  0x00,
};

static uint8_t  USBD_Composite_Init (USBD_HandleTypeDef *pdev,
                            uint8_t cfgidx)
{
 80087dc:	b538      	push	{r3, r4, r5, lr}
  uint8_t res = 0;

  pdev->pUserData =  (void*)&USBD_CDC_Interface_fops_FS;
  res +=  USBD_CDC.Init(pdev,cfgidx);
 80087de:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <USBD_Composite_Init+0x3c>)
  pdev->pUserData =  (void*)&USBD_CDC_Interface_fops_FS;
 80087e0:	4a0e      	ldr	r2, [pc, #56]	; (800881c <USBD_Composite_Init+0x40>)
  res +=  USBD_CDC.Init(pdev,cfgidx);
 80087e2:	681b      	ldr	r3, [r3, #0]
  pdev->pUserData =  (void*)&USBD_CDC_Interface_fops_FS;
 80087e4:	f8c0 22c0 	str.w	r2, [r0, #704]	; 0x2c0
{
 80087e8:	4604      	mov	r4, r0
 80087ea:	460d      	mov	r5, r1
  res +=  USBD_CDC.Init(pdev,cfgidx);
 80087ec:	4798      	blx	r3
  pCDCData = pdev->pClassData;
 80087ee:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <USBD_Composite_Init+0x44>)
 80087f0:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 80087f4:	601a      	str	r2, [r3, #0]
  /* TODO */
  pdev->pUserData = NULL;
  res +=  USBD_HID.Init(pdev,cfgidx);
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <USBD_Composite_Init+0x48>)
  pdev->pUserData = NULL;
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8c4 22c0 	str.w	r2, [r4, #704]	; 0x2c0
  res +=  USBD_HID.Init(pdev,cfgidx);
 80087fe:	4629      	mov	r1, r5
 8008800:	681b      	ldr	r3, [r3, #0]
  res +=  USBD_CDC.Init(pdev,cfgidx);
 8008802:	4605      	mov	r5, r0
  res +=  USBD_HID.Init(pdev,cfgidx);
 8008804:	4620      	mov	r0, r4
 8008806:	4798      	blx	r3
  pHIDData = pdev->pClassData;
 8008808:	4b07      	ldr	r3, [pc, #28]	; (8008828 <USBD_Composite_Init+0x4c>)
 800880a:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 800880e:	601a      	str	r2, [r3, #0]
  res +=  USBD_HID.Init(pdev,cfgidx);
 8008810:	4428      	add	r0, r5
  return res;
}
 8008812:	b2c0      	uxtb	r0, r0
 8008814:	bd38      	pop	{r3, r4, r5, pc}
 8008816:	bf00      	nop
 8008818:	20000110 	.word	0x20000110
 800881c:	2000031c 	.word	0x2000031c
 8008820:	20003b3c 	.word	0x20003b3c
 8008824:	20000260 	.word	0x20000260
 8008828:	20003b40 	.word	0x20003b40

0800882c <USBD_Composite_DeInit>:

static uint8_t  USBD_Composite_DeInit (USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
  uint8_t res = 0;
	pdev->pClassData = pCDCData;
 800882c:	4a0d      	ldr	r2, [pc, #52]	; (8008864 <USBD_Composite_DeInit+0x38>)
{
 800882e:	b538      	push	{r3, r4, r5, lr}
	pdev->pClassData = pCDCData;
 8008830:	6812      	ldr	r2, [r2, #0]
	pdev->pUserData = &USBD_CDC_Interface_fops_FS;
 8008832:	4d0d      	ldr	r5, [pc, #52]	; (8008868 <USBD_Composite_DeInit+0x3c>)
	res +=  USBD_CDC.DeInit(pdev,cfgidx);
 8008834:	4b0d      	ldr	r3, [pc, #52]	; (800886c <USBD_Composite_DeInit+0x40>)
	pdev->pClassData = pCDCData;
 8008836:	e9c0 25af 	strd	r2, r5, [r0, #700]	; 0x2bc
	res +=  USBD_CDC.DeInit(pdev,cfgidx);
 800883a:	685b      	ldr	r3, [r3, #4]
{
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
	res +=  USBD_CDC.DeInit(pdev,cfgidx);
 8008840:	4798      	blx	r3

	pdev->pClassData = pHIDData;
 8008842:	490b      	ldr	r1, [pc, #44]	; (8008870 <USBD_Composite_DeInit+0x44>)
  /* TODO */
	pdev->pUserData = NULL;
	res +=  USBD_HID.DeInit(pdev,cfgidx);
 8008844:	4a0b      	ldr	r2, [pc, #44]	; (8008874 <USBD_Composite_DeInit+0x48>)
	pdev->pClassData = pHIDData;
 8008846:	6809      	ldr	r1, [r1, #0]
 8008848:	f8c4 12bc 	str.w	r1, [r4, #700]	; 0x2bc
	res +=  USBD_CDC.DeInit(pdev,cfgidx);
 800884c:	4603      	mov	r3, r0
	pdev->pUserData = NULL;
 800884e:	2000      	movs	r0, #0
 8008850:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
	res +=  USBD_HID.DeInit(pdev,cfgidx);
 8008854:	6852      	ldr	r2, [r2, #4]
 8008856:	4629      	mov	r1, r5
 8008858:	4620      	mov	r0, r4
	res +=  USBD_CDC.DeInit(pdev,cfgidx);
 800885a:	461c      	mov	r4, r3
	res +=  USBD_HID.DeInit(pdev,cfgidx);
 800885c:	4790      	blx	r2
 800885e:	4420      	add	r0, r4

	return res;
}
 8008860:	b2c0      	uxtb	r0, r0
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20003b3c 	.word	0x20003b3c
 8008868:	2000031c 	.word	0x2000031c
 800886c:	20000110 	.word	0x20000110
 8008870:	20003b40 	.word	0x20003b40
 8008874:	20000260 	.word	0x20000260

08008878 <USBD_Composite_EP0_RxReady>:


static uint8_t  USBD_Composite_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
	pdev->pClassData = pCDCData;
 8008878:	4905      	ldr	r1, [pc, #20]	; (8008890 <USBD_Composite_EP0_RxReady+0x18>)
	pdev->pUserData = &USBD_CDC_Interface_fops_FS;
  return USBD_CDC.EP0_RxReady(pdev);
 800887a:	4a06      	ldr	r2, [pc, #24]	; (8008894 <USBD_Composite_EP0_RxReady+0x1c>)
{
 800887c:	b410      	push	{r4}
	pdev->pClassData = pCDCData;
 800887e:	680c      	ldr	r4, [r1, #0]
	pdev->pUserData = &USBD_CDC_Interface_fops_FS;
 8008880:	4905      	ldr	r1, [pc, #20]	; (8008898 <USBD_Composite_EP0_RxReady+0x20>)
  return USBD_CDC.EP0_RxReady(pdev);
 8008882:	6912      	ldr	r2, [r2, #16]
	pdev->pUserData = &USBD_CDC_Interface_fops_FS;
 8008884:	e9c0 41af 	strd	r4, r1, [r0, #700]	; 0x2bc
}
 8008888:	f85d 4b04 	ldr.w	r4, [sp], #4
  return USBD_CDC.EP0_RxReady(pdev);
 800888c:	4710      	bx	r2
 800888e:	bf00      	nop
 8008890:	20003b3c 	.word	0x20003b3c
 8008894:	20000110 	.word	0x20000110
 8008898:	2000031c 	.word	0x2000031c

0800889c <USBD_Composite_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
static uint8_t  USBD_Composite_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800889c:	b410      	push	{r4}
 800889e:	780b      	ldrb	r3, [r1, #0]
 80088a0:	f003 0303 	and.w	r3, r3, #3
  switch (req->bmRequest & USB_REQ_RECIPIENT_MASK)
 80088a4:	2b01      	cmp	r3, #1
{
 80088a6:	460a      	mov	r2, r1
 80088a8:	4684      	mov	ip, r0
  switch (req->bmRequest & USB_REQ_RECIPIENT_MASK)
 80088aa:	d01a      	beq.n	80088e2 <USBD_Composite_Setup+0x46>
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d114      	bne.n	80088da <USBD_Composite_Setup+0x3e>
            break;
     }
     break;

   case USB_REQ_RECIPIENT_ENDPOINT:
     switch(req->wIndex)
 80088b0:	888b      	ldrh	r3, [r1, #4]
 80088b2:	2b81      	cmp	r3, #129	; 0x81
 80088b4:	d026      	beq.n	8008904 <USBD_Composite_Setup+0x68>
 80088b6:	d90e      	bls.n	80088d6 <USBD_Composite_Setup+0x3a>
 80088b8:	3b82      	subs	r3, #130	; 0x82
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d80d      	bhi.n	80088da <USBD_Composite_Setup+0x3e>
     {

         case CDC_IN_EP:
         case CDC_OUT_EP:
         case CDC_CMD_EP:
           pdev->pClassData = pCDCData;
 80088be:	4919      	ldr	r1, [pc, #100]	; (8008924 <USBD_Composite_Setup+0x88>)
           pdev->pUserData =  &USBD_CDC_Interface_fops_FS;
           return(USBD_CDC.Setup(pdev, req));
 80088c0:	4b19      	ldr	r3, [pc, #100]	; (8008928 <USBD_Composite_Setup+0x8c>)
           pdev->pClassData = pCDCData;
 80088c2:	6808      	ldr	r0, [r1, #0]
           pdev->pUserData =  &USBD_CDC_Interface_fops_FS;
 80088c4:	4919      	ldr	r1, [pc, #100]	; (800892c <USBD_Composite_Setup+0x90>)
           return(USBD_CDC.Setup(pdev, req));
 80088c6:	689b      	ldr	r3, [r3, #8]
            break;
     }
     break;
  }
  return USBD_OK;
}
 80088c8:	f85d 4b04 	ldr.w	r4, [sp], #4
           pdev->pUserData =  &USBD_CDC_Interface_fops_FS;
 80088cc:	e9cc 01af 	strd	r0, r1, [ip, #700]	; 0x2bc
           return(USBD_CDC.Setup(pdev, req));
 80088d0:	4611      	mov	r1, r2
 80088d2:	4660      	mov	r0, ip
 80088d4:	4718      	bx	r3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d0f1      	beq.n	80088be <USBD_Composite_Setup+0x22>
}
 80088da:	2000      	movs	r0, #0
 80088dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088e0:	4770      	bx	lr
     switch(req->wIndex)
 80088e2:	888b      	ldrh	r3, [r1, #4]
 80088e4:	b19b      	cbz	r3, 800890e <USBD_Composite_Setup+0x72>
 80088e6:	3b01      	subs	r3, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d8f6      	bhi.n	80088da <USBD_Composite_Setup+0x3e>
           pdev->pClassData = pCDCData;
 80088ec:	4a0d      	ldr	r2, [pc, #52]	; (8008924 <USBD_Composite_Setup+0x88>)
           return(USBD_CDC.Setup(pdev, req));
 80088ee:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <USBD_Composite_Setup+0x8c>)
           pdev->pClassData = pCDCData;
 80088f0:	6812      	ldr	r2, [r2, #0]
           pdev->pUserData =  &USBD_CDC_Interface_fops_FS;
 80088f2:	4c0e      	ldr	r4, [pc, #56]	; (800892c <USBD_Composite_Setup+0x90>)
           pdev->pUserData =  NULL;
 80088f4:	f8cc 42c0 	str.w	r4, [ip, #704]	; 0x2c0
           return(USBD_HID.Setup (pdev, req));
 80088f8:	689b      	ldr	r3, [r3, #8]
}
 80088fa:	f85d 4b04 	ldr.w	r4, [sp], #4
           pdev->pClassData = pHIDData;
 80088fe:	f8cc 22bc 	str.w	r2, [ip, #700]	; 0x2bc
           return(USBD_HID.Setup (pdev, req));
 8008902:	4718      	bx	r3
           pdev->pClassData = pHIDData;
 8008904:	4a0a      	ldr	r2, [pc, #40]	; (8008930 <USBD_Composite_Setup+0x94>)
           return(USBD_HID.Setup (pdev, req));
 8008906:	4b0b      	ldr	r3, [pc, #44]	; (8008934 <USBD_Composite_Setup+0x98>)
           pdev->pClassData = pHIDData;
 8008908:	6812      	ldr	r2, [r2, #0]
           pdev->pUserData =  NULL;
 800890a:	2400      	movs	r4, #0
 800890c:	e7f2      	b.n	80088f4 <USBD_Composite_Setup+0x58>
           pdev->pClassData = pHIDData;
 800890e:	4a08      	ldr	r2, [pc, #32]	; (8008930 <USBD_Composite_Setup+0x94>)
           pdev->pUserData =  NULL;
 8008910:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
           return(USBD_HID.Setup (pdev, req));
 8008914:	4b07      	ldr	r3, [pc, #28]	; (8008934 <USBD_Composite_Setup+0x98>)
           pdev->pClassData = pHIDData;
 8008916:	6812      	ldr	r2, [r2, #0]
           return(USBD_HID.Setup (pdev, req));
 8008918:	689b      	ldr	r3, [r3, #8]
}
 800891a:	f85d 4b04 	ldr.w	r4, [sp], #4
           pdev->pClassData = pHIDData;
 800891e:	f8c0 22bc 	str.w	r2, [r0, #700]	; 0x2bc
           return(USBD_HID.Setup (pdev, req));
 8008922:	4718      	bx	r3
 8008924:	20003b3c 	.word	0x20003b3c
 8008928:	20000110 	.word	0x20000110
 800892c:	2000031c 	.word	0x2000031c
 8008930:	20003b40 	.word	0x20003b40
 8008934:	20000260 	.word	0x20000260

08008938 <USBD_Composite_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Composite_GetFSCfgDesc (uint16_t *length)
{
   *length = sizeof (USBD_Composite_CfgFSDesc);
 8008938:	236c      	movs	r3, #108	; 0x6c
 800893a:	8003      	strh	r3, [r0, #0]
   return USBD_Composite_CfgFSDesc;
}
 800893c:	4800      	ldr	r0, [pc, #0]	; (8008940 <USBD_Composite_GetFSCfgDesc+0x8>)
 800893e:	4770      	bx	lr
 8008940:	2000006c 	.word	0x2000006c

08008944 <USBD_Composite_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Composite_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_Composite_DeviceQualifierDesc);
 8008944:	230a      	movs	r3, #10
 8008946:	8003      	strh	r3, [r0, #0]
  return USBD_Composite_DeviceQualifierDesc;
}
 8008948:	4800      	ldr	r0, [pc, #0]	; (800894c <USBD_Composite_GetDeviceQualifierDescriptor+0x8>)
 800894a:	4770      	bx	lr
 800894c:	200000d8 	.word	0x200000d8

08008950 <USBD_Composite_DataIn>:
  switch(epnum)
 8008950:	2901      	cmp	r1, #1
{
 8008952:	b430      	push	{r4, r5}
  switch(epnum)
 8008954:	d00c      	beq.n	8008970 <USBD_Composite_DataIn+0x20>
 8008956:	2902      	cmp	r1, #2
 8008958:	d115      	bne.n	8008986 <USBD_Composite_DataIn+0x36>
         pdev->pClassData = pCDCData;
 800895a:	4c0c      	ldr	r4, [pc, #48]	; (800898c <USBD_Composite_DataIn+0x3c>)
         return(USBD_CDC.DataIn(pdev,epnum));
 800895c:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <USBD_Composite_DataIn+0x40>)
         pdev->pUserData =  &USBD_CDC_Interface_fops_FS;
 800895e:	4d0d      	ldr	r5, [pc, #52]	; (8008994 <USBD_Composite_DataIn+0x44>)
         pdev->pClassData = pCDCData;
 8008960:	6824      	ldr	r4, [r4, #0]
         pdev->pUserData =  &USBD_CDC_Interface_fops_FS;
 8008962:	f8c0 52c0 	str.w	r5, [r0, #704]	; 0x2c0
         pdev->pClassData = pCDCData;
 8008966:	f8c0 42bc 	str.w	r4, [r0, #700]	; 0x2bc
         return(USBD_CDC.DataIn(pdev,epnum));
 800896a:	695b      	ldr	r3, [r3, #20]
}
 800896c:	bc30      	pop	{r4, r5}
         return(USBD_CDC.DataIn(pdev,epnum));
 800896e:	4718      	bx	r3
         pdev->pClassData = pHIDData;
 8008970:	4c09      	ldr	r4, [pc, #36]	; (8008998 <USBD_Composite_DataIn+0x48>)
         return(USBD_HID.DataIn(pdev,epnum));
 8008972:	4b0a      	ldr	r3, [pc, #40]	; (800899c <USBD_Composite_DataIn+0x4c>)
         pdev->pClassData = pHIDData;
 8008974:	6824      	ldr	r4, [r4, #0]
 8008976:	f8c0 42bc 	str.w	r4, [r0, #700]	; 0x2bc
         pdev->pUserData = NULL;
 800897a:	2400      	movs	r4, #0
 800897c:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
         return(USBD_HID.DataIn(pdev,epnum));
 8008980:	695b      	ldr	r3, [r3, #20]
}
 8008982:	bc30      	pop	{r4, r5}
         return(USBD_HID.DataIn(pdev,epnum));
 8008984:	4718      	bx	r3
}
 8008986:	2003      	movs	r0, #3
 8008988:	bc30      	pop	{r4, r5}
 800898a:	4770      	bx	lr
 800898c:	20003b3c 	.word	0x20003b3c
 8008990:	20000110 	.word	0x20000110
 8008994:	2000031c 	.word	0x2000031c
 8008998:	20003b40 	.word	0x20003b40
 800899c:	20000260 	.word	0x20000260

080089a0 <USBD_Composite_DataOut>:
  switch(epnum)
 80089a0:	1e8a      	subs	r2, r1, #2
 80089a2:	2a01      	cmp	r2, #1
 80089a4:	d80b      	bhi.n	80089be <USBD_Composite_DataOut+0x1e>
{
 80089a6:	b430      	push	{r4, r5}
        pdev->pClassData = pCDCData;
 80089a8:	4c06      	ldr	r4, [pc, #24]	; (80089c4 <USBD_Composite_DataOut+0x24>)
        return(USBD_CDC.DataOut(pdev,epnum));
 80089aa:	4a07      	ldr	r2, [pc, #28]	; (80089c8 <USBD_Composite_DataOut+0x28>)
        pdev->pClassData = pCDCData;
 80089ac:	6824      	ldr	r4, [r4, #0]
        pdev->pUserData =  &USBD_CDC_Interface_fops_FS;
 80089ae:	4d07      	ldr	r5, [pc, #28]	; (80089cc <USBD_Composite_DataOut+0x2c>)
 80089b0:	f8c0 52c0 	str.w	r5, [r0, #704]	; 0x2c0
        pdev->pClassData = pCDCData;
 80089b4:	f8c0 42bc 	str.w	r4, [r0, #700]	; 0x2bc
        return(USBD_CDC.DataOut(pdev,epnum));
 80089b8:	6992      	ldr	r2, [r2, #24]
}
 80089ba:	bc30      	pop	{r4, r5}
        return(USBD_CDC.DataOut(pdev,epnum));
 80089bc:	4710      	bx	r2
}
 80089be:	2003      	movs	r0, #3
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20003b3c 	.word	0x20003b3c
 80089c8:	20000110 	.word	0x20000110
 80089cc:	2000031c 	.word	0x2000031c

080089d0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80089d0:	b500      	push	{lr}
 80089d2:	b083      	sub	sp, #12
#if DEBUG_SWO
	ITM_SendChar(ch);
#else
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80089d4:	f04f 33ff 	mov.w	r3, #4294967295
{
 80089d8:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80089da:	2201      	movs	r2, #1
 80089dc:	a901      	add	r1, sp, #4
 80089de:	4803      	ldr	r0, [pc, #12]	; (80089ec <__io_putchar+0x1c>)
 80089e0:	f005 fef2 	bl	800e7c8 <HAL_UART_Transmit>
#endif
	return ch;
}
 80089e4:	9801      	ldr	r0, [sp, #4]
 80089e6:	b003      	add	sp, #12
 80089e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80089ec:	20003ccc 	.word	0x20003ccc

080089f0 <process_command>:
	set_led_brightness(current_brightness);
}


bool process_command() // betta test
{
 80089f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cdcReceiveBufferLen==0)
 80089f2:	4d6b      	ldr	r5, [pc, #428]	; (8008ba0 <process_command+0x1b0>)
 80089f4:	682c      	ldr	r4, [r5, #0]
{
 80089f6:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	if (cdcReceiveBufferLen==0)
 80089fa:	2c00      	cmp	r4, #0
 80089fc:	d052      	beq.n	8008aa4 <process_command+0xb4>
		return false;

	do {
		if (strncmp("bra", cdcReceiveBuffer, 3) == 0)
 80089fe:	4b69      	ldr	r3, [pc, #420]	; (8008ba4 <process_command+0x1b4>)
 8008a00:	781a      	ldrb	r2, [r3, #0]
 8008a02:	2a62      	cmp	r2, #98	; 0x62
 8008a04:	d02d      	beq.n	8008a62 <process_command+0x72>
		{
			increase_brightness(true);
			break;
		}
		if (strncmp("brd", cdcReceiveBuffer, 3) == 0)
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	2a62      	cmp	r2, #98	; 0x62
 8008a0a:	d04f      	beq.n	8008aac <process_command+0xbc>
		{
			increase_brightness(false);
			break;
		}
		/* 2D display */
		if (strncmp("2dd", cdcReceiveBuffer, 3) == 0)
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	2a32      	cmp	r2, #50	; 0x32
 8008a10:	d066      	beq.n	8008ae0 <process_command+0xf0>
		{
			rdc200a_sbs_off();
			break;
		}
		/* 3D display */
		if (strncmp("3dd", cdcReceiveBuffer, 3) == 0)
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	2a33      	cmp	r2, #51	; 0x33
 8008a16:	d059      	beq.n	8008acc <process_command+0xdc>
		{
			rdc200a_sbs_on();
			break;
		}

		if (strncmp("p\r\n", cdcReceiveBuffer, cdcReceiveBufferLen) == 0)/* Set proximity threadshold */
 8008a18:	4962      	ldr	r1, [pc, #392]	; (8008ba4 <process_command+0x1b4>)
 8008a1a:	4863      	ldr	r0, [pc, #396]	; (8008ba8 <process_command+0x1b8>)
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	f00a f9b1 	bl	8012d84 <strncmp>
 8008a22:	4606      	mov	r6, r0
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d07b      	beq.n	8008b20 <process_command+0x130>
			sprintf(tmp, "Set PS_HighThreshold= %d\n", ps);
			sendCdcData((uint8_t*)tmp, strlen(tmp));
			HAL_Delay(2000);
			break;
		}
		if (strncmp("dp\r\n", cdcReceiveBuffer, cdcReceiveBufferLen) == 0) {
 8008a28:	495e      	ldr	r1, [pc, #376]	; (8008ba4 <process_command+0x1b4>)
 8008a2a:	4860      	ldr	r0, [pc, #384]	; (8008bac <process_command+0x1bc>)
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	f00a f9a9 	bl	8012d84 <strncmp>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	f000 80a2 	beq.w	8008b7c <process_command+0x18c>
			sendCdcData((uint8_t*)tmp, strlen(tmp));
			HAL_Delay(2000);
			break;
		}

		if (strncmp("help\r\n", cdcReceiveBuffer, cdcReceiveBufferLen) == 0)
 8008a38:	4622      	mov	r2, r4
 8008a3a:	495a      	ldr	r1, [pc, #360]	; (8008ba4 <process_command+0x1b4>)
 8008a3c:	485c      	ldr	r0, [pc, #368]	; (8008bb0 <process_command+0x1c0>)
 8008a3e:	f00a f9a1 	bl	8012d84 <strncmp>
 8008a42:	4604      	mov	r4, r0
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d055      	beq.n	8008af4 <process_command+0x104>
			break;
		}
//		sendCdcData('K', 1);
		//puts(cdcReceiveBuffer);
	} while (0);
	memset(cdcReceiveBuffer, 0, 64);
 8008a48:	2240      	movs	r2, #64	; 0x40
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	4855      	ldr	r0, [pc, #340]	; (8008ba4 <process_command+0x1b4>)
 8008a4e:	f00a f991 	bl	8012d74 <memset>
	cdcReceiveBufferLen=0;
	INT_CDC_RECEIVED = false;
 8008a52:	4a58      	ldr	r2, [pc, #352]	; (8008bb4 <process_command+0x1c4>)
	cdcReceiveBufferLen=0;
 8008a54:	2300      	movs	r3, #0

	return true;
 8008a56:	2001      	movs	r0, #1
	cdcReceiveBufferLen=0;
 8008a58:	602b      	str	r3, [r5, #0]
	INT_CDC_RECEIVED = false;
 8008a5a:	7013      	strb	r3, [r2, #0]
}
 8008a5c:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8008a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (strncmp("bra", cdcReceiveBuffer, 3) == 0)
 8008a62:	785a      	ldrb	r2, [r3, #1]
 8008a64:	2a72      	cmp	r2, #114	; 0x72
 8008a66:	d1ce      	bne.n	8008a06 <process_command+0x16>
 8008a68:	789a      	ldrb	r2, [r3, #2]
 8008a6a:	2a61      	cmp	r2, #97	; 0x61
 8008a6c:	d1cb      	bne.n	8008a06 <process_command+0x16>
		current_brightness += 1;
 8008a6e:	4c52      	ldr	r4, [pc, #328]	; (8008bb8 <process_command+0x1c8>)
 8008a70:	7823      	ldrb	r3, [r4, #0]
 8008a72:	3301      	adds	r3, #1
 8008a74:	b25b      	sxtb	r3, r3
		if(current_brightness > 5)
 8008a76:	2b05      	cmp	r3, #5
 8008a78:	dd00      	ble.n	8008a7c <process_command+0x8c>
			current_brightness = 5;
 8008a7a:	2305      	movs	r3, #5
 8008a7c:	7023      	strb	r3, [r4, #0]
	Flash_Read_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, User_Data, USER_DATA_SIZE);
 8008a7e:	a902      	add	r1, sp, #8
 8008a80:	2202      	movs	r2, #2
 8008a82:	484e      	ldr	r0, [pc, #312]	; (8008bbc <process_command+0x1cc>)
 8008a84:	f001 f890 	bl	8009ba8 <Flash_Read_Data>
	User_Data[brightness]= current_brightness;
 8008a88:	f994 2000 	ldrsb.w	r2, [r4]
 8008a8c:	9203      	str	r2, [sp, #12]
	Flash_Write_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, (uint64_t *)User_Data, USER_DATA_SIZE, FLASH_TYPEPROGRAM_DOUBLEWORD);
 8008a8e:	2300      	movs	r3, #0
 8008a90:	a902      	add	r1, sp, #8
 8008a92:	2202      	movs	r2, #2
 8008a94:	4849      	ldr	r0, [pc, #292]	; (8008bbc <process_command+0x1cc>)
 8008a96:	f001 f81b 	bl	8009ad0 <Flash_Write_Data>
	set_led_brightness(current_brightness);
 8008a9a:	f994 0000 	ldrsb.w	r0, [r4]
 8008a9e:	f7ff fd67 	bl	8008570 <set_led_brightness>
}
 8008aa2:	e7d1      	b.n	8008a48 <process_command+0x58>
		return false;
 8008aa4:	4620      	mov	r0, r4
}
 8008aa6:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8008aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (strncmp("brd", cdcReceiveBuffer, 3) == 0)
 8008aac:	785a      	ldrb	r2, [r3, #1]
 8008aae:	2a72      	cmp	r2, #114	; 0x72
 8008ab0:	d1ac      	bne.n	8008a0c <process_command+0x1c>
 8008ab2:	4a43      	ldr	r2, [pc, #268]	; (8008bc0 <process_command+0x1d0>)
 8008ab4:	7812      	ldrb	r2, [r2, #0]
 8008ab6:	2a64      	cmp	r2, #100	; 0x64
 8008ab8:	d1a8      	bne.n	8008a0c <process_command+0x1c>
		current_brightness -= 1;
 8008aba:	4c3f      	ldr	r4, [pc, #252]	; (8008bb8 <process_command+0x1c8>)
 8008abc:	7823      	ldrb	r3, [r4, #0]
 8008abe:	3b01      	subs	r3, #1
		if (strncmp("brd", cdcReceiveBuffer, 3) == 0)
 8008ac0:	2200      	movs	r2, #0
		current_brightness -= 1;
 8008ac2:	b25b      	sxtb	r3, r3
		if(current_brightness < 0)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	dad9      	bge.n	8008a7c <process_command+0x8c>
			current_brightness = 0;
 8008ac8:	7022      	strb	r2, [r4, #0]
 8008aca:	e7d8      	b.n	8008a7e <process_command+0x8e>
		if (strncmp("3dd", cdcReceiveBuffer, 3) == 0)
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	2b64      	cmp	r3, #100	; 0x64
 8008ad0:	d1a2      	bne.n	8008a18 <process_command+0x28>
 8008ad2:	4b3b      	ldr	r3, [pc, #236]	; (8008bc0 <process_command+0x1d0>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b64      	cmp	r3, #100	; 0x64
 8008ad8:	d19e      	bne.n	8008a18 <process_command+0x28>
			rdc200a_sbs_on();
 8008ada:	f7fb fcb1 	bl	8004440 <rdc200a_sbs_on>
			break;
 8008ade:	e7b3      	b.n	8008a48 <process_command+0x58>
		if (strncmp("2dd", cdcReceiveBuffer, 3) == 0)
 8008ae0:	785a      	ldrb	r2, [r3, #1]
 8008ae2:	2a64      	cmp	r2, #100	; 0x64
 8008ae4:	d195      	bne.n	8008a12 <process_command+0x22>
 8008ae6:	4a36      	ldr	r2, [pc, #216]	; (8008bc0 <process_command+0x1d0>)
 8008ae8:	7812      	ldrb	r2, [r2, #0]
 8008aea:	2a64      	cmp	r2, #100	; 0x64
 8008aec:	d191      	bne.n	8008a12 <process_command+0x22>
			rdc200a_sbs_off();
 8008aee:	f7fb fcab 	bl	8004448 <rdc200a_sbs_off>
			break;
 8008af2:	e7a9      	b.n	8008a48 <process_command+0x58>
			uint8_t tmp[512]= "*********************************************************\r\n \
 8008af4:	4933      	ldr	r1, [pc, #204]	; (8008bc4 <process_command+0x1d4>)
 8008af6:	f240 124f 	movw	r2, #335	; 0x14f
 8008afa:	a802      	add	r0, sp, #8
 8008afc:	f00a fa37 	bl	8012f6e <memcpy>
 8008b00:	22b1      	movs	r2, #177	; 0xb1
 8008b02:	4621      	mov	r1, r4
 8008b04:	f20d 1057 	addw	r0, sp, #343	; 0x157
 8008b08:	f00a f934 	bl	8012d74 <memset>
			sendCdcData((uint8_t*)tmp, strlen(tmp));
 8008b0c:	a802      	add	r0, sp, #8
 8008b0e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8008b12:	f7ff fe5f 	bl	80087d4 <sendCdcData>
			HAL_Delay(5000);
 8008b16:	f241 3088 	movw	r0, #5000	; 0x1388
 8008b1a:	f000 fe17 	bl	800974c <HAL_Delay>
			break;
 8008b1e:	e793      	b.n	8008a48 <process_command+0x58>
			uint16_t ps= VCNL36828P_GET_PS_DATA();
 8008b20:	f7ff fada 	bl	80080d8 <VCNL36828P_GET_PS_DATA>
			uint8_t tmp[100]={0};
 8008b24:	4631      	mov	r1, r6
			uint16_t ps= VCNL36828P_GET_PS_DATA();
 8008b26:	b287      	uxth	r7, r0
			uint8_t tmp[100]={0};
 8008b28:	2260      	movs	r2, #96	; 0x60
 8008b2a:	a803      	add	r0, sp, #12
 8008b2c:	9602      	str	r6, [sp, #8]
 8008b2e:	f00a f921 	bl	8012d74 <memset>
			Flash_Read_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, User_Data, USER_DATA_SIZE);
 8008b32:	4669      	mov	r1, sp
 8008b34:	2202      	movs	r2, #2
 8008b36:	4821      	ldr	r0, [pc, #132]	; (8008bbc <process_command+0x1cc>)
 8008b38:	f001 f836 	bl	8009ba8 <Flash_Read_Data>
			Flash_Write_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, (uint64_t *)User_Data, USER_DATA_SIZE, FLASH_TYPEPROGRAM_DOUBLEWORD);
 8008b3c:	4669      	mov	r1, sp
 8008b3e:	2202      	movs	r2, #2
 8008b40:	4633      	mov	r3, r6
 8008b42:	481e      	ldr	r0, [pc, #120]	; (8008bbc <process_command+0x1cc>)
			User_Data[proximity]=ps;
 8008b44:	9700      	str	r7, [sp, #0]
			Flash_Write_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, (uint64_t *)User_Data, USER_DATA_SIZE, FLASH_TYPEPROGRAM_DOUBLEWORD);
 8008b46:	f000 ffc3 	bl	8009ad0 <Flash_Write_Data>
			VCNL36828P_SET_PS_HighThreshold(ps);
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	f7ff fa6a 	bl	8008024 <VCNL36828P_SET_PS_HighThreshold>
			VCNL36828P_SET_PS_LowThreshold(ps-20);
 8008b50:	f1a7 0014 	sub.w	r0, r7, #20
 8008b54:	b280      	uxth	r0, r0
 8008b56:	f7ff fa51 	bl	8007ffc <VCNL36828P_SET_PS_LowThreshold>
			sprintf(tmp, "Set PS_HighThreshold= %d\n", ps);
 8008b5a:	491b      	ldr	r1, [pc, #108]	; (8008bc8 <process_command+0x1d8>)
 8008b5c:	463a      	mov	r2, r7
 8008b5e:	a802      	add	r0, sp, #8
 8008b60:	f009 ffe2 	bl	8012b28 <siprintf>
			sendCdcData((uint8_t*)tmp, strlen(tmp));
 8008b64:	a802      	add	r0, sp, #8
 8008b66:	f7f7 fb83 	bl	8000270 <strlen>
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	a802      	add	r0, sp, #8
 8008b6e:	f7ff fe31 	bl	80087d4 <sendCdcData>
			HAL_Delay(2000);
 8008b72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008b76:	f000 fde9 	bl	800974c <HAL_Delay>
			break;
 8008b7a:	e765      	b.n	8008a48 <process_command+0x58>
			uint8_t tmp[100]={0};
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	9002      	str	r0, [sp, #8]
 8008b80:	2260      	movs	r2, #96	; 0x60
 8008b82:	a803      	add	r0, sp, #12
 8008b84:	f00a f8f6 	bl	8012d74 <memset>
			Flash_Read_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, User_Data, USER_DATA_SIZE);
 8008b88:	4669      	mov	r1, sp
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	480b      	ldr	r0, [pc, #44]	; (8008bbc <process_command+0x1cc>)
 8008b8e:	f001 f80b 	bl	8009ba8 <Flash_Read_Data>
			sprintf(tmp, "(PS_HighThreshold, Brightness)=(%d,%d)\n",User_Data[proximity], User_Data[brightness]);
 8008b92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b96:	490d      	ldr	r1, [pc, #52]	; (8008bcc <process_command+0x1dc>)
 8008b98:	a802      	add	r0, sp, #8
 8008b9a:	f009 ffc5 	bl	8012b28 <siprintf>
 8008b9e:	e7e1      	b.n	8008b64 <process_command+0x174>
 8008ba0:	20003b38 	.word	0x20003b38
 8008ba4:	20003af8 	.word	0x20003af8
 8008ba8:	08016bb4 	.word	0x08016bb4
 8008bac:	08016bd4 	.word	0x08016bd4
 8008bb0:	08016c04 	.word	0x08016c04
 8008bb4:	20004040 	.word	0x20004040
 8008bb8:	200000e2 	.word	0x200000e2
 8008bbc:	0801ffd0 	.word	0x0801ffd0
 8008bc0:	20003afa 	.word	0x20003afa
 8008bc4:	08016c0c 	.word	0x08016c0c
 8008bc8:	08016bb8 	.word	0x08016bb8
 8008bcc:	08016bdc 	.word	0x08016bdc

08008bd0 <do_others>:
 * @brief do others control (button, als, p-sensor)
 * @retval None
 */

void do_others(void)
{
 8008bd0:	b530      	push	{r4, r5, lr}
 8008bd2:	b08b      	sub	sp, #44	; 0x2c
	int i = 0;

#if TEST_PS
	//	if (NewPSFlag)
	{
		uint16_t ps_interrupt = get_ps_if();
 8008bd4:	f7ff fa98 	bl	8008108 <get_ps_if>
#if 1 // betta added
		uint8_t tmp[40]={0};
 8008bd8:	2500      	movs	r5, #0
		uint16_t ps_interrupt = get_ps_if();
 8008bda:	4604      	mov	r4, r0
		uint8_t tmp[40]={0};
 8008bdc:	2224      	movs	r2, #36	; 0x24
 8008bde:	4629      	mov	r1, r5
 8008be0:	a801      	add	r0, sp, #4
 8008be2:	9500      	str	r5, [sp, #0]
 8008be4:	f00a f8c6 	bl	8012d74 <memset>
*/
		//sprintf(tmp,"fr=(x, y, z, fr)=(0x%04x, 0x%04x, 0x%04x, %d)\n", RDC_REG_GET(0x49), RDC_REG_GET(0x82b), RDC_REG_GET(0x92b), rdc200a_get_frame_rate_from_reg());
		//sprintf(tmp,"fr=%d\n", rdc200a_get_frame_rate_from_reg());
		//sendCdcData((uint8_t*)tmp, strlen(tmp));
#endif
		if (ps_interrupt&VCNL36828P_PS_IF_AWAY) {
 8008be8:	05e2      	lsls	r2, r4, #23
 8008bea:	d428      	bmi.n	8008c3e <do_others+0x6e>
#endif /* TEST_LM3435 */
#if TEST_RDC200A
			//display_suspend(FALSE);
#endif /* TEST_RDC200A */
		}
		else if (ps_interrupt&VCNL36828P_PS_IF_CLOSE) {
 8008bec:	05a3      	lsls	r3, r4, #22
 8008bee:	d407      	bmi.n	8008c00 <do_others+0x30>
 8008bf0:	4c21      	ldr	r4, [pc, #132]	; (8008c78 <do_others+0xa8>)
		}

		//ps_close_state = TRUE; // betta temporarily added

#if 1 // betta masked
		if (ps_close_state) {
 8008bf2:	7823      	ldrb	r3, [r4, #0]
 8008bf4:	b113      	cbz	r3, 8008bfc <do_others+0x2c>
#if TEST_LM3435
			 // masked to read  brightness in ISR
			//button_click_state = read_button_states(&current_brightness); // Do it at ISR
#if 1
			if (button_click_state) { // manual mode
 8008bf6:	4c21      	ldr	r4, [pc, #132]	; (8008c7c <do_others+0xac>)
 8008bf8:	7823      	ldrb	r3, [r4, #0]
 8008bfa:	bb9b      	cbnz	r3, 8008c64 <do_others+0x94>
	}
#endif /* TEST_PS */
#if TEST_SOS
	sos_button_click_state = read_sos_button_states();
#endif /* TEST_SOS */
}
 8008bfc:	b00b      	add	sp, #44	; 0x2c
 8008bfe:	bd30      	pop	{r4, r5, pc}
			sprintf(tmp,"ps=%d, CLOSE\n", VCNL36828P_GET_PS_DATA());
 8008c00:	f7ff fa6a 	bl	80080d8 <VCNL36828P_GET_PS_DATA>
 8008c04:	491e      	ldr	r1, [pc, #120]	; (8008c80 <do_others+0xb0>)
			ps_close_state = TRUE;
 8008c06:	4c1c      	ldr	r4, [pc, #112]	; (8008c78 <do_others+0xa8>)
			sprintf(tmp,"ps=%d, CLOSE\n", VCNL36828P_GET_PS_DATA());
 8008c08:	4602      	mov	r2, r0
 8008c0a:	4668      	mov	r0, sp
 8008c0c:	f009 ff8c 	bl	8012b28 <siprintf>
			sendCdcData((uint8_t*)tmp, strlen(tmp));
 8008c10:	4668      	mov	r0, sp
 8008c12:	f7f7 fb2d 	bl	8000270 <strlen>
 8008c16:	4601      	mov	r1, r0
 8008c18:	4668      	mov	r0, sp
 8008c1a:	f7ff fddb 	bl	80087d4 <sendCdcData>
			ps_close_state = TRUE;
 8008c1e:	2501      	movs	r5, #1
			HAL_GPIO_WritePin(LED_D_EN_L_GPIO_Port, LED_D_EN_L_Pin, GPIO_PIN_SET); // PB0
 8008c20:	4818      	ldr	r0, [pc, #96]	; (8008c84 <do_others+0xb4>)
 8008c22:	4629      	mov	r1, r5
 8008c24:	462a      	mov	r2, r5
			ps_close_state = TRUE;
 8008c26:	7025      	strb	r5, [r4, #0]
			HAL_GPIO_WritePin(LED_D_EN_L_GPIO_Port, LED_D_EN_L_Pin, GPIO_PIN_SET); // PB0
 8008c28:	f001 f98c 	bl	8009f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_EN_R_GPIO_Port, LED_D_EN_R_Pin, GPIO_PIN_SET); // PB1
 8008c2c:	4815      	ldr	r0, [pc, #84]	; (8008c84 <do_others+0xb4>)
 8008c2e:	462a      	mov	r2, r5
 8008c30:	2102      	movs	r1, #2
 8008c32:	f001 f987 	bl	8009f44 <HAL_GPIO_WritePin>
			HAL_Delay(5);
 8008c36:	2005      	movs	r0, #5
 8008c38:	f000 fd88 	bl	800974c <HAL_Delay>
 8008c3c:	e7d9      	b.n	8008bf2 <do_others+0x22>
			sprintf(tmp,"ps=%d, AWAY\n", VCNL36828P_GET_PS_DATA());
 8008c3e:	f7ff fa4b 	bl	80080d8 <VCNL36828P_GET_PS_DATA>
 8008c42:	4911      	ldr	r1, [pc, #68]	; (8008c88 <do_others+0xb8>)
			ps_close_state = FALSE;
 8008c44:	4c0c      	ldr	r4, [pc, #48]	; (8008c78 <do_others+0xa8>)
			sprintf(tmp,"ps=%d, AWAY\n", VCNL36828P_GET_PS_DATA());
 8008c46:	4602      	mov	r2, r0
 8008c48:	4668      	mov	r0, sp
 8008c4a:	f009 ff6d 	bl	8012b28 <siprintf>
			sendCdcData((uint8_t*)tmp, strlen(tmp));
 8008c4e:	4668      	mov	r0, sp
 8008c50:	f7f7 fb0e 	bl	8000270 <strlen>
 8008c54:	4601      	mov	r1, r0
 8008c56:	4668      	mov	r0, sp
 8008c58:	f7ff fdbc 	bl	80087d4 <sendCdcData>
			HAL_GPIO_WritePin(LED_D_EN_L_GPIO_Port, LED_D_EN_L_Pin, GPIO_PIN_RESET); // PB0
 8008c5c:	4809      	ldr	r0, [pc, #36]	; (8008c84 <do_others+0xb4>)
 8008c5e:	462a      	mov	r2, r5
 8008c60:	2101      	movs	r1, #1
 8008c62:	e7e0      	b.n	8008c26 <do_others+0x56>
				set_led_brightness(current_brightness);
 8008c64:	4b09      	ldr	r3, [pc, #36]	; (8008c8c <do_others+0xbc>)
 8008c66:	f993 0000 	ldrsb.w	r0, [r3]
 8008c6a:	f7ff fc81 	bl	8008570 <set_led_brightness>
				button_click_state=FALSE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	7023      	strb	r3, [r4, #0]
}
 8008c72:	b00b      	add	sp, #44	; 0x2c
 8008c74:	bd30      	pop	{r4, r5, pc}
 8008c76:	bf00      	nop
 8008c78:	20003d50 	.word	0x20003d50
 8008c7c:	20003b44 	.word	0x20003b44
 8008c80:	08016d6c 	.word	0x08016d6c
 8008c84:	48000400 	.word	0x48000400
 8008c88:	08016d5c 	.word	0x08016d5c
 8008c8c:	200000e2 	.word	0x200000e2

08008c90 <HAL_GPIO_EXTI_Callback>:
{
	uint8_t tmp[100]={0};
	static uint32_t tap_times[3]= {0, 0, 0}; // For x, y, z
	static uint32_t tap_count=0;

	switch (GPIO_Pin) {
 8008c90:	2820      	cmp	r0, #32
{
 8008c92:	b538      	push	{r3, r4, r5, lr}
	switch (GPIO_Pin) {
 8008c94:	d006      	beq.n	8008ca4 <HAL_GPIO_EXTI_Callback+0x14>
 8008c96:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 8008c9a:	d015      	beq.n	8008cc8 <HAL_GPIO_EXTI_Callback+0x38>
 8008c9c:	2801      	cmp	r0, #1
 8008c9e:	d00e      	beq.n	8008cbe <HAL_GPIO_EXTI_Callback+0x2e>
#endif
		} while(0);
			HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
			break;
		default:
			__NOP();
 8008ca0:	bf00      	nop
			break;
    }

}
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
			val = icm42688_get_tap_detection_status();
 8008ca4:	f7f8 fbe6 	bl	8001474 <icm42688_get_tap_detection_status>
			tap_num= (val>>3)&3;
 8008ca8:	4b1f      	ldr	r3, [pc, #124]	; (8008d28 <HAL_GPIO_EXTI_Callback+0x98>)
 8008caa:	f3c0 04c1 	ubfx	r4, r0, #3, #2
			if (tap_num == 2)
 8008cae:	2c02      	cmp	r4, #2
			tap_num= (val>>3)&3;
 8008cb0:	701c      	strb	r4, [r3, #0]
			if (tap_num == 2)
 8008cb2:	d011      	beq.n	8008cd8 <HAL_GPIO_EXTI_Callback+0x48>
}
 8008cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8008cb8:	2017      	movs	r0, #23
 8008cba:	f000 bdd1 	b.w	8009860 <HAL_NVIC_ClearPendingIRQ>
}
 8008cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_NVIC_ClearPendingIRQ(PROX_INT_H_EXTI_IRQn);
 8008cc2:	2006      	movs	r0, #6
 8008cc4:	f000 bdcc 	b.w	8009860 <HAL_NVIC_ClearPendingIRQ>
			if (ps_close_state) {
 8008cc8:	4b18      	ldr	r3, [pc, #96]	; (8008d2c <HAL_GPIO_EXTI_Callback+0x9c>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b9c3      	cbnz	r3, 8008d00 <HAL_GPIO_EXTI_Callback+0x70>
}
 8008cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8008cd2:	2028      	movs	r0, #40	; 0x28
 8008cd4:	f000 bdc4 	b.w	8009860 <HAL_NVIC_ClearPendingIRQ>
	    		if (ps_close_state)
 8008cd8:	4b14      	ldr	r3, [pc, #80]	; (8008d2c <HAL_GPIO_EXTI_Callback+0x9c>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0e9      	beq.n	8008cb4 <HAL_GPIO_EXTI_Callback+0x24>
	    			if (display_on)
 8008ce0:	4d13      	ldr	r5, [pc, #76]	; (8008d30 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008ce2:	782b      	ldrb	r3, [r5, #0]
 8008ce4:	b193      	cbz	r3, 8008d0c <HAL_GPIO_EXTI_Callback+0x7c>
	    				HAL_GPIO_WritePin(LED_D_EN_L_GPIO_Port, LED_D_EN_L_Pin, GPIO_PIN_RESET); // PB0
 8008ce6:	4813      	ldr	r0, [pc, #76]	; (8008d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2101      	movs	r1, #1
 8008cec:	f001 f92a 	bl	8009f44 <HAL_GPIO_WritePin>
	    				HAL_GPIO_WritePin(LED_D_EN_R_GPIO_Port, LED_D_EN_R_Pin, GPIO_PIN_RESET); // PB1
 8008cf0:	4810      	ldr	r0, [pc, #64]	; (8008d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	f001 f925 	bl	8009f44 <HAL_GPIO_WritePin>
	    				display_on = false;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	702b      	strb	r3, [r5, #0]
 8008cfe:	e7d9      	b.n	8008cb4 <HAL_GPIO_EXTI_Callback+0x24>
				button_click_state = read_button_states(&current_brightness);
 8008d00:	480d      	ldr	r0, [pc, #52]	; (8008d38 <HAL_GPIO_EXTI_Callback+0xa8>)
 8008d02:	f7ff fbf9 	bl	80084f8 <read_button_states>
 8008d06:	4b0d      	ldr	r3, [pc, #52]	; (8008d3c <HAL_GPIO_EXTI_Callback+0xac>)
 8008d08:	7018      	strb	r0, [r3, #0]
 8008d0a:	e7e0      	b.n	8008cce <HAL_GPIO_EXTI_Callback+0x3e>
	    				HAL_GPIO_WritePin(LED_D_EN_L_GPIO_Port, LED_D_EN_L_Pin, GPIO_PIN_SET); // PB0
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4808      	ldr	r0, [pc, #32]	; (8008d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8008d12:	f001 f917 	bl	8009f44 <HAL_GPIO_WritePin>
	    				HAL_GPIO_WritePin(LED_D_EN_R_GPIO_Port, LED_D_EN_R_Pin, GPIO_PIN_SET); // PB1
 8008d16:	4807      	ldr	r0, [pc, #28]	; (8008d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	f001 f912 	bl	8009f44 <HAL_GPIO_WritePin>
	    				display_on = true;
 8008d20:	2301      	movs	r3, #1
 8008d22:	702b      	strb	r3, [r5, #0]
 8008d24:	e7c6      	b.n	8008cb4 <HAL_GPIO_EXTI_Callback+0x24>
 8008d26:	bf00      	nop
 8008d28:	20003d51 	.word	0x20003d51
 8008d2c:	20003d50 	.word	0x20003d50
 8008d30:	200000e3 	.word	0x200000e3
 8008d34:	48000400 	.word	0x48000400
 8008d38:	200000e2 	.word	0x200000e2
 8008d3c:	20003b44 	.word	0x20003b44

08008d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008d40:	b500      	push	{lr}
 8008d42:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d44:	2244      	movs	r2, #68	; 0x44
 8008d46:	2100      	movs	r1, #0
 8008d48:	a805      	add	r0, sp, #20
 8008d4a:	f00a f813 	bl	8012d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d4e:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008d50:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d54:	e9cd 3300 	strd	r3, r3, [sp]
 8008d58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d5c:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008d5e:	f003 fc47 	bl	800c5f0 <HAL_PWREx_ControlVoltageScaling>
 8008d62:	b108      	cbz	r0, 8008d68 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008d64:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8008d66:	e7fe      	b.n	8008d66 <SystemClock_Config+0x26>
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008d68:	2101      	movs	r1, #1
 8008d6a:	4603      	mov	r3, r0
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008d6c:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8008d70:	23b0      	movs	r3, #176	; 0xb0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8008d72:	2018      	movs	r0, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8008d74:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 3;
 8008d76:	2303      	movs	r3, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d78:	2202      	movs	r2, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8008d7a:	9005      	str	r0, [sp, #20]
  RCC_OscInitStruct.PLL.PLLM = 3;
 8008d7c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d7e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 10;
 8008d80:	230a      	movs	r3, #10
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008d82:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008d86:	e9cd 2110 	strd	r2, r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008d8a:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008d8c:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d8e:	f003 fd19 	bl	800c7c4 <HAL_RCC_OscConfig>
 8008d92:	4603      	mov	r3, r0
 8008d94:	b108      	cbz	r0, 8008d9a <SystemClock_Config+0x5a>
 8008d96:	b672      	cpsid	i
	while (1)
 8008d98:	e7fe      	b.n	8008d98 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d9a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8008dc0 <SystemClock_Config+0x80>
 8008d9e:	ed8d 7b00 	vstr	d7, [sp]
 8008da2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8008dc8 <SystemClock_Config+0x88>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008da6:	2104      	movs	r1, #4
 8008da8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008daa:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008dae:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008db0:	f004 f840 	bl	800ce34 <HAL_RCC_ClockConfig>
 8008db4:	b108      	cbz	r0, 8008dba <SystemClock_Config+0x7a>
 8008db6:	b672      	cpsid	i
	while (1)
 8008db8:	e7fe      	b.n	8008db8 <SystemClock_Config+0x78>
}
 8008dba:	b017      	add	sp, #92	; 0x5c
 8008dbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dc0:	0000000f 	.word	0x0000000f
 8008dc4:	00000003 	.word	0x00000003
	...

08008dd0 <main>:
{
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd4:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dd6:	2400      	movs	r4, #0
 8008dd8:	ad06      	add	r5, sp, #24
  HAL_Init();
 8008dda:	f000 fc95 	bl	8009708 <HAL_Init>
  SystemClock_Config();
 8008dde:	f7ff ffaf 	bl	8008d40 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de2:	9406      	str	r4, [sp, #24]
 8008de4:	e9c5 4401 	strd	r4, r4, [r5, #4]
 8008de8:	e9c5 4403 	strd	r4, r4, [r5, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008dec:	4bac      	ldr	r3, [pc, #688]	; (80090a0 <main+0x2d0>)
  HAL_GPIO_WritePin(GPIOB, LED_D_EN_L_Pin|LED_D_EN_R_Pin|DEV76XX_RSTN_Pin|VIBRATER_EN_Pin, GPIO_PIN_RESET);
 8008dee:	48ad      	ldr	r0, [pc, #692]	; (80090a4 <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008df0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
  hi2c1.Init.Timing = 0x00702991;
 8008df2:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 80090dc <main+0x30c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008df6:	f041 0104 	orr.w	r1, r1, #4
 8008dfa:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008dfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008dfe:	f001 0104 	and.w	r1, r1, #4
 8008e02:	9100      	str	r1, [sp, #0]
 8008e04:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008e06:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e08:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8008e0c:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008e0e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e10:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008e14:	9101      	str	r1, [sp, #4]
 8008e16:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e18:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e1a:	f041 0101 	orr.w	r1, r1, #1
 8008e1e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008e20:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e22:	f001 0101 	and.w	r1, r1, #1
 8008e26:	9102      	str	r1, [sp, #8]
 8008e28:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e2a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e2c:	f041 0102 	orr.w	r1, r1, #2
 8008e30:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e34:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, LED_D_EN_L_Pin|LED_D_EN_R_Pin|DEV76XX_RSTN_Pin|VIBRATER_EN_Pin, GPIO_PIN_RESET);
 8008e38:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e3a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LED_D_EN_L_Pin|LED_D_EN_R_Pin|DEV76XX_RSTN_Pin|VIBRATER_EN_Pin, GPIO_PIN_RESET);
 8008e3c:	f248 0107 	movw	r1, #32775	; 0x8007
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e40:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LED_D_EN_L_Pin|LED_D_EN_R_Pin|DEV76XX_RSTN_Pin|VIBRATER_EN_Pin, GPIO_PIN_RESET);
 8008e42:	f001 f87f 	bl	8009f44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LT7911D_RESET_Pin|SECURITY_KEY_Pin, GPIO_PIN_SET);
 8008e46:	4897      	ldr	r0, [pc, #604]	; (80090a4 <main+0x2d4>)
 8008e48:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f001 f879 	bl	8009f44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, FAN_EN_Pin|IR_LED_EN_Pin, GPIO_PIN_RESET);
 8008e52:	4622      	mov	r2, r4
 8008e54:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8008e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e5c:	f001 f872 	bl	8009f44 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = RDC200A_RSTB_H_Pin;
 8008e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e64:	2300      	movs	r3, #0
  HAL_GPIO_Init(RDC200A_RSTB_H_GPIO_Port, &GPIO_InitStruct);
 8008e66:	4890      	ldr	r0, [pc, #576]	; (80090a8 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e68:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(RDC200A_RSTB_H_GPIO_Port, &GPIO_InitStruct);
 8008e6a:	4629      	mov	r1, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e6c:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = RDC200A_RSTB_H_Pin;
 8008e6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(RDC200A_RSTB_H_GPIO_Port, &GPIO_InitStruct);
 8008e72:	f000 ff83 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IMU_INT2_H_Pin|SOS_KEY_Pin;
 8008e76:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008e7a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e7c:	488a      	ldr	r0, [pc, #552]	; (80090a8 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e7e:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e80:	4629      	mov	r1, r5
  GPIO_InitStruct.Pin = IMU_INT2_H_Pin|SOS_KEY_Pin;
 8008e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008e86:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e88:	f000 ff78 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PROX_INT_H_Pin;
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(PROX_INT_H_GPIO_Port, &GPIO_InitStruct);
 8008e92:	4629      	mov	r1, r5
 8008e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = PROX_INT_H_Pin;
 8008e98:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008e9c:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(PROX_INT_H_GPIO_Port, &GPIO_InitStruct);
 8008e9e:	f000 ff6d 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ALS_INTN_H_Pin|LED_D_FAULT_L_Pin|IMU_INT1_H_Pin|LED_D_FAULT_R_Pin;
 8008ea2:	226c      	movs	r2, #108	; 0x6c
 8008ea4:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ALS_INTN_H_Pin|LED_D_FAULT_L_Pin|IMU_INT1_H_Pin|LED_D_FAULT_R_Pin;
 8008eac:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008eb0:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eb2:	f000 ff63 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_D_EN_L_Pin|LED_D_EN_R_Pin|DEV76XX_RSTN_Pin|VIBRATER_EN_Pin;
 8008eb6:	f248 0307 	movw	r3, #32775	; 0x8007
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eba:	487a      	ldr	r0, [pc, #488]	; (80090a4 <main+0x2d4>)
  GPIO_InitStruct.Pin = LED_D_EN_L_Pin|LED_D_EN_R_Pin|DEV76XX_RSTN_Pin|VIBRATER_EN_Pin;
 8008ebc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ebe:	4629      	mov	r1, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec0:	e9cd 7407 	strd	r7, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ec4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ec6:	f000 ff59 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RDC200A_BOOTING_INDICATION_Pin;
 8008eca:	2220      	movs	r2, #32
 8008ecc:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ece:	4875      	ldr	r0, [pc, #468]	; (80090a4 <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ed0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ed2:	4629      	mov	r1, r5
  GPIO_InitStruct.Pin = RDC200A_BOOTING_INDICATION_Pin;
 8008ed4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ed8:	f000 ff50 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BRIGHTNESS_MINUS_Pin|BRIGHTNESS_PLUS_Pin;
 8008edc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008ee0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ee4:	486f      	ldr	r0, [pc, #444]	; (80090a4 <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ee8:	4629      	mov	r1, r5
  GPIO_InitStruct.Pin = BRIGHTNESS_MINUS_Pin|BRIGHTNESS_PLUS_Pin;
 8008eea:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eee:	f000 ff45 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IMU_INT1_H_Pin;
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = IMU_INT1_H_Pin;
 8008efe:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;//GPIO_PULLDOWN is okay too;
 8008f02:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f04:	f000 ff3a 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LT7911D_RESET_Pin|SECURITY_KEY_Pin;
 8008f08:	f44f 4382 	mov.w	r3, #16640	; 0x4100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f0c:	4865      	ldr	r0, [pc, #404]	; (80090a4 <main+0x2d4>)
  GPIO_InitStruct.Pin = LT7911D_RESET_Pin|SECURITY_KEY_Pin;
 8008f0e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f10:	4629      	mov	r1, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f12:	e9cd 7707 	strd	r7, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f16:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f18:	f000 ff30 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FAN_EN_Pin|IR_LED_EN_Pin;
 8008f1c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f20:	4629      	mov	r1, r5
 8008f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = FAN_EN_Pin|IR_LED_EN_Pin;
 8008f26:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f28:	e9cd 7407 	strd	r7, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f2e:	f000 ff25 	bl	8009d7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_H_Pin;
 8008f32:	2300      	movs	r3, #0
 8008f34:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(VSYNC_H_GPIO_Port, &GPIO_InitStruct);
 8008f38:	485a      	ldr	r0, [pc, #360]	; (80090a4 <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008f3a:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(VSYNC_H_GPIO_Port, &GPIO_InitStruct);
 8008f3c:	4629      	mov	r1, r5
  GPIO_InitStruct.Pin = VSYNC_H_Pin;
 8008f3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(VSYNC_H_GPIO_Port, &GPIO_InitStruct);
 8008f42:	f000 ff1b 	bl	8009d7c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8008f46:	4622      	mov	r2, r4
 8008f48:	4639      	mov	r1, r7
 8008f4a:	2017      	movs	r0, #23
 8008f4c:	f000 fc22 	bl	8009794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008f50:	2017      	movs	r0, #23
 8008f52:	f000 fc5d 	bl	8009810 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008f56:	4622      	mov	r2, r4
 8008f58:	4621      	mov	r1, r4
 8008f5a:	2028      	movs	r0, #40	; 0x28
  hi2c1.Instance = I2C1;
 8008f5c:	4e53      	ldr	r6, [pc, #332]	; (80090ac <main+0x2dc>)
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008f5e:	f000 fc19 	bl	8009794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008f62:	2028      	movs	r0, #40	; 0x28
 8008f64:	f000 fc54 	bl	8009810 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.Timing = 0x00702991;
 8008f68:	4b51      	ldr	r3, [pc, #324]	; (80090b0 <main+0x2e0>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008f6a:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008f6c:	4630      	mov	r0, r6
  hi2c1.Init.Timing = 0x00702991;
 8008f6e:	e9c6 3800 	strd	r3, r8, [r6]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008f72:	e9c6 4702 	strd	r4, r7, [r6, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8008f76:	e9c6 4404 	strd	r4, r4, [r6, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008f7a:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008f7e:	f001 fac9 	bl	800a514 <HAL_I2C_Init>
 8008f82:	b108      	cbz	r0, 8008f88 <main+0x1b8>
 8008f84:	b672      	cpsid	i
	while (1)
 8008f86:	e7fe      	b.n	8008f86 <main+0x1b6>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008f88:	4601      	mov	r1, r0
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f002 fb18 	bl	800b5c0 <HAL_I2CEx_ConfigAnalogFilter>
 8008f90:	b108      	cbz	r0, 8008f96 <main+0x1c6>
 8008f92:	b672      	cpsid	i
	while (1)
 8008f94:	e7fe      	b.n	8008f94 <main+0x1c4>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008f96:	4601      	mov	r1, r0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f002 fb3b 	bl	800b614 <HAL_I2CEx_ConfigDigitalFilter>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	b108      	cbz	r0, 8008fa6 <main+0x1d6>
 8008fa2:	b672      	cpsid	i
	while (1)
 8008fa4:	e7fe      	b.n	8008fa4 <main+0x1d4>
  hi2c2.Instance = I2C2;
 8008fa6:	4c43      	ldr	r4, [pc, #268]	; (80090b4 <main+0x2e4>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008fa8:	e9c4 3702 	strd	r3, r7, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8008fac:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008fb0:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008fb4:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008fb6:	4620      	mov	r0, r4
  hi2c2.Instance = I2C2;
 8008fb8:	4b3f      	ldr	r3, [pc, #252]	; (80090b8 <main+0x2e8>)
  hi2c2.Init.Timing = 0x00702991;
 8008fba:	f8c4 8004 	str.w	r8, [r4, #4]
  hi2c2.Instance = I2C2;
 8008fbe:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008fc0:	f001 faa8 	bl	800a514 <HAL_I2C_Init>
 8008fc4:	4601      	mov	r1, r0
 8008fc6:	b108      	cbz	r0, 8008fcc <main+0x1fc>
 8008fc8:	b672      	cpsid	i
	while (1)
 8008fca:	e7fe      	b.n	8008fca <main+0x1fa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f002 faf7 	bl	800b5c0 <HAL_I2CEx_ConfigAnalogFilter>
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	b108      	cbz	r0, 8008fda <main+0x20a>
 8008fd6:	b672      	cpsid	i
	while (1)
 8008fd8:	e7fe      	b.n	8008fd8 <main+0x208>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f002 fb1a 	bl	800b614 <HAL_I2CEx_ConfigDigitalFilter>
 8008fe0:	b108      	cbz	r0, 8008fe6 <main+0x216>
 8008fe2:	b672      	cpsid	i
	while (1)
 8008fe4:	e7fe      	b.n	8008fe4 <main+0x214>
  hspi1.Instance = SPI1;
 8008fe6:	4b35      	ldr	r3, [pc, #212]	; (80090bc <main+0x2ec>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008fe8:	4935      	ldr	r1, [pc, #212]	; (80090c0 <main+0x2f0>)
 8008fea:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008fee:	e9c3 1200 	strd	r1, r2, [r3]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008ff2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8008ff6:	e9c3 0102 	strd	r0, r1, [r3, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.CRCPolynomial = 7;
 8008ffe:	2107      	movs	r1, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009000:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009004:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009008:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800900c:	e9c3 100b 	strd	r1, r0, [r3, #44]	; 0x2c
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009010:	619a      	str	r2, [r3, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009012:	4618      	mov	r0, r3
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009014:	2208      	movs	r2, #8
 8009016:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009018:	f004 faa4 	bl	800d564 <HAL_SPI_Init>
 800901c:	4602      	mov	r2, r0
 800901e:	b108      	cbz	r0, 8009024 <main+0x254>
 8009020:	b672      	cpsid	i
	while (1)
 8009022:	e7fe      	b.n	8009022 <main+0x252>
  huart1.Instance = USART1;
 8009024:	4b27      	ldr	r3, [pc, #156]	; (80090c4 <main+0x2f4>)
  huart1.Init.BaudRate = 115200;
 8009026:	4828      	ldr	r0, [pc, #160]	; (80090c8 <main+0x2f8>)
 8009028:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800902c:	e9c3 0100 	strd	r0, r1, [r3]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009030:	210c      	movs	r1, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009032:	4618      	mov	r0, r3
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009034:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009038:	e9c3 2104 	strd	r2, r1, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800903c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009040:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009044:	f005 fc7e 	bl	800e944 <HAL_UART_Init>
 8009048:	4602      	mov	r2, r0
 800904a:	b108      	cbz	r0, 8009050 <main+0x280>
 800904c:	b672      	cpsid	i
	while (1)
 800904e:	e7fe      	b.n	800904e <main+0x27e>
  hrtc.Instance = RTC;
 8009050:	4b1e      	ldr	r3, [pc, #120]	; (80090cc <main+0x2fc>)
 8009052:	481f      	ldr	r0, [pc, #124]	; (80090d0 <main+0x300>)
 8009054:	6018      	str	r0, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 8009056:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 8009058:	20ff      	movs	r0, #255	; 0xff
  hrtc.Init.AsynchPrediv = 127;
 800905a:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800905e:	e9c3 0204 	strd	r0, r2, [r3, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009062:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009066:	4618      	mov	r0, r3
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009068:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800906c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800906e:	6219      	str	r1, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009070:	f004 f900 	bl	800d274 <HAL_RTC_Init>
 8009074:	4602      	mov	r2, r0
 8009076:	b108      	cbz	r0, 800907c <main+0x2ac>
 8009078:	b672      	cpsid	i
	while (1)
 800907a:	e7fe      	b.n	800907a <main+0x2aa>
  htim16.Instance = TIM16;
 800907c:	4b15      	ldr	r3, [pc, #84]	; (80090d4 <main+0x304>)
 800907e:	4816      	ldr	r0, [pc, #88]	; (80090d8 <main+0x308>)
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009080:	619a      	str	r2, [r3, #24]
  htim16.Init.Prescaler = 0;
 8009082:	e9c3 0200 	strd	r0, r2, [r3]
  htim16.Init.Period = 65535; // betta
 8009086:	f64f 71ff 	movw	r1, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800908a:	4618      	mov	r0, r3
  htim16.Init.Period = 65535; // betta
 800908c:	e9c3 2102 	strd	r2, r1, [r3, #8]
  htim16.Init.RepetitionCounter = 0;
 8009090:	e9c3 2204 	strd	r2, r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009094:	f004 ff8e 	bl	800dfb4 <HAL_TIM_Base_Init>
 8009098:	b310      	cbz	r0, 80090e0 <main+0x310>
 800909a:	b672      	cpsid	i
	while (1)
 800909c:	e7fe      	b.n	800909c <main+0x2cc>
 800909e:	bf00      	nop
 80090a0:	40021000 	.word	0x40021000
 80090a4:	48000400 	.word	0x48000400
 80090a8:	48000800 	.word	0x48000800
 80090ac:	20003b48 	.word	0x20003b48
 80090b0:	40005400 	.word	0x40005400
 80090b4:	20003b9c 	.word	0x20003b9c
 80090b8:	40005800 	.word	0x40005800
 80090bc:	20003c1c 	.word	0x20003c1c
 80090c0:	40013000 	.word	0x40013000
 80090c4:	20003ccc 	.word	0x20003ccc
 80090c8:	40013800 	.word	0x40013800
 80090cc:	20003bf0 	.word	0x20003bf0
 80090d0:	40002800 	.word	0x40002800
 80090d4:	20003c80 	.word	0x20003c80
 80090d8:	40014400 	.word	0x40014400
 80090dc:	00702991 	.word	0x00702991
	MX_USB_DEVICE_Init(); // betta: Due to Unexpected issue, USB won't work if enable it early.
 80090e0:	f007 f9e6 	bl	80104b0 <MX_USB_DEVICE_Init>
	HAL_GPIO_WritePin(LED_D_EN_L_GPIO_Port, LED_D_EN_L_Pin, GPIO_PIN_SET); // PB0
 80090e4:	2201      	movs	r2, #1
 80090e6:	4611      	mov	r1, r2
 80090e8:	481a      	ldr	r0, [pc, #104]	; (8009154 <main+0x384>)
 80090ea:	f000 ff2b 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_D_EN_R_GPIO_Port, LED_D_EN_R_Pin, GPIO_PIN_SET); // PB1
 80090ee:	2201      	movs	r2, #1
 80090f0:	2102      	movs	r1, #2
 80090f2:	4818      	ldr	r0, [pc, #96]	; (8009154 <main+0x384>)
 80090f4:	f000 ff26 	bl	8009f44 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80090f8:	2005      	movs	r0, #5
 80090fa:	f000 fb27 	bl	800974c <HAL_Delay>
	HAL_Delay(500);  //1sec delay Must need.
 80090fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009102:	f000 fb23 	bl	800974c <HAL_Delay>
	const char * test_param[] = {"1", "0x4A", "j", "0"};
 8009106:	4b14      	ldr	r3, [pc, #80]	; (8009158 <main+0x388>)
 8009108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800910a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	rdc200a_test_main(-3, test_param);
 800910e:	4629      	mov	r1, r5
 8009110:	f06f 0002 	mvn.w	r0, #2
 8009114:	f7fe fb14 	bl	8007740 <rdc200a_test_main>
	set_rdc200a_output_90Hz();
 8009118:	f7fb fb1c 	bl	8004754 <set_rdc200a_output_90Hz>
	rdc200a_sbs_on();
 800911c:	f7fb f990 	bl	8004440 <rdc200a_sbs_on>
	if (init_imu())
 8009120:	f7ff fb20 	bl	8008764 <init_imu>
	initialize_VCNL36828P();
 8009124:	f7ff f9d0 	bl	80084c8 <initialize_VCNL36828P>
	Flash_Read_Data(FLASH_ADDRESS_FOR_DEVICE_DATA_BYTE, User_Data, USER_DATA_SIZE);
 8009128:	2202      	movs	r2, #2
 800912a:	a904      	add	r1, sp, #16
 800912c:	480b      	ldr	r0, [pc, #44]	; (800915c <main+0x38c>)
 800912e:	f000 fd3b 	bl	8009ba8 <Flash_Read_Data>
	current_brightness = User_Data[brightness];// It was read for flash.
 8009132:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <main+0x390>)
 8009134:	f99d 0014 	ldrsb.w	r0, [sp, #20]
 8009138:	7018      	strb	r0, [r3, #0]
	set_led_brightness(current_brightness);
 800913a:	f7ff fa19 	bl	8008570 <set_led_brightness>
	display_on = TRUE;
 800913e:	4b09      	ldr	r3, [pc, #36]	; (8009164 <main+0x394>)
 8009140:	2201      	movs	r2, #1
 8009142:	701a      	strb	r2, [r3, #0]
		process_command();
 8009144:	f7ff fc54 	bl	80089f0 <process_command>
		HAL_Delay(100); //=> ok, 24
 8009148:	2064      	movs	r0, #100	; 0x64
 800914a:	f000 faff 	bl	800974c <HAL_Delay>
		do_others();
 800914e:	f7ff fd3f 	bl	8008bd0 <do_others>
	while (1) {
 8009152:	e7f7      	b.n	8009144 <main+0x374>
 8009154:	48000400 	.word	0x48000400
 8009158:	08016378 	.word	0x08016378
 800915c:	0801ffd0 	.word	0x0801ffd0
 8009160:	200000e2 	.word	0x200000e2
 8009164:	200000e3 	.word	0x200000e3

08009168 <Error_Handler>:
 8009168:	b672      	cpsid	i
	while (1)
 800916a:	e7fe      	b.n	800916a <Error_Handler+0x2>

0800916c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800916c:	4b17      	ldr	r3, [pc, #92]	; (80091cc <HAL_MspInit+0x60>)
{
 800916e:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009170:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009172:	f040 0001 	orr.w	r0, r0, #1
 8009176:	6618      	str	r0, [r3, #96]	; 0x60
 8009178:	6e1c      	ldr	r4, [r3, #96]	; 0x60
{
 800917a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800917c:	f004 0401 	and.w	r4, r4, #1
 8009180:	9400      	str	r4, [sp, #0]
 8009182:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009184:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8009186:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800918a:	659c      	str	r4, [r3, #88]	; 0x58
 800918c:	6d9b      	ldr	r3, [r3, #88]	; 0x58

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800918e:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8009190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8009194:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8009196:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8009198:	2005      	movs	r0, #5
  __HAL_RCC_PWR_CLK_ENABLE();
 800919a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800919c:	f000 fafa 	bl	8009794 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80091a0:	2005      	movs	r0, #5
 80091a2:	f000 fb35 	bl	8009810 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80091a6:	2200      	movs	r2, #0
 80091a8:	4611      	mov	r1, r2
 80091aa:	2005      	movs	r0, #5
 80091ac:	f000 faf2 	bl	8009794 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80091b0:	2005      	movs	r0, #5
 80091b2:	f000 fb2d 	bl	8009810 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80091b6:	2200      	movs	r2, #0
 80091b8:	2051      	movs	r0, #81	; 0x51
 80091ba:	4611      	mov	r1, r2
 80091bc:	f000 faea 	bl	8009794 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80091c0:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80091c2:	b002      	add	sp, #8
 80091c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80091c8:	f000 bb22 	b.w	8009810 <HAL_NVIC_EnableIRQ>
 80091cc:	40021000 	.word	0x40021000

080091d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4604      	mov	r4, r0
 80091d4:	b096      	sub	sp, #88	; 0x58
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80091d8:	2234      	movs	r2, #52	; 0x34
 80091da:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091dc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80091e0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80091e4:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80091e6:	f009 fdc5 	bl	8012d74 <memset>
  if(hi2c->Instance==I2C1)
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	4a41      	ldr	r2, [pc, #260]	; (80092f4 <HAL_I2C_MspInit+0x124>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d004      	beq.n	80091fc <HAL_I2C_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80091f2:	4a41      	ldr	r2, [pc, #260]	; (80092f8 <HAL_I2C_MspInit+0x128>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d03b      	beq.n	8009270 <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80091f8:	b016      	add	sp, #88	; 0x58
 80091fa:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80091fc:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80091fe:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009200:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009202:	f003 feef 	bl	800cfe4 <HAL_RCCEx_PeriphCLKConfig>
 8009206:	2800      	cmp	r0, #0
 8009208:	d16d      	bne.n	80092e6 <HAL_I2C_MspInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800920a:	4c3c      	ldr	r4, [pc, #240]	; (80092fc <HAL_I2C_MspInit+0x12c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800920c:	483c      	ldr	r0, [pc, #240]	; (8009300 <HAL_I2C_MspInit+0x130>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800920e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009210:	f043 0302 	orr.w	r3, r3, #2
 8009214:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009216:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800921e:	22c0      	movs	r2, #192	; 0xc0
 8009220:	2312      	movs	r3, #18
 8009222:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009226:	2200      	movs	r2, #0
 8009228:	2301      	movs	r3, #1
 800922a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800922e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009230:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009232:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009234:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009236:	f000 fda1 	bl	8009d7c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800923a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800923c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009240:	65a3      	str	r3, [r4, #88]	; 0x58
 8009242:	6da3      	ldr	r3, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8009244:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800924a:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 800924c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800924e:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009250:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8009252:	f000 fa9f 	bl	8009794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8009256:	201f      	movs	r0, #31
 8009258:	f000 fada 	bl	8009810 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800925c:	2200      	movs	r2, #0
 800925e:	4611      	mov	r1, r2
 8009260:	2020      	movs	r0, #32
 8009262:	f000 fa97 	bl	8009794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8009266:	2020      	movs	r0, #32
 8009268:	f000 fad2 	bl	8009810 <HAL_NVIC_EnableIRQ>
}
 800926c:	b016      	add	sp, #88	; 0x58
 800926e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009270:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009272:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009274:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009276:	f003 feb5 	bl	800cfe4 <HAL_RCCEx_PeriphCLKConfig>
 800927a:	2800      	cmp	r0, #0
 800927c:	d136      	bne.n	80092ec <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800927e:	4c1f      	ldr	r4, [pc, #124]	; (80092fc <HAL_I2C_MspInit+0x12c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009280:	481f      	ldr	r0, [pc, #124]	; (8009300 <HAL_I2C_MspInit+0x130>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009282:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009284:	f043 0302 	orr.w	r3, r3, #2
 8009288:	64e3      	str	r3, [r4, #76]	; 0x4c
 800928a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009292:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8009296:	2312      	movs	r3, #18
 8009298:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800929c:	2200      	movs	r2, #0
 800929e:	2301      	movs	r3, #1
 80092a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092a4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80092a6:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092a8:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80092aa:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092ac:	f000 fd66 	bl	8009d7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80092b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80092b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80092ba:	2200      	movs	r2, #0
    __HAL_RCC_I2C2_CLK_ENABLE();
 80092bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80092c0:	4611      	mov	r1, r2
    __HAL_RCC_I2C2_CLK_ENABLE();
 80092c2:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80092c4:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 80092c6:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80092c8:	f000 fa64 	bl	8009794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80092cc:	2021      	movs	r0, #33	; 0x21
 80092ce:	f000 fa9f 	bl	8009810 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80092d2:	2200      	movs	r2, #0
 80092d4:	4611      	mov	r1, r2
 80092d6:	2022      	movs	r0, #34	; 0x22
 80092d8:	f000 fa5c 	bl	8009794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80092dc:	2022      	movs	r0, #34	; 0x22
 80092de:	f000 fa97 	bl	8009810 <HAL_NVIC_EnableIRQ>
}
 80092e2:	b016      	add	sp, #88	; 0x58
 80092e4:	bd10      	pop	{r4, pc}
      Error_Handler();
 80092e6:	f7ff ff3f 	bl	8009168 <Error_Handler>
 80092ea:	e78e      	b.n	800920a <HAL_I2C_MspInit+0x3a>
      Error_Handler();
 80092ec:	f7ff ff3c 	bl	8009168 <Error_Handler>
 80092f0:	e7c5      	b.n	800927e <HAL_I2C_MspInit+0xae>
 80092f2:	bf00      	nop
 80092f4:	40005400 	.word	0x40005400
 80092f8:	40005800 	.word	0x40005800
 80092fc:	40021000 	.word	0x40021000
 8009300:	48000400 	.word	0x48000400

08009304 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009304:	b510      	push	{r4, lr}
 8009306:	4604      	mov	r4, r0
 8009308:	b08e      	sub	sp, #56	; 0x38
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800930a:	2234      	movs	r2, #52	; 0x34
 800930c:	2100      	movs	r1, #0
 800930e:	a801      	add	r0, sp, #4
 8009310:	f009 fd30 	bl	8012d74 <memset>
  if(hrtc->Instance==RTC)
 8009314:	4b0d      	ldr	r3, [pc, #52]	; (800934c <HAL_RTC_MspInit+0x48>)
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d001      	beq.n	8009320 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800931c:	b00e      	add	sp, #56	; 0x38
 800931e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009320:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009324:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009328:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800932a:	9201      	str	r2, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800932c:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800932e:	f003 fe59 	bl	800cfe4 <HAL_RCCEx_PeriphCLKConfig>
 8009332:	b940      	cbnz	r0, 8009346 <HAL_RTC_MspInit+0x42>
    __HAL_RCC_RTC_ENABLE();
 8009334:	4a06      	ldr	r2, [pc, #24]	; (8009350 <HAL_RTC_MspInit+0x4c>)
 8009336:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800933a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800933e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009342:	b00e      	add	sp, #56	; 0x38
 8009344:	bd10      	pop	{r4, pc}
      Error_Handler();
 8009346:	f7ff ff0f 	bl	8009168 <Error_Handler>
 800934a:	e7f3      	b.n	8009334 <HAL_RTC_MspInit+0x30>
 800934c:	40002800 	.word	0x40002800
 8009350:	40021000 	.word	0x40021000

08009354 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009354:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8009356:	4b26      	ldr	r3, [pc, #152]	; (80093f0 <HAL_SPI_MspInit+0x9c>)
 8009358:	6802      	ldr	r2, [r0, #0]
{
 800935a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800935c:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 800935e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009360:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8009364:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8009368:	9408      	str	r4, [sp, #32]
  if(hspi->Instance==SPI1)
 800936a:	d001      	beq.n	8009370 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800936c:	b00a      	add	sp, #40	; 0x28
 800936e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009370:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009374:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009376:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009378:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800937c:	661a      	str	r2, [r3, #96]	; 0x60
 800937e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009380:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009384:	9201      	str	r2, [sp, #4]
 8009386:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800938a:	f042 0201 	orr.w	r2, r2, #1
 800938e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009392:	f002 0201 	and.w	r2, r2, #1
 8009396:	9202      	str	r2, [sp, #8]
 8009398:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800939a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800939c:	f042 0202 	orr.w	r2, r2, #2
 80093a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80093a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 80093aa:	2292      	movs	r2, #146	; 0x92
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80093ac:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093ae:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 80093b0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 80093b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80093ba:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093be:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093c0:	f000 fcdc 	bl	8009d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80093c4:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093c6:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80093ca:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093cc:	4809      	ldr	r0, [pc, #36]	; (80093f4 <HAL_SPI_MspInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80093ce:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093d0:	2302      	movs	r3, #2
 80093d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093d4:	e9cd 4606 	strd	r4, r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093d8:	f000 fcd0 	bl	8009d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80093dc:	4622      	mov	r2, r4
 80093de:	4621      	mov	r1, r4
 80093e0:	2023      	movs	r0, #35	; 0x23
 80093e2:	f000 f9d7 	bl	8009794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80093e6:	2023      	movs	r0, #35	; 0x23
 80093e8:	f000 fa12 	bl	8009810 <HAL_NVIC_EnableIRQ>
}
 80093ec:	b00a      	add	sp, #40	; 0x28
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	40013000 	.word	0x40013000
 80093f4:	48000400 	.word	0x48000400

080093f8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM16)
 80093f8:	4b09      	ldr	r3, [pc, #36]	; (8009420 <HAL_TIM_Base_MspInit+0x28>)
 80093fa:	6802      	ldr	r2, [r0, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d000      	beq.n	8009402 <HAL_TIM_Base_MspInit+0xa>
 8009400:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009402:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
{
 8009406:	b082      	sub	sp, #8
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009408:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800940a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800940e:	661a      	str	r2, [r3, #96]	; 0x60
 8009410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800941a:	b002      	add	sp, #8
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	40014400 	.word	0x40014400
 8009424:	00000000 	.word	0x00000000

08009428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009428:	b510      	push	{r4, lr}
 800942a:	4604      	mov	r4, r0
 800942c:	b094      	sub	sp, #80	; 0x50
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800942e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009430:	2234      	movs	r2, #52	; 0x34
 8009432:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009434:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8009438:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800943c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800943e:	f009 fc99 	bl	8012d74 <memset>
  if(huart->Instance==USART1)
 8009442:	4b21      	ldr	r3, [pc, #132]	; (80094c8 <HAL_UART_MspInit+0xa0>)
 8009444:	6822      	ldr	r2, [r4, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d001      	beq.n	800944e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800944a:	b014      	add	sp, #80	; 0x50
 800944c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800944e:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009450:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009452:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009454:	f003 fdc6 	bl	800cfe4 <HAL_RCCEx_PeriphCLKConfig>
 8009458:	bb58      	cbnz	r0, 80094b2 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800945a:	4b1c      	ldr	r3, [pc, #112]	; (80094cc <HAL_UART_MspInit+0xa4>)
 800945c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800945e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009462:	661a      	str	r2, [r3, #96]	; 0x60
 8009464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009466:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800946a:	9200      	str	r2, [sp, #0]
 800946c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800946e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009470:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80094b8 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009474:	f042 0201 	orr.w	r2, r2, #1
 8009478:	64da      	str	r2, [r3, #76]	; 0x4c
 800947a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800947c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009480:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80094c0 <HAL_UART_MspInit+0x98>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800948a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800948c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800948e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009492:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009496:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009498:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800949a:	f000 fc6f 	bl	8009d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800949e:	2200      	movs	r2, #0
 80094a0:	4611      	mov	r1, r2
 80094a2:	2025      	movs	r0, #37	; 0x25
 80094a4:	f000 f976 	bl	8009794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80094a8:	2025      	movs	r0, #37	; 0x25
 80094aa:	f000 f9b1 	bl	8009810 <HAL_NVIC_EnableIRQ>
}
 80094ae:	b014      	add	sp, #80	; 0x50
 80094b0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80094b2:	f7ff fe59 	bl	8009168 <Error_Handler>
 80094b6:	e7d0      	b.n	800945a <HAL_UART_MspInit+0x32>
 80094b8:	00000600 	.word	0x00000600
 80094bc:	00000002 	.word	0x00000002
 80094c0:	00000000 	.word	0x00000000
 80094c4:	00000003 	.word	0x00000003
 80094c8:	40013800 	.word	0x40013800
 80094cc:	40021000 	.word	0x40021000

080094d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80094d0:	e7fe      	b.n	80094d0 <NMI_Handler>
 80094d2:	bf00      	nop

080094d4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80094d4:	e7fe      	b.n	80094d4 <HardFault_Handler>
 80094d6:	bf00      	nop

080094d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80094d8:	e7fe      	b.n	80094d8 <MemManage_Handler>
 80094da:	bf00      	nop

080094dc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80094dc:	e7fe      	b.n	80094dc <BusFault_Handler>
 80094de:	bf00      	nop

080094e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80094e0:	e7fe      	b.n	80094e0 <UsageFault_Handler>
 80094e2:	bf00      	nop

080094e4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop

080094e8 <DebugMon_Handler>:
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop

080094ec <PendSV_Handler>:
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80094f0:	f000 b91a 	b.w	8009728 <HAL_IncTick>

080094f4 <RCC_IRQHandler>:
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop

080094f8 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_INT_H_Pin);
 80094f8:	2001      	movs	r0, #1
 80094fa:	f000 bd29 	b.w	8009f50 <HAL_GPIO_EXTI_IRQHandler>
 80094fe:	bf00      	nop

08009500 <EXTI15_10_IRQHandler>:
}

#if 1 //  betta added
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(BRIGHTNESS_MINUS_Pin|BRIGHTNESS_PLUS_Pin);
 8009500:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8009504:	f000 bd24 	b.w	8009f50 <HAL_GPIO_EXTI_IRQHandler>

08009508 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(IMU_INT1_H_Pin);
 8009508:	2020      	movs	r0, #32
 800950a:	f000 bd21 	b.w	8009f50 <HAL_GPIO_EXTI_IRQHandler>
 800950e:	bf00      	nop

08009510 <TIM1_UP_TIM16_IRQHandler>:
}

void TIM1_UP_TIM16_IRQHandler(void)
{
 8009510:	b500      	push	{lr}
 8009512:	b08b      	sub	sp, #44	; 0x2c
	uint8_t tmp[40]={0};
 8009514:	2224      	movs	r2, #36	; 0x24
 8009516:	2100      	movs	r1, #0
 8009518:	a801      	add	r0, sp, #4
 800951a:	f009 fc2b 	bl	8012d74 <memset>
			//ps_int=true;
	sprintf(tmp,"TIM1\n");
 800951e:	4b08      	ldr	r3, [pc, #32]	; (8009540 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8009520:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009524:	9000      	str	r0, [sp, #0]
	sendCdcData((uint8_t*)tmp, strlen(tmp));
 8009526:	4668      	mov	r0, sp
	sprintf(tmp,"TIM1\n");
 8009528:	f8ad 1004 	strh.w	r1, [sp, #4]
	sendCdcData((uint8_t*)tmp, strlen(tmp));
 800952c:	f7f6 fea0 	bl	8000270 <strlen>
 8009530:	4601      	mov	r1, r0
 8009532:	4668      	mov	r0, sp
 8009534:	f7ff f94e 	bl	80087d4 <sendCdcData>
}
 8009538:	b00b      	add	sp, #44	; 0x2c
 800953a:	f85d fb04 	ldr.w	pc, [sp], #4
 800953e:	bf00      	nop
 8009540:	08016d90 	.word	0x08016d90

08009544 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009544:	4801      	ldr	r0, [pc, #4]	; (800954c <I2C1_EV_IRQHandler+0x8>)
 8009546:	f001 bd23 	b.w	800af90 <HAL_I2C_EV_IRQHandler>
 800954a:	bf00      	nop
 800954c:	20003b48 	.word	0x20003b48

08009550 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009550:	4801      	ldr	r0, [pc, #4]	; (8009558 <I2C1_ER_IRQHandler+0x8>)
 8009552:	f001 be71 	b.w	800b238 <HAL_I2C_ER_IRQHandler>
 8009556:	bf00      	nop
 8009558:	20003b48 	.word	0x20003b48

0800955c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800955c:	4801      	ldr	r0, [pc, #4]	; (8009564 <I2C2_EV_IRQHandler+0x8>)
 800955e:	f001 bd17 	b.w	800af90 <HAL_I2C_EV_IRQHandler>
 8009562:	bf00      	nop
 8009564:	20003b9c 	.word	0x20003b9c

08009568 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8009568:	4801      	ldr	r0, [pc, #4]	; (8009570 <I2C2_ER_IRQHandler+0x8>)
 800956a:	f001 be65 	b.w	800b238 <HAL_I2C_ER_IRQHandler>
 800956e:	bf00      	nop
 8009570:	20003b9c 	.word	0x20003b9c

08009574 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009574:	4801      	ldr	r0, [pc, #4]	; (800957c <SPI1_IRQHandler+0x8>)
 8009576:	f004 bc91 	b.w	800de9c <HAL_SPI_IRQHandler>
 800957a:	bf00      	nop
 800957c:	20003c1c 	.word	0x20003c1c

08009580 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009580:	4801      	ldr	r0, [pc, #4]	; (8009588 <USART1_IRQHandler+0x8>)
 8009582:	f004 bd9f 	b.w	800e0c4 <HAL_UART_IRQHandler>
 8009586:	bf00      	nop
 8009588:	20003ccc 	.word	0x20003ccc

0800958c <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800958c:	4801      	ldr	r0, [pc, #4]	; (8009594 <USB_IRQHandler+0x8>)
 800958e:	f002 b911 	b.w	800b7b4 <HAL_PCD_IRQHandler>
 8009592:	bf00      	nop
 8009594:	20004a18 	.word	0x20004a18

08009598 <FPU_IRQHandler>:
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop

0800959c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800959c:	2001      	movs	r0, #1
 800959e:	4770      	bx	lr

080095a0 <_kill>:

int _kill(int pid, int sig)
{
 80095a0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80095a2:	f009 fcb7 	bl	8012f14 <__errno>
 80095a6:	2316      	movs	r3, #22
 80095a8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80095aa:	f04f 30ff 	mov.w	r0, #4294967295
 80095ae:	bd08      	pop	{r3, pc}

080095b0 <_exit>:

void _exit (int status)
{
 80095b0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80095b2:	f009 fcaf 	bl	8012f14 <__errno>
 80095b6:	2316      	movs	r3, #22
 80095b8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80095ba:	e7fe      	b.n	80095ba <_exit+0xa>

080095bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80095bc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095be:	1e16      	subs	r6, r2, #0
 80095c0:	dd07      	ble.n	80095d2 <_read+0x16>
 80095c2:	460c      	mov	r4, r1
 80095c4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80095c6:	f3af 8000 	nop.w
 80095ca:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095ce:	42a5      	cmp	r5, r4
 80095d0:	d1f9      	bne.n	80095c6 <_read+0xa>
	}

return len;
}
 80095d2:	4630      	mov	r0, r6
 80095d4:	bd70      	pop	{r4, r5, r6, pc}
 80095d6:	bf00      	nop

080095d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80095d8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095da:	1e16      	subs	r6, r2, #0
 80095dc:	dd07      	ble.n	80095ee <_write+0x16>
 80095de:	460c      	mov	r4, r1
 80095e0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80095e2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80095e6:	f7ff f9f3 	bl	80089d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095ea:	42ac      	cmp	r4, r5
 80095ec:	d1f9      	bne.n	80095e2 <_write+0xa>
	}
	return len;
}
 80095ee:	4630      	mov	r0, r6
 80095f0:	bd70      	pop	{r4, r5, r6, pc}
 80095f2:	bf00      	nop

080095f4 <_close>:

int _close(int file)
{
	return -1;
}
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop

080095fc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80095fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009600:	604b      	str	r3, [r1, #4]
	return 0;
}
 8009602:	2000      	movs	r0, #0
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop

08009608 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8009608:	2001      	movs	r0, #1
 800960a:	4770      	bx	lr

0800960c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800960c:	2000      	movs	r0, #0
 800960e:	4770      	bx	lr

08009610 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009610:	490c      	ldr	r1, [pc, #48]	; (8009644 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009612:	4a0d      	ldr	r2, [pc, #52]	; (8009648 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8009614:	680b      	ldr	r3, [r1, #0]
{
 8009616:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009618:	4c0c      	ldr	r4, [pc, #48]	; (800964c <_sbrk+0x3c>)
 800961a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800961c:	b12b      	cbz	r3, 800962a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800961e:	4418      	add	r0, r3
 8009620:	4290      	cmp	r0, r2
 8009622:	d807      	bhi.n	8009634 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8009624:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8009626:	4618      	mov	r0, r3
 8009628:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800962a:	4b09      	ldr	r3, [pc, #36]	; (8009650 <_sbrk+0x40>)
 800962c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800962e:	4418      	add	r0, r3
 8009630:	4290      	cmp	r0, r2
 8009632:	d9f7      	bls.n	8009624 <_sbrk+0x14>
    errno = ENOMEM;
 8009634:	f009 fc6e 	bl	8012f14 <__errno>
 8009638:	230c      	movs	r3, #12
 800963a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800963c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009640:	4618      	mov	r0, r3
 8009642:	bd10      	pop	{r4, pc}
 8009644:	20003d54 	.word	0x20003d54
 8009648:	2000a000 	.word	0x2000a000
 800964c:	00000400 	.word	0x00000400
 8009650:	20005098 	.word	0x20005098

08009654 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009654:	4a03      	ldr	r2, [pc, #12]	; (8009664 <SystemInit+0x10>)
 8009656:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800965a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800965e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009662:	4770      	bx	lr
 8009664:	e000ed00 	.word	0xe000ed00

08009668 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80096a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800966c:	f7ff fff2 	bl	8009654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009670:	480c      	ldr	r0, [pc, #48]	; (80096a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8009672:	490d      	ldr	r1, [pc, #52]	; (80096a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009674:	4a0d      	ldr	r2, [pc, #52]	; (80096ac <LoopForever+0xe>)
  movs r3, #0
 8009676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009678:	e002      	b.n	8009680 <LoopCopyDataInit>

0800967a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800967a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800967c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800967e:	3304      	adds	r3, #4

08009680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009684:	d3f9      	bcc.n	800967a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009686:	4a0a      	ldr	r2, [pc, #40]	; (80096b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009688:	4c0a      	ldr	r4, [pc, #40]	; (80096b4 <LoopForever+0x16>)
  movs r3, #0
 800968a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800968c:	e001      	b.n	8009692 <LoopFillZerobss>

0800968e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800968e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009690:	3204      	adds	r2, #4

08009692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009694:	d3fb      	bcc.n	800968e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009696:	f009 fc43 	bl	8012f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800969a:	f7ff fb99 	bl	8008dd0 <main>

0800969e <LoopForever>:

LoopForever:
    b LoopForever
 800969e:	e7fe      	b.n	800969e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80096a0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80096a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80096a8:	20000568 	.word	0x20000568
  ldr r2, =_sidata
 80096ac:	08017368 	.word	0x08017368
  ldr r2, =_sbss
 80096b0:	20000568 	.word	0x20000568
  ldr r4, =_ebss
 80096b4:	20005094 	.word	0x20005094

080096b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80096b8:	e7fe      	b.n	80096b8 <ADC1_2_IRQHandler>
	...

080096bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096bc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <HAL_InitTick+0x40>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	b90b      	cbnz	r3, 80096c8 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80096c4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80096c8:	490d      	ldr	r1, [pc, #52]	; (8009700 <HAL_InitTick+0x44>)
 80096ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096ce:	4605      	mov	r5, r0
 80096d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d4:	6808      	ldr	r0, [r1, #0]
 80096d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80096da:	f000 f8a7 	bl	800982c <HAL_SYSTICK_Config>
 80096de:	4604      	mov	r4, r0
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d1ef      	bne.n	80096c4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80096e4:	2d0f      	cmp	r5, #15
 80096e6:	d8ed      	bhi.n	80096c4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80096e8:	4602      	mov	r2, r0
 80096ea:	4629      	mov	r1, r5
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295
 80096f0:	f000 f850 	bl	8009794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80096f4:	4b03      	ldr	r3, [pc, #12]	; (8009704 <HAL_InitTick+0x48>)
 80096f6:	4620      	mov	r0, r4
 80096f8:	601d      	str	r5, [r3, #0]
}
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	200000e8 	.word	0x200000e8
 8009700:	200000e4 	.word	0x200000e4
 8009704:	200000ec 	.word	0x200000ec

08009708 <HAL_Init>:
{
 8009708:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800970a:	2003      	movs	r0, #3
 800970c:	f000 f830 	bl	8009770 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009710:	200f      	movs	r0, #15
 8009712:	f7ff ffd3 	bl	80096bc <HAL_InitTick>
 8009716:	b110      	cbz	r0, 800971e <HAL_Init+0x16>
    status = HAL_ERROR;
 8009718:	2401      	movs	r4, #1
}
 800971a:	4620      	mov	r0, r4
 800971c:	bd10      	pop	{r4, pc}
 800971e:	4604      	mov	r4, r0
    HAL_MspInit();
 8009720:	f7ff fd24 	bl	800916c <HAL_MspInit>
}
 8009724:	4620      	mov	r0, r4
 8009726:	bd10      	pop	{r4, pc}

08009728 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8009728:	4a03      	ldr	r2, [pc, #12]	; (8009738 <HAL_IncTick+0x10>)
 800972a:	4b04      	ldr	r3, [pc, #16]	; (800973c <HAL_IncTick+0x14>)
 800972c:	6811      	ldr	r1, [r2, #0]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	440b      	add	r3, r1
 8009732:	6013      	str	r3, [r2, #0]
}
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20003d58 	.word	0x20003d58
 800973c:	200000e8 	.word	0x200000e8

08009740 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009740:	4b01      	ldr	r3, [pc, #4]	; (8009748 <HAL_GetTick+0x8>)
 8009742:	6818      	ldr	r0, [r3, #0]
}
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20003d58 	.word	0x20003d58

0800974c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009750:	f7ff fff6 	bl	8009740 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009754:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8009756:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8009758:	d002      	beq.n	8009760 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 800975a:	4b04      	ldr	r3, [pc, #16]	; (800976c <HAL_Delay+0x20>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009760:	f7ff ffee 	bl	8009740 <HAL_GetTick>
 8009764:	1b43      	subs	r3, r0, r5
 8009766:	42a3      	cmp	r3, r4
 8009768:	d3fa      	bcc.n	8009760 <HAL_Delay+0x14>
  {
  }
}
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	200000e8 	.word	0x200000e8

08009770 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009770:	4907      	ldr	r1, [pc, #28]	; (8009790 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009772:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009774:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009776:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800977a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800977e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009780:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009782:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800978a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	e000ed00 	.word	0xe000ed00

08009794 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009794:	4b1c      	ldr	r3, [pc, #112]	; (8009808 <HAL_NVIC_SetPriority+0x74>)
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800979c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800979e:	f1c3 0e07 	rsb	lr, r3, #7
 80097a2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097a6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097aa:	bf28      	it	cs
 80097ac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097b0:	f1bc 0f06 	cmp.w	ip, #6
 80097b4:	d91b      	bls.n	80097ee <HAL_NVIC_SetPriority+0x5a>
 80097b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097b8:	f04f 3cff 	mov.w	ip, #4294967295
 80097bc:	fa0c fc03 	lsl.w	ip, ip, r3
 80097c0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097c4:	f04f 3cff 	mov.w	ip, #4294967295
 80097c8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80097cc:	ea21 010c 	bic.w	r1, r1, ip
 80097d0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80097d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097d4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80097d8:	db0c      	blt.n	80097f4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097da:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80097de:	0109      	lsls	r1, r1, #4
 80097e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80097e4:	b2c9      	uxtb	r1, r1
 80097e6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80097ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80097ee:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097f0:	4613      	mov	r3, r2
 80097f2:	e7e7      	b.n	80097c4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <HAL_NVIC_SetPriority+0x78>)
 80097f6:	f000 000f 	and.w	r0, r0, #15
 80097fa:	0109      	lsls	r1, r1, #4
 80097fc:	4403      	add	r3, r0
 80097fe:	b2c9      	uxtb	r1, r1
 8009800:	7619      	strb	r1, [r3, #24]
 8009802:	f85d fb04 	ldr.w	pc, [sp], #4
 8009806:	bf00      	nop
 8009808:	e000ed00 	.word	0xe000ed00
 800980c:	e000ecfc 	.word	0xe000ecfc

08009810 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009810:	2800      	cmp	r0, #0
 8009812:	db07      	blt.n	8009824 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009814:	4a04      	ldr	r2, [pc, #16]	; (8009828 <HAL_NVIC_EnableIRQ+0x18>)
 8009816:	0941      	lsrs	r1, r0, #5
 8009818:	2301      	movs	r3, #1
 800981a:	f000 001f 	and.w	r0, r0, #31
 800981e:	4083      	lsls	r3, r0
 8009820:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	e000e100 	.word	0xe000e100

0800982c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800982c:	3801      	subs	r0, #1
 800982e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009832:	d210      	bcs.n	8009856 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009834:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009836:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800983a:	4c08      	ldr	r4, [pc, #32]	; (800985c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800983c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800983e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8009842:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009846:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009848:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800984a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800984c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800984e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009852:	6119      	str	r1, [r3, #16]
 8009854:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8009856:	2001      	movs	r0, #1
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	e000ed00 	.word	0xe000ed00

08009860 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009860:	2800      	cmp	r0, #0
 8009862:	db08      	blt.n	8009876 <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009864:	0943      	lsrs	r3, r0, #5
 8009866:	4904      	ldr	r1, [pc, #16]	; (8009878 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8009868:	f000 001f 	and.w	r0, r0, #31
 800986c:	2201      	movs	r2, #1
 800986e:	3360      	adds	r3, #96	; 0x60
 8009870:	4082      	lsls	r2, r0
 8009872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8009876:	4770      	bx	lr
 8009878:	e000e100 	.word	0xe000e100

0800987c <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800987c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8009880:	2a02      	cmp	r2, #2
{
 8009882:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009884:	d006      	beq.n	8009894 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009886:	2204      	movs	r2, #4
 8009888:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800988a:	2200      	movs	r2, #0

    return HAL_ERROR;
 800988c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800988e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8009892:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009894:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009896:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009898:	6808      	ldr	r0, [r1, #0]
 800989a:	f020 000e 	bic.w	r0, r0, #14
 800989e:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80098a0:	6808      	ldr	r0, [r1, #0]
 80098a2:	f020 0001 	bic.w	r0, r0, #1
 80098a6:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80098a8:	f04f 0c01 	mov.w	ip, #1
 80098ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80098ae:	f002 021c 	and.w	r2, r2, #28
 80098b2:	fa0c f202 	lsl.w	r2, ip, r2
 80098b6:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 80098b8:	2200      	movs	r2, #0
    return status;
 80098ba:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80098bc:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80098c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop

080098c8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80098c8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80098cc:	2a02      	cmp	r2, #2
 80098ce:	d003      	beq.n	80098d8 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098d0:	2204      	movs	r2, #4
 80098d2:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80098d4:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80098d6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098d8:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80098da:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80098dc:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098de:	680c      	ldr	r4, [r1, #0]
 80098e0:	f024 040e 	bic.w	r4, r4, #14
 80098e4:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80098e6:	680c      	ldr	r4, [r1, #0]
 80098e8:	f024 0401 	bic.w	r4, r4, #1
 80098ec:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80098ee:	f002 021c 	and.w	r2, r2, #28
 80098f2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80098f4:	2101      	movs	r1, #1
 80098f6:	fa01 f202 	lsl.w	r2, r1, r2
 80098fa:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 80098fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80098fe:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8009902:	2400      	movs	r4, #0
 8009904:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8009908:	b112      	cbz	r2, 8009910 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 800990a:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800990c:	4620      	mov	r0, r4
}
 800990e:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8009910:	4610      	mov	r0, r2
}
 8009912:	bd10      	pop	{r4, pc}

08009914 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8009914:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop

0800991c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800991c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009920:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8009a6c <HAL_FLASH_Program+0x150>
{
 8009924:	469b      	mov	fp, r3
  __HAL_LOCK(&pFlash);
 8009926:	f899 3000 	ldrb.w	r3, [r9]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d05d      	beq.n	80099ea <HAL_FLASH_Program+0xce>
 800992e:	2301      	movs	r3, #1
 8009930:	4682      	mov	sl, r0
 8009932:	460f      	mov	r7, r1
 8009934:	4614      	mov	r4, r2
 8009936:	f889 3000 	strb.w	r3, [r9]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800993a:	f7ff ff01 	bl	8009740 <HAL_GetTick>
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800993e:	4e49      	ldr	r6, [pc, #292]	; (8009a64 <HAL_FLASH_Program+0x148>)
  uint32_t tickstart = HAL_GetTick();
 8009940:	4605      	mov	r5, r0
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8009942:	f24c 384f 	movw	r8, #49999	; 0xc34f
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009946:	e004      	b.n	8009952 <HAL_FLASH_Program+0x36>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8009948:	f7ff fefa 	bl	8009740 <HAL_GetTick>
 800994c:	1b40      	subs	r0, r0, r5
 800994e:	4540      	cmp	r0, r8
 8009950:	d844      	bhi.n	80099dc <HAL_FLASH_Program+0xc0>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009952:	6933      	ldr	r3, [r6, #16]
 8009954:	03d9      	lsls	r1, r3, #15
 8009956:	d4f7      	bmi.n	8009948 <HAL_FLASH_Program+0x2c>
        return HAL_TIMEOUT;
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009958:	6935      	ldr	r5, [r6, #16]
 800995a:	4b43      	ldr	r3, [pc, #268]	; (8009a68 <HAL_FLASH_Program+0x14c>)

  if(error != 0u)
 800995c:	401d      	ands	r5, r3
 800995e:	d156      	bne.n	8009a0e <HAL_FLASH_Program+0xf2>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009960:	6933      	ldr	r3, [r6, #16]
 8009962:	07da      	lsls	r2, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009964:	bf44      	itt	mi
 8009966:	2301      	movmi	r3, #1
 8009968:	6133      	strmi	r3, [r6, #16]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800996a:	4a3e      	ldr	r2, [pc, #248]	; (8009a64 <HAL_FLASH_Program+0x148>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800996c:	2300      	movs	r3, #0
 800996e:	f8c9 3004 	str.w	r3, [r9, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009972:	6813      	ldr	r3, [r2, #0]
 8009974:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009978:	bf1f      	itttt	ne
 800997a:	6813      	ldrne	r3, [r2, #0]
 800997c:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8009980:	6013      	strne	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009982:	2302      	movne	r3, #2
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009984:	f889 301c 	strb.w	r3, [r9, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009988:	f1ba 0f00 	cmp.w	sl, #0
 800998c:	d031      	beq.n	80099f2 <HAL_FLASH_Program+0xd6>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800998e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009992:	2b01      	cmp	r3, #1
 8009994:	d943      	bls.n	8009a1e <HAL_FLASH_Program+0x102>
  uint32_t tickstart = HAL_GetTick();
 8009996:	f7ff fed3 	bl	8009740 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800999a:	4e32      	ldr	r6, [pc, #200]	; (8009a64 <HAL_FLASH_Program+0x148>)
  uint32_t tickstart = HAL_GetTick();
 800999c:	4604      	mov	r4, r0
      if((HAL_GetTick() - tickstart) >= Timeout)
 800999e:	f24c 374f 	movw	r7, #49999	; 0xc34f
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80099a2:	e004      	b.n	80099ae <HAL_FLASH_Program+0x92>
      if((HAL_GetTick() - tickstart) >= Timeout)
 80099a4:	f7ff fecc 	bl	8009740 <HAL_GetTick>
 80099a8:	1b00      	subs	r0, r0, r4
 80099aa:	42b8      	cmp	r0, r7
 80099ac:	d82d      	bhi.n	8009a0a <HAL_FLASH_Program+0xee>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80099ae:	6933      	ldr	r3, [r6, #16]
 80099b0:	03db      	lsls	r3, r3, #15
 80099b2:	d4f7      	bmi.n	80099a4 <HAL_FLASH_Program+0x88>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80099b4:	6933      	ldr	r3, [r6, #16]
 80099b6:	4a2c      	ldr	r2, [pc, #176]	; (8009a68 <HAL_FLASH_Program+0x14c>)
  if(error != 0u)
 80099b8:	4013      	ands	r3, r2
 80099ba:	d14b      	bne.n	8009a54 <HAL_FLASH_Program+0x138>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80099bc:	6934      	ldr	r4, [r6, #16]
 80099be:	f014 0401 	ands.w	r4, r4, #1
 80099c2:	d002      	beq.n	80099ca <HAL_FLASH_Program+0xae>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80099c4:	2201      	movs	r2, #1
 80099c6:	6132      	str	r2, [r6, #16]
 80099c8:	461c      	mov	r4, r3
    if (prog_bit != 0U)
 80099ca:	b125      	cbz	r5, 80099d6 <HAL_FLASH_Program+0xba>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80099cc:	4a25      	ldr	r2, [pc, #148]	; (8009a64 <HAL_FLASH_Program+0x148>)
 80099ce:	6953      	ldr	r3, [r2, #20]
 80099d0:	ea23 0305 	bic.w	r3, r3, r5
 80099d4:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 80099d6:	f000 f9a1 	bl	8009d1c <FLASH_FlushCaches>
 80099da:	e000      	b.n	80099de <HAL_FLASH_Program+0xc2>
 80099dc:	2403      	movs	r4, #3
  __HAL_UNLOCK(&pFlash);
 80099de:	2300      	movs	r3, #0
 80099e0:	f889 3000 	strb.w	r3, [r9]
}
 80099e4:	4620      	mov	r0, r4
 80099e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80099ea:	2402      	movs	r4, #2
}
 80099ec:	4620      	mov	r0, r4
 80099ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80099f2:	4a1c      	ldr	r2, [pc, #112]	; (8009a64 <HAL_FLASH_Program+0x148>)
 80099f4:	6953      	ldr	r3, [r2, #20]
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80099fc:	603c      	str	r4, [r7, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80099fe:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8009a02:	2501      	movs	r5, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8009a04:	f8c7 b004 	str.w	fp, [r7, #4]
      prog_bit = FLASH_CR_PG;
 8009a08:	e7c5      	b.n	8009996 <HAL_FLASH_Program+0x7a>
        return HAL_TIMEOUT;
 8009a0a:	2403      	movs	r4, #3
 8009a0c:	e7dd      	b.n	80099ca <HAL_FLASH_Program+0xae>
    pFlash.ErrorCode |= error;
 8009a0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009a12:	432b      	orrs	r3, r5
 8009a14:	f8c9 3004 	str.w	r3, [r9, #4]
    return HAL_ERROR;
 8009a18:	2401      	movs	r4, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8009a1a:	6135      	str	r5, [r6, #16]
  if(status == HAL_OK)
 8009a1c:	e7df      	b.n	80099de <HAL_FLASH_Program+0xc2>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8009a1e:	4a11      	ldr	r2, [pc, #68]	; (8009a64 <HAL_FLASH_Program+0x148>)
 8009a20:	6953      	ldr	r3, [r2, #20]
 8009a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009a2c:	b672      	cpsid	i
 8009a2e:	1b3f      	subs	r7, r7, r4
 8009a30:	f504 7280 	add.w	r2, r4, #256	; 0x100
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	51e3      	str	r3, [r4, r7]
    dest_addr++;
    src_addr++;
 8009a38:	3404      	adds	r4, #4
    row_index--;
  } while (row_index != 0U);
 8009a3a:	4294      	cmp	r4, r2
 8009a3c:	d1fa      	bne.n	8009a34 <HAL_FLASH_Program+0x118>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a3e:	f381 8810 	msr	PRIMASK, r1
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009a42:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a46:	faba fa8a 	clz	sl, sl
 8009a4a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8009a4e:	ea4f 458a 	mov.w	r5, sl, lsl #18
 8009a52:	e7a0      	b.n	8009996 <HAL_FLASH_Program+0x7a>
    pFlash.ErrorCode |= error;
 8009a54:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	f8c9 2004 	str.w	r2, [r9, #4]
    return HAL_ERROR;
 8009a5e:	2401      	movs	r4, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8009a60:	6133      	str	r3, [r6, #16]
    return HAL_ERROR;
 8009a62:	e7b2      	b.n	80099ca <HAL_FLASH_Program+0xae>
 8009a64:	40022000 	.word	0x40022000
 8009a68:	0002c3fa 	.word	0x0002c3fa
 8009a6c:	200000f0 	.word	0x200000f0

08009a70 <FLASH_WaitForLastOperation>:
{
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009a74:	f7ff fe64 	bl	8009740 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009a78:	4e12      	ldr	r6, [pc, #72]	; (8009ac4 <FLASH_WaitForLastOperation+0x54>)
  uint32_t tickstart = HAL_GetTick();
 8009a7a:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009a7c:	1c60      	adds	r0, r4, #1
 8009a7e:	d110      	bne.n	8009aa2 <FLASH_WaitForLastOperation+0x32>
 8009a80:	4a10      	ldr	r2, [pc, #64]	; (8009ac4 <FLASH_WaitForLastOperation+0x54>)
 8009a82:	6913      	ldr	r3, [r2, #16]
 8009a84:	03d9      	lsls	r1, r3, #15
 8009a86:	d4fc      	bmi.n	8009a82 <FLASH_WaitForLastOperation+0x12>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009a88:	4a0e      	ldr	r2, [pc, #56]	; (8009ac4 <FLASH_WaitForLastOperation+0x54>)
 8009a8a:	490f      	ldr	r1, [pc, #60]	; (8009ac8 <FLASH_WaitForLastOperation+0x58>)
 8009a8c:	6913      	ldr	r3, [r2, #16]
  if(error != 0u)
 8009a8e:	400b      	ands	r3, r1
 8009a90:	d111      	bne.n	8009ab6 <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009a92:	6910      	ldr	r0, [r2, #16]
 8009a94:	f010 0001 	ands.w	r0, r0, #1
 8009a98:	d002      	beq.n	8009aa0 <FLASH_WaitForLastOperation+0x30>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	6111      	str	r1, [r2, #16]
 8009a9e:	4618      	mov	r0, r3
}
 8009aa0:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009aa2:	6933      	ldr	r3, [r6, #16]
 8009aa4:	03db      	lsls	r3, r3, #15
 8009aa6:	d5ef      	bpl.n	8009a88 <FLASH_WaitForLastOperation+0x18>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8009aa8:	f7ff fe4a 	bl	8009740 <HAL_GetTick>
 8009aac:	1b40      	subs	r0, r0, r5
 8009aae:	42a0      	cmp	r0, r4
 8009ab0:	d3e4      	bcc.n	8009a7c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8009ab2:	2003      	movs	r0, #3
}
 8009ab4:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8009ab6:	4c05      	ldr	r4, [pc, #20]	; (8009acc <FLASH_WaitForLastOperation+0x5c>)
 8009ab8:	6861      	ldr	r1, [r4, #4]
 8009aba:	4319      	orrs	r1, r3
 8009abc:	6061      	str	r1, [r4, #4]
    return HAL_ERROR;
 8009abe:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8009ac0:	6113      	str	r3, [r2, #16]
}
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	40022000 	.word	0x40022000
 8009ac8:	0002c3fa 	.word	0x0002c3fa
 8009acc:	200000f0 	.word	0x200000f0

08009ad0 <Flash_Write_Data>:

  return page;
}

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint64_t *Data, uint16_t numberofdoublewords, uint8_t flashTypeProgram)
{
 8009ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009ad4:	4d2d      	ldr	r5, [pc, #180]	; (8009b8c <Flash_Write_Data+0xbc>)
{
 8009ad6:	461f      	mov	r7, r3
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009ad8:	696b      	ldr	r3, [r5, #20]
 8009ada:	2b00      	cmp	r3, #0
{
 8009adc:	b083      	sub	sp, #12
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4688      	mov	r8, r1
 8009ae2:	4616      	mov	r6, r2
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009ae4:	da05      	bge.n	8009af2 <Flash_Write_Data+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009ae6:	4b2a      	ldr	r3, [pc, #168]	; (8009b90 <Flash_Write_Data+0xc0>)
 8009ae8:	60ab      	str	r3, [r5, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009aea:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8009aee:	60ab      	str	r3, [r5, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009af0:	696b      	ldr	r3, [r5, #20]
  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8009af2:	4b28      	ldr	r3, [pc, #160]	; (8009b94 <Flash_Write_Data+0xc4>)
	uint32_t StartPage = GetPage(StartPageAddress);
	uint32_t EndPageAdress = StartPageAddress + numberofdoublewords*8;
	uint32_t EndPage = GetPage(EndPageAdress);

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8009af4:	4828      	ldr	r0, [pc, #160]	; (8009b98 <Flash_Write_Data+0xc8>)
  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8009af6:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8009afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009afe:	b291      	uxth	r1, r2
 8009b00:	4299      	cmp	r1, r3
 8009b02:	bf17      	itett	ne
 8009b04:	4b25      	ldrne	r3, [pc, #148]	; (8009b9c <Flash_Write_Data+0xcc>)
 8009b06:	4b26      	ldreq	r3, [pc, #152]	; (8009ba0 <Flash_Write_Data+0xd0>)
 8009b08:	ea03 2382 	andne.w	r3, r3, r2, lsl #10
 8009b0c:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 8009b10:	429c      	cmp	r4, r3
	uint32_t EndPageAdress = StartPageAddress + numberofdoublewords*8;
 8009b12:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8009b16:	bf2c      	ite	cs
 8009b18:	1ae2      	subcs	r2, r4, r3
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8009b1a:	f104 4278 	addcc.w	r2, r4, #4160749568	; 0xf8000000
  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8009b1e:	4299      	cmp	r1, r3
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8009b20:	bf34      	ite	cc
 8009b22:	f101 4378 	addcc.w	r3, r1, #4160749568	; 0xf8000000
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8009b26:	1acb      	subcs	r3, r1, r3
 8009b28:	0ad2      	lsrs	r2, r2, #11
 8009b2a:	0adb      	lsrs	r3, r3, #11
	EraseInitStruct.Page 		= StartPage;
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	0adb      	lsrs	r3, r3, #11
 8009b30:	3301      	adds	r3, #1
 8009b32:	e9c0 2302 	strd	r2, r3, [r0, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8009b36:	a901      	add	r1, sp, #4
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	6003      	str	r3, [r0, #0]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8009b3c:	f000 f840 	bl	8009bc0 <HAL_FLASHEx_Erase>
 8009b40:	b9b0      	cbnz	r0, 8009b70 <Flash_Write_Data+0xa0>
		return HAL_FLASH_GetError ();
	}

	/* Program the user Flash area word by word*/

	while (sofar<numberofdoublewords)
 8009b42:	b1d6      	cbz	r6, 8009b7a <Flash_Write_Data+0xaa>
			addressGap = pow(2, (uint32_t)0x03U); // for double word
		else
			addressGap = pow(2, (uint32_t)0x02U); // for word
		if (HAL_FLASH_Program(flashTypeProgram, StartPageAddress, Data[sofar]) == HAL_OK)
		{
			StartPageAddress += addressGap;  // use StartPageAddress += 2 for half word and 8 for double word
 8009b44:	2f02      	cmp	r7, #2
 8009b46:	f1a8 0808 	sub.w	r8, r8, #8
	int sofar=0;
 8009b4a:	4605      	mov	r5, r0
			StartPageAddress += addressGap;  // use StartPageAddress += 2 for half word and 8 for double word
 8009b4c:	bf94      	ite	ls
 8009b4e:	f04f 0908 	movls.w	r9, #8
 8009b52:	f04f 0904 	movhi.w	r9, #4
 8009b56:	e001      	b.n	8009b5c <Flash_Write_Data+0x8c>
	while (sofar<numberofdoublewords)
 8009b58:	42ae      	cmp	r6, r5
 8009b5a:	d00e      	beq.n	8009b7a <Flash_Write_Data+0xaa>
		if (HAL_FLASH_Program(flashTypeProgram, StartPageAddress, Data[sofar]) == HAL_OK)
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8009b62:	4638      	mov	r0, r7
 8009b64:	f7ff feda 	bl	800991c <HAL_FLASH_Program>
			sofar++;
 8009b68:	3501      	adds	r5, #1
			StartPageAddress += addressGap;  // use StartPageAddress += 2 for half word and 8 for double word
 8009b6a:	444c      	add	r4, r9
		if (HAL_FLASH_Program(flashTypeProgram, StartPageAddress, Data[sofar]) == HAL_OK)
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d0f3      	beq.n	8009b58 <Flash_Write_Data+0x88>
   return pFlash.ErrorCode;
 8009b70:	4b0c      	ldr	r3, [pc, #48]	; (8009ba4 <Flash_Write_Data+0xd4>)
 8009b72:	6858      	ldr	r0, [r3, #4]
	/* Lock the Flash to disable the flash control register access (recommended
	 * to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();

	return 0;
}
 8009b74:	b003      	add	sp, #12
 8009b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009b7a:	4a04      	ldr	r2, [pc, #16]	; (8009b8c <Flash_Write_Data+0xbc>)
 8009b7c:	6953      	ldr	r3, [r2, #20]
	return 0;
 8009b7e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b84:	6153      	str	r3, [r2, #20]
}
 8009b86:	b003      	add	sp, #12
 8009b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b8c:	40022000 	.word	0x40022000
 8009b90:	45670123 	.word	0x45670123
 8009b94:	1fff7000 	.word	0x1fff7000
 8009b98:	20003d5c 	.word	0x20003d5c
 8009b9c:	03fffc00 	.word	0x03fffc00
 8009ba0:	08020000 	.word	0x08020000
 8009ba4:	200000f0 	.word	0x200000f0

08009ba8 <Flash_Read_Data>:
 *  RxBuf: the address of the 32 bit array, where you want to store the data
 *  numberofwords: the number of words that you want to read from the memory
 *
 */
void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8009ba8:	460b      	mov	r3, r1
 8009baa:	3201      	adds	r2, #1
 8009bac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009bb0:	1ac0      	subs	r0, r0, r3
	while (1)
	{
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8009bb2:	581a      	ldr	r2, [r3, r0]
 8009bb4:	f843 2b04 	str.w	r2, [r3], #4
		StartPageAddress += 4;
		RxBuf++;
		if (!(numberofwords--)) break;
 8009bb8:	428b      	cmp	r3, r1
 8009bba:	d1fa      	bne.n	8009bb2 <Flash_Read_Data+0xa>
	}
}
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop

08009bc0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009bc4:	4f53      	ldr	r7, [pc, #332]	; (8009d14 <HAL_FLASHEx_Erase+0x154>)
 8009bc6:	783b      	ldrb	r3, [r7, #0]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d07a      	beq.n	8009cc2 <HAL_FLASHEx_Erase+0x102>
 8009bcc:	4681      	mov	r9, r0
 8009bce:	2401      	movs	r4, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009bd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009bd4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8009bd6:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009bd8:	f7ff ff4a 	bl	8009a70 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8009bdc:	4606      	mov	r6, r0
 8009bde:	b120      	cbz	r0, 8009bea <HAL_FLASHEx_Erase+0x2a>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009be0:	2300      	movs	r3, #0
 8009be2:	703b      	strb	r3, [r7, #0]

  return status;
}
 8009be4:	4630      	mov	r0, r6
 8009be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009bea:	4b4b      	ldr	r3, [pc, #300]	; (8009d18 <HAL_FLASHEx_Erase+0x158>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009bec:	6078      	str	r0, [r7, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	f412 7f00 	tst.w	r2, #512	; 0x200
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009bf4:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009bf6:	d168      	bne.n	8009cca <HAL_FLASHEx_Erase+0x10a>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009bf8:	0552      	lsls	r2, r2, #21
 8009bfa:	f140 8089 	bpl.w	8009d10 <HAL_FLASHEx_Erase+0x150>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c04:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009c06:	2302      	movs	r3, #2
 8009c08:	773b      	strb	r3, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009c0a:	f8d9 3000 	ldr.w	r3, [r9]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d064      	beq.n	8009cdc <HAL_FLASHEx_Erase+0x11c>
      *PageError = 0xFFFFFFFFU;
 8009c12:	f04f 33ff 	mov.w	r3, #4294967295
 8009c16:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009c1a:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 8009c1e:	442b      	add	r3, r5
 8009c20:	429d      	cmp	r5, r3
 8009c22:	d224      	bcs.n	8009c6e <HAL_FLASHEx_Erase+0xae>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8009c24:	4c3c      	ldr	r4, [pc, #240]	; (8009d18 <HAL_FLASHEx_Erase+0x158>)
 8009c26:	e005      	b.n	8009c34 <HAL_FLASHEx_Erase+0x74>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009c28:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 8009c2c:	3501      	adds	r5, #1
 8009c2e:	4413      	add	r3, r2
 8009c30:	42ab      	cmp	r3, r5
 8009c32:	d91c      	bls.n	8009c6e <HAL_FLASHEx_Erase+0xae>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8009c34:	6962      	ldr	r2, [r4, #20]
 8009c36:	00eb      	lsls	r3, r5, #3
 8009c38:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8009c3c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8009c40:	4313      	orrs	r3, r2
 8009c42:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009c44:	6963      	ldr	r3, [r4, #20]
 8009c46:	f043 0302 	orr.w	r3, r3, #2
 8009c4a:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009c4c:	6963      	ldr	r3, [r4, #20]
 8009c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c52:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009c54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009c58:	f7ff ff0a 	bl	8009a70 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009c5c:	6963      	ldr	r3, [r4, #20]
 8009c5e:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8009c62:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d0df      	beq.n	8009c28 <HAL_FLASHEx_Erase+0x68>
          *PageError = page_index;
 8009c68:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009c6c:	4606      	mov	r6, r0
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8009c6e:	7f3b      	ldrb	r3, [r7, #28]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009c70:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8009c74:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8009c76:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009c78:	d110      	bne.n	8009c9c <HAL_FLASHEx_Erase+0xdc>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009c7a:	4a27      	ldr	r2, [pc, #156]	; (8009d18 <HAL_FLASHEx_Erase+0x158>)
 8009c7c:	6811      	ldr	r1, [r2, #0]
 8009c7e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8009c82:	6011      	str	r1, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009c84:	6811      	ldr	r1, [r2, #0]
 8009c86:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009c8a:	6011      	str	r1, [r2, #0]
 8009c8c:	6811      	ldr	r1, [r2, #0]
 8009c8e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8009c92:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c94:	6811      	ldr	r1, [r2, #0]
 8009c96:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8009c9a:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8009c9c:	3b02      	subs	r3, #2
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d80c      	bhi.n	8009cbc <HAL_FLASHEx_Erase+0xfc>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009ca2:	4b1d      	ldr	r3, [pc, #116]	; (8009d18 <HAL_FLASHEx_Erase+0x158>)
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009cb2:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cba:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	773b      	strb	r3, [r7, #28]
}
 8009cc0:	e78e      	b.n	8009be0 <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 8009cc2:	2602      	movs	r6, #2
}
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009cca:	0551      	lsls	r1, r2, #21
 8009ccc:	d51e      	bpl.n	8009d0c <HAL_FLASHEx_Erase+0x14c>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd4:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	773b      	strb	r3, [r7, #28]
 8009cda:	e796      	b.n	8009c0a <HAL_FLASHEx_Erase+0x4a>
    if((Banks & FLASH_BANK_1) != 0U)
 8009cdc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009ce0:	07db      	lsls	r3, r3, #31
 8009ce2:	d504      	bpl.n	8009cee <HAL_FLASHEx_Erase+0x12e>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8009ce4:	4a0c      	ldr	r2, [pc, #48]	; (8009d18 <HAL_FLASHEx_Erase+0x158>)
 8009ce6:	6953      	ldr	r3, [r2, #20]
 8009ce8:	f043 0304 	orr.w	r3, r3, #4
 8009cec:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009cee:	4c0a      	ldr	r4, [pc, #40]	; (8009d18 <HAL_FLASHEx_Erase+0x158>)
 8009cf0:	6963      	ldr	r3, [r4, #20]
 8009cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cf6:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009cf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009cfc:	f7ff feb8 	bl	8009a70 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009d00:	6963      	ldr	r3, [r4, #20]
 8009d02:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d06:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009d08:	6163      	str	r3, [r4, #20]
 8009d0a:	e7b0      	b.n	8009c6e <HAL_FLASHEx_Erase+0xae>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009d0c:	773c      	strb	r4, [r7, #28]
 8009d0e:	e77c      	b.n	8009c0a <HAL_FLASHEx_Erase+0x4a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009d10:	7738      	strb	r0, [r7, #28]
 8009d12:	e77a      	b.n	8009c0a <HAL_FLASHEx_Erase+0x4a>
 8009d14:	200000f0 	.word	0x200000f0
 8009d18:	40022000 	.word	0x40022000

08009d1c <FLASH_FlushCaches>:
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8009d1c:	4915      	ldr	r1, [pc, #84]	; (8009d74 <FLASH_FlushCaches+0x58>)
 8009d1e:	7f0b      	ldrb	r3, [r1, #28]
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009d20:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8009d24:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8009d26:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009d28:	d110      	bne.n	8009d4c <FLASH_FlushCaches+0x30>
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009d2a:	4a13      	ldr	r2, [pc, #76]	; (8009d78 <FLASH_FlushCaches+0x5c>)
 8009d2c:	6810      	ldr	r0, [r2, #0]
 8009d2e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8009d32:	6010      	str	r0, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009d34:	6810      	ldr	r0, [r2, #0]
 8009d36:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8009d3a:	6010      	str	r0, [r2, #0]
 8009d3c:	6810      	ldr	r0, [r2, #0]
 8009d3e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8009d42:	6010      	str	r0, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009d44:	6810      	ldr	r0, [r2, #0]
 8009d46:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8009d4a:	6010      	str	r0, [r2, #0]
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8009d4c:	3b02      	subs	r3, #2
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d80c      	bhi.n	8009d6c <FLASH_FlushCaches+0x50>
    __HAL_FLASH_DATA_CACHE_RESET();
 8009d52:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <FLASH_FlushCaches+0x5c>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d62:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d6a:	601a      	str	r2, [r3, #0]
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	770b      	strb	r3, [r1, #28]
}
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	200000f0 	.word	0x200000f0
 8009d78:	40022000 	.word	0x40022000

08009d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d80:	680c      	ldr	r4, [r1, #0]
{
 8009d82:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d84:	2c00      	cmp	r4, #0
 8009d86:	f000 80be 	beq.w	8009f06 <HAL_GPIO_Init+0x18a>
 8009d8a:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009d8e:	4e65      	ldr	r6, [pc, #404]	; (8009f24 <HAL_GPIO_Init+0x1a8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009d90:	9100      	str	r1, [sp, #0]
  uint32_t position = 0x00u;
 8009d92:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009d94:	f04f 0b01 	mov.w	fp, #1
 8009d98:	e062      	b.n	8009e60 <HAL_GPIO_Init+0xe4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d9a:	2a03      	cmp	r2, #3
 8009d9c:	f040 80ad 	bne.w	8009efa <HAL_GPIO_Init+0x17e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009da0:	fa02 f20c 	lsl.w	r2, r2, ip
 8009da4:	ea6f 0e02 	mvn.w	lr, r2
      temp = GPIOx->MODER;
 8009da8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009daa:	ea07 070e 	and.w	r7, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009dae:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009db0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8009db4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009db6:	d04d      	beq.n	8009e54 <HAL_GPIO_Init+0xd8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009db8:	4f5b      	ldr	r7, [pc, #364]	; (8009f28 <HAL_GPIO_Init+0x1ac>)
 8009dba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009dbc:	f042 0201 	orr.w	r2, r2, #1
 8009dc0:	663a      	str	r2, [r7, #96]	; 0x60
 8009dc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009dc4:	f002 0201 	and.w	r2, r2, #1
 8009dc8:	9203      	str	r2, [sp, #12]
 8009dca:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8009dcc:	f023 0203 	bic.w	r2, r3, #3
 8009dd0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009dd4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009dd8:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8009ddc:	f8d2 e008 	ldr.w	lr, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009de0:	00bf      	lsls	r7, r7, #2
 8009de2:	210f      	movs	r1, #15
 8009de4:	fa01 f807 	lsl.w	r8, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009de8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009dec:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009df0:	d010      	beq.n	8009e14 <HAL_GPIO_Init+0x98>
 8009df2:	494e      	ldr	r1, [pc, #312]	; (8009f2c <HAL_GPIO_Init+0x1b0>)
 8009df4:	4288      	cmp	r0, r1
 8009df6:	f000 8089 	beq.w	8009f0c <HAL_GPIO_Init+0x190>
 8009dfa:	494d      	ldr	r1, [pc, #308]	; (8009f30 <HAL_GPIO_Init+0x1b4>)
 8009dfc:	4288      	cmp	r0, r1
 8009dfe:	f000 808a 	beq.w	8009f16 <HAL_GPIO_Init+0x19a>
 8009e02:	494c      	ldr	r1, [pc, #304]	; (8009f34 <HAL_GPIO_Init+0x1b8>)
 8009e04:	4288      	cmp	r0, r1
 8009e06:	bf0c      	ite	eq
 8009e08:	2103      	moveq	r1, #3
 8009e0a:	2107      	movne	r1, #7
 8009e0c:	fa01 f707 	lsl.w	r7, r1, r7
 8009e10:	ea4e 0e07 	orr.w	lr, lr, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009e14:	f8c2 e008 	str.w	lr, [r2, #8]
        temp = EXTI->RTSR1;
 8009e18:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8009e1a:	ea6f 070a 	mvn.w	r7, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009e1e:	02e9      	lsls	r1, r5, #11
        temp &= ~(iocurrent);
 8009e20:	bf54      	ite	pl
 8009e22:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8009e24:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8009e28:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8009e2a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009e2c:	02a9      	lsls	r1, r5, #10
        temp &= ~(iocurrent);
 8009e2e:	bf54      	ite	pl
 8009e30:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8009e32:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8009e36:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009e38:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009e3a:	03a9      	lsls	r1, r5, #14
        temp &= ~(iocurrent);
 8009e3c:	bf54      	ite	pl
 8009e3e:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8009e40:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8009e44:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 8009e46:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009e48:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 8009e4a:	bf54      	ite	pl
 8009e4c:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8009e4e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8009e52:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8009e54:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e56:	fa34 f203 	lsrs.w	r2, r4, r3
 8009e5a:	f10c 0c02 	add.w	ip, ip, #2
 8009e5e:	d052      	beq.n	8009f06 <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009e60:	fa0b f803 	lsl.w	r8, fp, r3
    if (iocurrent != 0x00u)
 8009e64:	ea18 0a04 	ands.w	sl, r8, r4
 8009e68:	d0f4      	beq.n	8009e54 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009e6a:	9900      	ldr	r1, [sp, #0]
 8009e6c:	684d      	ldr	r5, [r1, #4]
 8009e6e:	f005 0203 	and.w	r2, r5, #3
 8009e72:	1e57      	subs	r7, r2, #1
 8009e74:	2f01      	cmp	r7, #1
 8009e76:	d890      	bhi.n	8009d9a <HAL_GPIO_Init+0x1e>
        temp = GPIOx->OSPEEDR;
 8009e78:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009e7c:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009e7e:	2103      	movs	r1, #3
 8009e80:	fa01 fe0c 	lsl.w	lr, r1, ip
 8009e84:	ea29 090e 	bic.w	r9, r9, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009e88:	fa07 f70c 	lsl.w	r7, r7, ip
 8009e8c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8009e90:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009e92:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009e94:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009e98:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8009e9c:	409f      	lsls	r7, r3
 8009e9e:	ea47 0708 	orr.w	r7, r7, r8
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ea2:	ea6f 0e0e 	mvn.w	lr, lr
        GPIOx->OTYPER = temp;
 8009ea6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8009ea8:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009eaa:	9900      	ldr	r1, [sp, #0]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009eac:	ea07 080e 	and.w	r8, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009eb0:	688f      	ldr	r7, [r1, #8]
 8009eb2:	fa07 f70c 	lsl.w	r7, r7, ip
 8009eb6:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009eba:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8009ebc:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ebe:	fa02 f20c 	lsl.w	r2, r2, ip
 8009ec2:	f47f af71 	bne.w	8009da8 <HAL_GPIO_Init+0x2c>
        temp = GPIOx->AFR[position >> 3u];
 8009ec6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8009eca:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009ece:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8009ed2:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8009ed6:	9101      	str	r1, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009ed8:	9900      	ldr	r1, [sp, #0]
 8009eda:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009edc:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009ee0:	210f      	movs	r1, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009ee2:	fa07 f708 	lsl.w	r7, r7, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009ee6:	fa01 f808 	lsl.w	r8, r1, r8
 8009eea:	9901      	ldr	r1, [sp, #4]
 8009eec:	ea21 0808 	bic.w	r8, r1, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009ef0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8009ef4:	f8c9 7020 	str.w	r7, [r9, #32]
 8009ef8:	e756      	b.n	8009da8 <HAL_GPIO_Init+0x2c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009efa:	2103      	movs	r1, #3
 8009efc:	fa01 fe0c 	lsl.w	lr, r1, ip
 8009f00:	ea6f 0e0e 	mvn.w	lr, lr
 8009f04:	e7d0      	b.n	8009ea8 <HAL_GPIO_Init+0x12c>
  }
}
 8009f06:	b005      	add	sp, #20
 8009f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009f0c:	fa0b f707 	lsl.w	r7, fp, r7
 8009f10:	ea4e 0e07 	orr.w	lr, lr, r7
 8009f14:	e77e      	b.n	8009e14 <HAL_GPIO_Init+0x98>
 8009f16:	f04f 0802 	mov.w	r8, #2
 8009f1a:	fa08 f707 	lsl.w	r7, r8, r7
 8009f1e:	ea4e 0e07 	orr.w	lr, lr, r7
 8009f22:	e777      	b.n	8009e14 <HAL_GPIO_Init+0x98>
 8009f24:	40010400 	.word	0x40010400
 8009f28:	40021000 	.word	0x40021000
 8009f2c:	48000400 	.word	0x48000400
 8009f30:	48000800 	.word	0x48000800
 8009f34:	48000c00 	.word	0x48000c00

08009f38 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009f38:	6903      	ldr	r3, [r0, #16]
 8009f3a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009f3c:	bf14      	ite	ne
 8009f3e:	2001      	movne	r0, #1
 8009f40:	2000      	moveq	r0, #0
 8009f42:	4770      	bx	lr

08009f44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009f44:	b10a      	cbz	r2, 8009f4a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009f46:	6181      	str	r1, [r0, #24]
 8009f48:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009f4a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop

08009f50 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009f50:	4a04      	ldr	r2, [pc, #16]	; (8009f64 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8009f52:	6951      	ldr	r1, [r2, #20]
 8009f54:	4201      	tst	r1, r0
 8009f56:	d100      	bne.n	8009f5a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8009f58:	4770      	bx	lr
{
 8009f5a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009f5c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009f5e:	f7fe fe97 	bl	8008c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8009f62:	bd08      	pop	{r3, pc}
 8009f64:	40010400 	.word	0x40010400

08009f68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	460e      	mov	r6, r1
 8009f70:	4617      	mov	r7, r2
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
              hi2c->State = HAL_I2C_STATE_READY;
 8009f72:	f04f 0820 	mov.w	r8, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f76:	f8da 3000 	ldr.w	r3, [sl]
 8009f7a:	699d      	ldr	r5, [r3, #24]
 8009f7c:	f015 0504 	ands.w	r5, r5, #4
 8009f80:	f040 80d1 	bne.w	800a126 <I2C_WaitOnRXNEFlagUntilTimeout+0x1be>
  uint32_t itflag   = hi2c->Instance->ISR;
 8009f84:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009f86:	f012 0210 	ands.w	r2, r2, #16
 8009f8a:	d04f      	beq.n	800a02c <I2C_WaitOnRXNEFlagUntilTimeout+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f8c:	2210      	movs	r2, #16
 8009f8e:	61da      	str	r2, [r3, #28]
  uint32_t tickstart = Tickstart;
 8009f90:	46b9      	mov	r9, r7
 8009f92:	1c74      	adds	r4, r6, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f94:	699a      	ldr	r2, [r3, #24]
 8009f96:	d15c      	bne.n	800a052 <I2C_WaitOnRXNEFlagUntilTimeout+0xea>
 8009f98:	0690      	lsls	r0, r2, #26
 8009f9a:	f100 80b7 	bmi.w	800a10c <I2C_WaitOnRXNEFlagUntilTimeout+0x1a4>
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	f040 80b7 	bne.w	800a112 <I2C_WaitOnRXNEFlagUntilTimeout+0x1aa>
 8009fa4:	699c      	ldr	r4, [r3, #24]
 8009fa6:	06a1      	lsls	r1, r4, #26
 8009fa8:	d5fc      	bpl.n	8009fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009faa:	f8c3 801c 	str.w	r8, [r3, #28]
 8009fae:	f04f 0e06 	mov.w	lr, #6
 8009fb2:	200c      	movs	r0, #12
 8009fb4:	240d      	movs	r4, #13
 8009fb6:	f04f 0c07 	mov.w	ip, #7
 8009fba:	f04f 0905 	mov.w	r9, #5
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009fbe:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8009fc0:	2501      	movs	r5, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009fc2:	6999      	ldr	r1, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009fc4:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009fc8:	d027      	beq.n	800a01a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009fca:	f44f 7280 	mov.w	r2, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009fce:	054e      	lsls	r6, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009fd0:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009fd2:	d435      	bmi.n	800a040 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009fd4:	058d      	lsls	r5, r1, #22
 8009fd6:	d47c      	bmi.n	800a0d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16a>
 8009fd8:	4648      	mov	r0, r9
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009fda:	699a      	ldr	r2, [r3, #24]
 8009fdc:	0795      	lsls	r5, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8009fde:	bf44      	itt	mi
 8009fe0:	2200      	movmi	r2, #0
 8009fe2:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fe4:	699a      	ldr	r2, [r3, #24]
 8009fe6:	07d4      	lsls	r4, r2, #31
 8009fe8:	d403      	bmi.n	8009ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009fea:	699a      	ldr	r2, [r3, #24]
 8009fec:	f042 0201 	orr.w	r2, r2, #1
 8009ff0:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	4c5f      	ldr	r4, [pc, #380]	; (800a174 <I2C_WaitOnRXNEFlagUntilTimeout+0x20c>)
 8009ff6:	4022      	ands	r2, r4
 8009ff8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009ffa:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ffe:	2100      	movs	r1, #0
    hi2c->ErrorCode |= error_code;
 800a000:	4303      	orrs	r3, r0
    hi2c->State = HAL_I2C_STATE_READY;
 800a002:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800a004:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a008:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800a00c:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a010:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
      return HAL_ERROR;
 800a014:	2001      	movs	r0, #1
}
 800a016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a01a:	054c      	lsls	r4, r1, #21
 800a01c:	d411      	bmi.n	800a042 <I2C_WaitOnRXNEFlagUntilTimeout+0xda>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a01e:	0589      	lsls	r1, r1, #22
 800a020:	d559      	bpl.n	800a0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16e>
 800a022:	4670      	mov	r0, lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a024:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a028:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 800a02a:	e7d6      	b.n	8009fda <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
 800a02c:	f04f 0e02 	mov.w	lr, #2
 800a030:	2008      	movs	r0, #8
 800a032:	2409      	movs	r4, #9
 800a034:	f04f 0c03 	mov.w	ip, #3
 800a038:	f04f 0901 	mov.w	r9, #1
  HAL_StatusTypeDef status = HAL_OK;
 800a03c:	4615      	mov	r5, r2
 800a03e:	e7c0      	b.n	8009fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a040:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a042:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a046:	058c      	lsls	r4, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a048:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a04a:	d5c6      	bpl.n	8009fda <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
    error_code |= HAL_I2C_ERROR_ARLO;
 800a04c:	f040 0002 	orr.w	r0, r0, #2
 800a050:	e7e8      	b.n	800a024 <I2C_WaitOnRXNEFlagUntilTimeout+0xbc>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a052:	0692      	lsls	r2, r2, #26
 800a054:	d45a      	bmi.n	800a10c <I2C_WaitOnRXNEFlagUntilTimeout+0x1a4>
 800a056:	2d00      	cmp	r5, #0
 800a058:	d15b      	bne.n	800a112 <I2C_WaitOnRXNEFlagUntilTimeout+0x1aa>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a05a:	f7ff fb71 	bl	8009740 <HAL_GetTick>
 800a05e:	eba0 0009 	sub.w	r0, r0, r9
 800a062:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a064:	f8da 3000 	ldr.w	r3, [sl]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a068:	d301      	bcc.n	800a06e <I2C_WaitOnRXNEFlagUntilTimeout+0x106>
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	d191      	bne.n	8009f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a06e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800a070:	f89a 2042 	ldrb.w	r2, [sl, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a074:	6999      	ldr	r1, [r3, #24]
 800a076:	040c      	lsls	r4, r1, #16
          tmp2 = hi2c->Mode;
 800a078:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a07a:	d50f      	bpl.n	800a09c <I2C_WaitOnRXNEFlagUntilTimeout+0x134>
 800a07c:	0441      	lsls	r1, r0, #17
 800a07e:	d40d      	bmi.n	800a09c <I2C_WaitOnRXNEFlagUntilTimeout+0x134>
              (tmp1 != I2C_CR2_STOP) && \
 800a080:	2a20      	cmp	r2, #32
 800a082:	d00b      	beq.n	800a09c <I2C_WaitOnRXNEFlagUntilTimeout+0x134>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a08a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800a08c:	f7ff fb58 	bl	8009740 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a090:	f8da 3000 	ldr.w	r3, [sl]
            tickstart = HAL_GetTick();
 800a094:	4681      	mov	r9, r0
 800a096:	e001      	b.n	800a09c <I2C_WaitOnRXNEFlagUntilTimeout+0x134>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a098:	f8da 3000 	ldr.w	r3, [sl]
 800a09c:	699c      	ldr	r4, [r3, #24]
 800a09e:	f014 0420 	ands.w	r4, r4, #32
 800a0a2:	f47f af76 	bne.w	8009f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a0a6:	f7ff fb4b 	bl	8009740 <HAL_GetTick>
 800a0aa:	eba0 0009 	sub.w	r0, r0, r9
 800a0ae:	2819      	cmp	r0, #25
 800a0b0:	d9f2      	bls.n	800a098 <I2C_WaitOnRXNEFlagUntilTimeout+0x130>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0b2:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 800a0b6:	f88a 4040 	strb.w	r4, [sl, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0ba:	f043 0320 	orr.w	r3, r3, #32
 800a0be:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
              status = HAL_ERROR;
 800a0c2:	2501      	movs	r5, #1
              hi2c->State = HAL_I2C_STATE_READY;
 800a0c4:	f88a 8041 	strb.w	r8, [sl, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0c8:	f8da 3000 	ldr.w	r3, [sl]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0cc:	f88a 4042 	strb.w	r4, [sl, #66]	; 0x42
              status = HAL_ERROR;
 800a0d0:	e7e4      	b.n	800a09c <I2C_WaitOnRXNEFlagUntilTimeout+0x134>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a0d2:	4660      	mov	r0, ip
 800a0d4:	e7a6      	b.n	800a024 <I2C_WaitOnRXNEFlagUntilTimeout+0xbc>
  if (status != HAL_OK)
 800a0d6:	2d00      	cmp	r5, #0
 800a0d8:	d14a      	bne.n	800a170 <I2C_WaitOnRXNEFlagUntilTimeout+0x208>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0da:	699a      	ldr	r2, [r3, #24]
 800a0dc:	0691      	lsls	r1, r2, #26
 800a0de:	d425      	bmi.n	800a12c <I2C_WaitOnRXNEFlagUntilTimeout+0x1c4>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0e0:	f7ff fb2e 	bl	8009740 <HAL_GetTick>
 800a0e4:	1bc0      	subs	r0, r0, r7
 800a0e6:	42b0      	cmp	r0, r6
 800a0e8:	d802      	bhi.n	800a0f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x188>
 800a0ea:	2e00      	cmp	r6, #0
 800a0ec:	f47f af43 	bne.w	8009f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0f0:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a0f4:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0f6:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800a0f8:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0fa:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800a0fe:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800a102:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
      return HAL_ERROR;
 800a106:	2001      	movs	r0, #1
}
 800a108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
 800a10c:	2d00      	cmp	r5, #0
 800a10e:	f43f af4c 	beq.w	8009faa <I2C_WaitOnRXNEFlagUntilTimeout+0x42>
 800a112:	f04f 0e06 	mov.w	lr, #6
 800a116:	200c      	movs	r0, #12
 800a118:	240d      	movs	r4, #13
 800a11a:	f04f 0c07 	mov.w	ip, #7
 800a11e:	f04f 0905 	mov.w	r9, #5
    error_code |= HAL_I2C_ERROR_AF;
 800a122:	2204      	movs	r2, #4
 800a124:	e74d      	b.n	8009fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
        return HAL_OK;
 800a126:	2000      	movs	r0, #0
}
 800a128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a12c:	699a      	ldr	r2, [r3, #24]
 800a12e:	0752      	lsls	r2, r2, #29
 800a130:	d503      	bpl.n	800a13a <I2C_WaitOnRXNEFlagUntilTimeout+0x1d2>
 800a132:	f8ba 2028 	ldrh.w	r2, [sl, #40]	; 0x28
 800a136:	2a00      	cmp	r2, #0
 800a138:	d1f5      	bne.n	800a126 <I2C_WaitOnRXNEFlagUntilTimeout+0x1be>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a13a:	699a      	ldr	r2, [r3, #24]
 800a13c:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a140:	bf1c      	itt	ne
 800a142:	2110      	movne	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a144:	2204      	movne	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a146:	f04f 0420 	mov.w	r4, #32
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a14a:	bf18      	it	ne
 800a14c:	61d9      	strne	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a14e:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a152:	61dc      	str	r4, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	4907      	ldr	r1, [pc, #28]	; (800a174 <I2C_WaitOnRXNEFlagUntilTimeout+0x20c>)
 800a158:	400a      	ands	r2, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a15a:	2100      	movs	r1, #0
        I2C_RESET_CR2(hi2c);
 800a15c:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800a15e:	f88a 4041 	strb.w	r4, [sl, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800a162:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a166:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
        return HAL_ERROR;
 800a16a:	2001      	movs	r0, #1
}
 800a16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a170:	4610      	mov	r0, r2
 800a172:	e732      	b.n	8009fda <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
 800a174:	fe00e800 	.word	0xfe00e800

0800a178 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800a178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a17c:	4682      	mov	sl, r0
 800a17e:	460e      	mov	r6, r1
 800a180:	4617      	mov	r7, r2
              hi2c->State = HAL_I2C_STATE_READY;
 800a182:	f04f 0820 	mov.w	r8, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a186:	f8da 3000 	ldr.w	r3, [sl]
 800a18a:	699d      	ldr	r5, [r3, #24]
 800a18c:	f015 0502 	ands.w	r5, r5, #2
 800a190:	f040 80d2 	bne.w	800a338 <I2C_WaitOnTXISFlagUntilTimeout+0x1c0>
  uint32_t itflag   = hi2c->Instance->ISR;
 800a194:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a196:	f012 0210 	ands.w	r2, r2, #16
 800a19a:	d04f      	beq.n	800a23c <I2C_WaitOnTXISFlagUntilTimeout+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a19c:	2210      	movs	r2, #16
 800a19e:	61da      	str	r2, [r3, #28]
  uint32_t tickstart = Tickstart;
 800a1a0:	46b9      	mov	r9, r7
 800a1a2:	1c74      	adds	r4, r6, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a1a4:	699a      	ldr	r2, [r3, #24]
 800a1a6:	d15c      	bne.n	800a262 <I2C_WaitOnTXISFlagUntilTimeout+0xea>
 800a1a8:	0690      	lsls	r0, r2, #26
 800a1aa:	f100 80b8 	bmi.w	800a31e <I2C_WaitOnTXISFlagUntilTimeout+0x1a6>
 800a1ae:	2d00      	cmp	r5, #0
 800a1b0:	f040 80b8 	bne.w	800a324 <I2C_WaitOnTXISFlagUntilTimeout+0x1ac>
 800a1b4:	699c      	ldr	r4, [r3, #24]
 800a1b6:	06a1      	lsls	r1, r4, #26
 800a1b8:	d5fc      	bpl.n	800a1b4 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1ba:	f8c3 801c 	str.w	r8, [r3, #28]
 800a1be:	f04f 0e06 	mov.w	lr, #6
 800a1c2:	200c      	movs	r0, #12
 800a1c4:	240d      	movs	r4, #13
 800a1c6:	f04f 0c07 	mov.w	ip, #7
 800a1ca:	f04f 0905 	mov.w	r9, #5
    error_code |= HAL_I2C_ERROR_AF;
 800a1ce:	2204      	movs	r2, #4
    status = HAL_ERROR;
 800a1d0:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800a1d2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a1d4:	f411 7f80 	tst.w	r1, #256	; 0x100
 800a1d8:	d027      	beq.n	800a22a <I2C_WaitOnTXISFlagUntilTimeout+0xb2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a1da:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a1de:	054e      	lsls	r6, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a1e0:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a1e2:	d435      	bmi.n	800a250 <I2C_WaitOnTXISFlagUntilTimeout+0xd8>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a1e4:	058d      	lsls	r5, r1, #22
 800a1e6:	d47c      	bmi.n	800a2e2 <I2C_WaitOnTXISFlagUntilTimeout+0x16a>
 800a1e8:	4648      	mov	r0, r9
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a1ea:	699a      	ldr	r2, [r3, #24]
 800a1ec:	0794      	lsls	r4, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800a1ee:	bf44      	itt	mi
 800a1f0:	2200      	movmi	r2, #0
 800a1f2:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1f4:	699a      	ldr	r2, [r3, #24]
 800a1f6:	07d1      	lsls	r1, r2, #31
 800a1f8:	d403      	bmi.n	800a202 <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a1fa:	699a      	ldr	r2, [r3, #24]
 800a1fc:	f042 0201 	orr.w	r2, r2, #1
 800a200:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	4c4f      	ldr	r4, [pc, #316]	; (800a344 <I2C_WaitOnTXISFlagUntilTimeout+0x1cc>)
 800a206:	4022      	ands	r2, r4
 800a208:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800a20a:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a20e:	2100      	movs	r1, #0
    hi2c->ErrorCode |= error_code;
 800a210:	4303      	orrs	r3, r0
    hi2c->State = HAL_I2C_STATE_READY;
 800a212:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800a214:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800a218:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800a21c:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
      return HAL_ERROR;
 800a220:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a222:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
}
 800a226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a22a:	054c      	lsls	r4, r1, #21
 800a22c:	d411      	bmi.n	800a252 <I2C_WaitOnTXISFlagUntilTimeout+0xda>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a22e:	0589      	lsls	r1, r1, #22
 800a230:	d559      	bpl.n	800a2e6 <I2C_WaitOnTXISFlagUntilTimeout+0x16e>
 800a232:	4670      	mov	r0, lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a234:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a238:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 800a23a:	e7d6      	b.n	800a1ea <I2C_WaitOnTXISFlagUntilTimeout+0x72>
 800a23c:	f04f 0e02 	mov.w	lr, #2
 800a240:	2008      	movs	r0, #8
 800a242:	2409      	movs	r4, #9
 800a244:	f04f 0c03 	mov.w	ip, #3
 800a248:	f04f 0901 	mov.w	r9, #1
  HAL_StatusTypeDef status = HAL_OK;
 800a24c:	4615      	mov	r5, r2
 800a24e:	e7c0      	b.n	800a1d2 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a250:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a252:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a256:	058c      	lsls	r4, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a258:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a25a:	d5c6      	bpl.n	800a1ea <I2C_WaitOnTXISFlagUntilTimeout+0x72>
    error_code |= HAL_I2C_ERROR_ARLO;
 800a25c:	f040 0002 	orr.w	r0, r0, #2
 800a260:	e7e8      	b.n	800a234 <I2C_WaitOnTXISFlagUntilTimeout+0xbc>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a262:	0692      	lsls	r2, r2, #26
 800a264:	d45b      	bmi.n	800a31e <I2C_WaitOnTXISFlagUntilTimeout+0x1a6>
 800a266:	2d00      	cmp	r5, #0
 800a268:	d15c      	bne.n	800a324 <I2C_WaitOnTXISFlagUntilTimeout+0x1ac>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a26a:	f7ff fa69 	bl	8009740 <HAL_GetTick>
 800a26e:	eba0 0009 	sub.w	r0, r0, r9
 800a272:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a274:	f8da 3000 	ldr.w	r3, [sl]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a278:	d301      	bcc.n	800a27e <I2C_WaitOnTXISFlagUntilTimeout+0x106>
 800a27a:	2e00      	cmp	r6, #0
 800a27c:	d191      	bne.n	800a1a2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a27e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800a280:	f89a 2042 	ldrb.w	r2, [sl, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a284:	6999      	ldr	r1, [r3, #24]
 800a286:	040c      	lsls	r4, r1, #16
          tmp2 = hi2c->Mode;
 800a288:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a28a:	d50f      	bpl.n	800a2ac <I2C_WaitOnTXISFlagUntilTimeout+0x134>
 800a28c:	0441      	lsls	r1, r0, #17
 800a28e:	d40d      	bmi.n	800a2ac <I2C_WaitOnTXISFlagUntilTimeout+0x134>
              (tmp1 != I2C_CR2_STOP) && \
 800a290:	2a20      	cmp	r2, #32
 800a292:	d00b      	beq.n	800a2ac <I2C_WaitOnTXISFlagUntilTimeout+0x134>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a29a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800a29c:	f7ff fa50 	bl	8009740 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2a0:	f8da 3000 	ldr.w	r3, [sl]
            tickstart = HAL_GetTick();
 800a2a4:	4681      	mov	r9, r0
 800a2a6:	e001      	b.n	800a2ac <I2C_WaitOnTXISFlagUntilTimeout+0x134>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2a8:	f8da 3000 	ldr.w	r3, [sl]
 800a2ac:	699c      	ldr	r4, [r3, #24]
 800a2ae:	f014 0420 	ands.w	r4, r4, #32
 800a2b2:	f47f af76 	bne.w	800a1a2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a2b6:	f7ff fa43 	bl	8009740 <HAL_GetTick>
 800a2ba:	eba0 0009 	sub.w	r0, r0, r9
 800a2be:	2819      	cmp	r0, #25
 800a2c0:	d9f2      	bls.n	800a2a8 <I2C_WaitOnTXISFlagUntilTimeout+0x130>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2c2:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2c6:	f8da 3000 	ldr.w	r3, [sl]
              __HAL_UNLOCK(hi2c);
 800a2ca:	f88a 4040 	strb.w	r4, [sl, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2ce:	f042 0220 	orr.w	r2, r2, #32
 800a2d2:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
              status = HAL_ERROR;
 800a2d6:	2501      	movs	r5, #1
              hi2c->State = HAL_I2C_STATE_READY;
 800a2d8:	f88a 8041 	strb.w	r8, [sl, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2dc:	f88a 4042 	strb.w	r4, [sl, #66]	; 0x42
              status = HAL_ERROR;
 800a2e0:	e7e4      	b.n	800a2ac <I2C_WaitOnTXISFlagUntilTimeout+0x134>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a2e2:	4660      	mov	r0, ip
 800a2e4:	e7a6      	b.n	800a234 <I2C_WaitOnTXISFlagUntilTimeout+0xbc>
  if (status != HAL_OK)
 800a2e6:	bb55      	cbnz	r5, 800a33e <I2C_WaitOnTXISFlagUntilTimeout+0x1c6>
    if (Timeout != HAL_MAX_DELAY)
 800a2e8:	1c72      	adds	r2, r6, #1
 800a2ea:	f43f af4e 	beq.w	800a18a <I2C_WaitOnTXISFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2ee:	f7ff fa27 	bl	8009740 <HAL_GetTick>
 800a2f2:	1bc0      	subs	r0, r0, r7
 800a2f4:	42b0      	cmp	r0, r6
 800a2f6:	d802      	bhi.n	800a2fe <I2C_WaitOnTXISFlagUntilTimeout+0x186>
 800a2f8:	2e00      	cmp	r6, #0
 800a2fa:	f47f af44 	bne.w	800a186 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2fe:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a302:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a304:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800a308:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a30a:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a30e:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800a312:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800a316:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a318:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
        return HAL_ERROR;
 800a31c:	e783      	b.n	800a226 <I2C_WaitOnTXISFlagUntilTimeout+0xae>
    if (status == HAL_OK)
 800a31e:	2d00      	cmp	r5, #0
 800a320:	f43f af4b 	beq.w	800a1ba <I2C_WaitOnTXISFlagUntilTimeout+0x42>
 800a324:	f04f 0e06 	mov.w	lr, #6
 800a328:	200c      	movs	r0, #12
 800a32a:	240d      	movs	r4, #13
 800a32c:	f04f 0c07 	mov.w	ip, #7
 800a330:	f04f 0905 	mov.w	r9, #5
    error_code |= HAL_I2C_ERROR_AF;
 800a334:	2204      	movs	r2, #4
 800a336:	e74c      	b.n	800a1d2 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 800a338:	2000      	movs	r0, #0
}
 800a33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33e:	4610      	mov	r0, r2
 800a340:	e753      	b.n	800a1ea <I2C_WaitOnTXISFlagUntilTimeout+0x72>
 800a342:	bf00      	nop
 800a344:	fe00e800 	.word	0xfe00e800

0800a348 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800a348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a34c:	4682      	mov	sl, r0
 800a34e:	460e      	mov	r6, r1
 800a350:	4617      	mov	r7, r2
              hi2c->State = HAL_I2C_STATE_READY;
 800a352:	f04f 0820 	mov.w	r8, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a356:	f8da 3000 	ldr.w	r3, [sl]
 800a35a:	699d      	ldr	r5, [r3, #24]
 800a35c:	f015 0520 	ands.w	r5, r5, #32
 800a360:	f040 80d0 	bne.w	800a504 <I2C_WaitOnSTOPFlagUntilTimeout+0x1bc>
  uint32_t itflag   = hi2c->Instance->ISR;
 800a364:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a366:	f012 0210 	ands.w	r2, r2, #16
 800a36a:	d04f      	beq.n	800a40c <I2C_WaitOnSTOPFlagUntilTimeout+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a36c:	2210      	movs	r2, #16
 800a36e:	61da      	str	r2, [r3, #28]
  uint32_t tickstart = Tickstart;
 800a370:	46b9      	mov	r9, r7
 800a372:	1c74      	adds	r4, r6, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a374:	699a      	ldr	r2, [r3, #24]
 800a376:	d15c      	bne.n	800a432 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 800a378:	0690      	lsls	r0, r2, #26
 800a37a:	f100 80b6 	bmi.w	800a4ea <I2C_WaitOnSTOPFlagUntilTimeout+0x1a2>
 800a37e:	2d00      	cmp	r5, #0
 800a380:	f040 80b6 	bne.w	800a4f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a8>
 800a384:	699c      	ldr	r4, [r3, #24]
 800a386:	06a1      	lsls	r1, r4, #26
 800a388:	d5fc      	bpl.n	800a384 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a38a:	f8c3 801c 	str.w	r8, [r3, #28]
 800a38e:	f04f 0e06 	mov.w	lr, #6
 800a392:	200c      	movs	r0, #12
 800a394:	240d      	movs	r4, #13
 800a396:	f04f 0c07 	mov.w	ip, #7
 800a39a:	f04f 0905 	mov.w	r9, #5
    error_code |= HAL_I2C_ERROR_AF;
 800a39e:	2204      	movs	r2, #4
    status = HAL_ERROR;
 800a3a0:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800a3a2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a3a4:	f411 7f80 	tst.w	r1, #256	; 0x100
 800a3a8:	d027      	beq.n	800a3fa <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a3aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a3ae:	054e      	lsls	r6, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a3b0:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a3b2:	d435      	bmi.n	800a420 <I2C_WaitOnSTOPFlagUntilTimeout+0xd8>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a3b4:	058d      	lsls	r5, r1, #22
 800a3b6:	d47c      	bmi.n	800a4b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16a>
 800a3b8:	4648      	mov	r0, r9
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800a3be:	bf44      	itt	mi
 800a3c0:	2200      	movmi	r2, #0
 800a3c2:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3c4:	699a      	ldr	r2, [r3, #24]
 800a3c6:	07d2      	lsls	r2, r2, #31
 800a3c8:	d403      	bmi.n	800a3d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x8a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a3ca:	699a      	ldr	r2, [r3, #24]
 800a3cc:	f042 0201 	orr.w	r2, r2, #1
 800a3d0:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	4c4e      	ldr	r4, [pc, #312]	; (800a510 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c8>)
 800a3d6:	4022      	ands	r2, r4
 800a3d8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800a3da:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3de:	2100      	movs	r1, #0
    hi2c->ErrorCode |= error_code;
 800a3e0:	4303      	orrs	r3, r0
    hi2c->State = HAL_I2C_STATE_READY;
 800a3e2:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800a3e4:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800a3e8:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800a3ec:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3f0:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
      return HAL_ERROR;
 800a3f4:	2001      	movs	r0, #1
}
 800a3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a3fa:	054c      	lsls	r4, r1, #21
 800a3fc:	d411      	bmi.n	800a422 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a3fe:	0588      	lsls	r0, r1, #22
 800a400:	d559      	bpl.n	800a4b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x16e>
 800a402:	4670      	mov	r0, lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a404:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a408:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 800a40a:	e7d6      	b.n	800a3ba <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800a40c:	f04f 0e02 	mov.w	lr, #2
 800a410:	2008      	movs	r0, #8
 800a412:	2409      	movs	r4, #9
 800a414:	f04f 0c03 	mov.w	ip, #3
 800a418:	f04f 0901 	mov.w	r9, #1
  HAL_StatusTypeDef status = HAL_OK;
 800a41c:	4615      	mov	r5, r2
 800a41e:	e7c0      	b.n	800a3a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a420:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a422:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a426:	058c      	lsls	r4, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a428:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a42a:	d5c6      	bpl.n	800a3ba <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    error_code |= HAL_I2C_ERROR_ARLO;
 800a42c:	f040 0002 	orr.w	r0, r0, #2
 800a430:	e7e8      	b.n	800a404 <I2C_WaitOnSTOPFlagUntilTimeout+0xbc>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a432:	0692      	lsls	r2, r2, #26
 800a434:	d459      	bmi.n	800a4ea <I2C_WaitOnSTOPFlagUntilTimeout+0x1a2>
 800a436:	2d00      	cmp	r5, #0
 800a438:	d15a      	bne.n	800a4f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a8>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a43a:	f7ff f981 	bl	8009740 <HAL_GetTick>
 800a43e:	eba0 0009 	sub.w	r0, r0, r9
 800a442:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a444:	f8da 3000 	ldr.w	r3, [sl]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a448:	d301      	bcc.n	800a44e <I2C_WaitOnSTOPFlagUntilTimeout+0x106>
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	d191      	bne.n	800a372 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a44e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800a450:	f89a 2042 	ldrb.w	r2, [sl, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a454:	6999      	ldr	r1, [r3, #24]
 800a456:	040c      	lsls	r4, r1, #16
          tmp2 = hi2c->Mode;
 800a458:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a45a:	d50f      	bpl.n	800a47c <I2C_WaitOnSTOPFlagUntilTimeout+0x134>
 800a45c:	0441      	lsls	r1, r0, #17
 800a45e:	d40d      	bmi.n	800a47c <I2C_WaitOnSTOPFlagUntilTimeout+0x134>
              (tmp1 != I2C_CR2_STOP) && \
 800a460:	2a20      	cmp	r2, #32
 800a462:	d00b      	beq.n	800a47c <I2C_WaitOnSTOPFlagUntilTimeout+0x134>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a46a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800a46c:	f7ff f968 	bl	8009740 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a470:	f8da 3000 	ldr.w	r3, [sl]
            tickstart = HAL_GetTick();
 800a474:	4681      	mov	r9, r0
 800a476:	e001      	b.n	800a47c <I2C_WaitOnSTOPFlagUntilTimeout+0x134>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a478:	f8da 3000 	ldr.w	r3, [sl]
 800a47c:	699c      	ldr	r4, [r3, #24]
 800a47e:	f014 0420 	ands.w	r4, r4, #32
 800a482:	f47f af76 	bne.w	800a372 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a486:	f7ff f95b 	bl	8009740 <HAL_GetTick>
 800a48a:	eba0 0009 	sub.w	r0, r0, r9
 800a48e:	2819      	cmp	r0, #25
 800a490:	d9f2      	bls.n	800a478 <I2C_WaitOnSTOPFlagUntilTimeout+0x130>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a492:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 800a496:	f88a 4040 	strb.w	r4, [sl, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a49a:	f043 0320 	orr.w	r3, r3, #32
 800a49e:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
              status = HAL_ERROR;
 800a4a2:	2501      	movs	r5, #1
              hi2c->State = HAL_I2C_STATE_READY;
 800a4a4:	f88a 8041 	strb.w	r8, [sl, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4a8:	f8da 3000 	ldr.w	r3, [sl]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4ac:	f88a 4042 	strb.w	r4, [sl, #66]	; 0x42
              status = HAL_ERROR;
 800a4b0:	e7e4      	b.n	800a47c <I2C_WaitOnSTOPFlagUntilTimeout+0x134>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a4b2:	4660      	mov	r0, ip
 800a4b4:	e7a6      	b.n	800a404 <I2C_WaitOnSTOPFlagUntilTimeout+0xbc>
  if (status != HAL_OK)
 800a4b6:	bb45      	cbnz	r5, 800a50a <I2C_WaitOnSTOPFlagUntilTimeout+0x1c2>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b8:	f7ff f942 	bl	8009740 <HAL_GetTick>
 800a4bc:	1bc0      	subs	r0, r0, r7
 800a4be:	42b0      	cmp	r0, r6
 800a4c0:	d802      	bhi.n	800a4c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x180>
 800a4c2:	2e00      	cmp	r6, #0
 800a4c4:	f47f af47 	bne.w	800a356 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4c8:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4cc:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4ce:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800a4d2:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4d4:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a4d8:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800a4dc:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4e0:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800a4e4:	2001      	movs	r0, #1
}
 800a4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
 800a4ea:	2d00      	cmp	r5, #0
 800a4ec:	f43f af4d 	beq.w	800a38a <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 800a4f0:	f04f 0e06 	mov.w	lr, #6
 800a4f4:	200c      	movs	r0, #12
 800a4f6:	240d      	movs	r4, #13
 800a4f8:	f04f 0c07 	mov.w	ip, #7
 800a4fc:	f04f 0905 	mov.w	r9, #5
    error_code |= HAL_I2C_ERROR_AF;
 800a500:	2204      	movs	r2, #4
 800a502:	e74e      	b.n	800a3a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  return HAL_OK;
 800a504:	2000      	movs	r0, #0
}
 800a506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50a:	4610      	mov	r0, r2
 800a50c:	e755      	b.n	800a3ba <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800a50e:	bf00      	nop
 800a510:	fe00e800 	.word	0xfe00e800

0800a514 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800a514:	2800      	cmp	r0, #0
 800a516:	d04f      	beq.n	800a5b8 <HAL_I2C_Init+0xa4>
{
 800a518:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a51a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a51e:	4604      	mov	r4, r0
 800a520:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a524:	2b00      	cmp	r3, #0
 800a526:	d042      	beq.n	800a5ae <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 800a528:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a52a:	2224      	movs	r2, #36	; 0x24
 800a52c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a530:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a532:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 800a534:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800a53c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a53e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a540:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a542:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a548:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a54a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a54c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a54e:	d02a      	beq.n	800a5a6 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a550:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a554:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a556:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a558:	bf04      	itt	eq
 800a55a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800a55e:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a560:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a562:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a564:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800a568:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a56c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a56e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a570:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a572:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a574:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a576:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a57a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a57e:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a580:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a582:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a584:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a586:	4301      	orrs	r1, r0
 800a588:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a58a:	6819      	ldr	r1, [r3, #0]
 800a58c:	f041 0101 	orr.w	r1, r1, #1
 800a590:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a592:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800a594:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a596:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a598:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a59c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a59e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 800a5a2:	4610      	mov	r0, r2
}
 800a5a4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a5a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5aa:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a5ac:	e7d8      	b.n	800a560 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800a5ae:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800a5b2:	f7fe fe0d 	bl	80091d0 <HAL_I2C_MspInit>
 800a5b6:	e7b7      	b.n	800a528 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800a5b8:	2001      	movs	r0, #1
}
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_I2C_Master_Transmit>:
{
 800a5bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	461e      	mov	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a5c6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5ca:	2b20      	cmp	r3, #32
 800a5cc:	f040 8092 	bne.w	800a6f4 <HAL_I2C_Master_Transmit+0x138>
    __HAL_LOCK(hi2c);
 800a5d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	f000 808c 	beq.w	800a6f4 <HAL_I2C_Master_Transmit+0x138>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a5e2:	468b      	mov	fp, r1
 800a5e4:	4617      	mov	r7, r2
    tickstart = HAL_GetTick();
 800a5e6:	f7ff f8ab 	bl	8009740 <HAL_GetTick>
 800a5ea:	4681      	mov	r9, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800a5ec:	e005      	b.n	800a5fa <HAL_I2C_Master_Transmit+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ee:	f7ff f8a7 	bl	8009740 <HAL_GetTick>
 800a5f2:	eba0 0009 	sub.w	r0, r0, r9
 800a5f6:	2819      	cmp	r0, #25
 800a5f8:	d87f      	bhi.n	800a6fa <HAL_I2C_Master_Transmit+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5fa:	6828      	ldr	r0, [r5, #0]
 800a5fc:	6984      	ldr	r4, [r0, #24]
 800a5fe:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 800a602:	d1f4      	bne.n	800a5ee <HAL_I2C_Master_Transmit+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a604:	2321      	movs	r3, #33	; 0x21
 800a606:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a60a:	2310      	movs	r3, #16
 800a60c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a610:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800a612:	856e      	strh	r6, [r5, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a614:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800a616:	626f      	str	r7, [r5, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a618:	b29b      	uxth	r3, r3
 800a61a:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800a61c:	636c      	str	r4, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a61e:	d87a      	bhi.n	800a716 <HAL_I2C_Master_Transmit+0x15a>
      hi2c->XferSize = hi2c->XferCount;
 800a620:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a622:	6841      	ldr	r1, [r0, #4]
      hi2c->XferSize = hi2c->XferCount;
 800a624:	b29b      	uxth	r3, r3
 800a626:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a628:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800a62a:	4ba6      	ldr	r3, [pc, #664]	; (800a8c4 <HAL_I2C_Master_Transmit+0x308>)
 800a62c:	4019      	ands	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a62e:	f3cb 0309 	ubfx	r3, fp, #0, #10
 800a632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800a636:	430b      	orrs	r3, r1
 800a638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a63c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a640:	6043      	str	r3, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a642:	f3cb 0b09 	ubfx	fp, fp, #0, #10
    while (hi2c->XferCount > 0U)
 800a646:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 80fb 	beq.w	800a846 <HAL_I2C_Master_Transmit+0x28a>
              hi2c->State = HAL_I2C_STATE_READY;
 800a650:	f04f 0a20 	mov.w	sl, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a654:	6986      	ldr	r6, [r0, #24]
 800a656:	f016 0602 	ands.w	r6, r6, #2
 800a65a:	f040 80de 	bne.w	800a81a <HAL_I2C_Master_Transmit+0x25e>
  uint32_t itflag   = hi2c->Instance->ISR;
 800a65e:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a660:	f013 0310 	ands.w	r3, r3, #16
 800a664:	d067      	beq.n	800a736 <HAL_I2C_Master_Transmit+0x17a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a666:	2310      	movs	r3, #16
 800a668:	61c3      	str	r3, [r0, #28]
  uint32_t tickstart = Tickstart;
 800a66a:	464f      	mov	r7, r9
 800a66c:	f1b8 3fff 	cmp.w	r8, #4294967295
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a670:	6983      	ldr	r3, [r0, #24]
 800a672:	f040 8081 	bne.w	800a778 <HAL_I2C_Master_Transmit+0x1bc>
 800a676:	0699      	lsls	r1, r3, #26
 800a678:	f100 80f0 	bmi.w	800a85c <HAL_I2C_Master_Transmit+0x2a0>
 800a67c:	2e00      	cmp	r6, #0
 800a67e:	f040 80f0 	bne.w	800a862 <HAL_I2C_Master_Transmit+0x2a6>
 800a682:	6983      	ldr	r3, [r0, #24]
 800a684:	069a      	lsls	r2, r3, #26
 800a686:	d5fc      	bpl.n	800a682 <HAL_I2C_Master_Transmit+0xc6>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a688:	f8c0 a01c 	str.w	sl, [r0, #28]
 800a68c:	f04f 0e06 	mov.w	lr, #6
 800a690:	210c      	movs	r1, #12
 800a692:	240d      	movs	r4, #13
 800a694:	2707      	movs	r7, #7
 800a696:	f04f 0c05 	mov.w	ip, #5
    error_code |= HAL_I2C_ERROR_AF;
 800a69a:	2304      	movs	r3, #4
    status = HAL_ERROR;
 800a69c:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 800a69e:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a6a0:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a6a4:	d056      	beq.n	800a754 <HAL_I2C_Master_Transmit+0x198>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a6a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6aa:	61c3      	str	r3, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a6ac:	0553      	lsls	r3, r2, #21
 800a6ae:	d45a      	bmi.n	800a766 <HAL_I2C_Master_Transmit+0x1aa>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a6b0:	0596      	lsls	r6, r2, #22
 800a6b2:	f100 80d1 	bmi.w	800a858 <HAL_I2C_Master_Transmit+0x29c>
 800a6b6:	4661      	mov	r1, ip
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a6b8:	6983      	ldr	r3, [r0, #24]
 800a6ba:	079e      	lsls	r6, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800a6bc:	bf44      	itt	mi
 800a6be:	2300      	movmi	r3, #0
 800a6c0:	6283      	strmi	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6c2:	6983      	ldr	r3, [r0, #24]
 800a6c4:	07dc      	lsls	r4, r3, #31
 800a6c6:	d403      	bmi.n	800a6d0 <HAL_I2C_Master_Transmit+0x114>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a6c8:	6983      	ldr	r3, [r0, #24]
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 800a6d0:	6843      	ldr	r3, [r0, #4]
 800a6d2:	4c7d      	ldr	r4, [pc, #500]	; (800a8c8 <HAL_I2C_Master_Transmit+0x30c>)
 800a6d4:	4023      	ands	r3, r4
 800a6d6:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= error_code;
 800a6d8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6da:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800a6dc:	2020      	movs	r0, #32
    hi2c->ErrorCode |= error_code;
 800a6de:	430b      	orrs	r3, r1
 800a6e0:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800a6e2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800a6e6:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6ea:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        return HAL_ERROR;
 800a6ee:	2001      	movs	r0, #1
}
 800a6f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800a6f4:	2002      	movs	r0, #2
}
 800a6f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6fa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6fc:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6fe:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800a702:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a704:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a706:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800a70a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          return HAL_ERROR;
 800a70e:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a710:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        return HAL_ERROR;
 800a714:	e7ef      	b.n	800a6f6 <HAL_I2C_Master_Transmit+0x13a>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a716:	6842      	ldr	r2, [r0, #4]
 800a718:	4b6a      	ldr	r3, [pc, #424]	; (800a8c4 <HAL_I2C_Master_Transmit+0x308>)
 800a71a:	401a      	ands	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a71c:	f3cb 0309 	ubfx	r3, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a720:	4313      	orrs	r3, r2
 800a722:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 800a726:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a72a:	22ff      	movs	r2, #255	; 0xff
 800a72c:	852a      	strh	r2, [r5, #40]	; 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a72e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a732:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a734:	e787      	b.n	800a646 <HAL_I2C_Master_Transmit+0x8a>
  itflag = hi2c->Instance->ISR;
 800a736:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a738:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a73c:	f04f 0e02 	mov.w	lr, #2
 800a740:	f04f 0108 	mov.w	r1, #8
 800a744:	f04f 0409 	mov.w	r4, #9
 800a748:	f04f 0703 	mov.w	r7, #3
 800a74c:	f04f 0c01 	mov.w	ip, #1
  HAL_StatusTypeDef status = HAL_OK;
 800a750:	461e      	mov	r6, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a752:	d1a8      	bne.n	800a6a6 <HAL_I2C_Master_Transmit+0xea>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a754:	0554      	lsls	r4, r2, #21
 800a756:	d407      	bmi.n	800a768 <HAL_I2C_Master_Transmit+0x1ac>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a758:	0597      	lsls	r7, r2, #22
 800a75a:	d547      	bpl.n	800a7ec <HAL_I2C_Master_Transmit+0x230>
 800a75c:	4671      	mov	r1, lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a75e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a762:	61c3      	str	r3, [r0, #28]
  if (status != HAL_OK)
 800a764:	e7a8      	b.n	800a6b8 <HAL_I2C_Master_Transmit+0xfc>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a766:	4621      	mov	r1, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a76c:	61c3      	str	r3, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a76e:	0593      	lsls	r3, r2, #22
 800a770:	d5a2      	bpl.n	800a6b8 <HAL_I2C_Master_Transmit+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 800a772:	f041 0102 	orr.w	r1, r1, #2
 800a776:	e7f2      	b.n	800a75e <HAL_I2C_Master_Transmit+0x1a2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a778:	069b      	lsls	r3, r3, #26
 800a77a:	d46f      	bmi.n	800a85c <HAL_I2C_Master_Transmit+0x2a0>
 800a77c:	2e00      	cmp	r6, #0
 800a77e:	d170      	bne.n	800a862 <HAL_I2C_Master_Transmit+0x2a6>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a780:	f7fe ffde 	bl	8009740 <HAL_GetTick>
 800a784:	1bc0      	subs	r0, r0, r7
 800a786:	4580      	cmp	r8, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a788:	6828      	ldr	r0, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a78a:	d303      	bcc.n	800a794 <HAL_I2C_Master_Transmit+0x1d8>
 800a78c:	f1b8 0f00 	cmp.w	r8, #0
 800a790:	f47f af6c 	bne.w	800a66c <HAL_I2C_Master_Transmit+0xb0>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a794:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 800a796:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a79a:	6982      	ldr	r2, [r0, #24]
 800a79c:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 800a79e:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a7a0:	d50d      	bpl.n	800a7be <HAL_I2C_Master_Transmit+0x202>
 800a7a2:	044c      	lsls	r4, r1, #17
 800a7a4:	d40b      	bmi.n	800a7be <HAL_I2C_Master_Transmit+0x202>
              (tmp1 != I2C_CR2_STOP) && \
 800a7a6:	2b20      	cmp	r3, #32
 800a7a8:	d009      	beq.n	800a7be <HAL_I2C_Master_Transmit+0x202>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a7aa:	6843      	ldr	r3, [r0, #4]
 800a7ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7b0:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 800a7b2:	f7fe ffc5 	bl	8009740 <HAL_GetTick>
 800a7b6:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7b8:	6828      	ldr	r0, [r5, #0]
 800a7ba:	e000      	b.n	800a7be <HAL_I2C_Master_Transmit+0x202>
 800a7bc:	6828      	ldr	r0, [r5, #0]
 800a7be:	6984      	ldr	r4, [r0, #24]
 800a7c0:	f014 0420 	ands.w	r4, r4, #32
 800a7c4:	f47f af52 	bne.w	800a66c <HAL_I2C_Master_Transmit+0xb0>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a7c8:	f7fe ffba 	bl	8009740 <HAL_GetTick>
 800a7cc:	1bc0      	subs	r0, r0, r7
 800a7ce:	2819      	cmp	r0, #25
 800a7d0:	d9f4      	bls.n	800a7bc <HAL_I2C_Master_Transmit+0x200>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7d4:	6828      	ldr	r0, [r5, #0]
              __HAL_UNLOCK(hi2c);
 800a7d6:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7da:	f043 0320 	orr.w	r3, r3, #32
 800a7de:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 800a7e0:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 800a7e2:	f885 a041 	strb.w	sl, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7e6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 800a7ea:	e7e8      	b.n	800a7be <HAL_I2C_Master_Transmit+0x202>
  if (status != HAL_OK)
 800a7ec:	2e00      	cmp	r6, #0
 800a7ee:	d167      	bne.n	800a8c0 <HAL_I2C_Master_Transmit+0x304>
    if (Timeout != HAL_MAX_DELAY)
 800a7f0:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a7f4:	f43f af2e 	beq.w	800a654 <HAL_I2C_Master_Transmit+0x98>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7f8:	f7fe ffa2 	bl	8009740 <HAL_GetTick>
 800a7fc:	eba0 0009 	sub.w	r0, r0, r9
 800a800:	4580      	cmp	r8, r0
 800a802:	f4ff af7a 	bcc.w	800a6fa <HAL_I2C_Master_Transmit+0x13e>
 800a806:	f1b8 0f00 	cmp.w	r8, #0
 800a80a:	f43f af76 	beq.w	800a6fa <HAL_I2C_Master_Transmit+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a80e:	6828      	ldr	r0, [r5, #0]
 800a810:	6986      	ldr	r6, [r0, #24]
 800a812:	f016 0602 	ands.w	r6, r6, #2
 800a816:	f43f af22 	beq.w	800a65e <HAL_I2C_Master_Transmit+0xa2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a81a:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800a81c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a81e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a822:	6282      	str	r2, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800a824:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800a826:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 800a828:	3a01      	subs	r2, #1
 800a82a:	b292      	uxth	r2, r2
 800a82c:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a82e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800a830:	3b01      	subs	r3, #1
 800a832:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a834:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800a836:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a838:	b102      	cbz	r2, 800a83c <HAL_I2C_Master_Transmit+0x280>
 800a83a:	b353      	cbz	r3, 800a892 <HAL_I2C_Master_Transmit+0x2d6>
    while (hi2c->XferCount > 0U)
 800a83c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a83e:	b29b      	uxth	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	f47f af07 	bne.w	800a654 <HAL_I2C_Master_Transmit+0x98>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a846:	464a      	mov	r2, r9
 800a848:	4641      	mov	r1, r8
 800a84a:	4628      	mov	r0, r5
 800a84c:	f7ff fd7c 	bl	800a348 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a850:	2800      	cmp	r0, #0
 800a852:	d04c      	beq.n	800a8ee <HAL_I2C_Master_Transmit+0x332>
      return HAL_ERROR;
 800a854:	2001      	movs	r0, #1
 800a856:	e74e      	b.n	800a6f6 <HAL_I2C_Master_Transmit+0x13a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a858:	4639      	mov	r1, r7
 800a85a:	e780      	b.n	800a75e <HAL_I2C_Master_Transmit+0x1a2>
    if (status == HAL_OK)
 800a85c:	2e00      	cmp	r6, #0
 800a85e:	f43f af13 	beq.w	800a688 <HAL_I2C_Master_Transmit+0xcc>
 800a862:	f04f 0e06 	mov.w	lr, #6
 800a866:	210c      	movs	r1, #12
 800a868:	240d      	movs	r4, #13
 800a86a:	2707      	movs	r7, #7
 800a86c:	f04f 0c05 	mov.w	ip, #5
    error_code |= HAL_I2C_ERROR_AF;
 800a870:	2304      	movs	r3, #4
 800a872:	e714      	b.n	800a69e <HAL_I2C_Master_Transmit+0xe2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a874:	6983      	ldr	r3, [r0, #24]
 800a876:	061b      	lsls	r3, r3, #24
 800a878:	d411      	bmi.n	800a89e <HAL_I2C_Master_Transmit+0x2e2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a87a:	f7fe ff61 	bl	8009740 <HAL_GetTick>
 800a87e:	eba0 0009 	sub.w	r0, r0, r9
 800a882:	4580      	cmp	r8, r0
 800a884:	f4ff af39 	bcc.w	800a6fa <HAL_I2C_Master_Transmit+0x13e>
 800a888:	f1b8 0f00 	cmp.w	r8, #0
 800a88c:	f43f af35 	beq.w	800a6fa <HAL_I2C_Master_Transmit+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a890:	6828      	ldr	r0, [r5, #0]
 800a892:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a896:	d1ed      	bne.n	800a874 <HAL_I2C_Master_Transmit+0x2b8>
 800a898:	6983      	ldr	r3, [r0, #24]
 800a89a:	061a      	lsls	r2, r3, #24
 800a89c:	d5fc      	bpl.n	800a898 <HAL_I2C_Master_Transmit+0x2dc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a89e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	2bff      	cmp	r3, #255	; 0xff
 800a8a4:	d914      	bls.n	800a8d0 <HAL_I2C_Master_Transmit+0x314>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a8a6:	6843      	ldr	r3, [r0, #4]
 800a8a8:	4a08      	ldr	r2, [pc, #32]	; (800a8cc <HAL_I2C_Master_Transmit+0x310>)
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	ea4b 0303 	orr.w	r3, fp, r3
 800a8b0:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 800a8b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8b8:	22ff      	movs	r2, #255	; 0xff
 800a8ba:	852a      	strh	r2, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a8bc:	6043      	str	r3, [r0, #4]
}
 800a8be:	e7bd      	b.n	800a83c <HAL_I2C_Master_Transmit+0x280>
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	e6f9      	b.n	800a6b8 <HAL_I2C_Master_Transmit+0xfc>
 800a8c4:	fc009800 	.word	0xfc009800
 800a8c8:	fe00e800 	.word	0xfe00e800
 800a8cc:	fc009c00 	.word	0xfc009c00
          hi2c->XferSize = hi2c->XferCount;
 800a8d0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a8d2:	490e      	ldr	r1, [pc, #56]	; (800a90c <HAL_I2C_Master_Transmit+0x350>)
          hi2c->XferSize = hi2c->XferCount;
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a8d8:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800a8da:	6843      	ldr	r3, [r0, #4]
 800a8dc:	400b      	ands	r3, r1
 800a8de:	ea4b 0303 	orr.w	r3, fp, r3
 800a8e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a8ea:	6043      	str	r3, [r0, #4]
}
 800a8ec:	e7a6      	b.n	800a83c <HAL_I2C_Master_Transmit+0x280>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8ee:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 800a8f0:	4c07      	ldr	r4, [pc, #28]	; (800a910 <HAL_I2C_Master_Transmit+0x354>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8f2:	2120      	movs	r1, #32
 800a8f4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a8f6:	685a      	ldr	r2, [r3, #4]
 800a8f8:	4022      	ands	r2, r4
 800a8fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a8fc:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a900:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a904:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800a908:	e6f5      	b.n	800a6f6 <HAL_I2C_Master_Transmit+0x13a>
 800a90a:	bf00      	nop
 800a90c:	fc009c00 	.word	0xfc009c00
 800a910:	fe00e800 	.word	0xfe00e800

0800a914 <HAL_I2C_Master_Receive>:
{
 800a914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a918:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a91a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a91e:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a920:	2b20      	cmp	r3, #32
 800a922:	f040 8092 	bne.w	800aa4a <HAL_I2C_Master_Receive+0x136>
    __HAL_LOCK(hi2c);
 800a926:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	4604      	mov	r4, r0
 800a92e:	f000 808c 	beq.w	800aa4a <HAL_I2C_Master_Receive+0x136>
 800a932:	2301      	movs	r3, #1
 800a934:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a938:	4689      	mov	r9, r1
 800a93a:	4617      	mov	r7, r2
    tickstart = HAL_GetTick();
 800a93c:	f7fe ff00 	bl	8009740 <HAL_GetTick>
 800a940:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800a942:	e005      	b.n	800a950 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a944:	f7fe fefc 	bl	8009740 <HAL_GetTick>
 800a948:	1b40      	subs	r0, r0, r5
 800a94a:	2819      	cmp	r0, #25
 800a94c:	f200 808a 	bhi.w	800aa64 <HAL_I2C_Master_Receive+0x150>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	6998      	ldr	r0, [r3, #24]
 800a954:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800a958:	d1f4      	bne.n	800a944 <HAL_I2C_Master_Receive+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a95a:	2222      	movs	r2, #34	; 0x22
 800a95c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a960:	2210      	movs	r2, #16
 800a962:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a966:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800a968:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a96c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800a96e:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a970:	b292      	uxth	r2, r2
 800a972:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 800a974:	6360      	str	r0, [r4, #52]	; 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a976:	f3c9 0709 	ubfx	r7, r9, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a97a:	f200 8082 	bhi.w	800aa82 <HAL_I2C_Master_Receive+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 800a97e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a980:	484e      	ldr	r0, [pc, #312]	; (800aabc <HAL_I2C_Master_Receive+0x1a8>)
 800a982:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800a984:	b292      	uxth	r2, r2
 800a986:	8522      	strh	r2, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a988:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a98a:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800a98e:	4001      	ands	r1, r0
 800a990:	430a      	orrs	r2, r1
 800a992:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a996:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800a99a:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 800a99c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d03d      	beq.n	800aa20 <HAL_I2C_Master_Receive+0x10c>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a9a4:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800aac4 <HAL_I2C_Master_Receive+0x1b0>
 800a9a8:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800aac8 <HAL_I2C_Master_Receive+0x1b4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9ac:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800a9b0:	e003      	b.n	800a9ba <HAL_I2C_Master_Receive+0xa6>
    while (hi2c->XferCount > 0U)
 800a9b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d032      	beq.n	800aa20 <HAL_I2C_Master_Receive+0x10c>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9ba:	462a      	mov	r2, r5
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f7ff fad2 	bl	8009f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d176      	bne.n	800aab6 <HAL_I2C_Master_Receive+0x1a2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a9ce:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800a9d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a9d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a9d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a9d6:	3a01      	subs	r2, #1
 800a9d8:	b292      	uxth	r2, r2
 800a9da:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a9dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a9de:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800a9e0:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800a9e2:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a9e4:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800a9e6:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800a9e8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	d0e1      	beq.n	800a9b2 <HAL_I2C_Master_Receive+0x9e>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1df      	bne.n	800a9b2 <HAL_I2C_Master_Receive+0x9e>
 800a9f2:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9f4:	6822      	ldr	r2, [r4, #0]
 800a9f6:	d12b      	bne.n	800aa50 <HAL_I2C_Master_Receive+0x13c>
 800a9f8:	6993      	ldr	r3, [r2, #24]
 800a9fa:	0619      	lsls	r1, r3, #24
 800a9fc:	d5fc      	bpl.n	800a9f8 <HAL_I2C_Master_Receive+0xe4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2bff      	cmp	r3, #255	; 0xff
 800aa04:	d949      	bls.n	800aa9a <HAL_I2C_Master_Receive+0x186>
  MODIFY_REG(hi2c->Instance->CR2, \
 800aa06:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa08:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800aa0c:	ea03 0308 	and.w	r3, r3, r8
 800aa10:	433b      	orrs	r3, r7
 800aa12:	ea43 030a 	orr.w	r3, r3, sl
 800aa16:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 800aa18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1cc      	bne.n	800a9ba <HAL_I2C_Master_Receive+0xa6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa20:	462a      	mov	r2, r5
 800aa22:	4631      	mov	r1, r6
 800aa24:	4620      	mov	r0, r4
 800aa26:	f7ff fc8f 	bl	800a348 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d143      	bne.n	800aab6 <HAL_I2C_Master_Receive+0x1a2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa2e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800aa30:	4d23      	ldr	r5, [pc, #140]	; (800aac0 <HAL_I2C_Master_Receive+0x1ac>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa32:	2120      	movs	r1, #32
 800aa34:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	402a      	ands	r2, r5
 800aa3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800aa3c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800aa40:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa44:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800aa48:	e000      	b.n	800aa4c <HAL_I2C_Master_Receive+0x138>
    return HAL_BUSY;
 800aa4a:	2002      	movs	r0, #2
}
 800aa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa50:	6993      	ldr	r3, [r2, #24]
 800aa52:	061b      	lsls	r3, r3, #24
 800aa54:	d4d3      	bmi.n	800a9fe <HAL_I2C_Master_Receive+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa56:	f7fe fe73 	bl	8009740 <HAL_GetTick>
 800aa5a:	1b40      	subs	r0, r0, r5
 800aa5c:	4286      	cmp	r6, r0
 800aa5e:	d301      	bcc.n	800aa64 <HAL_I2C_Master_Receive+0x150>
 800aa60:	2e00      	cmp	r6, #0
 800aa62:	d1c6      	bne.n	800a9f2 <HAL_I2C_Master_Receive+0xde>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa64:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa66:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa68:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800aa6c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa6e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800aa70:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800aa74:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa78:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800aa7c:	2001      	movs	r0, #1
}
 800aa7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	490d      	ldr	r1, [pc, #52]	; (800aabc <HAL_I2C_Master_Receive+0x1a8>)
 800aa86:	400a      	ands	r2, r1
 800aa88:	433a      	orrs	r2, r7
 800aa8a:	f042 72ff 	orr.w	r2, r2, #33423360	; 0x1fe0000
 800aa8e:	f442 3292 	orr.w	r2, r2, #74752	; 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa92:	21ff      	movs	r1, #255	; 0xff
 800aa94:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800aa96:	605a      	str	r2, [r3, #4]
}
 800aa98:	e780      	b.n	800a99c <HAL_I2C_Master_Receive+0x88>
          hi2c->XferSize = hi2c->XferCount;
 800aa9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aaa0:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800aaa2:	6853      	ldr	r3, [r2, #4]
 800aaa4:	ea03 0308 	and.w	r3, r3, r8
 800aaa8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800aaac:	433b      	orrs	r3, r7
 800aaae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aab2:	6053      	str	r3, [r2, #4]
}
 800aab4:	e77d      	b.n	800a9b2 <HAL_I2C_Master_Receive+0x9e>
        return HAL_ERROR;
 800aab6:	2001      	movs	r0, #1
}
 800aab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aabc:	fc009800 	.word	0xfc009800
 800aac0:	fe00e800 	.word	0xfe00e800
 800aac4:	fc009c00 	.word	0xfc009c00
 800aac8:	01ff0000 	.word	0x01ff0000

0800aacc <HAL_I2C_Mem_Write>:
{
 800aacc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad0:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800aad2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800aad6:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
 800aada:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800aade:	2b20      	cmp	r3, #32
 800aae0:	f040 80a4 	bne.w	800ac2c <HAL_I2C_Mem_Write+0x160>
    if ((pData == NULL) || (Size == 0U))
 800aae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae6:	4604      	mov	r4, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 8099 	beq.w	800ac20 <HAL_I2C_Mem_Write+0x154>
 800aaee:	f1bb 0f00 	cmp.w	fp, #0
 800aaf2:	f000 8095 	beq.w	800ac20 <HAL_I2C_Mem_Write+0x154>
    __HAL_LOCK(hi2c);
 800aaf6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	f000 8096 	beq.w	800ac2c <HAL_I2C_Mem_Write+0x160>
 800ab00:	2301      	movs	r3, #1
 800ab02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ab06:	460f      	mov	r7, r1
 800ab08:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800ab0a:	f7fe fe19 	bl	8009740 <HAL_GetTick>
 800ab0e:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800ab10:	e005      	b.n	800ab1e <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab12:	f7fe fe15 	bl	8009740 <HAL_GetTick>
 800ab16:	1b80      	subs	r0, r0, r6
 800ab18:	2819      	cmp	r0, #25
 800ab1a:	f200 808a 	bhi.w	800ac32 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	699d      	ldr	r5, [r3, #24]
 800ab22:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 800ab26:	d1f4      	bne.n	800ab12 <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 800ab28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab2a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ab2c:	2221      	movs	r2, #33	; 0x21
 800ab2e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab32:	2240      	movs	r2, #64	; 0x40
 800ab34:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab38:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800ab3a:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	4976      	ldr	r1, [pc, #472]	; (800ad1c <HAL_I2C_Mem_Write+0x250>)
    hi2c->XferISR   = NULL;
 800ab42:	6365      	str	r5, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab44:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ab46:	fa5f f18a 	uxtb.w	r1, sl
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab4e:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab52:	433a      	orrs	r2, r7
 800ab54:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800ab58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab5c:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab5e:	4641      	mov	r1, r8
 800ab60:	4632      	mov	r2, r6
 800ab62:	4620      	mov	r0, r4
 800ab64:	f7ff fb08 	bl	800a178 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f040 8096 	bne.w	800ac9a <HAL_I2C_Mem_Write+0x1ce>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab6e:	f1ba 0f01 	cmp.w	sl, #1
 800ab72:	f040 8086 	bne.w	800ac82 <HAL_I2C_Mem_Write+0x1b6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab76:	6822      	ldr	r2, [r4, #0]
 800ab78:	fa5f f389 	uxtb.w	r3, r9
 800ab7c:	6293      	str	r3, [r2, #40]	; 0x28
 800ab7e:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ab82:	d165      	bne.n	800ac50 <HAL_I2C_Mem_Write+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab84:	6993      	ldr	r3, [r2, #24]
 800ab86:	061d      	lsls	r5, r3, #24
 800ab88:	d5fc      	bpl.n	800ab84 <HAL_I2C_Mem_Write+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	2bff      	cmp	r3, #255	; 0xff
 800ab90:	d86b      	bhi.n	800ac6a <HAL_I2C_Mem_Write+0x19e>
      hi2c->XferSize = hi2c->XferCount;
 800ab92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab94:	4862      	ldr	r0, [pc, #392]	; (800ad20 <HAL_I2C_Mem_Write+0x254>)
      hi2c->XferSize = hi2c->XferCount;
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ab9a:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab9c:	6853      	ldr	r3, [r2, #4]
 800ab9e:	4003      	ands	r3, r0
 800aba0:	433b      	orrs	r3, r7
 800aba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800aba6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800abaa:	6053      	str	r3, [r2, #4]
 800abac:	4d5c      	ldr	r5, [pc, #368]	; (800ad20 <HAL_I2C_Mem_Write+0x254>)
 800abae:	f8df a178 	ldr.w	sl, [pc, #376]	; 800ad28 <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abb2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800abb6:	e004      	b.n	800abc2 <HAL_I2C_Mem_Write+0xf6>
    } while (hi2c->XferCount > 0U);
 800abb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800abba:	b29b      	uxth	r3, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 808d 	beq.w	800acdc <HAL_I2C_Mem_Write+0x210>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abc2:	4632      	mov	r2, r6
 800abc4:	4641      	mov	r1, r8
 800abc6:	4620      	mov	r0, r4
 800abc8:	f7ff fad6 	bl	800a178 <I2C_WaitOnTXISFlagUntilTimeout>
 800abcc:	2800      	cmp	r0, #0
 800abce:	f040 8083 	bne.w	800acd8 <HAL_I2C_Mem_Write+0x20c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800abd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd4:	6822      	ldr	r2, [r4, #0]
 800abd6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800abda:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800abdc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800abde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800abe0:	3b01      	subs	r3, #1
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800abe6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abe8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800abea:	3b01      	subs	r3, #1
 800abec:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abee:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800abf0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abf2:	2900      	cmp	r1, #0
 800abf4:	d0e0      	beq.n	800abb8 <HAL_I2C_Mem_Write+0xec>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1de      	bne.n	800abb8 <HAL_I2C_Mem_Write+0xec>
 800abfa:	f1b8 3fff 	cmp.w	r8, #4294967295
 800abfe:	d151      	bne.n	800aca4 <HAL_I2C_Mem_Write+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac00:	6993      	ldr	r3, [r2, #24]
 800ac02:	0619      	lsls	r1, r3, #24
 800ac04:	d5fc      	bpl.n	800ac00 <HAL_I2C_Mem_Write+0x134>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	2bff      	cmp	r3, #255	; 0xff
 800ac0c:	d957      	bls.n	800acbe <HAL_I2C_Mem_Write+0x1f2>
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac0e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac10:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac14:	402b      	ands	r3, r5
 800ac16:	433b      	orrs	r3, r7
 800ac18:	ea43 030a 	orr.w	r3, r3, sl
 800ac1c:	6053      	str	r3, [r2, #4]
}
 800ac1e:	e7cb      	b.n	800abb8 <HAL_I2C_Mem_Write+0xec>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ac20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac24:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800ac26:	2001      	movs	r0, #1
}
 800ac28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800ac2c:	2002      	movs	r0, #2
}
 800ac2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac32:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac34:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac36:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800ac3a:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac3c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ac3e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800ac42:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac46:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800ac4a:	2001      	movs	r0, #1
}
 800ac4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac50:	6993      	ldr	r3, [r2, #24]
 800ac52:	0618      	lsls	r0, r3, #24
 800ac54:	d499      	bmi.n	800ab8a <HAL_I2C_Mem_Write+0xbe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac56:	f7fe fd73 	bl	8009740 <HAL_GetTick>
 800ac5a:	1b80      	subs	r0, r0, r6
 800ac5c:	4580      	cmp	r8, r0
 800ac5e:	d352      	bcc.n	800ad06 <HAL_I2C_Mem_Write+0x23a>
 800ac60:	f1b8 0f00 	cmp.w	r8, #0
 800ac64:	d04f      	beq.n	800ad06 <HAL_I2C_Mem_Write+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac66:	6822      	ldr	r2, [r4, #0]
 800ac68:	e789      	b.n	800ab7e <HAL_I2C_Mem_Write+0xb2>
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac6a:	6853      	ldr	r3, [r2, #4]
 800ac6c:	492c      	ldr	r1, [pc, #176]	; (800ad20 <HAL_I2C_Mem_Write+0x254>)
 800ac6e:	400b      	ands	r3, r1
 800ac70:	433b      	orrs	r3, r7
 800ac72:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 800ac76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac7a:	21ff      	movs	r1, #255	; 0xff
 800ac7c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac7e:	6053      	str	r3, [r2, #4]
}
 800ac80:	e794      	b.n	800abac <HAL_I2C_Mem_Write+0xe0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800ac88:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac8a:	4641      	mov	r1, r8
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f7ff fa72 	bl	800a178 <I2C_WaitOnTXISFlagUntilTimeout>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f43f af6e 	beq.w	800ab76 <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800aca0:	2001      	movs	r0, #1
 800aca2:	e7c1      	b.n	800ac28 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aca4:	6993      	ldr	r3, [r2, #24]
 800aca6:	061b      	lsls	r3, r3, #24
 800aca8:	d4ad      	bmi.n	800ac06 <HAL_I2C_Mem_Write+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acaa:	f7fe fd49 	bl	8009740 <HAL_GetTick>
 800acae:	1b80      	subs	r0, r0, r6
 800acb0:	4580      	cmp	r8, r0
 800acb2:	d3be      	bcc.n	800ac32 <HAL_I2C_Mem_Write+0x166>
 800acb4:	f1b8 0f00 	cmp.w	r8, #0
 800acb8:	d0bb      	beq.n	800ac32 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acba:	6822      	ldr	r2, [r4, #0]
 800acbc:	e79d      	b.n	800abfa <HAL_I2C_Mem_Write+0x12e>
          hi2c->XferSize = hi2c->XferCount;
 800acbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800acc4:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800acc6:	6853      	ldr	r3, [r2, #4]
 800acc8:	402b      	ands	r3, r5
 800acca:	433b      	orrs	r3, r7
 800accc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800acd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800acd4:	6053      	str	r3, [r2, #4]
}
 800acd6:	e76f      	b.n	800abb8 <HAL_I2C_Mem_Write+0xec>
        return HAL_ERROR;
 800acd8:	2001      	movs	r0, #1
 800acda:	e7a5      	b.n	800ac28 <HAL_I2C_Mem_Write+0x15c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acdc:	4632      	mov	r2, r6
 800acde:	4641      	mov	r1, r8
 800ace0:	4620      	mov	r0, r4
 800ace2:	f7ff fb31 	bl	800a348 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d1f6      	bne.n	800acd8 <HAL_I2C_Mem_Write+0x20c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acea:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800acec:	4d0d      	ldr	r5, [pc, #52]	; (800ad24 <HAL_I2C_Mem_Write+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acee:	2120      	movs	r1, #32
 800acf0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	402a      	ands	r2, r5
 800acf6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800acf8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800acfc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad00:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800ad04:	e790      	b.n	800ac28 <HAL_I2C_Mem_Write+0x15c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad06:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad08:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad0a:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad0c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad0e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ad10:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    return HAL_ERROR;
 800ad18:	e7bf      	b.n	800ac9a <HAL_I2C_Mem_Write+0x1ce>
 800ad1a:	bf00      	nop
 800ad1c:	fc009800 	.word	0xfc009800
 800ad20:	fc009c00 	.word	0xfc009c00
 800ad24:	fe00e800 	.word	0xfe00e800
 800ad28:	01ff0000 	.word	0x01ff0000

0800ad2c <HAL_I2C_Mem_Read>:
{
 800ad2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad30:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad32:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800ad36:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800ad3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad3c:	2b20      	cmp	r3, #32
 800ad3e:	f040 80a6 	bne.w	800ae8e <HAL_I2C_Mem_Read+0x162>
    if ((pData == NULL) || (Size == 0U))
 800ad42:	9b08      	ldr	r3, [sp, #32]
 800ad44:	4604      	mov	r4, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 809b 	beq.w	800ae82 <HAL_I2C_Mem_Read+0x156>
 800ad4c:	f1ba 0f00 	cmp.w	sl, #0
 800ad50:	f000 8097 	beq.w	800ae82 <HAL_I2C_Mem_Read+0x156>
    __HAL_LOCK(hi2c);
 800ad54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	f000 8098 	beq.w	800ae8e <HAL_I2C_Mem_Read+0x162>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ad64:	460f      	mov	r7, r1
 800ad66:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800ad68:	f7fe fcea 	bl	8009740 <HAL_GetTick>
 800ad6c:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800ad6e:	e004      	b.n	800ad7a <HAL_I2C_Mem_Read+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad70:	f7fe fce6 	bl	8009740 <HAL_GetTick>
 800ad74:	1b80      	subs	r0, r0, r6
 800ad76:	2819      	cmp	r0, #25
 800ad78:	d874      	bhi.n	800ae64 <HAL_I2C_Mem_Read+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	6998      	ldr	r0, [r3, #24]
 800ad7e:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800ad82:	d1f5      	bne.n	800ad70 <HAL_I2C_Mem_Read+0x44>
    hi2c->pBuffPtr  = pData;
 800ad84:	9a08      	ldr	r2, [sp, #32]
 800ad86:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ad88:	2222      	movs	r2, #34	; 0x22
 800ad8a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad8e:	2240      	movs	r2, #64	; 0x40
 800ad90:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad94:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800ad96:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	4978      	ldr	r1, [pc, #480]	; (800af80 <HAL_I2C_Mem_Read+0x254>)
    hi2c->XferISR   = NULL;
 800ad9e:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800ada0:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ada2:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800ada6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800adaa:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800adae:	433a      	orrs	r2, r7
 800adb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adb4:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adb6:	4629      	mov	r1, r5
 800adb8:	4632      	mov	r2, r6
 800adba:	4620      	mov	r0, r4
 800adbc:	f7ff f9dc 	bl	800a178 <I2C_WaitOnTXISFlagUntilTimeout>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	f040 80a9 	bne.w	800af18 <HAL_I2C_Mem_Read+0x1ec>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800adc6:	f1b8 0f01 	cmp.w	r8, #1
 800adca:	f040 8099 	bne.w	800af00 <HAL_I2C_Mem_Read+0x1d4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800adce:	6821      	ldr	r1, [r4, #0]
 800add0:	fa5f f389 	uxtb.w	r3, r9
 800add4:	628b      	str	r3, [r1, #40]	; 0x28
 800add6:	1c68      	adds	r0, r5, #1
 800add8:	d15c      	bne.n	800ae94 <HAL_I2C_Mem_Read+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adda:	698b      	ldr	r3, [r1, #24]
 800addc:	065a      	lsls	r2, r3, #25
 800adde:	d5fc      	bpl.n	800adda <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ade0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	2bff      	cmp	r3, #255	; 0xff
 800ade6:	d87f      	bhi.n	800aee8 <HAL_I2C_Mem_Read+0x1bc>
      hi2c->XferSize = hi2c->XferCount;
 800ade8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800adea:	4865      	ldr	r0, [pc, #404]	; (800af80 <HAL_I2C_Mem_Read+0x254>)
      hi2c->XferSize = hi2c->XferCount;
 800adec:	b29b      	uxth	r3, r3
 800adee:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800adf0:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800adf2:	684b      	ldr	r3, [r1, #4]
 800adf4:	4003      	ands	r3, r0
 800adf6:	433b      	orrs	r3, r7
 800adf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ae00:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800ae04:	604b      	str	r3, [r1, #4]
 800ae06:	1c68      	adds	r0, r5, #1
 800ae08:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800af88 <HAL_I2C_Mem_Read+0x25c>
 800ae0c:	f8df a17c 	ldr.w	sl, [pc, #380]	; 800af8c <HAL_I2C_Mem_Read+0x260>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae10:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800ae14:	d11c      	bne.n	800ae50 <HAL_I2C_Mem_Read+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae16:	698b      	ldr	r3, [r1, #24]
 800ae18:	075a      	lsls	r2, r3, #29
 800ae1a:	d5fc      	bpl.n	800ae16 <HAL_I2C_Mem_Read+0xea>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ae1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae1e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800ae20:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800ae22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800ae24:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800ae26:	3b01      	subs	r3, #1
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800ae2c:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800ae2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800ae30:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800ae34:	3b01      	subs	r3, #1
 800ae36:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae38:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800ae3a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae3c:	b10a      	cbz	r2, 800ae42 <HAL_I2C_Mem_Read+0x116>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d03e      	beq.n	800aec0 <HAL_I2C_Mem_Read+0x194>
    } while (hi2c->XferCount > 0U);
 800ae42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d079      	beq.n	800af3e <HAL_I2C_Mem_Read+0x212>
 800ae4a:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae4c:	6821      	ldr	r1, [r4, #0]
 800ae4e:	d0e2      	beq.n	800ae16 <HAL_I2C_Mem_Read+0xea>
 800ae50:	698b      	ldr	r3, [r1, #24]
 800ae52:	075b      	lsls	r3, r3, #29
 800ae54:	d4e2      	bmi.n	800ae1c <HAL_I2C_Mem_Read+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae56:	f7fe fc73 	bl	8009740 <HAL_GetTick>
 800ae5a:	1b80      	subs	r0, r0, r6
 800ae5c:	4285      	cmp	r5, r0
 800ae5e:	d301      	bcc.n	800ae64 <HAL_I2C_Mem_Read+0x138>
 800ae60:	2d00      	cmp	r5, #0
 800ae62:	d1f2      	bne.n	800ae4a <HAL_I2C_Mem_Read+0x11e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae64:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae66:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae68:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800ae6c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae6e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ae70:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800ae74:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae78:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800ae7c:	2001      	movs	r0, #1
}
 800ae7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ae82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae86:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800ae88:	2001      	movs	r0, #1
}
 800ae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800ae8e:	2002      	movs	r0, #2
}
 800ae90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae94:	698b      	ldr	r3, [r1, #24]
 800ae96:	065b      	lsls	r3, r3, #25
 800ae98:	d4a2      	bmi.n	800ade0 <HAL_I2C_Mem_Read+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae9a:	f7fe fc51 	bl	8009740 <HAL_GetTick>
 800ae9e:	1b80      	subs	r0, r0, r6
 800aea0:	4285      	cmp	r5, r0
 800aea2:	d360      	bcc.n	800af66 <HAL_I2C_Mem_Read+0x23a>
 800aea4:	2d00      	cmp	r5, #0
 800aea6:	d05e      	beq.n	800af66 <HAL_I2C_Mem_Read+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aea8:	6821      	ldr	r1, [r4, #0]
 800aeaa:	e794      	b.n	800add6 <HAL_I2C_Mem_Read+0xaa>
 800aeac:	6993      	ldr	r3, [r2, #24]
 800aeae:	061b      	lsls	r3, r3, #24
 800aeb0:	d40c      	bmi.n	800aecc <HAL_I2C_Mem_Read+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeb2:	f7fe fc45 	bl	8009740 <HAL_GetTick>
 800aeb6:	1b80      	subs	r0, r0, r6
 800aeb8:	4285      	cmp	r5, r0
 800aeba:	d3d3      	bcc.n	800ae64 <HAL_I2C_Mem_Read+0x138>
 800aebc:	2d00      	cmp	r5, #0
 800aebe:	d0d1      	beq.n	800ae64 <HAL_I2C_Mem_Read+0x138>
 800aec0:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aec2:	6822      	ldr	r2, [r4, #0]
 800aec4:	d1f2      	bne.n	800aeac <HAL_I2C_Mem_Read+0x180>
 800aec6:	6993      	ldr	r3, [r2, #24]
 800aec8:	0619      	lsls	r1, r3, #24
 800aeca:	d5fc      	bpl.n	800aec6 <HAL_I2C_Mem_Read+0x19a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aecc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aece:	b29b      	uxth	r3, r3
 800aed0:	2bff      	cmp	r3, #255	; 0xff
 800aed2:	d926      	bls.n	800af22 <HAL_I2C_Mem_Read+0x1f6>
  MODIFY_REG(hi2c->Instance->CR2, \
 800aed4:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aed6:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800aeda:	ea03 0308 	and.w	r3, r3, r8
 800aede:	433b      	orrs	r3, r7
 800aee0:	ea43 030a 	orr.w	r3, r3, sl
 800aee4:	6053      	str	r3, [r2, #4]
}
 800aee6:	e7ac      	b.n	800ae42 <HAL_I2C_Mem_Read+0x116>
  MODIFY_REG(hi2c->Instance->CR2, \
 800aee8:	684b      	ldr	r3, [r1, #4]
 800aeea:	4a25      	ldr	r2, [pc, #148]	; (800af80 <HAL_I2C_Mem_Read+0x254>)
 800aeec:	4013      	ands	r3, r2
 800aeee:	433b      	orrs	r3, r7
 800aef0:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 800aef4:	f443 3392 	orr.w	r3, r3, #74752	; 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aef8:	22ff      	movs	r2, #255	; 0xff
 800aefa:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800aefc:	604b      	str	r3, [r1, #4]
}
 800aefe:	e782      	b.n	800ae06 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800af06:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af08:	4629      	mov	r1, r5
 800af0a:	4632      	mov	r2, r6
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7ff f933 	bl	800a178 <I2C_WaitOnTXISFlagUntilTimeout>
 800af12:	2800      	cmp	r0, #0
 800af14:	f43f af5b 	beq.w	800adce <HAL_I2C_Mem_Read+0xa2>
      __HAL_UNLOCK(hi2c);
 800af18:	2300      	movs	r3, #0
 800af1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800af1e:	2001      	movs	r0, #1
 800af20:	e7b3      	b.n	800ae8a <HAL_I2C_Mem_Read+0x15e>
          hi2c->XferSize = hi2c->XferCount;
 800af22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800af24:	b29b      	uxth	r3, r3
 800af26:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af28:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800af2a:	6853      	ldr	r3, [r2, #4]
 800af2c:	ea03 0308 	and.w	r3, r3, r8
 800af30:	433b      	orrs	r3, r7
 800af32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800af36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800af3a:	6053      	str	r3, [r2, #4]
}
 800af3c:	e781      	b.n	800ae42 <HAL_I2C_Mem_Read+0x116>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af3e:	4632      	mov	r2, r6
 800af40:	4629      	mov	r1, r5
 800af42:	4620      	mov	r0, r4
 800af44:	f7ff fa00 	bl	800a348 <I2C_WaitOnSTOPFlagUntilTimeout>
 800af48:	b9b8      	cbnz	r0, 800af7a <HAL_I2C_Mem_Read+0x24e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af4a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800af4c:	4d0d      	ldr	r5, [pc, #52]	; (800af84 <HAL_I2C_Mem_Read+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af4e:	2120      	movs	r1, #32
 800af50:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	402a      	ands	r2, r5
 800af56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800af58:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800af5c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800af60:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800af64:	e791      	b.n	800ae8a <HAL_I2C_Mem_Read+0x15e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af66:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af68:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af6a:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af6c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af6e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af70:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af74:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    return HAL_ERROR;
 800af78:	e7ce      	b.n	800af18 <HAL_I2C_Mem_Read+0x1ec>
      return HAL_ERROR;
 800af7a:	2001      	movs	r0, #1
 800af7c:	e785      	b.n	800ae8a <HAL_I2C_Mem_Read+0x15e>
 800af7e:	bf00      	nop
 800af80:	fc009800 	.word	0xfc009800
 800af84:	fe00e800 	.word	0xfe00e800
 800af88:	fc009c00 	.word	0xfc009c00
 800af8c:	01ff0000 	.word	0x01ff0000

0800af90 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800af90:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800af92:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800af94:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800af96:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800af98:	b103      	cbz	r3, 800af9c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800af9a:	4718      	bx	r3
}
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop

0800afa0 <HAL_I2C_SlaveTxCpltCallback>:
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop

0800afa4 <HAL_I2C_SlaveRxCpltCallback>:
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop

0800afa8 <I2C_ITSlaveSeqCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800afa8:	6801      	ldr	r1, [r0, #0]
{
 800afaa:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800afac:	680b      	ldr	r3, [r1, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800afae:	2200      	movs	r2, #0
 800afb0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800afb4:	045a      	lsls	r2, r3, #17
 800afb6:	d524      	bpl.n	800b002 <I2C_ITSlaveSeqCplt+0x5a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800afb8:	680b      	ldr	r3, [r1, #0]
 800afba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afbe:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800afc0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800afc4:	2b29      	cmp	r3, #41	; 0x29
 800afc6:	d026      	beq.n	800b016 <I2C_ITSlaveSeqCplt+0x6e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800afc8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800afcc:	2b2a      	cmp	r3, #42	; 0x2a
 800afce:	d000      	beq.n	800afd2 <I2C_ITSlaveSeqCplt+0x2a>
}
 800afd0:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800afd2:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800afd4:	2322      	movs	r3, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800afd6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800afda:	6303      	str	r3, [r0, #48]	; 0x30
  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800afdc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800afe0:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800afe2:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800afe6:	2a28      	cmp	r2, #40	; 0x28
 800afe8:	bf0c      	ite	eq
 800afea:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 800afee:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aff2:	4013      	ands	r3, r2
    __HAL_UNLOCK(hi2c);
 800aff4:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aff6:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800aff8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800affc:	f7ff ffd2 	bl	800afa4 <HAL_I2C_SlaveRxCpltCallback>
}
 800b000:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b002:	041b      	lsls	r3, r3, #16
 800b004:	d5dc      	bpl.n	800afc0 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b006:	680b      	ldr	r3, [r1, #0]
 800b008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b00c:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b00e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b012:	2b29      	cmp	r3, #41	; 0x29
 800b014:	d1d8      	bne.n	800afc8 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b016:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b018:	2321      	movs	r3, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b01a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b01e:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b020:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b024:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b026:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800b02a:	2a28      	cmp	r2, #40	; 0x28
 800b02c:	bf0c      	ite	eq
 800b02e:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 800b032:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b036:	4013      	ands	r3, r2
    __HAL_UNLOCK(hi2c);
 800b038:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b03a:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800b03c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b040:	f7ff ffae 	bl	800afa0 <HAL_I2C_SlaveTxCpltCallback>
}
 800b044:	bd08      	pop	{r3, pc}
 800b046:	bf00      	nop

0800b048 <HAL_I2C_AddrCallback>:
}
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop

0800b04c <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800b04c:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800b04e:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b050:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800b052:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b054:	69a2      	ldr	r2, [r4, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b056:	68a5      	ldr	r5, [r4, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b058:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b05a:	0c12      	lsrs	r2, r2, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b05c:	2b02      	cmp	r3, #2
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800b05e:	4684      	mov	ip, r0
    transferdirection = I2C_GET_DIR(hi2c);
 800b060:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b068:	d10f      	bne.n	800b08a <I2C_ITAddrCplt.part.0+0x3e>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b06a:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
 800b06e:	f013 0306 	ands.w	r3, r3, #6
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b072:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b076:	d106      	bne.n	800b086 <I2C_ITAddrCplt.part.0+0x3a>
        hi2c->AddrEventCount++;
 800b078:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800b07a:	3501      	adds	r5, #1
 800b07c:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b07e:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800b080:	2d02      	cmp	r5, #2
 800b082:	d00c      	beq.n	800b09e <I2C_ITAddrCplt.part.0+0x52>
}
 800b084:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b086:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800b090:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800b092:	2300      	movs	r3, #0
 800b094:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b098:	f7ff ffd6 	bl	800b048 <HAL_I2C_AddrCallback>
}
 800b09c:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b09e:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 800b0a0:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b0a2:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 800b0a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b0a8:	f7ff ffce 	bl	800b048 <HAL_I2C_AddrCallback>
}
 800b0ac:	bd70      	pop	{r4, r5, r6, pc}
 800b0ae:	bf00      	nop

0800b0b0 <HAL_I2C_ListenCpltCallback>:
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop

0800b0b4 <HAL_I2C_ErrorCallback>:
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop

0800b0b8 <HAL_I2C_AbortCpltCallback>:
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop

0800b0bc <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b0bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800b0be:	b508      	push	{r3, lr}
  if (hi2c->hdmatx != NULL)
 800b0c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b0c2:	b10b      	cbz	r3, 800b0c8 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800b0c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b0ca:	b10b      	cbz	r3, 800b0d0 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b0d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b0d4:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0d6:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b0da:	d005      	beq.n	800b0e8 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0dc:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b0de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b0e2:	f7ff ffe7 	bl	800b0b4 <HAL_I2C_ErrorCallback>
}
 800b0e6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800b0e8:	2220      	movs	r2, #32
 800b0ea:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b0ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0f2:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800b0f4:	f7ff ffe0 	bl	800b0b8 <HAL_I2C_AbortCpltCallback>
}
 800b0f8:	bd08      	pop	{r3, pc}
 800b0fa:	bf00      	nop

0800b0fc <I2C_ITError>:
{
 800b0fc:	b510      	push	{r4, lr}
 800b0fe:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b100:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b102:	484a      	ldr	r0, [pc, #296]	; (800b22c <I2C_ITError+0x130>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b104:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b108:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b10c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b10e:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800b110:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b112:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 800b114:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b116:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 800b118:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b11a:	d865      	bhi.n	800b1e8 <I2C_ITError+0xec>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b11c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b120:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b124:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b126:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800b12a:	2a28      	cmp	r2, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b12c:	f000 0028 	and.w	r0, r0, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b130:	bf18      	it	ne
 800b132:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b136:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b138:	bf08      	it	eq
 800b13a:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b13e:	2828      	cmp	r0, #40	; 0x28
 800b140:	bf18      	it	ne
 800b142:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b146:	400a      	ands	r2, r1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b148:	2028      	movs	r0, #40	; 0x28
 800b14a:	4939      	ldr	r1, [pc, #228]	; (800b230 <I2C_ITError+0x134>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b14c:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b14e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b152:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800b154:	6b22      	ldr	r2, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b156:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b158:	b118      	cbz	r0, 800b162 <I2C_ITError+0x66>
 800b15a:	2a11      	cmp	r2, #17
 800b15c:	d014      	beq.n	800b188 <I2C_ITError+0x8c>
 800b15e:	2a21      	cmp	r2, #33	; 0x21
 800b160:	d012      	beq.n	800b188 <I2C_ITError+0x8c>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b162:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b164:	b118      	cbz	r0, 800b16e <I2C_ITError+0x72>
 800b166:	2a12      	cmp	r2, #18
 800b168:	d024      	beq.n	800b1b4 <I2C_ITError+0xb8>
 800b16a:	2a22      	cmp	r2, #34	; 0x22
 800b16c:	d022      	beq.n	800b1b4 <I2C_ITError+0xb8>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b16e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b172:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800b174:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b178:	d04d      	beq.n	800b216 <I2C_ITError+0x11a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b17a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b17c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b180:	4620      	mov	r0, r4
 800b182:	f7ff ff97 	bl	800b0b4 <HAL_I2C_ErrorCallback>
}
 800b186:	bd10      	pop	{r4, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	0451      	lsls	r1, r2, #17
 800b18c:	d43e      	bmi.n	800b20c <I2C_ITError+0x110>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b18e:	f7fe fbc1 	bl	8009914 <HAL_DMA_GetState>
 800b192:	2801      	cmp	r0, #1
 800b194:	d0eb      	beq.n	800b16e <I2C_ITError+0x72>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b196:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b198:	4a26      	ldr	r2, [pc, #152]	; (800b234 <I2C_ITError+0x138>)
 800b19a:	6382      	str	r2, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b19c:	2300      	movs	r3, #0
 800b19e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b1a2:	f7fe fb91 	bl	80098c8 <HAL_DMA_Abort_IT>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d0ed      	beq.n	800b186 <I2C_ITError+0x8a>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b1aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 800b1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b1b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b1b2:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	0412      	lsls	r2, r2, #16
 800b1b8:	d503      	bpl.n	800b1c2 <I2C_ITError+0xc6>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1c0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b1c2:	f7fe fba7 	bl	8009914 <HAL_DMA_GetState>
 800b1c6:	2801      	cmp	r0, #1
 800b1c8:	d0d1      	beq.n	800b16e <I2C_ITError+0x72>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b1ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b1cc:	4a19      	ldr	r2, [pc, #100]	; (800b234 <I2C_ITError+0x138>)
 800b1ce:	6382      	str	r2, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b1d6:	f7fe fb77 	bl	80098c8 <HAL_DMA_Abort_IT>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d0d3      	beq.n	800b186 <I2C_ITError+0x8a>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b1de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800b1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b1e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b1e6:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b1e8:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b1ea:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b1ee:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 800b1f8:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b1fa:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b1fe:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 800b200:	bf1c      	itt	ne
 800b202:	2220      	movne	r2, #32
 800b204:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 800b208:	2100      	movs	r1, #0
 800b20a:	e7a2      	b.n	800b152 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	e7bb      	b.n	800b18e <I2C_ITError+0x92>
    hi2c->State = HAL_I2C_STATE_READY;
 800b216:	2220      	movs	r2, #32
 800b218:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b21c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800b220:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800b222:	4620      	mov	r0, r4
 800b224:	f7ff ff48 	bl	800b0b8 <HAL_I2C_AbortCpltCallback>
}
 800b228:	bd10      	pop	{r4, pc}
 800b22a:	bf00      	nop
 800b22c:	ffff0000 	.word	0xffff0000
 800b230:	0800b419 	.word	0x0800b419
 800b234:	0800b0bd 	.word	0x0800b0bd

0800b238 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b238:	6803      	ldr	r3, [r0, #0]
 800b23a:	699a      	ldr	r2, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b23c:	6819      	ldr	r1, [r3, #0]
{
 800b23e:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b240:	05d4      	lsls	r4, r2, #23
 800b242:	d52f      	bpl.n	800b2a4 <HAL_I2C_ER_IRQHandler+0x6c>
 800b244:	060c      	lsls	r4, r1, #24
 800b246:	d51f      	bpl.n	800b288 <HAL_I2C_ER_IRQHandler+0x50>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b248:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b24a:	f041 0101 	orr.w	r1, r1, #1
 800b24e:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b250:	f44f 7480 	mov.w	r4, #256	; 0x100
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b254:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b256:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b258:	d529      	bpl.n	800b2ae <HAL_I2C_ER_IRQHandler+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b25a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b25c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b260:	f041 0108 	orr.w	r1, r1, #8
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b264:	0592      	lsls	r2, r2, #22
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b266:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b268:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b26a:	d506      	bpl.n	800b27a <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b26c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b26e:	f44f 7100 	mov.w	r1, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b272:	f042 0202 	orr.w	r2, r2, #2
 800b276:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b278:	61d9      	str	r1, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800b27a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b27c:	f011 0f0b 	tst.w	r1, #11
 800b280:	d10c      	bne.n	800b29c <HAL_I2C_ER_IRQHandler+0x64>
}
 800b282:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b286:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b288:	0554      	lsls	r4, r2, #21
 800b28a:	d4f6      	bmi.n	800b27a <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b28c:	0594      	lsls	r4, r2, #22
 800b28e:	d5f4      	bpl.n	800b27a <HAL_I2C_ER_IRQHandler+0x42>
 800b290:	0609      	lsls	r1, r1, #24
 800b292:	d4eb      	bmi.n	800b26c <HAL_I2C_ER_IRQHandler+0x34>
  tmperror = hi2c->ErrorCode;
 800b294:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b296:	f011 0f0b 	tst.w	r1, #11
 800b29a:	d0f2      	beq.n	800b282 <HAL_I2C_ER_IRQHandler+0x4a>
}
 800b29c:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800b2a0:	f7ff bf2c 	b.w	800b0fc <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b2a4:	0554      	lsls	r4, r2, #21
 800b2a6:	d5f1      	bpl.n	800b28c <HAL_I2C_ER_IRQHandler+0x54>
 800b2a8:	0609      	lsls	r1, r1, #24
 800b2aa:	d4d6      	bmi.n	800b25a <HAL_I2C_ER_IRQHandler+0x22>
 800b2ac:	e7e5      	b.n	800b27a <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b2ae:	0592      	lsls	r2, r2, #22
 800b2b0:	d4dc      	bmi.n	800b26c <HAL_I2C_ER_IRQHandler+0x34>
 800b2b2:	e7e2      	b.n	800b27a <HAL_I2C_ER_IRQHandler+0x42>

0800b2b4 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800b2b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b2b6:	6803      	ldr	r3, [r0, #0]
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800b2b8:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b2ba:	6818      	ldr	r0, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b2bc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b2c0:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2c4:	2520      	movs	r5, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b2c6:	2a21      	cmp	r2, #33	; 0x21
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2c8:	61dd      	str	r5, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b2ca:	d04d      	beq.n	800b368 <I2C_ITSlaveCplt.constprop.0+0xb4>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b2cc:	2a22      	cmp	r2, #34	; 0x22
 800b2ce:	d072      	beq.n	800b3b6 <I2C_ITSlaveCplt.constprop.0+0x102>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b2d0:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800b2d2:	4d4f      	ldr	r5, [pc, #316]	; (800b410 <I2C_ITSlaveCplt.constprop.0+0x15c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b2d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2d8:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	402a      	ands	r2, r5
 800b2de:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b2e0:	699a      	ldr	r2, [r3, #24]
 800b2e2:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800b2e4:	bf44      	itt	mi
 800b2e6:	2200      	movmi	r2, #0
 800b2e8:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b2ea:	699a      	ldr	r2, [r3, #24]
 800b2ec:	07d6      	lsls	r6, r2, #31
 800b2ee:	d403      	bmi.n	800b2f8 <I2C_ITSlaveCplt.constprop.0+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b2f0:	699a      	ldr	r2, [r3, #24]
 800b2f2:	f042 0201 	orr.w	r2, r2, #1
 800b2f6:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b2f8:	0445      	lsls	r5, r0, #17
 800b2fa:	d53d      	bpl.n	800b378 <I2C_ITSlaveCplt.constprop.0+0xc4>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b2fc:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800b2fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b300:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b304:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800b306:	b118      	cbz	r0, 800b310 <I2C_ITSlaveCplt.constprop.0+0x5c>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b308:	6802      	ldr	r2, [r0, #0]
 800b30a:	6852      	ldr	r2, [r2, #4]
 800b30c:	b292      	uxth	r2, r2
 800b30e:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b310:	074a      	lsls	r2, r1, #29
 800b312:	d508      	bpl.n	800b326 <I2C_ITSlaveCplt.constprop.0+0x72>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b314:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800b31a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b31c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800b31e:	3301      	adds	r3, #1
 800b320:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b322:	2a00      	cmp	r2, #0
 800b324:	d140      	bne.n	800b3a8 <I2C_ITSlaveCplt.constprop.0+0xf4>
  if (hi2c->XferCount != 0U)
 800b326:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b328:	b29b      	uxth	r3, r3
 800b32a:	b11b      	cbz	r3, 800b334 <I2C_ITSlaveCplt.constprop.0+0x80>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b32c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b32e:	f043 0304 	orr.w	r3, r3, #4
 800b332:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b334:	2600      	movs	r6, #0
 800b336:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b33a:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800b33c:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b33e:	2d00      	cmp	r5, #0
 800b340:	d141      	bne.n	800b3c6 <I2C_ITSlaveCplt.constprop.0+0x112>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b344:	4e33      	ldr	r6, [pc, #204]	; (800b414 <I2C_ITSlaveCplt.constprop.0+0x160>)
 800b346:	42b3      	cmp	r3, r6
 800b348:	d120      	bne.n	800b38c <I2C_ITSlaveCplt.constprop.0+0xd8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b34a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b34e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b352:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 800b354:	f04f 0320 	mov.w	r3, #32
 800b358:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b35c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800b35e:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b360:	d053      	beq.n	800b40a <I2C_ITSlaveCplt.constprop.0+0x156>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b362:	f7ff fe1d 	bl	800afa0 <HAL_I2C_SlaveTxCpltCallback>
}
 800b366:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b368:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b36c:	681d      	ldr	r5, [r3, #0]
 800b36e:	f025 05fa 	bic.w	r5, r5, #250	; 0xfa
 800b372:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b374:	6322      	str	r2, [r4, #48]	; 0x30
 800b376:	e7ab      	b.n	800b2d0 <I2C_ITSlaveCplt.constprop.0+0x1c>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b378:	0400      	lsls	r0, r0, #16
 800b37a:	d5c9      	bpl.n	800b310 <I2C_ITSlaveCplt.constprop.0+0x5c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b37c:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800b37e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b384:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800b386:	2800      	cmp	r0, #0
 800b388:	d1be      	bne.n	800b308 <I2C_ITSlaveCplt.constprop.0+0x54>
 800b38a:	e7c1      	b.n	800b310 <I2C_ITSlaveCplt.constprop.0+0x5c>
    I2C_ITSlaveSeqCplt(hi2c);
 800b38c:	4620      	mov	r0, r4
 800b38e:	f7ff fe0b 	bl	800afa8 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800b392:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b394:	62e6      	str	r6, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 800b396:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800b39a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 800b39e:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800b3a0:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800b3a2:	f7ff fe85 	bl	800b0b0 <HAL_I2C_ListenCpltCallback>
}
 800b3a6:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 800b3a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b3aa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b3ac:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b3ae:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800b3b0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b3b2:	8563      	strh	r3, [r4, #42]	; 0x2a
 800b3b4:	e7b7      	b.n	800b326 <I2C_ITSlaveCplt.constprop.0+0x72>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b3b6:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b3ba:	681d      	ldr	r5, [r3, #0]
 800b3bc:	f025 05fc 	bic.w	r5, r5, #252	; 0xfc
 800b3c0:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b3c2:	6322      	str	r2, [r4, #48]	; 0x30
 800b3c4:	e784      	b.n	800b2d0 <I2C_ITSlaveCplt.constprop.0+0x1c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b3c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f7ff fe97 	bl	800b0fc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b3ce:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b3d2:	2b28      	cmp	r3, #40	; 0x28
 800b3d4:	d1c7      	bne.n	800b366 <I2C_ITSlaveCplt.constprop.0+0xb2>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b3d6:	6823      	ldr	r3, [r4, #0]
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3d8:	490e      	ldr	r1, [pc, #56]	; (800b414 <I2C_ITSlaveCplt.constprop.0+0x160>)
 800b3da:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 800b3dc:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3de:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b3e0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3e4:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b3e8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b3ec:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b3f0:	681a      	ldr	r2, [r3, #0]
  hi2c->XferISR = NULL;
 800b3f2:	6366      	str	r6, [r4, #52]	; 0x34
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3f4:	2110      	movs	r1, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b3f6:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 800b3fa:	601a      	str	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800b3fc:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3fe:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800b400:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800b404:	f7ff fe54 	bl	800b0b0 <HAL_I2C_ListenCpltCallback>
}
 800b408:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b40a:	f7ff fdcb 	bl	800afa4 <HAL_I2C_SlaveRxCpltCallback>
}
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	fe00e800 	.word	0xfe00e800
 800b414:	ffff0000 	.word	0xffff0000

0800b418 <I2C_Slave_ISR_IT>:
{
 800b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800b41a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800b41e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800b420:	2b01      	cmp	r3, #1
 800b422:	d078      	beq.n	800b516 <I2C_Slave_ISR_IT+0xfe>
 800b424:	4617      	mov	r7, r2
 800b426:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b428:	068a      	lsls	r2, r1, #26
 800b42a:	4604      	mov	r4, r0
 800b42c:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 800b42e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b432:	d501      	bpl.n	800b438 <I2C_Slave_ISR_IT+0x20>
 800b434:	06bb      	lsls	r3, r7, #26
 800b436:	d45a      	bmi.n	800b4ee <I2C_Slave_ISR_IT+0xd6>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b438:	06ea      	lsls	r2, r5, #27
 800b43a:	d515      	bpl.n	800b468 <I2C_Slave_ISR_IT+0x50>
 800b43c:	06fb      	lsls	r3, r7, #27
 800b43e:	d513      	bpl.n	800b468 <I2C_Slave_ISR_IT+0x50>
    if (hi2c->XferCount == 0U)
 800b440:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b442:	b29b      	uxth	r3, r3
 800b444:	2b00      	cmp	r3, #0
 800b446:	d157      	bne.n	800b4f8 <I2C_Slave_ISR_IT+0xe0>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b448:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b44c:	2a28      	cmp	r2, #40	; 0x28
 800b44e:	d07c      	beq.n	800b54a <I2C_Slave_ISR_IT+0x132>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b450:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b454:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	f04f 0210 	mov.w	r2, #16
 800b45c:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b45e:	d060      	beq.n	800b522 <I2C_Slave_ISR_IT+0x10a>
  __HAL_UNLOCK(hi2c);
 800b460:	2000      	movs	r0, #0
 800b462:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800b466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b468:	076a      	lsls	r2, r5, #29
 800b46a:	d40d      	bmi.n	800b488 <I2C_Slave_ISR_IT+0x70>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b46c:	0728      	lsls	r0, r5, #28
 800b46e:	d529      	bpl.n	800b4c4 <I2C_Slave_ISR_IT+0xac>
 800b470:	0739      	lsls	r1, r7, #28
 800b472:	d527      	bpl.n	800b4c4 <I2C_Slave_ISR_IT+0xac>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b474:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b478:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b47c:	2b28      	cmp	r3, #40	; 0x28
 800b47e:	d060      	beq.n	800b542 <I2C_Slave_ISR_IT+0x12a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	2208      	movs	r2, #8
 800b484:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b486:	e7eb      	b.n	800b460 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b488:	077b      	lsls	r3, r7, #29
 800b48a:	d5ef      	bpl.n	800b46c <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 800b48c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b48e:	b29b      	uxth	r3, r3
 800b490:	b16b      	cbz	r3, 800b4ae <I2C_Slave_ISR_IT+0x96>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b492:	6822      	ldr	r2, [r4, #0]
 800b494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b496:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b498:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b49a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b49c:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b49e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b4a0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b4a2:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b4a4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b4a6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800b4a8:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b4aa:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b4ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800b4ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1d4      	bne.n	800b460 <I2C_Slave_ISR_IT+0x48>
 800b4b6:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800b4ba:	d0d1      	beq.n	800b460 <I2C_Slave_ISR_IT+0x48>
        I2C_ITSlaveSeqCplt(hi2c);
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f7ff fd73 	bl	800afa8 <I2C_ITSlaveSeqCplt>
 800b4c2:	e7cd      	b.n	800b460 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b4c4:	07aa      	lsls	r2, r5, #30
 800b4c6:	d5cb      	bpl.n	800b460 <I2C_Slave_ISR_IT+0x48>
 800b4c8:	07bb      	lsls	r3, r7, #30
 800b4ca:	d5c9      	bpl.n	800b460 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 800b4cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	b31b      	cbz	r3, 800b51a <I2C_Slave_ISR_IT+0x102>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b4d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b4d4:	6823      	ldr	r3, [r4, #0]
 800b4d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4da:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b4dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b4de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b4e0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800b4e6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b4e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b4ea:	8522      	strh	r2, [r4, #40]	; 0x28
 800b4ec:	e7b8      	b.n	800b460 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b4ee:	f7ff fee1 	bl	800b2b4 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b4f2:	06ea      	lsls	r2, r5, #27
 800b4f4:	d5b8      	bpl.n	800b468 <I2C_Slave_ISR_IT+0x50>
 800b4f6:	e7a1      	b.n	800b43c <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	2210      	movs	r2, #16
 800b4fc:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b500:	f043 0304 	orr.w	r3, r3, #4
 800b504:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b506:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800b50a:	d1a9      	bne.n	800b460 <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b50c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b50e:	4620      	mov	r0, r4
 800b510:	f7ff fdf4 	bl	800b0fc <I2C_ITError>
 800b514:	e7a4      	b.n	800b460 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 800b516:	2002      	movs	r0, #2
}
 800b518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b51a:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800b51e:	d0cd      	beq.n	800b4bc <I2C_Slave_ISR_IT+0xa4>
 800b520:	e79e      	b.n	800b460 <I2C_Slave_ISR_IT+0x48>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b522:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800b526:	d09b      	beq.n	800b460 <I2C_Slave_ISR_IT+0x48>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b528:	699a      	ldr	r2, [r3, #24]
 800b52a:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800b52c:	bf44      	itt	mi
 800b52e:	2200      	movmi	r2, #0
 800b530:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b532:	699a      	ldr	r2, [r3, #24]
 800b534:	07d1      	lsls	r1, r2, #31
 800b536:	d4c1      	bmi.n	800b4bc <I2C_Slave_ISR_IT+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b538:	699a      	ldr	r2, [r3, #24]
 800b53a:	f042 0201 	orr.w	r2, r2, #1
 800b53e:	619a      	str	r2, [r3, #24]
 800b540:	e7bc      	b.n	800b4bc <I2C_Slave_ISR_IT+0xa4>
 800b542:	4620      	mov	r0, r4
 800b544:	f7ff fd82 	bl	800b04c <I2C_ITAddrCplt.part.0>
 800b548:	e78a      	b.n	800b460 <I2C_Slave_ISR_IT+0x48>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b54a:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800b54e:	f47f af7f 	bne.w	800b450 <I2C_Slave_ISR_IT+0x38>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b552:	4918      	ldr	r1, [pc, #96]	; (800b5b4 <I2C_Slave_ISR_IT+0x19c>)
 800b554:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 800b556:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b558:	076d      	lsls	r5, r5, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 800b55a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 800b55c:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 800b55e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b562:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b566:	d512      	bpl.n	800b58e <I2C_Slave_ISR_IT+0x176>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b568:	6822      	ldr	r2, [r4, #0]
 800b56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b56c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b56e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b570:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b572:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800b574:	3301      	adds	r3, #1
 800b576:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b578:	b14a      	cbz	r2, 800b58e <I2C_Slave_ISR_IT+0x176>
      hi2c->XferCount--;
 800b57a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b57c:	3b01      	subs	r3, #1
 800b57e:	b29b      	uxth	r3, r3
 800b580:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b582:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 800b584:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b586:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 800b58a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b58c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b58e:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b590:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b594:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b598:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b59a:	2010      	movs	r0, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b59c:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 800b5a0:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b5a2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5a4:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800b5a6:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800b5a8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800b5ac:	f7ff fd80 	bl	800b0b0 <HAL_I2C_ListenCpltCallback>
}
 800b5b0:	e756      	b.n	800b460 <I2C_Slave_ISR_IT+0x48>
 800b5b2:	bf00      	nop
 800b5b4:	ffff0000 	.word	0xffff0000

0800b5b8 <HAL_I2C_GetState>:
  return hi2c->State;
 800b5b8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop

0800b5c0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5c0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800b5c4:	2a20      	cmp	r2, #32
 800b5c6:	d123      	bne.n	800b610 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800b5c8:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5cc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800b5d0:	2a01      	cmp	r2, #1
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	d01c      	beq.n	800b610 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b5d6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b5d8:	2024      	movs	r0, #36	; 0x24
{
 800b5da:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b5dc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b5e0:	6810      	ldr	r0, [r2, #0]
 800b5e2:	f020 0001 	bic.w	r0, r0, #1
 800b5e6:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b5e8:	6810      	ldr	r0, [r2, #0]
 800b5ea:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800b5ee:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b5f0:	6810      	ldr	r0, [r2, #0]
 800b5f2:	4301      	orrs	r1, r0
 800b5f4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b5f6:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5f8:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 800b5fc:	f041 0101 	orr.w	r1, r1, #1
 800b600:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b602:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b606:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 800b60a:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b60c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800b610:	2002      	movs	r0, #2
}
 800b612:	4770      	bx	lr

0800b614 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b614:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800b618:	2a20      	cmp	r2, #32
 800b61a:	d122      	bne.n	800b662 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 800b61c:	b500      	push	{lr}
 800b61e:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b622:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800b626:	2a01      	cmp	r2, #1
 800b628:	4603      	mov	r3, r0
 800b62a:	d01c      	beq.n	800b666 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b62c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b62e:	2024      	movs	r0, #36	; 0x24
 800b630:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b634:	6810      	ldr	r0, [r2, #0]
 800b636:	f020 0001 	bic.w	r0, r0, #1
 800b63a:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b63c:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b63e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b642:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b646:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b648:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b64a:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800b64e:	f041 0101 	orr.w	r1, r1, #1
 800b652:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b654:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b658:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 800b65c:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b65e:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800b662:	2002      	movs	r0, #2
}
 800b664:	4770      	bx	lr
    return HAL_BUSY;
 800b666:	2002      	movs	r0, #2
}
 800b668:	f85d fb04 	ldr.w	pc, [sp], #4

0800b66c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b670:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b672:	2800      	cmp	r0, #0
 800b674:	d07f      	beq.n	800b776 <HAL_PCD_Init+0x10a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b676:	f890 32ad 	ldrb.w	r3, [r0, #685]	; 0x2ad
 800b67a:	4605      	mov	r5, r0
 800b67c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b680:	2b00      	cmp	r3, #0
 800b682:	d073      	beq.n	800b76c <HAL_PCD_Init+0x100>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b684:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b686:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 800b688:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
  __HAL_PCD_DISABLE(hpcd);
 800b68c:	6828      	ldr	r0, [r5, #0]
 800b68e:	f003 f9d5 	bl	800ea3c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b692:	f856 eb10 	ldr.w	lr, [r6], #16
 800b696:	46b4      	mov	ip, r6
 800b698:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b69c:	466c      	mov	r4, sp
 800b69e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b6a0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b6a4:	e884 0003 	stmia.w	r4, {r0, r1}
 800b6a8:	1d2f      	adds	r7, r5, #4
 800b6aa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b6ae:	4670      	mov	r0, lr
 800b6b0:	f003 f9b2 	bl	800ea18 <USB_CoreInit>
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	b138      	cbz	r0, 800b6c8 <HAL_PCD_Init+0x5c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800b6b8:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b6ba:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800b6bc:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b6be:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
}
 800b6c2:	b006      	add	sp, #24
 800b6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b6c8:	4601      	mov	r1, r0
 800b6ca:	6828      	ldr	r0, [r5, #0]
 800b6cc:	f003 f9c0 	bl	800ea50 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6d0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800b6d4:	f1bc 0f00 	cmp.w	ip, #0
 800b6d8:	d02a      	beq.n	800b730 <HAL_PCD_Init+0xc4>
 800b6da:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 800b6dc:	f04f 0801 	mov.w	r8, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b6e0:	4620      	mov	r0, r4
    hpcd->IN_ep[i].is_in = 1U;
 800b6e2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b6e6:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6ea:	f103 0e01 	add.w	lr, r3, #1
    hpcd->IN_ep[i].num = i;
 800b6ee:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b6f2:	8753      	strh	r3, [r2, #58]	; 0x3a
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6f4:	fa5f f38e 	uxtb.w	r3, lr
 800b6f8:	4563      	cmp	r3, ip
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b6fa:	e9c2 000f 	strd	r0, r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].is_in = 1U;
 800b6fe:	f882 802d 	strb.w	r8, [r2, #45]	; 0x2d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b702:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
    hpcd->IN_ep[i].xfer_len = 0U;
 800b706:	6450      	str	r0, [r2, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b708:	d3eb      	bcc.n	800b6e2 <HAL_PCD_Init+0x76>
    hpcd->OUT_ep[i].is_in = 0U;
 800b70a:	2200      	movs	r2, #0
 800b70c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800b710:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b714:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 800b716:	f883 416c 	strb.w	r4, [r3, #364]	; 0x16c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b71a:	b2cc      	uxtb	r4, r1
 800b71c:	4564      	cmp	r4, ip
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b71e:	e9c3 225f 	strd	r2, r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].is_in = 0U;
 800b722:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b726:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b72a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b72e:	d3ed      	bcc.n	800b70c <HAL_PCD_Init+0xa0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b730:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b732:	466c      	mov	r4, sp
 800b734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b736:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b73a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b73e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b742:	6828      	ldr	r0, [r5, #0]
 800b744:	f003 f986 	bl	800ea54 <USB_DevInit>
 800b748:	4604      	mov	r4, r0
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d1b4      	bne.n	800b6b8 <HAL_PCD_Init+0x4c>
  if (hpcd->Init.lpm_enable == 1U)
 800b74e:	69eb      	ldr	r3, [r5, #28]
  hpcd->USB_Address = 0U;
 800b750:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800b754:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800b756:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800b758:	f885 22ad 	strb.w	r2, [r5, #685]	; 0x2ad
  if (hpcd->Init.lpm_enable == 1U)
 800b75c:	d010      	beq.n	800b780 <HAL_PCD_Init+0x114>
  (void)USB_DevDisconnect(hpcd->Instance);
 800b75e:	6828      	ldr	r0, [r5, #0]
 800b760:	f003 ff62 	bl	800f628 <USB_DevDisconnect>
}
 800b764:	4620      	mov	r0, r4
 800b766:	b006      	add	sp, #24
 800b768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800b76c:	f880 22ac 	strb.w	r2, [r0, #684]	; 0x2ac
    HAL_PCD_MspInit(hpcd);
 800b770:	f005 f822 	bl	80107b8 <HAL_PCD_MspInit>
 800b774:	e786      	b.n	800b684 <HAL_PCD_Init+0x18>
    return HAL_ERROR;
 800b776:	2401      	movs	r4, #1
}
 800b778:	4620      	mov	r0, r4
 800b77a:	b006      	add	sp, #24
 800b77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b780:	4628      	mov	r0, r5
 800b782:	f000 ff13 	bl	800c5ac <HAL_PCDEx_ActivateLPM>
 800b786:	e7ea      	b.n	800b75e <HAL_PCD_Init+0xf2>

0800b788 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800b788:	f890 32ac 	ldrb.w	r3, [r0, #684]	; 0x2ac
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d00e      	beq.n	800b7ae <HAL_PCD_Start+0x26>
{
 800b790:	b510      	push	{r4, lr}
 800b792:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800b794:	2301      	movs	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800b796:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800b798:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 800b79c:	f003 f944 	bl	800ea28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b7a0:	6820      	ldr	r0, [r4, #0]
 800b7a2:	f003 ff35 	bl	800f610 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac

  return HAL_OK;
}
 800b7ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800b7ae:	2002      	movs	r0, #2
}
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop

0800b7b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	b083      	sub	sp, #12
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b7bc:	6800      	ldr	r0, [r0, #0]
 800b7be:	f003 ff3d 	bl	800f63c <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b7c2:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 800b7c6:	d12c      	bne.n	800b822 <HAL_PCD_IRQHandler+0x6e>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b7c8:	0543      	lsls	r3, r0, #21
 800b7ca:	f100 8180 	bmi.w	800bace <HAL_PCD_IRQHandler+0x31a>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b7ce:	0447      	lsls	r7, r0, #17
 800b7d0:	d41b      	bmi.n	800b80a <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b7d2:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 800b7d6:	f040 81f1 	bne.w	800bbbc <HAL_PCD_IRQHandler+0x408>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b7da:	04c6      	lsls	r6, r0, #19
 800b7dc:	f100 8089 	bmi.w	800b8f2 <HAL_PCD_IRQHandler+0x13e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b7e0:	0505      	lsls	r5, r0, #20
 800b7e2:	f100 833d 	bmi.w	800be60 <HAL_PCD_IRQHandler+0x6ac>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b7e6:	0601      	lsls	r1, r0, #24
 800b7e8:	f100 830d 	bmi.w	800be06 <HAL_PCD_IRQHandler+0x652>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b7ec:	0582      	lsls	r2, r0, #22
 800b7ee:	f100 841d 	bmi.w	800c02c <HAL_PCD_IRQHandler+0x878>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b7f2:	05c3      	lsls	r3, r0, #23
 800b7f4:	d512      	bpl.n	800b81c <HAL_PCD_IRQHandler+0x68>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b7f6:	6822      	ldr	r2, [r4, #0]
 800b7f8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b7fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b800:	041b      	lsls	r3, r3, #16
 800b802:	0c1b      	lsrs	r3, r3, #16
 800b804:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

    return;
 800b808:	e008      	b.n	800b81c <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b80a:	6822      	ldr	r2, [r4, #0]
 800b80c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b814:	041b      	lsls	r3, r3, #16
 800b816:	0c1b      	lsrs	r3, r3, #16
 800b818:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800b81c:	b003      	add	sp, #12
 800b81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b822:	6822      	ldr	r2, [r4, #0]
 800b824:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b828:	0419      	lsls	r1, r3, #16
 800b82a:	d5f7      	bpl.n	800b81c <HAL_PCD_IRQHandler+0x68>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b82c:	f8df b66c 	ldr.w	fp, [pc, #1644]	; 800be9c <HAL_PCD_IRQHandler+0x6e8>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b830:	4610      	mov	r0, r2
 800b832:	e010      	b.n	800b856 <HAL_PCD_IRQHandler+0xa2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b834:	f011 0110 	ands.w	r1, r1, #16
 800b838:	f000 80c2 	beq.w	800b9c0 <HAL_PCD_IRQHandler+0x20c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b83c:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b83e:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b842:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b844:	f040 80ed 	bne.w	800ba22 <HAL_PCD_IRQHandler+0x26e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b848:	041b      	lsls	r3, r3, #16
 800b84a:	f100 815f 	bmi.w	800bb0c <HAL_PCD_IRQHandler+0x358>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b84e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800b852:	041a      	lsls	r2, r3, #16
 800b854:	d5e2      	bpl.n	800b81c <HAL_PCD_IRQHandler+0x68>
    wIstr = hpcd->Instance->ISTR;
 800b856:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800b85a:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 800b85c:	f015 050f 	ands.w	r5, r5, #15
 800b860:	d0e8      	beq.n	800b834 <HAL_PCD_IRQHandler+0x80>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b862:	b22e      	sxth	r6, r5
 800b864:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800b868:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b86a:	041b      	lsls	r3, r3, #16
 800b86c:	d464      	bmi.n	800b938 <HAL_PCD_IRQHandler+0x184>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b86e:	063b      	lsls	r3, r7, #24
 800b870:	d5ed      	bpl.n	800b84e <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b872:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800b876:	b29b      	uxth	r3, r3
 800b878:	ea03 030b 	and.w	r3, r3, fp
 800b87c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b880:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 800b884:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800b888:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800b88c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800b890:	2b01      	cmp	r3, #1
 800b892:	f000 819f 	beq.w	800bbd4 <HAL_PCD_IRQHandler+0x420>
          if ((wEPVal & USB_EP_KIND) == 0U)
 800b896:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
 800b89a:	f040 81c8 	bne.w	800bc2e <HAL_PCD_IRQHandler+0x47a>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b89e:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 800b8a2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800b8a6:	f240 4302 	movw	r3, #1026	; 0x402
 800b8aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b8ae:	fa10 f282 	uxtah	r2, r0, r2
 800b8b2:	5ad2      	ldrh	r2, [r2, r3]
            if (ep->xfer_len > TxPctSize)
 800b8b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800b8b8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800b8bc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b8c0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800b8c2:	4296      	cmp	r6, r2
 800b8c4:	f240 80a6 	bls.w	800ba14 <HAL_PCD_IRQHandler+0x260>
              ep->xfer_len -= TxPctSize;
 800b8c8:	1ab6      	subs	r6, r6, r2
 800b8ca:	645e      	str	r6, [r3, #68]	; 0x44
            if (ep->xfer_len == 0U)
 800b8cc:	2e00      	cmp	r6, #0
 800b8ce:	f000 80a3 	beq.w	800ba18 <HAL_PCD_IRQHandler+0x264>
        ep = &hpcd->IN_ep[epindex];
 800b8d2:	3501      	adds	r5, #1
 800b8d4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b8d8:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
              ep->xfer_buff += TxPctSize;
 800b8dc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800b8de:	4415      	add	r5, r2
 800b8e0:	641d      	str	r5, [r3, #64]	; 0x40
              ep->xfer_count += TxPctSize;
 800b8e2:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800b8e4:	4415      	add	r5, r2
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b8e6:	3104      	adds	r1, #4
              ep->xfer_count += TxPctSize;
 800b8e8:	649d      	str	r5, [r3, #72]	; 0x48
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b8ea:	f003 fb5b 	bl	800efa4 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b8ee:	6820      	ldr	r0, [r4, #0]
 800b8f0:	e7ad      	b.n	800b84e <HAL_PCD_IRQHandler+0x9a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b8f2:	6822      	ldr	r2, [r4, #0]
 800b8f4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800b8f8:	f023 0304 	bic.w	r3, r3, #4
 800b8fc:	041b      	lsls	r3, r3, #16
 800b8fe:	0c1b      	lsrs	r3, r3, #16
 800b900:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b904:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800b908:	f023 0308 	bic.w	r3, r3, #8
 800b90c:	041b      	lsls	r3, r3, #16
 800b90e:	0c1b      	lsrs	r3, r3, #16
 800b910:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 800b914:	f894 32e4 	ldrb.w	r3, [r4, #740]	; 0x2e4
 800b918:	2b01      	cmp	r3, #1
 800b91a:	f000 8395 	beq.w	800c048 <HAL_PCD_IRQHandler+0x894>
    HAL_PCD_ResumeCallback(hpcd);
 800b91e:	4620      	mov	r0, r4
 800b920:	f004 ffdc 	bl	80108dc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b924:	6822      	ldr	r2, [r4, #0]
 800b926:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800b92a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b92e:	041b      	lsls	r3, r3, #16
 800b930:	0c1b      	lsrs	r3, r3, #16
 800b932:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 800b936:	e771      	b.n	800b81c <HAL_PCD_IRQHandler+0x68>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b938:	f830 2026 	ldrh.w	r2, [r0, r6, lsl #2]
 800b93c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b940:	4013      	ands	r3, r2
 800b942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 800b946:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b94a:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800b94e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800b952:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800b956:	f891 3178 	ldrb.w	r3, [r1, #376]	; 0x178
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f040 8083 	bne.w	800ba66 <HAL_PCD_IRQHandler+0x2b2>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b960:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b964:	f200 4206 	addw	r2, r0, #1030	; 0x406
 800b968:	fa12 f383 	uxtah	r3, r2, r3
 800b96c:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 800b970:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 800b974:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 800b978:	f1b9 0f00 	cmp.w	r9, #0
 800b97c:	f040 81e3 	bne.w	800bd46 <HAL_PCD_IRQHandler+0x592>
        ep->xfer_count += count;
 800b980:	eb08 0305 	add.w	r3, r8, r5
 800b984:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800b988:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800b98c:	444a      	add	r2, r9
 800b98e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        ep->xfer_buff += count;
 800b992:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800b996:	444a      	add	r2, r9
 800b998:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b99c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800b9a0:	b122      	cbz	r2, 800b9ac <HAL_PCD_IRQHandler+0x1f8>
 800b9a2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800b9a6:	454b      	cmp	r3, r9
 800b9a8:	f240 81af 	bls.w	800bd0a <HAL_PCD_IRQHandler+0x556>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b9ac:	44a8      	add	r8, r5
 800b9ae:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f898 116c 	ldrb.w	r1, [r8, #364]	; 0x16c
 800b9b8:	f004 ff56 	bl	8010868 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b9bc:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b9be:	e756      	b.n	800b86e <HAL_PCD_IRQHandler+0xba>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b9c0:	8803      	ldrh	r3, [r0, #0]
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	ea03 030b 	and.w	r3, r3, fp
 800b9c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9cc:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b9ce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800b9d2:	fa10 f283 	uxtah	r2, r0, r3
 800b9d6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800b9da:	f240 4302 	movw	r3, #1026	; 0x402
 800b9de:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b9e2:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b9e4:	5ad3      	ldrh	r3, [r2, r3]
        ep->xfer_buff += ep->xfer_count;
 800b9e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b9e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800b9ec:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b9ee:	64a3      	str	r3, [r4, #72]	; 0x48
        ep->xfer_buff += ep->xfer_count;
 800b9f0:	6422      	str	r2, [r4, #64]	; 0x40
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b9f2:	f004 ff43 	bl	801087c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b9f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b9fa:	b183      	cbz	r3, 800ba1e <HAL_PCD_IRQHandler+0x26a>
 800b9fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b9fe:	b973      	cbnz	r3, 800ba1e <HAL_PCD_IRQHandler+0x26a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ba00:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800ba04:	6820      	ldr	r0, [r4, #0]
 800ba06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba0a:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800ba0e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800ba12:	e71c      	b.n	800b84e <HAL_PCD_IRQHandler+0x9a>
 800ba14:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f004 ff2f 	bl	801087c <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ba1e:	6820      	ldr	r0, [r4, #0]
 800ba20:	e715      	b.n	800b84e <HAL_PCD_IRQHandler+0x9a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ba22:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800ba26:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 800ba2a:	f240 4306 	movw	r3, #1030	; 0x406
 800ba2e:	fa10 f282 	uxtah	r2, r0, r2
 800ba32:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ba36:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
 800ba3a:	5ad3      	ldrh	r3, [r2, r3]
 800ba3c:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 800ba40:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ba44:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ba48:	f003 fe0e 	bl	800f668 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	8811      	ldrh	r1, [r2, #0]
 800ba50:	f640 738f 	movw	r3, #3983	; 0xf8f
 800ba54:	400b      	ands	r3, r1
 800ba56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          HAL_PCD_SetupStageCallback(hpcd);
 800ba5a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ba5c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800ba5e:	f004 fefd 	bl	801085c <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ba62:	6820      	ldr	r0, [r4, #0]
 800ba64:	e6f3      	b.n	800b84e <HAL_PCD_IRQHandler+0x9a>
          if (ep->type == EP_TYPE_BULK)
 800ba66:	f891 316f 	ldrb.w	r3, [r1, #367]	; 0x16f
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	f000 8218 	beq.w	800bea0 <HAL_PCD_IRQHandler+0x6ec>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ba70:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 800ba74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba80:	041b      	lsls	r3, r3, #16
 800ba82:	0c1b      	lsrs	r3, r3, #16
 800ba84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba8c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ba90:	f891 316c 	ldrb.w	r3, [r1, #364]	; 0x16c
 800ba94:	b21a      	sxth	r2, r3
 800ba96:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 800ba9a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ba9e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800baa2:	f000 813c 	beq.w	800bd1e <HAL_PCD_IRQHandler+0x56a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800baa6:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 800baaa:	fa1c f282 	uxtah	r2, ip, r2
 800baae:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 800bab2:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800bab6:	f1b9 0f00 	cmp.w	r9, #0
 800baba:	f43f af61 	beq.w	800b980 <HAL_PCD_IRQHandler+0x1cc>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800babe:	f8b1 2174 	ldrh.w	r2, [r1, #372]	; 0x174
 800bac2:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 800bac6:	464b      	mov	r3, r9
 800bac8:	f003 fdce 	bl	800f668 <USB_ReadPMA>
 800bacc:	e758      	b.n	800b980 <HAL_PCD_IRQHandler+0x1cc>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800bace:	6822      	ldr	r2, [r4, #0]
 800bad0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800bad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bad8:	041b      	lsls	r3, r3, #16
 800bada:	0c1b      	lsrs	r3, r3, #16
 800badc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800bae0:	4620      	mov	r0, r4
 800bae2:	f004 fed9 	bl	8010898 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 800bae6:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 800baea:	2b01      	cmp	r3, #1
 800baec:	f43f ae96 	beq.w	800b81c <HAL_PCD_IRQHandler+0x68>
 800baf0:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800baf2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800baf4:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800baf8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bafc:	4629      	mov	r1, r5
 800bafe:	f003 fd81 	bl	800f604 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bb02:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
}
 800bb06:	b003      	add	sp, #12
 800bb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bb0c:	8802      	ldrh	r2, [r0, #0]
 800bb0e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bb12:	4013      	ands	r3, r2
 800bb14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb18:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bb1a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bb1e:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 800bb22:	f240 4306 	movw	r3, #1030	; 0x406
 800bb26:	fa10 f282 	uxtah	r2, r0, r2
 800bb2a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bb2e:	5ad3      	ldrh	r3, [r2, r3]
 800bb30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb34:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800bb38:	b193      	cbz	r3, 800bb60 <HAL_PCD_IRQHandler+0x3ac>
 800bb3a:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 800bb3e:	b179      	cbz	r1, 800bb60 <HAL_PCD_IRQHandler+0x3ac>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bb40:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 800bb44:	f003 fd90 	bl	800f668 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800bb48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb4c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800bb50:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bb52:	4620      	mov	r0, r4
 800bb54:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800bb56:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bb5a:	f004 fe85 	bl	8010868 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bb5e:	6820      	ldr	r0, [r4, #0]
 800bb60:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800bb62:	051f      	lsls	r7, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bb64:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800bb66:	f53f ae72 	bmi.w	800b84e <HAL_PCD_IRQHandler+0x9a>
 800bb6a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800bb6e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800bb72:	f43f ae6c 	beq.w	800b84e <HAL_PCD_IRQHandler+0x9a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800bb76:	f8d4 217c 	ldr.w	r2, [r4, #380]	; 0x17c
 800bb7a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bb7e:	2a3e      	cmp	r2, #62	; 0x3e
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	f200 4506 	addw	r5, r0, #1030	; 0x406
 800bb86:	f240 81c7 	bls.w	800bf18 <HAL_PCD_IRQHandler+0x764>
 800bb8a:	0951      	lsrs	r1, r2, #5
 800bb8c:	06d6      	lsls	r6, r2, #27
 800bb8e:	4ac2      	ldr	r2, [pc, #776]	; (800be98 <HAL_PCD_IRQHandler+0x6e4>)
 800bb90:	bf08      	it	eq
 800bb92:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800bb96:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800bb9a:	b292      	uxth	r2, r2
 800bb9c:	52ea      	strh	r2, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bb9e:	8803      	ldrh	r3, [r0, #0]
 800bba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bba8:	041b      	lsls	r3, r3, #16
 800bbaa:	0c1b      	lsrs	r3, r3, #16
 800bbac:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800bbb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbb8:	8003      	strh	r3, [r0, #0]
 800bbba:	e648      	b.n	800b84e <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800bbbc:	6822      	ldr	r2, [r4, #0]
 800bbbe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800bbc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bbc6:	041b      	lsls	r3, r3, #16
 800bbc8:	0c1b      	lsrs	r3, r3, #16
 800bbca:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800bbce:	b003      	add	sp, #12
 800bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 800bbd4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800bbd8:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800bbdc:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 800bbde:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
          ep->xfer_len = 0U;
 800bbe2:	646b      	str	r3, [r5, #68]	; 0x44
          if (ep->doublebuffer != 0U)
 800bbe4:	b1e2      	cbz	r2, 800bc20 <HAL_PCD_IRQHandler+0x46c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bbe6:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 800bbea:	f040 80fe 	bne.w	800bdea <HAL_PCD_IRQHandler+0x636>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bbee:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f040 822e 	bne.w	800c054 <HAL_PCD_IRQHandler+0x8a0>
 800bbf8:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800bbfc:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800bc00:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800bc04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc08:	b289      	uxth	r1, r1
 800bc0a:	5a5a      	ldrh	r2, [r3, r1]
 800bc0c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800bc10:	0412      	lsls	r2, r2, #16
 800bc12:	0c12      	lsrs	r2, r2, #16
 800bc14:	525a      	strh	r2, [r3, r1]
 800bc16:	5a5a      	ldrh	r2, [r3, r1]
 800bc18:	b292      	uxth	r2, r2
 800bc1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc1e:	525a      	strh	r2, [r3, r1]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc20:	4620      	mov	r0, r4
 800bc22:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 800bc26:	f004 fe29 	bl	801087c <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bc2a:	6820      	ldr	r0, [r4, #0]
 800bc2c:	e60f      	b.n	800b84e <HAL_PCD_IRQHandler+0x9a>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bc2e:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	f000 808f 	beq.w	800bd56 <HAL_PCD_IRQHandler+0x5a2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bc38:	f896 a02c 	ldrb.w	sl, [r6, #44]	; 0x2c
 800bc3c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bc40:	ea4f 0cca 	mov.w	ip, sl, lsl #3
 800bc44:	fa1c f383 	uxtah	r3, ip, r3
 800bc48:	f200 4902 	addw	r9, r0, #1026	; 0x402
    if (ep->xfer_len > TxPctSize)
 800bc4c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800bc50:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bc54:	f839 3003 	ldrh.w	r3, [r9, r3]
    if (ep->xfer_len > TxPctSize)
 800bc58:	6c51      	ldr	r1, [r2, #68]	; 0x44
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bc5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxPctSize)
 800bc5e:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bc60:	fa0f fe8a 	sxth.w	lr, sl
    if (ep->xfer_len > TxPctSize)
 800bc64:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800bc68:	f240 8169 	bls.w	800bf3e <HAL_PCD_IRQHandler+0x78a>
      ep->xfer_len -= TxPctSize;
 800bc6c:	1ac9      	subs	r1, r1, r3
 800bc6e:	6451      	str	r1, [r2, #68]	; 0x44
    if (ep->xfer_len == 0U)
 800bc70:	2900      	cmp	r1, #0
 800bc72:	f000 8166 	beq.w	800bf42 <HAL_PCD_IRQHandler+0x78e>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bc76:	0479      	lsls	r1, r7, #17
 800bc78:	d50d      	bpl.n	800bc96 <HAL_PCD_IRQHandler+0x4e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bc7a:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 800bc7e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800bc82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bc86:	0412      	lsls	r2, r2, #16
 800bc88:	0c12      	lsrs	r2, r2, #16
 800bc8a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800bc8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc92:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800bc96:	eb08 0705 	add.w	r7, r8, r5
 800bc9a:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 800bc9e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800bca2:	2a01      	cmp	r2, #1
 800bca4:	f040 808f 	bne.w	800bdc6 <HAL_PCD_IRQHandler+0x612>
        ep->xfer_buff += TxPctSize;
 800bca8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 800bcaa:	f8d7 c04c 	ldr.w	ip, [r7, #76]	; 0x4c
        ep->xfer_buff += TxPctSize;
 800bcae:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 800bcb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 800bcb2:	6439      	str	r1, [r7, #64]	; 0x40
        ep->xfer_count += TxPctSize;
 800bcb4:	441a      	add	r2, r3
 800bcb6:	64ba      	str	r2, [r7, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 800bcb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcba:	4594      	cmp	ip, r2
 800bcbc:	f0c0 82a9 	bcc.w	800c212 <HAL_PCD_IRQHandler+0xa5e>
          ep->xfer_len_db -= len;
 800bcc0:	ebac 0302 	sub.w	r3, ip, r2
 800bcc4:	64fb      	str	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bcc6:	b293      	uxth	r3, r2
 800bcc8:	f896 702d 	ldrb.w	r7, [r6, #45]	; 0x2d
 800bccc:	2f00      	cmp	r7, #0
 800bcce:	f040 8296 	bne.w	800c1fe <HAL_PCD_IRQHandler+0xa4a>
 800bcd2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800bcd6:	2a3e      	cmp	r2, #62	; 0x3e
 800bcd8:	fa19 f787 	uxtah	r7, r9, r7
 800bcdc:	f240 82c0 	bls.w	800c260 <HAL_PCD_IRQHandler+0xaac>
 800bce0:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 800bce4:	06d2      	lsls	r2, r2, #27
 800bce6:	4a6c      	ldr	r2, [pc, #432]	; (800be98 <HAL_PCD_IRQHandler+0x6e4>)
 800bce8:	bf08      	it	eq
 800bcea:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800bcee:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 800bcf2:	b292      	uxth	r2, r2
 800bcf4:	f827 203e 	strh.w	r2, [r7, lr, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800bcf8:	eb08 0205 	add.w	r2, r8, r5
 800bcfc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800bd00:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800bd02:	f003 fca1 	bl	800f648 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bd06:	6820      	ldr	r0, [r4, #0]
 800bd08:	e05d      	b.n	800bdc6 <HAL_PCD_IRQHandler+0x612>
        ep = &hpcd->OUT_ep[epindex];
 800bd0a:	2128      	movs	r1, #40	; 0x28
 800bd0c:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800bd10:	6820      	ldr	r0, [r4, #0]
 800bd12:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
 800bd16:	f003 f945 	bl	800efa4 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bd1a:	6820      	ldr	r0, [r4, #0]
 800bd1c:	e5a7      	b.n	800b86e <HAL_PCD_IRQHandler+0xba>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bd1e:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 800bd22:	fa1c f282 	uxtah	r2, ip, r2
 800bd26:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 800bd2a:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800bd2e:	f1b9 0f00 	cmp.w	r9, #0
 800bd32:	f43f ae25 	beq.w	800b980 <HAL_PCD_IRQHandler+0x1cc>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bd36:	f8b1 2176 	ldrh.w	r2, [r1, #374]	; 0x176
 800bd3a:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 800bd3e:	464b      	mov	r3, r9
 800bd40:	f003 fc92 	bl	800f668 <USB_ReadPMA>
 800bd44:	e61c      	b.n	800b980 <HAL_PCD_IRQHandler+0x1cc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800bd46:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800bd4a:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 800bd4e:	464b      	mov	r3, r9
 800bd50:	f003 fc8a 	bl	800f668 <USB_ReadPMA>
 800bd54:	e614      	b.n	800b980 <HAL_PCD_IRQHandler+0x1cc>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bd56:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
 800bd5a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800bd5e:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 800bd62:	fa1c f383 	uxtah	r3, ip, r3
 800bd66:	f200 4a06 	addw	sl, r0, #1030	; 0x406
    if (ep->xfer_len >= TxPctSize)
 800bd6a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800bd6e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bd72:	f83a 3003 	ldrh.w	r3, [sl, r3]
    if (ep->xfer_len >= TxPctSize)
 800bd76:	6c51      	ldr	r1, [r2, #68]	; 0x44
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bd78:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 800bd7c:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bd7e:	fa0f f98e 	sxth.w	r9, lr
    if (ep->xfer_len >= TxPctSize)
 800bd82:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800bd86:	f0c0 811e 	bcc.w	800bfc6 <HAL_PCD_IRQHandler+0x812>
      ep->xfer_len -= TxPctSize;
 800bd8a:	1ac9      	subs	r1, r1, r3
 800bd8c:	6451      	str	r1, [r2, #68]	; 0x44
    if (ep->xfer_len == 0U)
 800bd8e:	2900      	cmp	r1, #0
 800bd90:	f000 811b 	beq.w	800bfca <HAL_PCD_IRQHandler+0x816>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800bd94:	0479      	lsls	r1, r7, #17
 800bd96:	d40d      	bmi.n	800bdb4 <HAL_PCD_IRQHandler+0x600>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bd98:	f830 2029 	ldrh.w	r2, [r0, r9, lsl #2]
 800bd9c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800bda0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bda4:	0412      	lsls	r2, r2, #16
 800bda6:	0c12      	lsrs	r2, r2, #16
 800bda8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800bdac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bdb0:	f820 2029 	strh.w	r2, [r0, r9, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800bdb4:	eb08 0705 	add.w	r7, r8, r5
 800bdb8:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 800bdbc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800bdc0:	2a01      	cmp	r2, #1
 800bdc2:	f000 81ef 	beq.w	800c1a4 <HAL_PCD_IRQHandler+0x9f0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bdc6:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 800bdca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdd8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800bddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 800bde8:	e531      	b.n	800b84e <HAL_PCD_IRQHandler+0x9a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bdea:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 800bdee:	2a00      	cmp	r2, #0
 800bdf0:	f040 813e 	bne.w	800c070 <HAL_PCD_IRQHandler+0x8bc>
 800bdf4:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800bdf8:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800bdfc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800be00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be04:	e700      	b.n	800bc08 <HAL_PCD_IRQHandler+0x454>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800be06:	6822      	ldr	r2, [r4, #0]
 800be08:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800be0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be10:	041b      	lsls	r3, r3, #16
 800be12:	0c1b      	lsrs	r3, r3, #16
 800be14:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800be18:	f894 32e4 	ldrb.w	r3, [r4, #740]	; 0x2e4
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f040 808a 	bne.w	800bf36 <HAL_PCD_IRQHandler+0x782>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800be22:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800be26:	b29b      	uxth	r3, r3
 800be28:	f043 0304 	orr.w	r3, r3, #4
 800be2c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800be30:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800be34:	b29b      	uxth	r3, r3
      hpcd->LPM_State = LPM_L1;
 800be36:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800be38:	f043 0308 	orr.w	r3, r3, #8
 800be3c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 800be40:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800be44:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800be48:	f3c3 038d 	ubfx	r3, r3, #2, #14
 800be4c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800be50:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800be52:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
}
 800be56:	b003      	add	sp, #12
 800be58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800be5c:	f004 be46 	b.w	8010aec <HAL_PCDEx_LPM_Callback>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800be60:	6822      	ldr	r2, [r4, #0]
 800be62:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800be66:	b29b      	uxth	r3, r3
 800be68:	f043 0308 	orr.w	r3, r3, #8
 800be6c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800be70:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800be74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be78:	041b      	lsls	r3, r3, #16
 800be7a:	0c1b      	lsrs	r3, r3, #16
 800be7c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800be80:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800be84:	b29b      	uxth	r3, r3
 800be86:	f043 0304 	orr.w	r3, r3, #4
    HAL_PCD_SuspendCallback(hpcd);
 800be8a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800be8c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800be90:	f004 fd14 	bl	80108bc <HAL_PCD_SuspendCallback>
    return;
 800be94:	e4c2      	b.n	800b81c <HAL_PCD_IRQHandler+0x68>
 800be96:	bf00      	nop
 800be98:	ffff8000 	.word	0xffff8000
 800be9c:	ffff8f0f 	.word	0xffff8f0f
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bea0:	f417 4280 	ands.w	r2, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bea4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bea8:	f000 80f0 	beq.w	800c08c <HAL_PCD_IRQHandler+0x8d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800beac:	f200 4202 	addw	r2, r0, #1026	; 0x402
 800beb0:	fa12 f383 	uxtah	r3, r2, r3
 800beb4:	f891 c16c 	ldrb.w	ip, [r1, #364]	; 0x16c
    if (ep->xfer_len >= count)
 800beb8:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bebc:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 800bec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 800bec4:	429a      	cmp	r2, r3
 800bec6:	4699      	mov	r9, r3
 800bec8:	f0c0 8156 	bcc.w	800c178 <HAL_PCD_IRQHandler+0x9c4>
      ep->xfer_len -= count;
 800becc:	1ad2      	subs	r2, r2, r3
 800bece:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	f000 8153 	beq.w	800c17e <HAL_PCD_IRQHandler+0x9ca>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bed8:	0679      	lsls	r1, r7, #25
 800beda:	d50f      	bpl.n	800befc <HAL_PCD_IRQHandler+0x748>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bedc:	fa0f fc8c 	sxth.w	ip, ip
 800bee0:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800bee4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800bee8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800beec:	0412      	lsls	r2, r2, #16
 800beee:	0c12      	lsrs	r2, r2, #16
 800bef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bef4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800bef8:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 800befc:	b90b      	cbnz	r3, 800bf02 <HAL_PCD_IRQHandler+0x74e>
 800befe:	4699      	mov	r9, r3
 800bf00:	e53e      	b.n	800b980 <HAL_PCD_IRQHandler+0x1cc>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bf02:	eb08 0105 	add.w	r1, r8, r5
 800bf06:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800bf0a:	f8b1 2174 	ldrh.w	r2, [r1, #372]	; 0x174
 800bf0e:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 800bf12:	f003 fba9 	bl	800f668 <USB_ReadPMA>
 800bf16:	e533      	b.n	800b980 <HAL_PCD_IRQHandler+0x1cc>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800bf18:	2a00      	cmp	r2, #0
 800bf1a:	f040 80ec 	bne.w	800c0f6 <HAL_PCD_IRQHandler+0x942>
 800bf1e:	5aea      	ldrh	r2, [r5, r3]
 800bf20:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800bf24:	0412      	lsls	r2, r2, #16
 800bf26:	0c12      	lsrs	r2, r2, #16
 800bf28:	52ea      	strh	r2, [r5, r3]
 800bf2a:	5aea      	ldrh	r2, [r5, r3]
 800bf2c:	b292      	uxth	r2, r2
 800bf2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf32:	52ea      	strh	r2, [r5, r3]
 800bf34:	e633      	b.n	800bb9e <HAL_PCD_IRQHandler+0x3ea>
      HAL_PCD_SuspendCallback(hpcd);
 800bf36:	4620      	mov	r0, r4
 800bf38:	f004 fcc0 	bl	80108bc <HAL_PCD_SuspendCallback>
 800bf3c:	e46e      	b.n	800b81c <HAL_PCD_IRQHandler+0x68>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	6453      	str	r3, [r2, #68]	; 0x44
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf42:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f040 80dd 	bne.w	800c106 <HAL_PCD_IRQHandler+0x952>
 800bf4c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bf50:	fa19 f282 	uxtah	r2, r9, r2
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf54:	f20c 4106 	addw	r1, ip, #1030	; 0x406
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf58:	f832 303e 	ldrh.w	r3, [r2, lr, lsl #3]
 800bf5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf60:	041b      	lsls	r3, r3, #16
 800bf62:	0c1b      	lsrs	r3, r3, #16
 800bf64:	f822 303e 	strh.w	r3, [r2, lr, lsl #3]
 800bf68:	f832 303e 	ldrh.w	r3, [r2, lr, lsl #3]
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf72:	f822 303e 	strh.w	r3, [r2, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf76:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bf7a:	4401      	add	r1, r0
 800bf7c:	b292      	uxth	r2, r2
 800bf7e:	5a8b      	ldrh	r3, [r1, r2]
 800bf80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf84:	041b      	lsls	r3, r3, #16
 800bf86:	0c1b      	lsrs	r3, r3, #16
 800bf88:	528b      	strh	r3, [r1, r2]
 800bf8a:	5a8b      	ldrh	r3, [r1, r2]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf92:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bf94:	4620      	mov	r0, r4
 800bf96:	4651      	mov	r1, sl
 800bf98:	f004 fc70 	bl	801087c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bf9c:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bf9e:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bfa0:	f57f af11 	bpl.w	800bdc6 <HAL_PCD_IRQHandler+0x612>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bfa4:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 800bfa8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bfac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfb4:	041b      	lsls	r3, r3, #16
 800bfb6:	0c1b      	lsrs	r3, r3, #16
 800bfb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bfbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfc0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800bfc4:	e6ff      	b.n	800bdc6 <HAL_PCD_IRQHandler+0x612>
 800bfc6:	9b01      	ldr	r3, [sp, #4]
 800bfc8:	6453      	str	r3, [r2, #68]	; 0x44
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bfca:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f040 80ab 	bne.w	800c12a <HAL_PCD_IRQHandler+0x976>
 800bfd4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bfd8:	f20c 4102 	addw	r1, ip, #1026	; 0x402
 800bfdc:	b292      	uxth	r2, r2
 800bfde:	4401      	add	r1, r0
 800bfe0:	5a8b      	ldrh	r3, [r1, r2]
 800bfe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfe6:	041b      	lsls	r3, r3, #16
 800bfe8:	0c1b      	lsrs	r3, r3, #16
 800bfea:	528b      	strh	r3, [r1, r2]
 800bfec:	5a8b      	ldrh	r3, [r1, r2]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bff4:	528b      	strh	r3, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bff6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800bffa:	fa1a f282 	uxtah	r2, sl, r2
 800bffe:	f832 3039 	ldrh.w	r3, [r2, r9, lsl #3]
 800c002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c006:	041b      	lsls	r3, r3, #16
 800c008:	0c1b      	lsrs	r3, r3, #16
 800c00a:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
 800c00e:	f832 3039 	ldrh.w	r3, [r2, r9, lsl #3]
 800c012:	b29b      	uxth	r3, r3
 800c014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c018:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c01c:	4620      	mov	r0, r4
 800c01e:	4671      	mov	r1, lr
 800c020:	f004 fc2c 	bl	801087c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c024:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c026:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c028:	d5bc      	bpl.n	800bfa4 <HAL_PCD_IRQHandler+0x7f0>
 800c02a:	e6cc      	b.n	800bdc6 <HAL_PCD_IRQHandler+0x612>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c02c:	6822      	ldr	r2, [r4, #0]
 800c02e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800c032:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c036:	041b      	lsls	r3, r3, #16
 800c038:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_SOFCallback(hpcd);
 800c03a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c03c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800c040:	f004 fc26 	bl	8010890 <HAL_PCD_SOFCallback>
    return;
 800c044:	f7ff bbea 	b.w	800b81c <HAL_PCD_IRQHandler+0x68>
      hpcd->LPM_State = LPM_L0;
 800c048:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c04c:	4620      	mov	r0, r4
 800c04e:	f004 fd4d 	bl	8010aec <HAL_PCDEx_LPM_Callback>
 800c052:	e464      	b.n	800b91e <HAL_PCD_IRQHandler+0x16a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c054:	2b01      	cmp	r3, #1
 800c056:	f47f ade3 	bne.w	800bc20 <HAL_PCD_IRQHandler+0x46c>
 800c05a:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800c05e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800c062:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c066:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c06a:	b292      	uxth	r2, r2
 800c06c:	529f      	strh	r7, [r3, r2]
 800c06e:	e5d7      	b.n	800bc20 <HAL_PCD_IRQHandler+0x46c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c070:	2a01      	cmp	r2, #1
 800c072:	f47f add5 	bne.w	800bc20 <HAL_PCD_IRQHandler+0x46c>
 800c076:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 800c07a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800c07e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800c082:	f202 4202 	addw	r2, r2, #1026	; 0x402
 800c086:	b289      	uxth	r1, r1
 800c088:	5253      	strh	r3, [r2, r1]
 800c08a:	e5c9      	b.n	800bc20 <HAL_PCD_IRQHandler+0x46c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c08c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 800c090:	fa1c f383 	uxtah	r3, ip, r3
 800c094:	f891 c16c 	ldrb.w	ip, [r1, #364]	; 0x16c
    if (ep->xfer_len >= count)
 800c098:	f8d1 e184 	ldr.w	lr, [r1, #388]	; 0x184
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c09c:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 800c0a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 800c0a4:	459e      	cmp	lr, r3
 800c0a6:	4699      	mov	r9, r3
 800c0a8:	d351      	bcc.n	800c14e <HAL_PCD_IRQHandler+0x99a>
      ep->xfer_len -= count;
 800c0aa:	ebae 0203 	sub.w	r2, lr, r3
 800c0ae:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 800c0b2:	2a00      	cmp	r2, #0
 800c0b4:	d04d      	beq.n	800c152 <HAL_PCD_IRQHandler+0x99e>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c0b6:	067a      	lsls	r2, r7, #25
 800c0b8:	d40f      	bmi.n	800c0da <HAL_PCD_IRQHandler+0x926>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c0ba:	fa0f fc8c 	sxth.w	ip, ip
 800c0be:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800c0c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800c0c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c0ca:	0412      	lsls	r2, r2, #16
 800c0cc:	0c12      	lsrs	r2, r2, #16
 800c0ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c0d2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800c0d6:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f43f af0f 	beq.w	800befe <HAL_PCD_IRQHandler+0x74a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c0e0:	eb08 0105 	add.w	r1, r8, r5
 800c0e4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800c0e8:	f8b1 2176 	ldrh.w	r2, [r1, #374]	; 0x176
 800c0ec:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 800c0f0:	f003 faba 	bl	800f668 <USB_ReadPMA>
 800c0f4:	e444      	b.n	800b980 <HAL_PCD_IRQHandler+0x1cc>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c0f6:	0851      	lsrs	r1, r2, #1
 800c0f8:	07d2      	lsls	r2, r2, #31
 800c0fa:	bf48      	it	mi
 800c0fc:	3101      	addmi	r1, #1
 800c0fe:	028a      	lsls	r2, r1, #10
 800c100:	b292      	uxth	r2, r2
 800c102:	52ea      	strh	r2, [r5, r3]
 800c104:	e54b      	b.n	800bb9e <HAL_PCD_IRQHandler+0x3ea>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c106:	2b01      	cmp	r3, #1
 800c108:	f47f af44 	bne.w	800bf94 <HAL_PCD_IRQHandler+0x7e0>
 800c10c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800c110:	fa19 f383 	uxtah	r3, r9, r3
 800c114:	2100      	movs	r1, #0
 800c116:	f823 103e 	strh.w	r1, [r3, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c11a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800c11e:	f20c 4206 	addw	r2, ip, #1030	; 0x406
 800c122:	4402      	add	r2, r0
 800c124:	b29b      	uxth	r3, r3
 800c126:	52d1      	strh	r1, [r2, r3]
 800c128:	e734      	b.n	800bf94 <HAL_PCD_IRQHandler+0x7e0>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	f47f af76 	bne.w	800c01c <HAL_PCD_IRQHandler+0x868>
 800c130:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800c134:	f20c 4202 	addw	r2, ip, #1026	; 0x402
 800c138:	b29b      	uxth	r3, r3
 800c13a:	4402      	add	r2, r0
 800c13c:	2100      	movs	r1, #0
 800c13e:	52d1      	strh	r1, [r2, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c140:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800c144:	fa1a f383 	uxtah	r3, sl, r3
 800c148:	f823 1039 	strh.w	r1, [r3, r9, lsl #3]
 800c14c:	e766      	b.n	800c01c <HAL_PCD_IRQHandler+0x868>
 800c14e:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c152:	fa0f f18c 	sxth.w	r1, ip
 800c156:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800c15a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c15e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c162:	0412      	lsls	r2, r2, #16
 800c164:	0c12      	lsrs	r2, r2, #16
 800c166:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800c16a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c16e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c172:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 800c176:	e79e      	b.n	800c0b6 <HAL_PCD_IRQHandler+0x902>
 800c178:	2200      	movs	r2, #0
 800c17a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c17e:	fa0f f18c 	sxth.w	r1, ip
 800c182:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800c186:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c18a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c18e:	0412      	lsls	r2, r2, #16
 800c190:	0c12      	lsrs	r2, r2, #16
 800c192:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800c196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c19a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c19e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 800c1a2:	e699      	b.n	800bed8 <HAL_PCD_IRQHandler+0x724>
        ep->xfer_buff += TxPctSize;
 800c1a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 800c1a6:	f8d7 c04c 	ldr.w	ip, [r7, #76]	; 0x4c
        ep->xfer_buff += TxPctSize;
 800c1aa:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 800c1ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 800c1ae:	6439      	str	r1, [r7, #64]	; 0x40
        ep->xfer_count += TxPctSize;
 800c1b0:	441a      	add	r2, r3
 800c1b2:	64ba      	str	r2, [r7, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 800c1b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1b6:	4594      	cmp	ip, r2
 800c1b8:	d33b      	bcc.n	800c232 <HAL_PCD_IRQHandler+0xa7e>
          ep->xfer_len_db -= len;
 800c1ba:	ebac 0302 	sub.w	r3, ip, r2
 800c1be:	64fb      	str	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c1c0:	b293      	uxth	r3, r2
 800c1c2:	f896 702d 	ldrb.w	r7, [r6, #45]	; 0x2d
 800c1c6:	bb5f      	cbnz	r7, 800c220 <HAL_PCD_IRQHandler+0xa6c>
 800c1c8:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800c1cc:	2a3e      	cmp	r2, #62	; 0x3e
 800c1ce:	fa1a f787 	uxtah	r7, sl, r7
 800c1d2:	d956      	bls.n	800c282 <HAL_PCD_IRQHandler+0xace>
 800c1d4:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 800c1d8:	06d2      	lsls	r2, r2, #27
 800c1da:	4a3e      	ldr	r2, [pc, #248]	; (800c2d4 <HAL_PCD_IRQHandler+0xb20>)
 800c1dc:	bf08      	it	eq
 800c1de:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800c1e2:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 800c1e6:	b292      	uxth	r2, r2
 800c1e8:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c1ec:	eb08 0205 	add.w	r2, r8, r5
 800c1f0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800c1f4:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800c1f6:	f003 fa27 	bl	800f648 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c1fa:	6820      	ldr	r0, [r4, #0]
 800c1fc:	e5e3      	b.n	800bdc6 <HAL_PCD_IRQHandler+0x612>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c1fe:	2f01      	cmp	r7, #1
 800c200:	f47f ad7a 	bne.w	800bcf8 <HAL_PCD_IRQHandler+0x544>
 800c204:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800c208:	fa19 f282 	uxtah	r2, r9, r2
 800c20c:	f822 303e 	strh.w	r3, [r2, lr, lsl #3]
 800c210:	e572      	b.n	800bcf8 <HAL_PCD_IRQHandler+0x544>
        else if (ep->xfer_len_db == 0U)
 800c212:	f1bc 0f00 	cmp.w	ip, #0
 800c216:	d113      	bne.n	800c240 <HAL_PCD_IRQHandler+0xa8c>
          ep->xfer_fill_db = 0U;
 800c218:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
 800c21c:	461a      	mov	r2, r3
 800c21e:	e553      	b.n	800bcc8 <HAL_PCD_IRQHandler+0x514>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c220:	2f01      	cmp	r7, #1
 800c222:	d1e3      	bne.n	800c1ec <HAL_PCD_IRQHandler+0xa38>
 800c224:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800c228:	fa1a f282 	uxtah	r2, sl, r2
 800c22c:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
 800c230:	e7dc      	b.n	800c1ec <HAL_PCD_IRQHandler+0xa38>
        else if (ep->xfer_len_db == 0U)
 800c232:	f1bc 0f00 	cmp.w	ip, #0
 800c236:	d10b      	bne.n	800c250 <HAL_PCD_IRQHandler+0xa9c>
          ep->xfer_fill_db = 0U;
 800c238:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
 800c23c:	461a      	mov	r2, r3
 800c23e:	e7c0      	b.n	800c1c2 <HAL_PCD_IRQHandler+0xa0e>
          ep->xfer_fill_db = 0U;
 800c240:	2300      	movs	r3, #0
 800c242:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c246:	64fb      	str	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c248:	4662      	mov	r2, ip
 800c24a:	fa1f f38c 	uxth.w	r3, ip
 800c24e:	e53b      	b.n	800bcc8 <HAL_PCD_IRQHandler+0x514>
          ep->xfer_len_db = 0U;
 800c250:	2300      	movs	r3, #0
 800c252:	64fb      	str	r3, [r7, #76]	; 0x4c
          ep->xfer_fill_db = 0;
 800c254:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c258:	4662      	mov	r2, ip
 800c25a:	fa1f f38c 	uxth.w	r3, ip
 800c25e:	e7b0      	b.n	800c1c2 <HAL_PCD_IRQHandler+0xa0e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c260:	bb02      	cbnz	r2, 800c2a4 <HAL_PCD_IRQHandler+0xaf0>
 800c262:	f837 203e 	ldrh.w	r2, [r7, lr, lsl #3]
 800c266:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800c26a:	0412      	lsls	r2, r2, #16
 800c26c:	0c12      	lsrs	r2, r2, #16
 800c26e:	f827 203e 	strh.w	r2, [r7, lr, lsl #3]
 800c272:	f837 203e 	ldrh.w	r2, [r7, lr, lsl #3]
 800c276:	b292      	uxth	r2, r2
 800c278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c27c:	f827 203e 	strh.w	r2, [r7, lr, lsl #3]
 800c280:	e53a      	b.n	800bcf8 <HAL_PCD_IRQHandler+0x544>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c282:	b9da      	cbnz	r2, 800c2bc <HAL_PCD_IRQHandler+0xb08>
 800c284:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 800c288:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800c28c:	0412      	lsls	r2, r2, #16
 800c28e:	0c12      	lsrs	r2, r2, #16
 800c290:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 800c294:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 800c298:	b292      	uxth	r2, r2
 800c29a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c29e:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 800c2a2:	e7a3      	b.n	800c1ec <HAL_PCD_IRQHandler+0xa38>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c2a4:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 800c2a8:	07d2      	lsls	r2, r2, #31
 800c2aa:	bf48      	it	mi
 800c2ac:	f10c 0c01 	addmi.w	ip, ip, #1
 800c2b0:	ea4f 228c 	mov.w	r2, ip, lsl #10
 800c2b4:	b292      	uxth	r2, r2
 800c2b6:	f827 203e 	strh.w	r2, [r7, lr, lsl #3]
 800c2ba:	e51d      	b.n	800bcf8 <HAL_PCD_IRQHandler+0x544>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c2bc:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 800c2c0:	07d2      	lsls	r2, r2, #31
 800c2c2:	bf48      	it	mi
 800c2c4:	f10c 0c01 	addmi.w	ip, ip, #1
 800c2c8:	ea4f 228c 	mov.w	r2, ip, lsl #10
 800c2cc:	b292      	uxth	r2, r2
 800c2ce:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 800c2d2:	e78b      	b.n	800c1ec <HAL_PCD_IRQHandler+0xa38>
 800c2d4:	ffff8000 	.word	0xffff8000

0800c2d8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800c2d8:	f890 22ac 	ldrb.w	r2, [r0, #684]	; 0x2ac
 800c2dc:	2a01      	cmp	r2, #1
 800c2de:	d00d      	beq.n	800c2fc <HAL_PCD_SetAddress+0x24>
{
 800c2e0:	b510      	push	{r4, lr}
 800c2e2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800c2e4:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c2e6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800c2e8:	f884 22ac 	strb.w	r2, [r4, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800c2ec:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c2f0:	f003 f988 	bl	800f604 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 800c2fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800c2fc:	2002      	movs	r0, #2
}
 800c2fe:	4770      	bx	lr

0800c300 <HAL_PCD_EP_Open>:
{
 800c300:	b510      	push	{r4, lr}
 800c302:	f001 0e07 	and.w	lr, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800c306:	0609      	lsls	r1, r1, #24
{
 800c308:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800c30a:	d427      	bmi.n	800c35c <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c30c:	2028      	movs	r0, #40	; 0x28
 800c30e:	fb00 400e 	mla	r0, r0, lr, r4
 800c312:	f500 71b6 	add.w	r1, r0, #364	; 0x16c
    ep->is_in = 0U;
 800c316:	eb0e 008e 	add.w	r0, lr, lr, lsl #2
 800c31a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800c31e:	f04f 0c00 	mov.w	ip, #0
 800c322:	f880 c16d 	strb.w	ip, [r0, #365]	; 0x16d
  ep->maxpacket = ep_mps;
 800c326:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800c328:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c32a:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800c32e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800c330:	b10a      	cbz	r2, 800c336 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800c332:	f8a1 e00e 	strh.w	lr, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800c336:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800c338:	bf04      	itt	eq
 800c33a:	2300      	moveq	r3, #0
 800c33c:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800c33e:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 800c342:	2b01      	cmp	r3, #1
 800c344:	d01a      	beq.n	800c37c <HAL_PCD_EP_Open+0x7c>
 800c346:	2301      	movs	r3, #1
 800c348:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c34c:	6820      	ldr	r0, [r4, #0]
 800c34e:	f002 fb93 	bl	800ea78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c352:	2300      	movs	r3, #0
 800c354:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  return ret;
 800c358:	4618      	mov	r0, r3
}
 800c35a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c35c:	f10e 0c01 	add.w	ip, lr, #1
 800c360:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800c364:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ep->is_in = 1U;
 800c368:	4460      	add	r0, ip
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c36a:	f10c 0c04 	add.w	ip, ip, #4
 800c36e:	eb04 010c 	add.w	r1, r4, ip
    ep->is_in = 1U;
 800c372:	f04f 0c01 	mov.w	ip, #1
 800c376:	f880 c005 	strb.w	ip, [r0, #5]
 800c37a:	e7d4      	b.n	800c326 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800c37c:	2002      	movs	r0, #2
}
 800c37e:	bd10      	pop	{r4, pc}

0800c380 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800c380:	060b      	lsls	r3, r1, #24
{
 800c382:	b510      	push	{r4, lr}
 800c384:	f001 0207 	and.w	r2, r1, #7
 800c388:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800c38a:	d41b      	bmi.n	800c3c4 <HAL_PCD_EP_Close+0x44>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c38c:	2328      	movs	r3, #40	; 0x28
 800c38e:	fb03 4302 	mla	r3, r3, r2, r4
    ep->is_in = 0U;
 800c392:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c396:	f503 71b6 	add.w	r1, r3, #364	; 0x16c
    ep->is_in = 0U;
 800c39a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800c39e:	f04f 0c00 	mov.w	ip, #0
 800c3a2:	f880 c16d 	strb.w	ip, [r0, #365]	; 0x16d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c3a6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800c3a8:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d019      	beq.n	800c3e4 <HAL_PCD_EP_Close+0x64>
 800c3b0:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c3b2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c3b4:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c3b8:	f002 fd14 	bl	800ede4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c3bc:	2000      	movs	r0, #0
 800c3be:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 800c3c2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3c4:	1c53      	adds	r3, r2, #1
 800c3c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c3ca:	00db      	lsls	r3, r3, #3
    ep->is_in = 1U;
 800c3cc:	4418      	add	r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800c3d2:	f04f 0c01 	mov.w	ip, #1
 800c3d6:	f880 c005 	strb.w	ip, [r0, #5]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c3da:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800c3dc:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d1e5      	bne.n	800c3b0 <HAL_PCD_EP_Close+0x30>
 800c3e4:	2002      	movs	r0, #2
}
 800c3e6:	bd10      	pop	{r4, pc}

0800c3e8 <HAL_PCD_EP_Receive>:
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c3e8:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800c3ec:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 800c3f0:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 800c3f2:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep->xfer_count = 0U;
 800c3f6:	2400      	movs	r4, #0
  ep->xfer_buff = pBuf;
 800c3f8:	f8cc 2180 	str.w	r2, [ip, #384]	; 0x180
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c3fc:	2228      	movs	r2, #40	; 0x28
 800c3fe:	fb02 0201 	mla	r2, r2, r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 800c402:	f88c 116c 	strb.w	r1, [ip, #364]	; 0x16c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c406:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 0U;
 800c408:	f88c 416d 	strb.w	r4, [ip, #365]	; 0x16d
  ep->xfer_count = 0U;
 800c40c:	e9cc 3461 	strd	r3, r4, [ip, #388]	; 0x184
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c410:	f502 71b6 	add.w	r1, r2, #364	; 0x16c
 800c414:	f002 fdc6 	bl	800efa4 <USB_EPStartXfer>
}
 800c418:	4620      	mov	r0, r4
 800c41a:	bd10      	pop	{r4, pc}

0800c41c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c41c:	f001 0107 	and.w	r1, r1, #7
 800c420:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c424:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 800c428:	f8d0 0188 	ldr.w	r0, [r0, #392]	; 0x188
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop

0800c430 <HAL_PCD_EP_Transmit>:
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c430:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800c434:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800c438:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
{
 800c43c:	b510      	push	{r4, lr}
  ep->xfer_fill_db = 1U;
 800c43e:	f04f 0e01 	mov.w	lr, #1
  ep->xfer_len = len;
 800c442:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
  ep->xfer_len_db = len;
 800c446:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c44a:	eb01 030e 	add.w	r3, r1, lr
 800c44e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c452:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  ep->xfer_count = 0U;
 800c456:	2400      	movs	r4, #0
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c458:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 800c45a:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
  ep->num = ep_addr & EP_ADDR_MSK;
 800c45e:	f88c 102c 	strb.w	r1, [ip, #44]	; 0x2c
  ep->xfer_fill_db = 1U;
 800c462:	f88c e050 	strb.w	lr, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800c466:	f8cc 4048 	str.w	r4, [ip, #72]	; 0x48
  ep->is_in = 1U;
 800c46a:	f88c e02d 	strb.w	lr, [ip, #45]	; 0x2d
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c46e:	1d19      	adds	r1, r3, #4
 800c470:	f002 fd98 	bl	800efa4 <USB_EPStartXfer>
}
 800c474:	4620      	mov	r0, r4
 800c476:	bd10      	pop	{r4, pc}

0800c478 <HAL_PCD_EP_SetStall>:
{
 800c478:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c47a:	6843      	ldr	r3, [r0, #4]
 800c47c:	f001 0507 	and.w	r5, r1, #7
 800c480:	429d      	cmp	r5, r3
 800c482:	d831      	bhi.n	800c4e8 <HAL_PCD_EP_SetStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 800c484:	060b      	lsls	r3, r1, #24
 800c486:	4604      	mov	r4, r0
 800c488:	d41c      	bmi.n	800c4c4 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 800c48a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 800c48e:	2228      	movs	r2, #40	; 0x28
 800c490:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800c494:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800c498:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
  ep->is_stall = 1U;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c4a6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800c4a8:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d019      	beq.n	800c4e4 <HAL_PCD_EP_SetStall+0x6c>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c4b0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c4b2:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c4b6:	f003 f82d 	bl	800f514 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c4ba:	b1bd      	cbz	r5, 800c4ec <HAL_PCD_EP_SetStall+0x74>
  __HAL_UNLOCK(hpcd);
 800c4bc:	2000      	movs	r0, #0
 800c4be:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 800c4c2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4c4:	1c69      	adds	r1, r5, #1
 800c4c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c4ca:	00c9      	lsls	r1, r1, #3
    ep->is_in = 1U;
 800c4cc:	1843      	adds	r3, r0, r1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4ce:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800c4d0:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4d2:	4401      	add	r1, r0
    ep->is_in = 1U;
 800c4d4:	715a      	strb	r2, [r3, #5]
  ep->is_stall = 1U;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c4da:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800c4dc:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d1e5      	bne.n	800c4b0 <HAL_PCD_EP_SetStall+0x38>
 800c4e4:	2002      	movs	r0, #2
}
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c4e8:	2001      	movs	r0, #1
}
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800c4ec:	6820      	ldr	r0, [r4, #0]
 800c4ee:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
 800c4f2:	f003 f8a7 	bl	800f644 <USB_EP0_OutStart>
 800c4f6:	e7e1      	b.n	800c4bc <HAL_PCD_EP_SetStall+0x44>

0800c4f8 <HAL_PCD_EP_ClrStall>:
{
 800c4f8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c4fa:	6843      	ldr	r3, [r0, #4]
 800c4fc:	f001 020f 	and.w	r2, r1, #15
 800c500:	429a      	cmp	r2, r3
 800c502:	d833      	bhi.n	800c56c <HAL_PCD_EP_ClrStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 800c504:	060b      	lsls	r3, r1, #24
 800c506:	4604      	mov	r4, r0
 800c508:	f001 0207 	and.w	r2, r1, #7
 800c50c:	d41c      	bmi.n	800c548 <HAL_PCD_EP_ClrStall+0x50>
    ep->is_in = 0U;
 800c50e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c512:	2328      	movs	r3, #40	; 0x28
 800c514:	fb03 4302 	mla	r3, r3, r2, r4
    ep->is_in = 0U;
 800c518:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c51c:	f503 71b6 	add.w	r1, r3, #364	; 0x16c
    ep->is_in = 0U;
 800c520:	2500      	movs	r5, #0
 800c522:	f880 516d 	strb.w	r5, [r0, #365]	; 0x16d
  ep->is_stall = 0U;
 800c526:	2500      	movs	r5, #0
 800c528:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c52a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800c52c:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 800c530:	2b01      	cmp	r3, #1
 800c532:	d019      	beq.n	800c568 <HAL_PCD_EP_ClrStall+0x70>
 800c534:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c536:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c538:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c53c:	f003 f812 	bl	800f564 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c540:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
  return HAL_OK;
 800c544:	4628      	mov	r0, r5
}
 800c546:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c548:	1c53      	adds	r3, r2, #1
 800c54a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c54e:	00db      	lsls	r3, r3, #3
    ep->is_in = 1U;
 800c550:	4418      	add	r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c552:	3304      	adds	r3, #4
 800c554:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800c556:	2501      	movs	r5, #1
 800c558:	7145      	strb	r5, [r0, #5]
  ep->is_stall = 0U;
 800c55a:	2500      	movs	r5, #0
 800c55c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c55e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800c560:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 800c564:	2b01      	cmp	r3, #1
 800c566:	d1e5      	bne.n	800c534 <HAL_PCD_EP_ClrStall+0x3c>
 800c568:	2002      	movs	r0, #2
}
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c56c:	2001      	movs	r0, #1
}
 800c56e:	bd38      	pop	{r3, r4, r5, pc}

0800c570 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c570:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c574:	d00c      	beq.n	800c590 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c576:	f001 0107 	and.w	r1, r1, #7
 800c57a:	3101      	adds	r1, #1
 800c57c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c580:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c584:	3004      	adds	r0, #4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c586:	b95a      	cbnz	r2, 800c5a0 <HAL_PCDEx_PMAConfig+0x30>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c588:	80c3      	strh	r3, [r0, #6]
 800c58a:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800c58c:	2000      	movs	r0, #0
 800c58e:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800c590:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c594:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c598:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
  if (ep_kind == PCD_SNG_BUF)
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	d0f3      	beq.n	800c588 <HAL_PCDEx_PMAConfig+0x18>
    ep->doublebuffer = 1U;
 800c5a0:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c5a2:	6083      	str	r3, [r0, #8]
 800c5a4:	7302      	strb	r2, [r0, #12]
}
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop

0800c5ac <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800c5ac:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800c5ae:	2100      	movs	r1, #0
{
 800c5b0:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 800c5b2:	f880 12e4 	strb.w	r1, [r0, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c5b6:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
  hpcd->lpm_active = 1U;
 800c5ba:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 800c5c0:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c5c4:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c5c8:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800c5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	f043 0302 	orr.w	r3, r3, #2
}
 800c5d6:	4608      	mov	r0, r1
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c5d8:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
}
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop

0800c5e0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c5e0:	4b02      	ldr	r3, [pc, #8]	; (800c5ec <HAL_PWREx_GetVoltageRange+0xc>)
 800c5e2:	6818      	ldr	r0, [r3, #0]
#endif
}
 800c5e4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	40007000 	.word	0x40007000

0800c5f0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c5f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c5f4:	d00e      	beq.n	800c614 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c5f6:	4a1c      	ldr	r2, [pc, #112]	; (800c668 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800c5f8:	6813      	ldr	r3, [r2, #0]
 800c5fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c5fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c602:	d02d      	beq.n	800c660 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c604:	6813      	ldr	r3, [r2, #0]
 800c606:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c60a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c60e:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c610:	6013      	str	r3, [r2, #0]
 800c612:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c614:	4914      	ldr	r1, [pc, #80]	; (800c668 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800c616:	680b      	ldr	r3, [r1, #0]
 800c618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c61c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c620:	d01e      	beq.n	800c660 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c622:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c624:	4a11      	ldr	r2, [pc, #68]	; (800c66c <HAL_PWREx_ControlVoltageScaling+0x7c>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c626:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c62a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c62e:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c630:	6813      	ldr	r3, [r2, #0]
 800c632:	4a0f      	ldr	r2, [pc, #60]	; (800c670 <HAL_PWREx_ControlVoltageScaling+0x80>)
 800c634:	2032      	movs	r0, #50	; 0x32
 800c636:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c63a:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c63c:	fba2 2303 	umull	r2, r3, r2, r3
 800c640:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c642:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c644:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c648:	d506      	bpl.n	800c658 <HAL_PWREx_ControlVoltageScaling+0x68>
 800c64a:	e000      	b.n	800c64e <HAL_PWREx_ControlVoltageScaling+0x5e>
 800c64c:	b123      	cbz	r3, 800c658 <HAL_PWREx_ControlVoltageScaling+0x68>
 800c64e:	694a      	ldr	r2, [r1, #20]
 800c650:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 800c652:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c656:	d4f9      	bmi.n	800c64c <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c658:	4b03      	ldr	r3, [pc, #12]	; (800c668 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800c65a:	695b      	ldr	r3, [r3, #20]
 800c65c:	055b      	lsls	r3, r3, #21
 800c65e:	d401      	bmi.n	800c664 <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 800c660:	2000      	movs	r0, #0
 800c662:	4770      	bx	lr
        return HAL_TIMEOUT;
 800c664:	2003      	movs	r0, #3
}
 800c666:	4770      	bx	lr
 800c668:	40007000 	.word	0x40007000
 800c66c:	200000e4 	.word	0x200000e4
 800c670:	431bde83 	.word	0x431bde83

0800c674 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800c674:	4a02      	ldr	r2, [pc, #8]	; (800c680 <HAL_PWREx_EnableVddUSB+0xc>)
 800c676:	6853      	ldr	r3, [r2, #4]
 800c678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c67c:	6053      	str	r3, [r2, #4]
}
 800c67e:	4770      	bx	lr
 800c680:	40007000 	.word	0x40007000

0800c684 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c684:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c686:	4d20      	ldr	r5, [pc, #128]	; (800c708 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800c688:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800c68a:	00db      	lsls	r3, r3, #3
{
 800c68c:	b083      	sub	sp, #12
 800c68e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c690:	d51c      	bpl.n	800c6cc <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c692:	f7ff ffa5 	bl	800c5e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c696:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c69a:	d029      	beq.n	800c6f0 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c69c:	2c80      	cmp	r4, #128	; 0x80
 800c69e:	d813      	bhi.n	800c6c8 <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c6a0:	d02f      	beq.n	800c702 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c6a2:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 800c6a6:	fab4 f484 	clz	r4, r4
 800c6aa:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c6ac:	4917      	ldr	r1, [pc, #92]	; (800c70c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800c6ae:	680b      	ldr	r3, [r1, #0]
 800c6b0:	f023 0307 	bic.w	r3, r3, #7
 800c6b4:	4323      	orrs	r3, r4
 800c6b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c6b8:	6808      	ldr	r0, [r1, #0]
 800c6ba:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800c6be:	1b00      	subs	r0, r0, r4
 800c6c0:	bf18      	it	ne
 800c6c2:	2001      	movne	r0, #1
 800c6c4:	b003      	add	sp, #12
 800c6c6:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 800c6c8:	2403      	movs	r4, #3
 800c6ca:	e7ef      	b.n	800c6ac <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 800c6cc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800c6ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6d2:	65ab      	str	r3, [r5, #88]	; 0x58
 800c6d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800c6d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800c6de:	f7ff ff7f 	bl	800c5e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800c6e2:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c6e4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 800c6e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6ec:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c6ee:	d1d5      	bne.n	800c69c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 800c6f0:	2c80      	cmp	r4, #128	; 0x80
 800c6f2:	d904      	bls.n	800c6fe <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 800c6f4:	2ca0      	cmp	r4, #160	; 0xa0
 800c6f6:	bf8c      	ite	hi
 800c6f8:	2402      	movhi	r4, #2
 800c6fa:	2401      	movls	r4, #1
 800c6fc:	e7d6      	b.n	800c6ac <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c6fe:	2400      	movs	r4, #0
 800c700:	e7d4      	b.n	800c6ac <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800c702:	2402      	movs	r4, #2
 800c704:	e7d2      	b.n	800c6ac <RCC_SetFlashLatencyFromMSIRange+0x28>
 800c706:	bf00      	nop
 800c708:	40021000 	.word	0x40021000
 800c70c:	40022000 	.word	0x40022000

0800c710 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c710:	4a28      	ldr	r2, [pc, #160]	; (800c7b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c712:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c714:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c716:	f013 030c 	ands.w	r3, r3, #12
 800c71a:	d008      	beq.n	800c72e <HAL_RCC_GetSysClockFreq+0x1e>
 800c71c:	2b0c      	cmp	r3, #12
 800c71e:	d038      	beq.n	800c792 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c720:	2b04      	cmp	r3, #4
 800c722:	d034      	beq.n	800c78e <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c724:	2b08      	cmp	r3, #8
 800c726:	4824      	ldr	r0, [pc, #144]	; (800c7b8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800c728:	bf18      	it	ne
 800c72a:	2000      	movne	r0, #0
 800c72c:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c72e:	4a21      	ldr	r2, [pc, #132]	; (800c7b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c730:	6811      	ldr	r1, [r2, #0]
 800c732:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c734:	bf54      	ite	pl
 800c736:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c73a:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800c73c:	491f      	ldr	r1, [pc, #124]	; (800c7bc <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c73e:	bf54      	ite	pl
 800c740:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c744:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800c748:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c74c:	b303      	cbz	r3, 800c790 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c74e:	2b0c      	cmp	r3, #12
 800c750:	d12d      	bne.n	800c7ae <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c752:	4b18      	ldr	r3, [pc, #96]	; (800c7b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d025      	beq.n	800c7aa <HAL_RCC_GetSysClockFreq+0x9a>
 800c75e:	4a16      	ldr	r2, [pc, #88]	; (800c7b8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800c760:	2b03      	cmp	r3, #3
 800c762:	bf08      	it	eq
 800c764:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c766:	4b13      	ldr	r3, [pc, #76]	; (800c7b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c768:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c76a:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c772:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c776:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c77a:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c77c:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c780:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c782:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c784:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800c788:	fbb2 f0f3 	udiv	r0, r2, r3
 800c78c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800c78e:	480c      	ldr	r0, [pc, #48]	; (800c7c0 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 800c790:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c792:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c796:	2a01      	cmp	r2, #1
 800c798:	d0c9      	beq.n	800c72e <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c79a:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800c7a2:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c7a4:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800c7a8:	d1d9      	bne.n	800c75e <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 800c7aa:	4805      	ldr	r0, [pc, #20]	; (800c7c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800c7ac:	e7db      	b.n	800c766 <HAL_RCC_GetSysClockFreq+0x56>
 800c7ae:	2000      	movs	r0, #0
  return sysclockfreq;
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	40021000 	.word	0x40021000
 800c7b8:	007a1200 	.word	0x007a1200
 800c7bc:	08016db0 	.word	0x08016db0
 800c7c0:	00f42400 	.word	0x00f42400

0800c7c4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	f000 826a 	beq.w	800cc9e <HAL_RCC_OscConfig+0x4da>
{
 800c7ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7ce:	4aa5      	ldr	r2, [pc, #660]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c7d0:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7d2:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c7d4:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c7d6:	06df      	lsls	r7, r3, #27
{
 800c7d8:	b083      	sub	sp, #12
 800c7da:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7dc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c7e0:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c7e4:	d52e      	bpl.n	800c844 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c7e6:	2d00      	cmp	r5, #0
 800c7e8:	f000 8143 	beq.w	800ca72 <HAL_RCC_OscConfig+0x2ae>
 800c7ec:	2d0c      	cmp	r5, #12
 800c7ee:	f000 813d 	beq.w	800ca6c <HAL_RCC_OscConfig+0x2a8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c7f2:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 800c7f4:	4f9b      	ldr	r7, [pc, #620]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 81b3 	beq.w	800cb62 <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_MSI_ENABLE();
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	f043 0301 	orr.w	r3, r3, #1
 800c802:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800c804:	f7fc ff9c 	bl	8009740 <HAL_GetTick>
 800c808:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c80a:	e006      	b.n	800c81a <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c80c:	f7fc ff98 	bl	8009740 <HAL_GetTick>
 800c810:	eba0 0008 	sub.w	r0, r0, r8
 800c814:	2802      	cmp	r0, #2
 800c816:	f200 81b4 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	079a      	lsls	r2, r3, #30
 800c81e:	d5f5      	bpl.n	800c80c <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	f043 0308 	orr.w	r3, r3, #8
 800c826:	603b      	str	r3, [r7, #0]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c82c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c830:	4313      	orrs	r3, r2
 800c832:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a22      	ldr	r2, [r4, #32]
 800c838:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c83c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c840:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c842:	6823      	ldr	r3, [r4, #0]
 800c844:	07d8      	lsls	r0, r3, #31
 800c846:	f100 80e3 	bmi.w	800ca10 <HAL_RCC_OscConfig+0x24c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c84a:	0798      	lsls	r0, r3, #30
 800c84c:	d523      	bpl.n	800c896 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c84e:	2d04      	cmp	r5, #4
 800c850:	f000 8163 	beq.w	800cb1a <HAL_RCC_OscConfig+0x356>
 800c854:	2d0c      	cmp	r5, #12
 800c856:	f000 815d 	beq.w	800cb14 <HAL_RCC_OscConfig+0x350>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c85a:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800c85c:	4e81      	ldr	r6, [pc, #516]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 81f3 	beq.w	800cc4a <HAL_RCC_OscConfig+0x486>
        __HAL_RCC_HSI_ENABLE();
 800c864:	6833      	ldr	r3, [r6, #0]
 800c866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c86a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800c86c:	f7fc ff68 	bl	8009740 <HAL_GetTick>
 800c870:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c872:	e005      	b.n	800c880 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c874:	f7fc ff64 	bl	8009740 <HAL_GetTick>
 800c878:	1bc0      	subs	r0, r0, r7
 800c87a:	2802      	cmp	r0, #2
 800c87c:	f200 8181 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c880:	6833      	ldr	r3, [r6, #0]
 800c882:	055a      	lsls	r2, r3, #21
 800c884:	d5f6      	bpl.n	800c874 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c886:	6873      	ldr	r3, [r6, #4]
 800c888:	6922      	ldr	r2, [r4, #16]
 800c88a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c88e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c892:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	071e      	lsls	r6, r3, #28
 800c898:	d531      	bpl.n	800c8fe <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c89a:	6963      	ldr	r3, [r4, #20]
      uint32_t csr_temp = RCC->CSR;
 800c89c:	4e71      	ldr	r6, [pc, #452]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f000 814b 	beq.w	800cb3a <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 800c8a4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800c8a8:	69a2      	ldr	r2, [r4, #24]
 800c8aa:	f003 0110 	and.w	r1, r3, #16
 800c8ae:	428a      	cmp	r2, r1
 800c8b0:	d00f      	beq.n	800c8d2 <HAL_RCC_OscConfig+0x10e>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800c8b2:	f003 0103 	and.w	r1, r3, #3
 800c8b6:	2902      	cmp	r1, #2
 800c8b8:	f000 811c 	beq.w	800caf4 <HAL_RCC_OscConfig+0x330>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800c8bc:	07d8      	lsls	r0, r3, #31
 800c8be:	f100 8266 	bmi.w	800cd8e <HAL_RCC_OscConfig+0x5ca>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800c8c2:	4968      	ldr	r1, [pc, #416]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
 800c8c4:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 800c8c8:	f023 0310 	bic.w	r3, r3, #16
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 800c8d2:	4e64      	ldr	r6, [pc, #400]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
 800c8d4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800c8d8:	f043 0301 	orr.w	r3, r3, #1
 800c8dc:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800c8e0:	f7fc ff2e 	bl	8009740 <HAL_GetTick>
 800c8e4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c8e6:	e005      	b.n	800c8f4 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c8e8:	f7fc ff2a 	bl	8009740 <HAL_GetTick>
 800c8ec:	1bc0      	subs	r0, r0, r7
 800c8ee:	2811      	cmp	r0, #17
 800c8f0:	f200 8147 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c8f4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800c8f8:	079a      	lsls	r2, r3, #30
 800c8fa:	d5f5      	bpl.n	800c8e8 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	075f      	lsls	r7, r3, #29
 800c900:	d546      	bpl.n	800c990 <HAL_RCC_OscConfig+0x1cc>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c902:	4b58      	ldr	r3, [pc, #352]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
 800c904:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c906:	00d6      	lsls	r6, r2, #3
 800c908:	f100 819d 	bmi.w	800cc46 <HAL_RCC_OscConfig+0x482>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c90c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c90e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c912:	659a      	str	r2, [r3, #88]	; 0x58
 800c914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c91a:	9301      	str	r3, [sp, #4]
 800c91c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c91e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c920:	4f51      	ldr	r7, [pc, #324]	; (800ca68 <HAL_RCC_OscConfig+0x2a4>)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	05d8      	lsls	r0, r3, #23
 800c926:	f140 820d 	bpl.w	800cd44 <HAL_RCC_OscConfig+0x580>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	07d9      	lsls	r1, r3, #31
 800c92e:	f140 81b8 	bpl.w	800cca2 <HAL_RCC_OscConfig+0x4de>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800c932:	494c      	ldr	r1, [pc, #304]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
 800c934:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800c938:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800c93c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c940:	4302      	orrs	r2, r0
 800c942:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c946:	f013 0f04 	tst.w	r3, #4
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c94a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800c94e:	bf1e      	ittt	ne
 800c950:	f043 0304 	orrne.w	r3, r3, #4
 800c954:	f8c1 3090 	strne.w	r3, [r1, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c958:	f8d1 3090 	ldrne.w	r3, [r1, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c95c:	f043 0301 	orr.w	r3, r3, #1
 800c960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
      tickstart = HAL_GetTick();
 800c964:	f7fc feec 	bl	8009740 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c968:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800ca64 <HAL_RCC_OscConfig+0x2a0>
      tickstart = HAL_GetTick();
 800c96c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c96e:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c972:	e005      	b.n	800c980 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c974:	f7fc fee4 	bl	8009740 <HAL_GetTick>
 800c978:	1bc0      	subs	r0, r0, r7
 800c97a:	4548      	cmp	r0, r9
 800c97c:	f200 8101 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c980:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800c984:	079b      	lsls	r3, r3, #30
 800c986:	d5f5      	bpl.n	800c974 <HAL_RCC_OscConfig+0x1b0>
    if(pwrclkchanged == SET)
 800c988:	2e00      	cmp	r6, #0
 800c98a:	f040 81d5 	bne.w	800cd38 <HAL_RCC_OscConfig+0x574>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	0699      	lsls	r1, r3, #26
 800c992:	d518      	bpl.n	800c9c6 <HAL_RCC_OscConfig+0x202>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_RCC_HSI48_ENABLE();
 800c996:	4e33      	ldr	r6, [pc, #204]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 81ad 	beq.w	800ccf8 <HAL_RCC_OscConfig+0x534>
      __HAL_RCC_HSI48_ENABLE();
 800c99e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800c9a2:	f043 0301 	orr.w	r3, r3, #1
 800c9a6:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800c9aa:	f7fc fec9 	bl	8009740 <HAL_GetTick>
 800c9ae:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c9b0:	e005      	b.n	800c9be <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9b2:	f7fc fec5 	bl	8009740 <HAL_GetTick>
 800c9b6:	1bc0      	subs	r0, r0, r7
 800c9b8:	2802      	cmp	r0, #2
 800c9ba:	f200 80e2 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c9be:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800c9c2:	079a      	lsls	r2, r3, #30
 800c9c4:	d5f5      	bpl.n	800c9b2 <HAL_RCC_OscConfig+0x1ee>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c9c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 813a 	beq.w	800cc42 <HAL_RCC_OscConfig+0x47e>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	f000 80f0 	beq.w	800cbb4 <HAL_RCC_OscConfig+0x3f0>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c9d4:	2d0c      	cmp	r5, #12
 800c9d6:	f000 808d 	beq.w	800caf4 <HAL_RCC_OscConfig+0x330>
        __HAL_RCC_PLL_DISABLE();
 800c9da:	4c22      	ldr	r4, [pc, #136]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c9e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800c9e4:	f7fc feac 	bl	8009740 <HAL_GetTick>
 800c9e8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9ea:	e005      	b.n	800c9f8 <HAL_RCC_OscConfig+0x234>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9ec:	f7fc fea8 	bl	8009740 <HAL_GetTick>
 800c9f0:	1b40      	subs	r0, r0, r5
 800c9f2:	2802      	cmp	r0, #2
 800c9f4:	f200 80c5 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800c9fe:	d1f5      	bne.n	800c9ec <HAL_RCC_OscConfig+0x228>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800ca00:	68e2      	ldr	r2, [r4, #12]
 800ca02:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 800ca06:	f022 0203 	bic.w	r2, r2, #3
  return HAL_OK;
 800ca0a:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800ca0c:	60e2      	str	r2, [r4, #12]
 800ca0e:	e072      	b.n	800caf6 <HAL_RCC_OscConfig+0x332>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ca10:	2d08      	cmp	r5, #8
 800ca12:	d075      	beq.n	800cb00 <HAL_RCC_OscConfig+0x33c>
 800ca14:	2d0c      	cmp	r5, #12
 800ca16:	d071      	beq.n	800cafc <HAL_RCC_OscConfig+0x338>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca18:	6863      	ldr	r3, [r4, #4]
 800ca1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca1e:	f000 80b4 	beq.w	800cb8a <HAL_RCC_OscConfig+0x3c6>
 800ca22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca26:	f000 81a5 	beq.w	800cd74 <HAL_RCC_OscConfig+0x5b0>
 800ca2a:	4f0e      	ldr	r7, [pc, #56]	; (800ca64 <HAL_RCC_OscConfig+0x2a0>)
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ca32:	603a      	str	r2, [r7, #0]
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ca3a:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f040 80a9 	bne.w	800cb94 <HAL_RCC_OscConfig+0x3d0>
        tickstart = HAL_GetTick();
 800ca42:	f7fc fe7d 	bl	8009740 <HAL_GetTick>
 800ca46:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca48:	e006      	b.n	800ca58 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca4a:	f7fc fe79 	bl	8009740 <HAL_GetTick>
 800ca4e:	eba0 0008 	sub.w	r0, r0, r8
 800ca52:	2864      	cmp	r0, #100	; 0x64
 800ca54:	f200 8095 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	039b      	lsls	r3, r3, #14
 800ca5c:	d4f5      	bmi.n	800ca4a <HAL_RCC_OscConfig+0x286>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	e6f3      	b.n	800c84a <HAL_RCC_OscConfig+0x86>
 800ca62:	bf00      	nop
 800ca64:	40021000 	.word	0x40021000
 800ca68:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ca6c:	2e01      	cmp	r6, #1
 800ca6e:	f47f aec0 	bne.w	800c7f2 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ca72:	4bac      	ldr	r3, [pc, #688]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	0798      	lsls	r0, r3, #30
 800ca78:	d439      	bmi.n	800caee <HAL_RCC_OscConfig+0x32a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ca7a:	4baa      	ldr	r3, [pc, #680]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800ca7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	0711      	lsls	r1, r2, #28
 800ca82:	bf56      	itet	pl
 800ca84:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 800ca88:	681b      	ldrmi	r3, [r3, #0]
 800ca8a:	091b      	lsrpl	r3, r3, #4
 800ca8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca90:	4298      	cmp	r0, r3
 800ca92:	f200 80ec 	bhi.w	800cc6e <HAL_RCC_OscConfig+0x4aa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ca96:	4ba3      	ldr	r3, [pc, #652]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	f042 0208 	orr.w	r2, r2, #8
 800ca9e:	601a      	str	r2, [r3, #0]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800caa6:	4302      	orrs	r2, r0
 800caa8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	6a21      	ldr	r1, [r4, #32]
 800caae:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800cab2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cab6:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cab8:	2d00      	cmp	r5, #0
 800caba:	f000 8155 	beq.w	800cd68 <HAL_RCC_OscConfig+0x5a4>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cabe:	f7ff fe27 	bl	800c710 <HAL_RCC_GetSysClockFreq>
 800cac2:	4b98      	ldr	r3, [pc, #608]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800cac4:	4a98      	ldr	r2, [pc, #608]	; (800cd28 <HAL_RCC_OscConfig+0x564>)
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800cacc:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 800cace:	4a97      	ldr	r2, [pc, #604]	; (800cd2c <HAL_RCC_OscConfig+0x568>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cad0:	f003 031f 	and.w	r3, r3, #31
 800cad4:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800cad8:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cada:	4a95      	ldr	r2, [pc, #596]	; (800cd30 <HAL_RCC_OscConfig+0x56c>)
 800cadc:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800cade:	f7fc fded 	bl	80096bc <HAL_InitTick>
        if(status != HAL_OK)
 800cae2:	b940      	cbnz	r0, 800caf6 <HAL_RCC_OscConfig+0x332>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	07d8      	lsls	r0, r3, #31
 800cae8:	f57f aeaf 	bpl.w	800c84a <HAL_RCC_OscConfig+0x86>
 800caec:	e790      	b.n	800ca10 <HAL_RCC_OscConfig+0x24c>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800caee:	69e3      	ldr	r3, [r4, #28]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1c2      	bne.n	800ca7a <HAL_RCC_OscConfig+0x2b6>
    return HAL_ERROR;
 800caf4:	2001      	movs	r0, #1
}
 800caf6:	b003      	add	sp, #12
 800caf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cafc:	2e03      	cmp	r6, #3
 800cafe:	d18b      	bne.n	800ca18 <HAL_RCC_OscConfig+0x254>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb00:	4a88      	ldr	r2, [pc, #544]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800cb02:	6812      	ldr	r2, [r2, #0]
 800cb04:	0391      	lsls	r1, r2, #14
 800cb06:	f57f aea0 	bpl.w	800c84a <HAL_RCC_OscConfig+0x86>
 800cb0a:	6862      	ldr	r2, [r4, #4]
 800cb0c:	2a00      	cmp	r2, #0
 800cb0e:	f47f ae9c 	bne.w	800c84a <HAL_RCC_OscConfig+0x86>
 800cb12:	e7ef      	b.n	800caf4 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cb14:	2e02      	cmp	r6, #2
 800cb16:	f47f aea0 	bne.w	800c85a <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb1a:	4a82      	ldr	r2, [pc, #520]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800cb1c:	6812      	ldr	r2, [r2, #0]
 800cb1e:	0551      	lsls	r1, r2, #21
 800cb20:	d502      	bpl.n	800cb28 <HAL_RCC_OscConfig+0x364>
 800cb22:	68e2      	ldr	r2, [r4, #12]
 800cb24:	2a00      	cmp	r2, #0
 800cb26:	d0e5      	beq.n	800caf4 <HAL_RCC_OscConfig+0x330>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb28:	497e      	ldr	r1, [pc, #504]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800cb2a:	6920      	ldr	r0, [r4, #16]
 800cb2c:	684a      	ldr	r2, [r1, #4]
 800cb2e:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800cb32:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800cb36:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb38:	e6ad      	b.n	800c896 <HAL_RCC_OscConfig+0xd2>
      __HAL_RCC_LSI_DISABLE();
 800cb3a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800cb3e:	f023 0301 	bic.w	r3, r3, #1
 800cb42:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800cb46:	f7fc fdfb 	bl	8009740 <HAL_GetTick>
 800cb4a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb4c:	e004      	b.n	800cb58 <HAL_RCC_OscConfig+0x394>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb4e:	f7fc fdf7 	bl	8009740 <HAL_GetTick>
 800cb52:	1bc0      	subs	r0, r0, r7
 800cb54:	2811      	cmp	r0, #17
 800cb56:	d814      	bhi.n	800cb82 <HAL_RCC_OscConfig+0x3be>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb58:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800cb5c:	079b      	lsls	r3, r3, #30
 800cb5e:	d4f6      	bmi.n	800cb4e <HAL_RCC_OscConfig+0x38a>
 800cb60:	e6cc      	b.n	800c8fc <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_MSI_DISABLE();
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	f023 0301 	bic.w	r3, r3, #1
 800cb68:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800cb6a:	f7fc fde9 	bl	8009740 <HAL_GetTick>
 800cb6e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	079b      	lsls	r3, r3, #30
 800cb74:	d5b6      	bpl.n	800cae4 <HAL_RCC_OscConfig+0x320>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cb76:	f7fc fde3 	bl	8009740 <HAL_GetTick>
 800cb7a:	eba0 0008 	sub.w	r0, r0, r8
 800cb7e:	2802      	cmp	r0, #2
 800cb80:	d9f6      	bls.n	800cb70 <HAL_RCC_OscConfig+0x3ac>
            return HAL_TIMEOUT;
 800cb82:	2003      	movs	r0, #3
}
 800cb84:	b003      	add	sp, #12
 800cb86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb8a:	4a66      	ldr	r2, [pc, #408]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800cb8c:	6813      	ldr	r3, [r2, #0]
 800cb8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb92:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800cb94:	f7fc fdd4 	bl	8009740 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cb98:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800cd24 <HAL_RCC_OscConfig+0x560>
        tickstart = HAL_GetTick();
 800cb9c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cb9e:	e004      	b.n	800cbaa <HAL_RCC_OscConfig+0x3e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cba0:	f7fc fdce 	bl	8009740 <HAL_GetTick>
 800cba4:	1bc0      	subs	r0, r0, r7
 800cba6:	2864      	cmp	r0, #100	; 0x64
 800cba8:	d8eb      	bhi.n	800cb82 <HAL_RCC_OscConfig+0x3be>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cbaa:	f8d8 3000 	ldr.w	r3, [r8]
 800cbae:	039a      	lsls	r2, r3, #14
 800cbb0:	d5f6      	bpl.n	800cba0 <HAL_RCC_OscConfig+0x3dc>
 800cbb2:	e754      	b.n	800ca5e <HAL_RCC_OscConfig+0x29a>
      pll_config = RCC->PLLCFGR;
 800cbb4:	4e5b      	ldr	r6, [pc, #364]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
      pll_config = RCC->PLLCFGR;
 800cbb8:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbba:	f003 0103 	and.w	r1, r3, #3
 800cbbe:	4291      	cmp	r1, r2
 800cbc0:	f000 80fb 	beq.w	800cdba <HAL_RCC_OscConfig+0x5f6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cbc4:	2d0c      	cmp	r5, #12
 800cbc6:	d095      	beq.n	800caf4 <HAL_RCC_OscConfig+0x330>
            __HAL_RCC_PLL_DISABLE();
 800cbc8:	4d56      	ldr	r5, [pc, #344]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cbd0:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800cbd2:	f7fc fdb5 	bl	8009740 <HAL_GetTick>
 800cbd6:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cbd8:	e004      	b.n	800cbe4 <HAL_RCC_OscConfig+0x420>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbda:	f7fc fdb1 	bl	8009740 <HAL_GetTick>
 800cbde:	1b80      	subs	r0, r0, r6
 800cbe0:	2802      	cmp	r0, #2
 800cbe2:	d8ce      	bhi.n	800cb82 <HAL_RCC_OscConfig+0x3be>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	0198      	lsls	r0, r3, #6
 800cbe8:	d4f7      	bmi.n	800cbda <HAL_RCC_OscConfig+0x416>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cbea:	68e9      	ldr	r1, [r5, #12]
 800cbec:	4b51      	ldr	r3, [pc, #324]	; (800cd34 <HAL_RCC_OscConfig+0x570>)
 800cbee:	6b22      	ldr	r2, [r4, #48]	; 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cbf0:	4e4c      	ldr	r6, [pc, #304]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cbf2:	400b      	ands	r3, r1
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	e9d4 210d 	ldrd	r2, r1, [r4, #52]	; 0x34
 800cbfa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cbfe:	3a01      	subs	r2, #1
 800cc00:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800cc04:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 800cc08:	0849      	lsrs	r1, r1, #1
 800cc0a:	3901      	subs	r1, #1
 800cc0c:	0852      	lsrs	r2, r2, #1
 800cc0e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800cc12:	3a01      	subs	r2, #1
 800cc14:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800cc18:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc20:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cc22:	68eb      	ldr	r3, [r5, #12]
 800cc24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc28:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800cc2a:	f7fc fd89 	bl	8009740 <HAL_GetTick>
 800cc2e:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc30:	e004      	b.n	800cc3c <HAL_RCC_OscConfig+0x478>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc32:	f7fc fd85 	bl	8009740 <HAL_GetTick>
 800cc36:	1b00      	subs	r0, r0, r4
 800cc38:	2802      	cmp	r0, #2
 800cc3a:	d8a2      	bhi.n	800cb82 <HAL_RCC_OscConfig+0x3be>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc3c:	6833      	ldr	r3, [r6, #0]
 800cc3e:	0199      	lsls	r1, r3, #6
 800cc40:	d5f7      	bpl.n	800cc32 <HAL_RCC_OscConfig+0x46e>
  return HAL_OK;
 800cc42:	2000      	movs	r0, #0
 800cc44:	e757      	b.n	800caf6 <HAL_RCC_OscConfig+0x332>
    FlagStatus       pwrclkchanged = RESET;
 800cc46:	2600      	movs	r6, #0
 800cc48:	e66a      	b.n	800c920 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800cc4a:	6833      	ldr	r3, [r6, #0]
 800cc4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc50:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800cc52:	f7fc fd75 	bl	8009740 <HAL_GetTick>
 800cc56:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cc58:	e004      	b.n	800cc64 <HAL_RCC_OscConfig+0x4a0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc5a:	f7fc fd71 	bl	8009740 <HAL_GetTick>
 800cc5e:	1bc0      	subs	r0, r0, r7
 800cc60:	2802      	cmp	r0, #2
 800cc62:	d88e      	bhi.n	800cb82 <HAL_RCC_OscConfig+0x3be>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cc64:	6833      	ldr	r3, [r6, #0]
 800cc66:	055b      	lsls	r3, r3, #21
 800cc68:	d4f7      	bmi.n	800cc5a <HAL_RCC_OscConfig+0x496>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	e613      	b.n	800c896 <HAL_RCC_OscConfig+0xd2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cc6e:	f7ff fd09 	bl	800c684 <RCC_SetFlashLatencyFromMSIRange>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	f47f af3e 	bne.w	800caf4 <HAL_RCC_OscConfig+0x330>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cc78:	4b2a      	ldr	r3, [pc, #168]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	f042 0208 	orr.w	r2, r2, #8
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cc86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800cc8a:	430a      	orrs	r2, r1
 800cc8c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cc8e:	685a      	ldr	r2, [r3, #4]
 800cc90:	6a21      	ldr	r1, [r4, #32]
 800cc92:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800cc96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cc9a:	605a      	str	r2, [r3, #4]
 800cc9c:	e70f      	b.n	800cabe <HAL_RCC_OscConfig+0x2fa>
    return HAL_ERROR;
 800cc9e:	2001      	movs	r0, #1
}
 800cca0:	4770      	bx	lr
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cca2:	4f20      	ldr	r7, [pc, #128]	; (800cd24 <HAL_RCC_OscConfig+0x560>)
 800cca4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cca8:	f022 0201 	bic.w	r2, r2, #1
 800ccac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ccb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ccb4:	f022 0204 	bic.w	r2, r2, #4
 800ccb8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f47f ae51 	bne.w	800c964 <HAL_RCC_OscConfig+0x1a0>
      tickstart = HAL_GetTick();
 800ccc2:	f7fc fd3d 	bl	8009740 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccc6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800ccca:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cccc:	e006      	b.n	800ccdc <HAL_RCC_OscConfig+0x518>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccce:	f7fc fd37 	bl	8009740 <HAL_GetTick>
 800ccd2:	eba0 0008 	sub.w	r0, r0, r8
 800ccd6:	4548      	cmp	r0, r9
 800ccd8:	f63f af53 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ccdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cce0:	0798      	lsls	r0, r3, #30
 800cce2:	d4f4      	bmi.n	800ccce <HAL_RCC_OscConfig+0x50a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800cce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if(pwrclkchanged == SET)
 800ccf0:	2e00      	cmp	r6, #0
 800ccf2:	f43f ae4c 	beq.w	800c98e <HAL_RCC_OscConfig+0x1ca>
 800ccf6:	e01f      	b.n	800cd38 <HAL_RCC_OscConfig+0x574>
      __HAL_RCC_HSI48_DISABLE();
 800ccf8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800ccfc:	f023 0301 	bic.w	r3, r3, #1
 800cd00:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800cd04:	f7fc fd1c 	bl	8009740 <HAL_GetTick>
 800cd08:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cd0a:	e005      	b.n	800cd18 <HAL_RCC_OscConfig+0x554>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd0c:	f7fc fd18 	bl	8009740 <HAL_GetTick>
 800cd10:	1bc0      	subs	r0, r0, r7
 800cd12:	2802      	cmp	r0, #2
 800cd14:	f63f af35 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cd18:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800cd1c:	079b      	lsls	r3, r3, #30
 800cd1e:	d4f5      	bmi.n	800cd0c <HAL_RCC_OscConfig+0x548>
 800cd20:	e651      	b.n	800c9c6 <HAL_RCC_OscConfig+0x202>
 800cd22:	bf00      	nop
 800cd24:	40021000 	.word	0x40021000
 800cd28:	08016d98 	.word	0x08016d98
 800cd2c:	200000ec 	.word	0x200000ec
 800cd30:	200000e4 	.word	0x200000e4
 800cd34:	f99f808c 	.word	0xf99f808c
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd38:	4a3d      	ldr	r2, [pc, #244]	; (800ce30 <HAL_RCC_OscConfig+0x66c>)
 800cd3a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cd3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd40:	6593      	str	r3, [r2, #88]	; 0x58
 800cd42:	e624      	b.n	800c98e <HAL_RCC_OscConfig+0x1ca>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd4a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800cd4c:	f7fc fcf8 	bl	8009740 <HAL_GetTick>
 800cd50:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	05da      	lsls	r2, r3, #23
 800cd56:	f53f ade8 	bmi.w	800c92a <HAL_RCC_OscConfig+0x166>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd5a:	f7fc fcf1 	bl	8009740 <HAL_GetTick>
 800cd5e:	eba0 0008 	sub.w	r0, r0, r8
 800cd62:	2802      	cmp	r0, #2
 800cd64:	d9f5      	bls.n	800cd52 <HAL_RCC_OscConfig+0x58e>
 800cd66:	e70c      	b.n	800cb82 <HAL_RCC_OscConfig+0x3be>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cd68:	f7ff fc8c 	bl	800c684 <RCC_SetFlashLatencyFromMSIRange>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	f43f aea6 	beq.w	800cabe <HAL_RCC_OscConfig+0x2fa>
 800cd72:	e6bf      	b.n	800caf4 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd78:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cd8a:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cd8c:	e702      	b.n	800cb94 <HAL_RCC_OscConfig+0x3d0>
          __HAL_RCC_LSI_DISABLE();
 800cd8e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800cd92:	f023 0301 	bic.w	r3, r3, #1
 800cd96:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
          tickstart = HAL_GetTick();
 800cd9a:	f7fc fcd1 	bl	8009740 <HAL_GetTick>
 800cd9e:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cda0:	e005      	b.n	800cdae <HAL_RCC_OscConfig+0x5ea>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cda2:	f7fc fccd 	bl	8009740 <HAL_GetTick>
 800cda6:	1bc0      	subs	r0, r0, r7
 800cda8:	2811      	cmp	r0, #17
 800cdaa:	f63f aeea 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cdae:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800cdb2:	0799      	lsls	r1, r3, #30
 800cdb4:	d4f5      	bmi.n	800cda2 <HAL_RCC_OscConfig+0x5de>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800cdb6:	69a2      	ldr	r2, [r4, #24]
 800cdb8:	e583      	b.n	800c8c2 <HAL_RCC_OscConfig+0xfe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cdba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cdc0:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdc2:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800cdc6:	f47f aefd 	bne.w	800cbc4 <HAL_RCC_OscConfig+0x400>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cdca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cdcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cdd0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800cdd4:	f47f aef6 	bne.w	800cbc4 <HAL_RCC_OscConfig+0x400>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cdd8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cdda:	0852      	lsrs	r2, r2, #1
 800cddc:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800cde0:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800cde2:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800cde6:	f47f aeed 	bne.w	800cbc4 <HAL_RCC_OscConfig+0x400>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cdea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cdec:	0852      	lsrs	r2, r2, #1
 800cdee:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800cdf2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cdf4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800cdf8:	f47f aee4 	bne.w	800cbc4 <HAL_RCC_OscConfig+0x400>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cdfc:	6833      	ldr	r3, [r6, #0]
 800cdfe:	019a      	lsls	r2, r3, #6
 800ce00:	f53f af1f 	bmi.w	800cc42 <HAL_RCC_OscConfig+0x47e>
          __HAL_RCC_PLL_ENABLE();
 800ce04:	6833      	ldr	r3, [r6, #0]
 800ce06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce0a:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ce0c:	68f3      	ldr	r3, [r6, #12]
 800ce0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce12:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 800ce14:	f7fc fc94 	bl	8009740 <HAL_GetTick>
 800ce18:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce1a:	e005      	b.n	800ce28 <HAL_RCC_OscConfig+0x664>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce1c:	f7fc fc90 	bl	8009740 <HAL_GetTick>
 800ce20:	1b00      	subs	r0, r0, r4
 800ce22:	2802      	cmp	r0, #2
 800ce24:	f63f aead 	bhi.w	800cb82 <HAL_RCC_OscConfig+0x3be>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce28:	6833      	ldr	r3, [r6, #0]
 800ce2a:	019b      	lsls	r3, r3, #6
 800ce2c:	d5f6      	bpl.n	800ce1c <HAL_RCC_OscConfig+0x658>
 800ce2e:	e708      	b.n	800cc42 <HAL_RCC_OscConfig+0x47e>
 800ce30:	40021000 	.word	0x40021000

0800ce34 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800ce34:	2800      	cmp	r0, #0
 800ce36:	f000 809f 	beq.w	800cf78 <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ce3a:	4a53      	ldr	r2, [pc, #332]	; (800cf88 <HAL_RCC_ClockConfig+0x154>)
 800ce3c:	6813      	ldr	r3, [r2, #0]
 800ce3e:	f003 0307 	and.w	r3, r3, #7
 800ce42:	428b      	cmp	r3, r1
{
 800ce44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce48:	460d      	mov	r5, r1
 800ce4a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ce4c:	d20c      	bcs.n	800ce68 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce4e:	6813      	ldr	r3, [r2, #0]
 800ce50:	f023 0307 	bic.w	r3, r3, #7
 800ce54:	430b      	orrs	r3, r1
 800ce56:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce58:	6813      	ldr	r3, [r2, #0]
 800ce5a:	f003 0307 	and.w	r3, r3, #7
 800ce5e:	428b      	cmp	r3, r1
 800ce60:	d002      	beq.n	800ce68 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800ce62:	2001      	movs	r0, #1
}
 800ce64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce68:	6823      	ldr	r3, [r4, #0]
 800ce6a:	079e      	lsls	r6, r3, #30
 800ce6c:	d571      	bpl.n	800cf52 <HAL_RCC_ClockConfig+0x11e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ce6e:	4847      	ldr	r0, [pc, #284]	; (800cf8c <HAL_RCC_ClockConfig+0x158>)
 800ce70:	68a1      	ldr	r1, [r4, #8]
 800ce72:	6882      	ldr	r2, [r0, #8]
 800ce74:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ce78:	4291      	cmp	r1, r2
 800ce7a:	d904      	bls.n	800ce86 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ce7c:	6882      	ldr	r2, [r0, #8]
 800ce7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800ce82:	430a      	orrs	r2, r1
 800ce84:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ce86:	07da      	lsls	r2, r3, #31
 800ce88:	d526      	bpl.n	800ced8 <HAL_RCC_ClockConfig+0xa4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ce8a:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce8c:	4b3f      	ldr	r3, [pc, #252]	; (800cf8c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ce8e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce90:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ce92:	d065      	beq.n	800cf60 <HAL_RCC_ClockConfig+0x12c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ce94:	2a02      	cmp	r2, #2
 800ce96:	d06c      	beq.n	800cf72 <HAL_RCC_ClockConfig+0x13e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ce98:	2a00      	cmp	r2, #0
 800ce9a:	d171      	bne.n	800cf80 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ce9c:	079b      	lsls	r3, r3, #30
 800ce9e:	d5e0      	bpl.n	800ce62 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cea0:	4e3a      	ldr	r6, [pc, #232]	; (800cf8c <HAL_RCC_ClockConfig+0x158>)
 800cea2:	68b3      	ldr	r3, [r6, #8]
 800cea4:	f023 0303 	bic.w	r3, r3, #3
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800ceac:	f7fc fc48 	bl	8009740 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ceb0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800ceb4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ceb6:	e004      	b.n	800cec2 <HAL_RCC_ClockConfig+0x8e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ceb8:	f7fc fc42 	bl	8009740 <HAL_GetTick>
 800cebc:	1bc0      	subs	r0, r0, r7
 800cebe:	4540      	cmp	r0, r8
 800cec0:	d85c      	bhi.n	800cf7c <HAL_RCC_ClockConfig+0x148>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cec2:	68b3      	ldr	r3, [r6, #8]
 800cec4:	6862      	ldr	r2, [r4, #4]
 800cec6:	f003 030c 	and.w	r3, r3, #12
 800ceca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800cece:	d1f3      	bne.n	800ceb8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	079e      	lsls	r6, r3, #30
 800ced4:	d506      	bpl.n	800cee4 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ced6:	68a1      	ldr	r1, [r4, #8]
 800ced8:	482c      	ldr	r0, [pc, #176]	; (800cf8c <HAL_RCC_ClockConfig+0x158>)
 800ceda:	6882      	ldr	r2, [r0, #8]
 800cedc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800cee0:	428a      	cmp	r2, r1
 800cee2:	d840      	bhi.n	800cf66 <HAL_RCC_ClockConfig+0x132>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cee4:	4928      	ldr	r1, [pc, #160]	; (800cf88 <HAL_RCC_ClockConfig+0x154>)
 800cee6:	680a      	ldr	r2, [r1, #0]
 800cee8:	f002 0207 	and.w	r2, r2, #7
 800ceec:	42aa      	cmp	r2, r5
 800ceee:	d909      	bls.n	800cf04 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cef0:	680a      	ldr	r2, [r1, #0]
 800cef2:	f022 0207 	bic.w	r2, r2, #7
 800cef6:	432a      	orrs	r2, r5
 800cef8:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cefa:	680a      	ldr	r2, [r1, #0]
 800cefc:	f002 0207 	and.w	r2, r2, #7
 800cf00:	42aa      	cmp	r2, r5
 800cf02:	d1ae      	bne.n	800ce62 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf04:	075d      	lsls	r5, r3, #29
 800cf06:	d506      	bpl.n	800cf16 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cf08:	4920      	ldr	r1, [pc, #128]	; (800cf8c <HAL_RCC_ClockConfig+0x158>)
 800cf0a:	68e0      	ldr	r0, [r4, #12]
 800cf0c:	688a      	ldr	r2, [r1, #8]
 800cf0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cf12:	4302      	orrs	r2, r0
 800cf14:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf16:	0718      	lsls	r0, r3, #28
 800cf18:	d507      	bpl.n	800cf2a <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cf1a:	4a1c      	ldr	r2, [pc, #112]	; (800cf8c <HAL_RCC_ClockConfig+0x158>)
 800cf1c:	6921      	ldr	r1, [r4, #16]
 800cf1e:	6893      	ldr	r3, [r2, #8]
 800cf20:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800cf24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800cf28:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cf2a:	f7ff fbf1 	bl	800c710 <HAL_RCC_GetSysClockFreq>
 800cf2e:	4a17      	ldr	r2, [pc, #92]	; (800cf8c <HAL_RCC_ClockConfig+0x158>)
 800cf30:	4c17      	ldr	r4, [pc, #92]	; (800cf90 <HAL_RCC_ClockConfig+0x15c>)
 800cf32:	6892      	ldr	r2, [r2, #8]
 800cf34:	4917      	ldr	r1, [pc, #92]	; (800cf94 <HAL_RCC_ClockConfig+0x160>)
 800cf36:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 800cf3e:	4816      	ldr	r0, [pc, #88]	; (800cf98 <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cf40:	f002 021f 	and.w	r2, r2, #31
 800cf44:	40d3      	lsrs	r3, r2
}
 800cf46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800cf4a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cf4c:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800cf4e:	f7fc bbb5 	b.w	80096bc <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf52:	07d9      	lsls	r1, r3, #31
 800cf54:	d5c6      	bpl.n	800cee4 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf56:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf58:	4b0c      	ldr	r3, [pc, #48]	; (800cf8c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf5a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf5c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf5e:	d199      	bne.n	800ce94 <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf60:	0198      	lsls	r0, r3, #6
 800cf62:	d49d      	bmi.n	800cea0 <HAL_RCC_ClockConfig+0x6c>
 800cf64:	e77d      	b.n	800ce62 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf66:	6882      	ldr	r2, [r0, #8]
 800cf68:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800cf6c:	430a      	orrs	r2, r1
 800cf6e:	6082      	str	r2, [r0, #8]
 800cf70:	e7b8      	b.n	800cee4 <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cf72:	0399      	lsls	r1, r3, #14
 800cf74:	d494      	bmi.n	800cea0 <HAL_RCC_ClockConfig+0x6c>
 800cf76:	e774      	b.n	800ce62 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800cf78:	2001      	movs	r0, #1
}
 800cf7a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800cf7c:	2003      	movs	r0, #3
 800cf7e:	e771      	b.n	800ce64 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cf80:	055f      	lsls	r7, r3, #21
 800cf82:	f57f af6e 	bpl.w	800ce62 <HAL_RCC_ClockConfig+0x2e>
 800cf86:	e78b      	b.n	800cea0 <HAL_RCC_ClockConfig+0x6c>
 800cf88:	40022000 	.word	0x40022000
 800cf8c:	40021000 	.word	0x40021000
 800cf90:	08016d98 	.word	0x08016d98
 800cf94:	200000e4 	.word	0x200000e4
 800cf98:	200000ec 	.word	0x200000ec

0800cf9c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cf9c:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 800cf9e:	4a06      	ldr	r2, [pc, #24]	; (800cfb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800cfa0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800cfa2:	4906      	ldr	r1, [pc, #24]	; (800cfbc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cfa4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800cfa8:	6808      	ldr	r0, [r1, #0]
 800cfaa:	5cd3      	ldrb	r3, [r2, r3]
 800cfac:	f003 031f 	and.w	r3, r3, #31
}
 800cfb0:	40d8      	lsrs	r0, r3
 800cfb2:	4770      	bx	lr
 800cfb4:	40021000 	.word	0x40021000
 800cfb8:	08016da8 	.word	0x08016da8
 800cfbc:	200000e4 	.word	0x200000e4

0800cfc0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cfc0:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <HAL_RCC_GetPCLK2Freq+0x18>)
 800cfc2:	4a06      	ldr	r2, [pc, #24]	; (800cfdc <HAL_RCC_GetPCLK2Freq+0x1c>)
 800cfc4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800cfc6:	4906      	ldr	r1, [pc, #24]	; (800cfe0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cfc8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800cfcc:	6808      	ldr	r0, [r1, #0]
 800cfce:	5cd3      	ldrb	r3, [r2, r3]
 800cfd0:	f003 031f 	and.w	r3, r3, #31
}
 800cfd4:	40d8      	lsrs	r0, r3
 800cfd6:	4770      	bx	lr
 800cfd8:	40021000 	.word	0x40021000
 800cfdc:	08016da8 	.word	0x08016da8
 800cfe0:	200000e4 	.word	0x200000e4

0800cfe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cfe8:	6803      	ldr	r3, [r0, #0]
{
 800cfea:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cfec:	f413 3000 	ands.w	r0, r3, #131072	; 0x20000
{
 800cff0:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cff2:	d056      	beq.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0xbe>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cff4:	4b79      	ldr	r3, [pc, #484]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800cff6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cff8:	00d5      	lsls	r5, r2, #3
 800cffa:	f140 80d4 	bpl.w	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    FlagStatus       pwrclkchanged = RESET;
 800cffe:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d000:	4d77      	ldr	r5, [pc, #476]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800d002:	682b      	ldr	r3, [r5, #0]
 800d004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d008:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d00a:	f7fc fb99 	bl	8009740 <HAL_GetTick>
 800d00e:	4606      	mov	r6, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d010:	e005      	b.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d012:	f7fc fb95 	bl	8009740 <HAL_GetTick>
 800d016:	1b83      	subs	r3, r0, r6
 800d018:	2b02      	cmp	r3, #2
 800d01a:	f200 80cf 	bhi.w	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d01e:	682b      	ldr	r3, [r5, #0]
 800d020:	05d8      	lsls	r0, r3, #23
 800d022:	d5f6      	bpl.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d024:	4d6d      	ldr	r5, [pc, #436]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d026:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d02a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800d02e:	d027      	beq.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800d030:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d032:	429a      	cmp	r2, r3
 800d034:	d025      	beq.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d036:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d03a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800d03e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d042:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d046:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800d04a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d04e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d052:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d056:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800d058:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d05c:	f140 80bc 	bpl.w	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d060:	f7fc fb6e 	bl	8009740 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d064:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800d068:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d06a:	e005      	b.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d06c:	f7fc fb68 	bl	8009740 <HAL_GetTick>
 800d070:	1b80      	subs	r0, r0, r6
 800d072:	4540      	cmp	r0, r8
 800d074:	f200 80a2 	bhi.w	800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d078:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800d07c:	079b      	lsls	r3, r3, #30
 800d07e:	d5f5      	bpl.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d080:	6b23      	ldr	r3, [r4, #48]	; 0x30
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d082:	4956      	ldr	r1, [pc, #344]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d084:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d088:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d08c:	4313      	orrs	r3, r2
 800d08e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d092:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d094:	b127      	cbz	r7, 800d0a0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d096:	4a51      	ldr	r2, [pc, #324]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d098:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d09a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d09e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	07df      	lsls	r7, r3, #31
 800d0a4:	d508      	bpl.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d0a6:	494d      	ldr	r1, [pc, #308]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d0a8:	6865      	ldr	r5, [r4, #4]
 800d0aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d0ae:	f022 0203 	bic.w	r2, r2, #3
 800d0b2:	432a      	orrs	r2, r5
 800d0b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d0b8:	079e      	lsls	r6, r3, #30
 800d0ba:	d508      	bpl.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d0bc:	4947      	ldr	r1, [pc, #284]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d0be:	68a5      	ldr	r5, [r4, #8]
 800d0c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d0c4:	f022 020c 	bic.w	r2, r2, #12
 800d0c8:	432a      	orrs	r2, r5
 800d0ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d0ce:	075d      	lsls	r5, r3, #29
 800d0d0:	d508      	bpl.n	800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d0d2:	4942      	ldr	r1, [pc, #264]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d0d4:	68e5      	ldr	r5, [r4, #12]
 800d0d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d0da:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800d0de:	432a      	orrs	r2, r5
 800d0e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d0e4:	0699      	lsls	r1, r3, #26
 800d0e6:	d508      	bpl.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d0e8:	493c      	ldr	r1, [pc, #240]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d0ea:	6925      	ldr	r5, [r4, #16]
 800d0ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d0f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d0f4:	432a      	orrs	r2, r5
 800d0f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d0fa:	059a      	lsls	r2, r3, #22
 800d0fc:	d508      	bpl.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d0fe:	4937      	ldr	r1, [pc, #220]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d100:	6a25      	ldr	r5, [r4, #32]
 800d102:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d106:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800d10a:	432a      	orrs	r2, r5
 800d10c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d110:	055f      	lsls	r7, r3, #21
 800d112:	d508      	bpl.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d114:	4931      	ldr	r1, [pc, #196]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d116:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d118:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d11c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800d120:	432a      	orrs	r2, r5
 800d122:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d126:	065e      	lsls	r6, r3, #25
 800d128:	d508      	bpl.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d12a:	492c      	ldr	r1, [pc, #176]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d12c:	6965      	ldr	r5, [r4, #20]
 800d12e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d132:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800d136:	432a      	orrs	r2, r5
 800d138:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d13c:	061d      	lsls	r5, r3, #24
 800d13e:	d508      	bpl.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d140:	4926      	ldr	r1, [pc, #152]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d142:	69a5      	ldr	r5, [r4, #24]
 800d144:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d148:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d14c:	432a      	orrs	r2, r5
 800d14e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d152:	05d9      	lsls	r1, r3, #23
 800d154:	d508      	bpl.n	800d168 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d156:	4921      	ldr	r1, [pc, #132]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d158:	69e5      	ldr	r5, [r4, #28]
 800d15a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d15e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800d162:	432a      	orrs	r2, r5
 800d164:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d168:	049a      	lsls	r2, r3, #18
 800d16a:	d50b      	bpl.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d16c:	491b      	ldr	r1, [pc, #108]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d16e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800d170:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800d174:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800d178:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d17a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d17e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d182:	d01d      	beq.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d184:	035b      	lsls	r3, r3, #13
 800d186:	d50b      	bpl.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d188:	4a14      	ldr	r2, [pc, #80]	; (800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800d18a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d18c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800d190:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800d194:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d196:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d19a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d19e:	d014      	beq.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 800d1a0:	b002      	add	sp, #8
 800d1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800d1a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d1a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d1ac:	659a      	str	r2, [r3, #88]	; 0x58
 800d1ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800d1b8:	2701      	movs	r7, #1
 800d1ba:	e721      	b.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 800d1bc:	2003      	movs	r0, #3
 800d1be:	e769      	b.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d1c0:	68ca      	ldr	r2, [r1, #12]
 800d1c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d1c6:	60ca      	str	r2, [r1, #12]
 800d1c8:	e7dc      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d1ca:	68d3      	ldr	r3, [r2, #12]
 800d1cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1d0:	60d3      	str	r3, [r2, #12]
}
 800d1d2:	b002      	add	sp, #8
 800d1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d8:	4613      	mov	r3, r2
 800d1da:	e752      	b.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800d1dc:	40021000 	.word	0x40021000
 800d1e0:	40007000 	.word	0x40007000

0800d1e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d1e4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d1e6:	4b22      	ldr	r3, [pc, #136]	; (800d270 <RTC_ExitInitMode+0x8c>)
 800d1e8:	68da      	ldr	r2, [r3, #12]
 800d1ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d1ee:	60da      	str	r2, [r3, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d1f0:	699a      	ldr	r2, [r3, #24]
 800d1f2:	0691      	lsls	r1, r2, #26
{
 800d1f4:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d1f6:	d414      	bmi.n	800d222 <RTC_ExitInitMode+0x3e>
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800d1f8:	6802      	ldr	r2, [r0, #0]
 800d1fa:	68d3      	ldr	r3, [r2, #12]
 800d1fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d200:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 800d202:	f7fc fa9d 	bl	8009740 <HAL_GetTick>
 800d206:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d208:	e005      	b.n	800d216 <RTC_ExitInitMode+0x32>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d20a:	f7fc fa99 	bl	8009740 <HAL_GetTick>
 800d20e:	1b43      	subs	r3, r0, r5
 800d210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d214:	d827      	bhi.n	800d266 <RTC_ExitInitMode+0x82>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	069a      	lsls	r2, r3, #26
 800d21c:	d5f5      	bpl.n	800d20a <RTC_ExitInitMode+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 800d21e:	2000      	movs	r0, #0
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800d220:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d222:	699a      	ldr	r2, [r3, #24]
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800d224:	6801      	ldr	r1, [r0, #0]
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d226:	f022 0220 	bic.w	r2, r2, #32
 800d22a:	619a      	str	r2, [r3, #24]
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800d22c:	68cb      	ldr	r3, [r1, #12]
 800d22e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d232:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 800d234:	f7fc fa84 	bl	8009740 <HAL_GetTick>
 800d238:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d23a:	e005      	b.n	800d248 <RTC_ExitInitMode+0x64>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d23c:	f7fc fa80 	bl	8009740 <HAL_GetTick>
 800d240:	1b43      	subs	r3, r0, r5
 800d242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d246:	d80a      	bhi.n	800d25e <RTC_ExitInitMode+0x7a>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	069b      	lsls	r3, r3, #26
 800d24e:	d5f5      	bpl.n	800d23c <RTC_ExitInitMode+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 800d250:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d252:	4a07      	ldr	r2, [pc, #28]	; (800d270 <RTC_ExitInitMode+0x8c>)
 800d254:	6993      	ldr	r3, [r2, #24]
 800d256:	f043 0320 	orr.w	r3, r3, #32
 800d25a:	6193      	str	r3, [r2, #24]
}
 800d25c:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d25e:	2003      	movs	r0, #3
 800d260:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
      status = HAL_TIMEOUT;
 800d264:	e7f5      	b.n	800d252 <RTC_ExitInitMode+0x6e>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d266:	2003      	movs	r0, #3
 800d268:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 800d26c:	bd38      	pop	{r3, r4, r5, pc}
 800d26e:	bf00      	nop
 800d270:	40002800 	.word	0x40002800

0800d274 <HAL_RTC_Init>:
  if (hrtc != NULL)
 800d274:	2800      	cmp	r0, #0
 800d276:	d059      	beq.n	800d32c <HAL_RTC_Init+0xb8>
{
 800d278:	b538      	push	{r3, r4, r5, lr}
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d27a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800d27e:	4604      	mov	r4, r0
 800d280:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d284:	2b00      	cmp	r3, #0
 800d286:	d04c      	beq.n	800d322 <HAL_RTC_Init+0xae>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d288:	6823      	ldr	r3, [r4, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800d28a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d28e:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d290:	2002      	movs	r0, #2
 800d292:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800d296:	6061      	str	r1, [r4, #4]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d298:	625a      	str	r2, [r3, #36]	; 0x24
 800d29a:	2253      	movs	r2, #83	; 0x53
 800d29c:	625a      	str	r2, [r3, #36]	; 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d29e:	68da      	ldr	r2, [r3, #12]
 800d2a0:	0651      	lsls	r1, r2, #25
 800d2a2:	d52b      	bpl.n	800d2fc <HAL_RTC_Init+0x88>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d2a4:	6999      	ldr	r1, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d2a6:	68a2      	ldr	r2, [r4, #8]
 800d2a8:	6965      	ldr	r5, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d2aa:	f021 618e 	bic.w	r1, r1, #74448896	; 0x4700000
 800d2ae:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800d2b2:	6199      	str	r1, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d2b4:	69e1      	ldr	r1, [r4, #28]
 800d2b6:	6998      	ldr	r0, [r3, #24]
 800d2b8:	432a      	orrs	r2, r5
 800d2ba:	430a      	orrs	r2, r1
 800d2bc:	4302      	orrs	r2, r0
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d2be:	6921      	ldr	r1, [r4, #16]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d2c0:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d2c2:	6119      	str	r1, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d2c4:	691a      	ldr	r2, [r3, #16]
 800d2c6:	68e1      	ldr	r1, [r4, #12]
 800d2c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      status = RTC_ExitInitMode(hrtc);
 800d2cc:	4620      	mov	r0, r4
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d2ce:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800d2d0:	f7ff ff88 	bl	800d1e4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800d2d4:	b988      	cbnz	r0, 800d2fa <HAL_RTC_Init+0x86>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d2d6:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d2da:	6991      	ldr	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d2dc:	6a25      	ldr	r5, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d2de:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800d2e2:	6191      	str	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d2e4:	432b      	orrs	r3, r5
 800d2e6:	69a5      	ldr	r5, [r4, #24]
 800d2e8:	6991      	ldr	r1, [r2, #24]
 800d2ea:	432b      	orrs	r3, r5
 800d2ec:	430b      	orrs	r3, r1
 800d2ee:	6193      	str	r3, [r2, #24]
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2f0:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_READY;
 800d2f2:	2301      	movs	r3, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2f4:	6251      	str	r1, [r2, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 800d2f6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d2fc:	68da      	ldr	r2, [r3, #12]
 800d2fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d302:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800d304:	f7fc fa1c 	bl	8009740 <HAL_GetTick>
 800d308:	4605      	mov	r5, r0
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d30a:	e005      	b.n	800d318 <HAL_RTC_Init+0xa4>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d30c:	f7fc fa18 	bl	8009740 <HAL_GetTick>
 800d310:	1b40      	subs	r0, r0, r5
 800d312:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d316:	d80b      	bhi.n	800d330 <HAL_RTC_Init+0xbc>
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d318:	6823      	ldr	r3, [r4, #0]
 800d31a:	68da      	ldr	r2, [r3, #12]
 800d31c:	0652      	lsls	r2, r2, #25
 800d31e:	d4c1      	bmi.n	800d2a4 <HAL_RTC_Init+0x30>
 800d320:	e7f4      	b.n	800d30c <HAL_RTC_Init+0x98>
      hrtc->Lock = HAL_UNLOCKED;
 800d322:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
      HAL_RTC_MspInit(hrtc);
 800d326:	f7fb ffed 	bl	8009304 <HAL_RTC_MspInit>
 800d32a:	e7ad      	b.n	800d288 <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 800d32c:	2001      	movs	r0, #1
}
 800d32e:	4770      	bx	lr
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d330:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d332:	2003      	movs	r0, #3
 800d334:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d338:	68db      	ldr	r3, [r3, #12]
}
 800d33a:	bd38      	pop	{r3, r4, r5, pc}

0800d33c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d340:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d342:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d344:	4617      	mov	r7, r2
 800d346:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 800d348:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d34c:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d34e:	f7fc f9f7 	bl	8009740 <HAL_GetTick>
 800d352:	442f      	add	r7, r5
 800d354:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800d356:	f7fc f9f3 	bl	8009740 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d35a:	4b31      	ldr	r3, [pc, #196]	; (800d420 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d35c:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d364:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d368:	0d1b      	lsrs	r3, r3, #20
 800d36a:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 800d36e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d370:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800d372:	4622      	mov	r2, r4
 800d374:	1c69      	adds	r1, r5, #1
 800d376:	6893      	ldr	r3, [r2, #8]
 800d378:	d110      	bne.n	800d39c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 800d37a:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800d37e:	d009      	beq.n	800d394 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d380:	7b23      	ldrb	r3, [r4, #12]
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d388:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800d38c:	6893      	ldr	r3, [r2, #8]
 800d38e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800d392:	d1f5      	bne.n	800d380 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 800d394:	2000      	movs	r0, #0
}
 800d396:	b002      	add	sp, #8
 800d398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800d39c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800d3a0:	d0f8      	beq.n	800d394 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 800d3a2:	7b23      	ldrb	r3, [r4, #12]
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800d3aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d3ae:	f7fc f9c7 	bl	8009740 <HAL_GetTick>
 800d3b2:	eba0 0008 	sub.w	r0, r0, r8
 800d3b6:	42b8      	cmp	r0, r7
 800d3b8:	d209      	bcs.n	800d3ce <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 800d3ba:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d3bc:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800d3be:	2b00      	cmp	r3, #0
      count--;
 800d3c0:	9b01      	ldr	r3, [sp, #4]
 800d3c2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800d3c6:	bf08      	it	eq
 800d3c8:	2700      	moveq	r7, #0
      count--;
 800d3ca:	9301      	str	r3, [sp, #4]
 800d3cc:	e7d2      	b.n	800d374 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3ce:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d3d2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3d4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d3d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d3dc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3de:	d013      	beq.n	800d408 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d3e0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800d3e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d3e6:	d107      	bne.n	800d3f8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3f6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800d3f8:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800d3fa:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800d3fc:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800d400:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800d404:	2003      	movs	r0, #3
 800d406:	e7c6      	b.n	800d396 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d408:	68b2      	ldr	r2, [r6, #8]
 800d40a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d40e:	d002      	beq.n	800d416 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d410:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d414:	d1e4      	bne.n	800d3e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d41c:	601a      	str	r2, [r3, #0]
 800d41e:	e7df      	b.n	800d3e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 800d420:	200000e4 	.word	0x200000e4

0800d424 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d428:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 800d42a:	2300      	movs	r3, #0
 800d42c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d430:	eb01 0902 	add.w	r9, r1, r2
{
 800d434:	460e      	mov	r6, r1
 800d436:	4617      	mov	r7, r2
 800d438:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d43a:	f7fc f981 	bl	8009740 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d43e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800d560 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d442:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 800d446:	f7fc f97b 	bl	8009740 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d44a:	f8d8 3000 	ldr.w	r3, [r8]
 800d44e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d452:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d456:	0d1b      	lsrs	r3, r3, #20
 800d458:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 800d45c:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d45e:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800d460:	1c70      	adds	r0, r6, #1
 800d462:	682c      	ldr	r4, [r5, #0]
 800d464:	d120      	bne.n	800d4a8 <SPI_EndRxTxTransaction+0x84>
 800d466:	68a3      	ldr	r3, [r4, #8]
 800d468:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800d46c:	d1fb      	bne.n	800d466 <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d46e:	f7fc f967 	bl	8009740 <HAL_GetTick>
 800d472:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 800d476:	f7fc f963 	bl	8009740 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d47a:	f8d8 3000 	ldr.w	r3, [r8]
 800d47e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800d482:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 800d486:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d488:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d48a:	1c71      	adds	r1, r6, #1
 800d48c:	682c      	ldr	r4, [r5, #0]
 800d48e:	d11f      	bne.n	800d4d0 <SPI_EndRxTxTransaction+0xac>
 800d490:	68a3      	ldr	r3, [r4, #8]
 800d492:	061a      	lsls	r2, r3, #24
 800d494:	d4fc      	bmi.n	800d490 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d496:	463a      	mov	r2, r7
 800d498:	4631      	mov	r1, r6
 800d49a:	4628      	mov	r0, r5
 800d49c:	f7ff ff4e 	bl	800d33c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800d4a0:	bb48      	cbnz	r0, 800d4f6 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800d4a2:	b005      	add	sp, #20
 800d4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800d4a8:	68a3      	ldr	r3, [r4, #8]
 800d4aa:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800d4ae:	d0de      	beq.n	800d46e <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d4b0:	f7fc f946 	bl	8009740 <HAL_GetTick>
 800d4b4:	eba0 000b 	sub.w	r0, r0, fp
 800d4b8:	4550      	cmp	r0, sl
 800d4ba:	d222      	bcs.n	800d502 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 800d4bc:	9a02      	ldr	r2, [sp, #8]
      count--;
 800d4be:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 800d4c0:	2a00      	cmp	r2, #0
      count--;
 800d4c2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800d4c6:	bf08      	it	eq
 800d4c8:	f04f 0a00 	moveq.w	sl, #0
      count--;
 800d4cc:	9302      	str	r3, [sp, #8]
 800d4ce:	e7c7      	b.n	800d460 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d4d0:	68a3      	ldr	r3, [r4, #8]
 800d4d2:	061b      	lsls	r3, r3, #24
 800d4d4:	d5df      	bpl.n	800d496 <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d4d6:	f7fc f933 	bl	8009740 <HAL_GetTick>
 800d4da:	eba0 0008 	sub.w	r0, r0, r8
 800d4de:	4548      	cmp	r0, r9
 800d4e0:	d20f      	bcs.n	800d502 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 800d4e2:	9a03      	ldr	r2, [sp, #12]
      count--;
 800d4e4:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800d4e6:	2a00      	cmp	r2, #0
      count--;
 800d4e8:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800d4ec:	bf08      	it	eq
 800d4ee:	f04f 0900 	moveq.w	r9, #0
      count--;
 800d4f2:	9303      	str	r3, [sp, #12]
 800d4f4:	e7c9      	b.n	800d48a <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4f6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800d4f8:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 800d4fc:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4fe:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800d500:	e7cf      	b.n	800d4a2 <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d502:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d506:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d508:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d50c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d510:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d512:	d019      	beq.n	800d548 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d514:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d516:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d51a:	d107      	bne.n	800d52c <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d522:	601a      	str	r2, [r3, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d52a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800d52c:	2301      	movs	r3, #1
 800d52e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d532:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800d534:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d536:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 800d53a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800d53c:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d540:	662b      	str	r3, [r5, #96]	; 0x60
}
 800d542:	b005      	add	sp, #20
 800d544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d548:	68aa      	ldr	r2, [r5, #8]
 800d54a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d54e:	d002      	beq.n	800d556 <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d550:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d554:	d1de      	bne.n	800d514 <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	e7d9      	b.n	800d514 <SPI_EndRxTxTransaction+0xf0>
 800d560:	200000e4 	.word	0x200000e4

0800d564 <HAL_SPI_Init>:
  if (hspi == NULL)
 800d564:	2800      	cmp	r0, #0
 800d566:	d074      	beq.n	800d652 <HAL_SPI_Init+0xee>
{
 800d568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d56e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d570:	2800      	cmp	r0, #0
 800d572:	d055      	beq.n	800d620 <HAL_SPI_Init+0xbc>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d574:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d576:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800d57a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d57e:	2200      	movs	r2, #0
 800d580:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800d582:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d586:	2b00      	cmp	r3, #0
 800d588:	d056      	beq.n	800d638 <HAL_SPI_Init+0xd4>
  __HAL_SPI_DISABLE(hspi);
 800d58a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d58c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d58e:	2302      	movs	r3, #2
 800d590:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800d594:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d596:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800d59a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d59e:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d5a0:	d944      	bls.n	800d62c <HAL_SPI_Init+0xc8>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d5a2:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 800d5a6:	d156      	bne.n	800d656 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d5a8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d5aa:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d5ae:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 800d5b2:	6862      	ldr	r2, [r4, #4]
 800d5b4:	68a3      	ldr	r3, [r4, #8]
 800d5b6:	69a6      	ldr	r6, [r4, #24]
 800d5b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d5bc:	f402 7282 	and.w	r2, r2, #260	; 0x104
 800d5c0:	431a      	orrs	r2, r3
 800d5c2:	6923      	ldr	r3, [r4, #16]
 800d5c4:	f003 0302 	and.w	r3, r3, #2
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	6962      	ldr	r2, [r4, #20]
 800d5cc:	f002 0201 	and.w	r2, r2, #1
 800d5d0:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d5d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5d4:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 800d5d8:	f003 0308 	and.w	r3, r3, #8
 800d5dc:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d5e0:	69e3      	ldr	r3, [r4, #28]
 800d5e2:	f003 0838 	and.w	r8, r3, #56	; 0x38
 800d5e6:	6a23      	ldr	r3, [r4, #32]
 800d5e8:	f003 0780 	and.w	r7, r3, #128	; 0x80
 800d5ec:	f406 7300 	and.w	r3, r6, #512	; 0x200
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	ea43 0308 	orr.w	r3, r3, r8
 800d5f6:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d5f8:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d5fa:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d5fc:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d600:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d602:	f000 0010 	and.w	r0, r0, #16
 800d606:	ea4e 0306 	orr.w	r3, lr, r6
 800d60a:	4303      	orrs	r3, r0
 800d60c:	ea43 030c 	orr.w	r3, r3, ip
 800d610:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d612:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800d614:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d616:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d618:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800d61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d620:	6863      	ldr	r3, [r4, #4]
 800d622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d626:	d0a8      	beq.n	800d57a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d628:	61e0      	str	r0, [r4, #28]
 800d62a:	e7a6      	b.n	800d57a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d62c:	d00b      	beq.n	800d646 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d62e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d632:	2500      	movs	r5, #0
 800d634:	62a5      	str	r5, [r4, #40]	; 0x28
 800d636:	e7bc      	b.n	800d5b2 <HAL_SPI_Init+0x4e>
    HAL_SPI_MspInit(hspi);
 800d638:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800d63a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800d63e:	f7fb fe89 	bl	8009354 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d642:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d644:	e7a1      	b.n	800d58a <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d646:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d648:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d64c:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 800d650:	e7af      	b.n	800d5b2 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800d652:	2001      	movs	r0, #1
}
 800d654:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d656:	f04f 0c00 	mov.w	ip, #0
 800d65a:	e7ea      	b.n	800d632 <HAL_SPI_Init+0xce>

0800d65c <HAL_SPI_Transmit>:
{
 800d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d660:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800d662:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800d666:	2801      	cmp	r0, #1
{
 800d668:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800d66a:	d075      	beq.n	800d758 <HAL_SPI_Transmit+0xfc>
 800d66c:	461d      	mov	r5, r3
 800d66e:	2301      	movs	r3, #1
 800d670:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800d674:	4688      	mov	r8, r1
 800d676:	4617      	mov	r7, r2
 800d678:	f7fc f862 	bl	8009740 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d67c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d680:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800d682:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d684:	b2d8      	uxtb	r0, r3
 800d686:	d009      	beq.n	800d69c <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800d688:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800d68a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800d68c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800d68e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d692:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800d696:	b002      	add	sp, #8
 800d698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800d69c:	f1b8 0f00 	cmp.w	r8, #0
 800d6a0:	d0f3      	beq.n	800d68a <HAL_SPI_Transmit+0x2e>
 800d6a2:	2f00      	cmp	r7, #0
 800d6a4:	d0f1      	beq.n	800d68a <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6a6:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d6a8:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6ac:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d6ae:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d6b4:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxISR       = NULL;
 800d6b8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6bc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d6be:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d6c0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 800d6c4:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800d6c6:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d6c8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    __HAL_SPI_DISABLE(hspi);
 800d6cc:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6ce:	d06b      	beq.n	800d7a8 <HAL_SPI_Transmit+0x14c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6d0:	6819      	ldr	r1, [r3, #0]
 800d6d2:	0649      	lsls	r1, r1, #25
    __HAL_SPI_DISABLE(hspi);
 800d6d4:	461a      	mov	r2, r3
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6d6:	d403      	bmi.n	800d6e0 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 800d6d8:	6819      	ldr	r1, [r3, #0]
 800d6da:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800d6de:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6e0:	68e1      	ldr	r1, [r4, #12]
 800d6e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d6e6:	d93b      	bls.n	800d760 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d6e8:	6861      	ldr	r1, [r4, #4]
 800d6ea:	2900      	cmp	r1, #0
 800d6ec:	f000 809c 	beq.w	800d828 <HAL_SPI_Transmit+0x1cc>
 800d6f0:	2f01      	cmp	r7, #1
 800d6f2:	f000 8099 	beq.w	800d828 <HAL_SPI_Transmit+0x1cc>
    while (hspi->TxXferCount > 0U)
 800d6f6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800d6f8:	b289      	uxth	r1, r1
 800d6fa:	b1b9      	cbz	r1, 800d72c <HAL_SPI_Transmit+0xd0>
 800d6fc:	1c69      	adds	r1, r5, #1
 800d6fe:	f040 8089 	bne.w	800d814 <HAL_SPI_Transmit+0x1b8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d702:	689a      	ldr	r2, [r3, #8]
 800d704:	0797      	lsls	r7, r2, #30
 800d706:	f140 80a7 	bpl.w	800d858 <HAL_SPI_Transmit+0x1fc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d70a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d70c:	f832 1b02 	ldrh.w	r1, [r2], #2
 800d710:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800d712:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d716:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d718:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d71c:	fa1f fc8c 	uxth.w	ip, ip
 800d720:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d724:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800d726:	b292      	uxth	r2, r2
 800d728:	2a00      	cmp	r2, #0
 800d72a:	d1ea      	bne.n	800d702 <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d72c:	4632      	mov	r2, r6
 800d72e:	4629      	mov	r1, r5
 800d730:	4620      	mov	r0, r4
 800d732:	f7ff fe77 	bl	800d424 <SPI_EndRxTxTransaction>
 800d736:	b108      	cbz	r0, 800d73c <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d738:	2320      	movs	r3, #32
 800d73a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d73c:	68a3      	ldr	r3, [r4, #8]
 800d73e:	b933      	cbnz	r3, 800d74e <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	9301      	str	r3, [sp, #4]
 800d744:	68d3      	ldr	r3, [r2, #12]
 800d746:	9301      	str	r3, [sp, #4]
 800d748:	6893      	ldr	r3, [r2, #8]
 800d74a:	9301      	str	r3, [sp, #4]
 800d74c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d74e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800d750:	3800      	subs	r0, #0
 800d752:	bf18      	it	ne
 800d754:	2001      	movne	r0, #1
error:
 800d756:	e798      	b.n	800d68a <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800d758:	2002      	movs	r0, #2
}
 800d75a:	b002      	add	sp, #8
 800d75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d760:	6862      	ldr	r2, [r4, #4]
 800d762:	2a00      	cmp	r2, #0
 800d764:	d06a      	beq.n	800d83c <HAL_SPI_Transmit+0x1e0>
 800d766:	2f01      	cmp	r7, #1
 800d768:	d068      	beq.n	800d83c <HAL_SPI_Transmit+0x1e0>
    while (hspi->TxXferCount > 0U)
 800d76a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d0dc      	beq.n	800d72c <HAL_SPI_Transmit+0xd0>
 800d772:	1c68      	adds	r0, r5, #1
 800d774:	d011      	beq.n	800d79a <HAL_SPI_Transmit+0x13e>
 800d776:	e02c      	b.n	800d7d2 <HAL_SPI_Transmit+0x176>
        if (hspi->TxXferCount > 1U)
 800d778:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d974      	bls.n	800d86a <HAL_SPI_Transmit+0x20e>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d780:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d782:	f831 3b02 	ldrh.w	r3, [r1], #2
 800d786:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800d788:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d78a:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d78c:	3b02      	subs	r3, #2
 800d78e:	b29b      	uxth	r3, r3
 800d790:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d792:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800d794:	b289      	uxth	r1, r1
 800d796:	2900      	cmp	r1, #0
 800d798:	d0c8      	beq.n	800d72c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d79a:	6822      	ldr	r2, [r4, #0]
 800d79c:	6893      	ldr	r3, [r2, #8]
 800d79e:	0799      	lsls	r1, r3, #30
 800d7a0:	d4ea      	bmi.n	800d778 <HAL_SPI_Transmit+0x11c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7a2:	f7fb ffcd 	bl	8009740 <HAL_GetTick>
 800d7a6:	e7f4      	b.n	800d792 <HAL_SPI_Transmit+0x136>
    __HAL_SPI_DISABLE(hspi);
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	e78a      	b.n	800d6d0 <HAL_SPI_Transmit+0x74>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7ba:	f832 1b02 	ldrh.w	r1, [r2], #2
 800d7be:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 800d7c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7c2:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d7c4:	3b02      	subs	r3, #2
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d7ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d0ac      	beq.n	800d72c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d7d2:	6823      	ldr	r3, [r4, #0]
 800d7d4:	689a      	ldr	r2, [r3, #8]
 800d7d6:	0792      	lsls	r2, r2, #30
 800d7d8:	d55d      	bpl.n	800d896 <HAL_SPI_Transmit+0x23a>
        if (hspi->TxXferCount > 1U)
 800d7da:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800d7dc:	b292      	uxth	r2, r2
 800d7de:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800d7e2:	d8ea      	bhi.n	800d7ba <HAL_SPI_Transmit+0x15e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7e4:	7812      	ldrb	r2, [r2, #0]
 800d7e6:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800d7e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800d7ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800d7ec:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800d7ee:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800d7f0:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800d7f2:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800d7f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d7f6:	e7e8      	b.n	800d7ca <HAL_SPI_Transmit+0x16e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d7fa:	f831 3b02 	ldrh.w	r3, [r1], #2
 800d7fe:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800d800:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d802:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d804:	3b01      	subs	r3, #1
 800d806:	b29b      	uxth	r3, r3
 800d808:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d80a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d08c      	beq.n	800d72c <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d812:	6822      	ldr	r2, [r4, #0]
 800d814:	6893      	ldr	r3, [r2, #8]
 800d816:	0798      	lsls	r0, r3, #30
 800d818:	d4ee      	bmi.n	800d7f8 <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d81a:	f7fb ff91 	bl	8009740 <HAL_GetTick>
 800d81e:	1b80      	subs	r0, r0, r6
 800d820:	42a8      	cmp	r0, r5
 800d822:	d3f2      	bcc.n	800d80a <HAL_SPI_Transmit+0x1ae>
          errorcode = HAL_TIMEOUT;
 800d824:	2003      	movs	r0, #3
 800d826:	e730      	b.n	800d68a <HAL_SPI_Transmit+0x2e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d828:	4641      	mov	r1, r8
 800d82a:	f831 0b02 	ldrh.w	r0, [r1], #2
 800d82e:	60d8      	str	r0, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d830:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800d832:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800d834:	3901      	subs	r1, #1
 800d836:	b289      	uxth	r1, r1
 800d838:	87e1      	strh	r1, [r4, #62]	; 0x3e
 800d83a:	e75c      	b.n	800d6f6 <HAL_SPI_Transmit+0x9a>
      if (hspi->TxXferCount > 1U)
 800d83c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800d83e:	b292      	uxth	r2, r2
 800d840:	2a01      	cmp	r2, #1
 800d842:	d91d      	bls.n	800d880 <HAL_SPI_Transmit+0x224>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d844:	4641      	mov	r1, r8
 800d846:	f831 2b02 	ldrh.w	r2, [r1], #2
 800d84a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800d84c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d84e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d850:	3b02      	subs	r3, #2
 800d852:	b29b      	uxth	r3, r3
 800d854:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d856:	e788      	b.n	800d76a <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d858:	f7fb ff72 	bl	8009740 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800d85c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d85e:	b29b      	uxth	r3, r3
 800d860:	2b00      	cmp	r3, #0
 800d862:	f43f af63 	beq.w	800d72c <HAL_SPI_Transmit+0xd0>
 800d866:	6823      	ldr	r3, [r4, #0]
 800d868:	e74b      	b.n	800d702 <HAL_SPI_Transmit+0xa6>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d86a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800d870:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800d872:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800d874:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800d876:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800d878:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800d87a:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800d87c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d87e:	e788      	b.n	800d792 <HAL_SPI_Transmit+0x136>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d880:	f898 2000 	ldrb.w	r2, [r8]
 800d884:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800d886:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800d888:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d88a:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800d88c:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800d88e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800d890:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d892:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d894:	e769      	b.n	800d76a <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d896:	f7fb ff53 	bl	8009740 <HAL_GetTick>
 800d89a:	1b80      	subs	r0, r0, r6
 800d89c:	42a8      	cmp	r0, r5
 800d89e:	d2c1      	bcs.n	800d824 <HAL_SPI_Transmit+0x1c8>
 800d8a0:	e793      	b.n	800d7ca <HAL_SPI_Transmit+0x16e>
 800d8a2:	bf00      	nop

0800d8a4 <HAL_SPI_TransmitReceive>:
{
 800d8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800d8aa:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 800d8ae:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 800d8b0:	2801      	cmp	r0, #1
 800d8b2:	f000 8097 	beq.w	800d9e4 <HAL_SPI_TransmitReceive+0x140>
 800d8b6:	461f      	mov	r7, r3
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800d8be:	4689      	mov	r9, r1
 800d8c0:	4690      	mov	r8, r2
 800d8c2:	f7fb ff3d 	bl	8009740 <HAL_GetTick>
 800d8c6:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 800d8c8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800d8cc:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d8ce:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800d8d0:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d8d2:	d010      	beq.n	800d8f6 <HAL_SPI_TransmitReceive+0x52>
 800d8d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8d8:	d008      	beq.n	800d8ec <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800d8da:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800d8dc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800d8de:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800d8e0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d8e4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800d8e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d8ec:	68a2      	ldr	r2, [r4, #8]
 800d8ee:	2a00      	cmp	r2, #0
 800d8f0:	d1f3      	bne.n	800d8da <HAL_SPI_TransmitReceive+0x36>
 800d8f2:	2904      	cmp	r1, #4
 800d8f4:	d1f1      	bne.n	800d8da <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d8f6:	f1b9 0f00 	cmp.w	r9, #0
 800d8fa:	d076      	beq.n	800d9ea <HAL_SPI_TransmitReceive+0x146>
 800d8fc:	f1b8 0f00 	cmp.w	r8, #0
 800d900:	d073      	beq.n	800d9ea <HAL_SPI_TransmitReceive+0x146>
 800d902:	2f00      	cmp	r7, #0
 800d904:	d071      	beq.n	800d9ea <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d906:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d90a:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d90c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d910:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d912:	bf1c      	itt	ne
 800d914:	2205      	movne	r2, #5
 800d916:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d91a:	2200      	movs	r2, #0
 800d91c:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800d91e:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d922:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 800d924:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d928:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 800d92c:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d92e:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 800d930:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d934:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d938:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d93a:	d858      	bhi.n	800d9ee <HAL_SPI_TransmitReceive+0x14a>
 800d93c:	2f01      	cmp	r7, #1
 800d93e:	f000 8124 	beq.w	800db8a <HAL_SPI_TransmitReceive+0x2e6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d942:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800d946:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d948:	6811      	ldr	r1, [r2, #0]
 800d94a:	0649      	lsls	r1, r1, #25
 800d94c:	f100 80e3 	bmi.w	800db16 <HAL_SPI_TransmitReceive+0x272>
    __HAL_SPI_ENABLE(hspi);
 800d950:	6811      	ldr	r1, [r2, #0]
 800d952:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800d956:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f000 80df 	beq.w	800db1c <HAL_SPI_TransmitReceive+0x278>
 800d95e:	2f01      	cmp	r7, #1
 800d960:	f000 80dc 	beq.w	800db1c <HAL_SPI_TransmitReceive+0x278>
        txallowed = 1U;
 800d964:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d966:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d968:	b29b      	uxth	r3, r3
 800d96a:	b92b      	cbnz	r3, 800d978 <HAL_SPI_TransmitReceive+0xd4>
 800d96c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800d970:	b29b      	uxth	r3, r3
 800d972:	2b00      	cmp	r3, #0
 800d974:	f000 8086 	beq.w	800da84 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d978:	6822      	ldr	r2, [r4, #0]
 800d97a:	6893      	ldr	r3, [r2, #8]
 800d97c:	0799      	lsls	r1, r3, #30
 800d97e:	d505      	bpl.n	800d98c <HAL_SPI_TransmitReceive+0xe8>
 800d980:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d982:	b29b      	uxth	r3, r3
 800d984:	b113      	cbz	r3, 800d98c <HAL_SPI_TransmitReceive+0xe8>
 800d986:	2f00      	cmp	r7, #0
 800d988:	f040 80e4 	bne.w	800db54 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d98c:	6893      	ldr	r3, [r2, #8]
 800d98e:	f013 0301 	ands.w	r3, r3, #1
 800d992:	d01e      	beq.n	800d9d2 <HAL_SPI_TransmitReceive+0x12e>
 800d994:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800d998:	b289      	uxth	r1, r1
 800d99a:	b1d1      	cbz	r1, 800d9d2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 800d99c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800d9a0:	b289      	uxth	r1, r1
 800d9a2:	2901      	cmp	r1, #1
 800d9a4:	f240 80c8 	bls.w	800db38 <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d9a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d9aa:	68d0      	ldr	r0, [r2, #12]
 800d9ac:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d9b0:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800d9b2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800d9b6:	3902      	subs	r1, #2
 800d9b8:	b289      	uxth	r1, r1
 800d9ba:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800d9be:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800d9c2:	b289      	uxth	r1, r1
 800d9c4:	2901      	cmp	r1, #1
        txallowed = 1U;
 800d9c6:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 800d9c8:	d803      	bhi.n	800d9d2 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d9ca:	6853      	ldr	r3, [r2, #4]
 800d9cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d9d0:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d9d2:	f7fb feb5 	bl	8009740 <HAL_GetTick>
 800d9d6:	1b43      	subs	r3, r0, r5
 800d9d8:	42b3      	cmp	r3, r6
 800d9da:	d3c4      	bcc.n	800d966 <HAL_SPI_TransmitReceive+0xc2>
 800d9dc:	1c73      	adds	r3, r6, #1
 800d9de:	d0c2      	beq.n	800d966 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 800d9e0:	2003      	movs	r0, #3
 800d9e2:	e77b      	b.n	800d8dc <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800d9e4:	2002      	movs	r0, #2
}
 800d9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 800d9ea:	2001      	movs	r0, #1
 800d9ec:	e776      	b.n	800d8dc <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d9ee:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800d9f2:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d9f4:	6811      	ldr	r1, [r2, #0]
 800d9f6:	0648      	lsls	r0, r1, #25
 800d9f8:	d403      	bmi.n	800da02 <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 800d9fa:	6811      	ldr	r1, [r2, #0]
 800d9fc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800da00:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800da02:	2b00      	cmp	r3, #0
 800da04:	d161      	bne.n	800daca <HAL_SPI_TransmitReceive+0x226>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da06:	4649      	mov	r1, r9
 800da08:	f831 3b02 	ldrh.w	r3, [r1], #2
 800da0c:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800da0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800da10:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800da12:	3b01      	subs	r3, #1
 800da14:	b29b      	uxth	r3, r3
 800da16:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800da18:	1c72      	adds	r2, r6, #1
{
 800da1a:	f04f 0701 	mov.w	r7, #1
 800da1e:	d028      	beq.n	800da72 <HAL_SPI_TransmitReceive+0x1ce>
 800da20:	e04e      	b.n	800dac0 <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800da22:	6822      	ldr	r2, [r4, #0]
 800da24:	6893      	ldr	r3, [r2, #8]
 800da26:	079b      	lsls	r3, r3, #30
 800da28:	d50d      	bpl.n	800da46 <HAL_SPI_TransmitReceive+0x1a2>
 800da2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	b153      	cbz	r3, 800da46 <HAL_SPI_TransmitReceive+0x1a2>
 800da30:	b14f      	cbz	r7, 800da46 <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800da34:	f831 3b02 	ldrh.w	r3, [r1], #2
 800da38:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800da3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800da3c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800da3e:	3b01      	subs	r3, #1
 800da40:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800da42:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 800da44:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800da46:	6893      	ldr	r3, [r2, #8]
 800da48:	f013 0301 	ands.w	r3, r3, #1
 800da4c:	d00f      	beq.n	800da6e <HAL_SPI_TransmitReceive+0x1ca>
 800da4e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800da52:	b289      	uxth	r1, r1
 800da54:	b159      	cbz	r1, 800da6e <HAL_SPI_TransmitReceive+0x1ca>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da56:	68d1      	ldr	r1, [r2, #12]
 800da58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da5a:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800da5e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800da60:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da64:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800da66:	3b01      	subs	r3, #1
 800da68:	b29b      	uxth	r3, r3
 800da6a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800da6e:	f7fb fe67 	bl	8009740 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800da74:	b29b      	uxth	r3, r3
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1d3      	bne.n	800da22 <HAL_SPI_TransmitReceive+0x17e>
 800da7a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800da7e:	b29b      	uxth	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1ce      	bne.n	800da22 <HAL_SPI_TransmitReceive+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da84:	462a      	mov	r2, r5
 800da86:	4631      	mov	r1, r6
 800da88:	4620      	mov	r0, r4
 800da8a:	f7ff fccb 	bl	800d424 <SPI_EndRxTxTransaction>
 800da8e:	2800      	cmp	r0, #0
 800da90:	f43f af24 	beq.w	800d8dc <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800da94:	2320      	movs	r3, #32
 800da96:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800da98:	2001      	movs	r0, #1
 800da9a:	e71f      	b.n	800d8dc <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da9c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d0ee      	beq.n	800da84 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800daa6:	6822      	ldr	r2, [r4, #0]
 800daa8:	6893      	ldr	r3, [r2, #8]
 800daaa:	0798      	lsls	r0, r3, #30
 800daac:	d422      	bmi.n	800daf4 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800daae:	6893      	ldr	r3, [r2, #8]
 800dab0:	f013 0301 	ands.w	r3, r3, #1
 800dab4:	d10c      	bne.n	800dad0 <HAL_SPI_TransmitReceive+0x22c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dab6:	f7fb fe43 	bl	8009740 <HAL_GetTick>
 800daba:	1b40      	subs	r0, r0, r5
 800dabc:	42b0      	cmp	r0, r6
 800dabe:	d28f      	bcs.n	800d9e0 <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dac0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1ee      	bne.n	800daa6 <HAL_SPI_TransmitReceive+0x202>
 800dac8:	e7e8      	b.n	800da9c <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800daca:	2f01      	cmp	r7, #1
 800dacc:	d1a4      	bne.n	800da18 <HAL_SPI_TransmitReceive+0x174>
 800dace:	e79a      	b.n	800da06 <HAL_SPI_TransmitReceive+0x162>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dad0:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800dad4:	b289      	uxth	r1, r1
 800dad6:	2900      	cmp	r1, #0
 800dad8:	d0ed      	beq.n	800dab6 <HAL_SPI_TransmitReceive+0x212>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dada:	68d1      	ldr	r1, [r2, #12]
 800dadc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dade:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800dae2:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800dae4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dae8:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800daea:	3b01      	subs	r3, #1
 800daec:	b29b      	uxth	r3, r3
 800daee:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800daf2:	e7e0      	b.n	800dab6 <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800daf4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d0d8      	beq.n	800daae <HAL_SPI_TransmitReceive+0x20a>
 800dafc:	2f00      	cmp	r7, #0
 800dafe:	d0d6      	beq.n	800daae <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800db02:	f833 1b02 	ldrh.w	r1, [r3], #2
 800db06:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800db08:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800db0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800db0c:	3b01      	subs	r3, #1
 800db0e:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800db10:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 800db12:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800db14:	e7cb      	b.n	800daae <HAL_SPI_TransmitReceive+0x20a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800db16:	2b00      	cmp	r3, #0
 800db18:	f47f af24 	bne.w	800d964 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 800db1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800db1e:	b29b      	uxth	r3, r3
 800db20:	2b01      	cmp	r3, #1
 800db22:	d93a      	bls.n	800db9a <HAL_SPI_TransmitReceive+0x2f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db24:	4649      	mov	r1, r9
 800db26:	f831 3b02 	ldrh.w	r3, [r1], #2
 800db2a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 800db2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800db2e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800db30:	3b02      	subs	r3, #2
 800db32:	b29b      	uxth	r3, r3
 800db34:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800db36:	e715      	b.n	800d964 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 800db38:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800db3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db3c:	7b12      	ldrb	r2, [r2, #12]
 800db3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800db40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db42:	3301      	adds	r3, #1
 800db44:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800db46:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800db4a:	3b01      	subs	r3, #1
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800db52:	e73e      	b.n	800d9d2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 800db54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800db56:	b29b      	uxth	r3, r3
 800db58:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800db5c:	d909      	bls.n	800db72 <HAL_SPI_TransmitReceive+0x2ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db5e:	f833 1b02 	ldrh.w	r1, [r3], #2
 800db62:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800db64:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800db66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800db68:	3b02      	subs	r3, #2
 800db6a:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800db6c:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 800db6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800db70:	e70c      	b.n	800d98c <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800db76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800db78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800db7a:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800db7c:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800db7e:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800db80:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800db82:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800db84:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 800db86:	2700      	movs	r7, #0
 800db88:	e700      	b.n	800d98c <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db8a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800db8e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800db90:	6811      	ldr	r1, [r2, #0]
 800db92:	0649      	lsls	r1, r1, #25
 800db94:	f57f aedc 	bpl.w	800d950 <HAL_SPI_TransmitReceive+0xac>
 800db98:	e7c0      	b.n	800db1c <HAL_SPI_TransmitReceive+0x278>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800db9a:	f899 3000 	ldrb.w	r3, [r9]
 800db9e:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800dba0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 800dba2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800dba4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800dba6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800dba8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800dbaa:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800dbac:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800dbae:	e6d9      	b.n	800d964 <HAL_SPI_TransmitReceive+0xc0>

0800dbb0 <HAL_SPI_Receive>:
{
 800dbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dbb4:	6846      	ldr	r6, [r0, #4]
 800dbb6:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 800dbba:	b084      	sub	sp, #16
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	4690      	mov	r8, r2
 800dbc0:	461d      	mov	r5, r3
 800dbc2:	460f      	mov	r7, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dbc4:	f000 808f 	beq.w	800dce6 <HAL_SPI_Receive+0x136>
  __HAL_LOCK(hspi);
 800dbc8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	f000 8097 	beq.w	800dd00 <HAL_SPI_Receive+0x150>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800dbd8:	f7fb fdb2 	bl	8009740 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800dbdc:	f894 c05d 	ldrb.w	ip, [r4, #93]	; 0x5d
 800dbe0:	f1bc 0f01 	cmp.w	ip, #1
  tickstart = HAL_GetTick();
 800dbe4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800dbe6:	fa5f f08c 	uxtb.w	r0, ip
 800dbea:	d009      	beq.n	800dc00 <HAL_SPI_Receive+0x50>
    errorcode = HAL_BUSY;
 800dbec:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800dbee:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800dbf0:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800dbf2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800dbf6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800dbfa:	b004      	add	sp, #16
 800dbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800dc00:	2f00      	cmp	r7, #0
 800dc02:	d0f4      	beq.n	800dbee <HAL_SPI_Receive+0x3e>
 800dc04:	f1b8 0f00 	cmp.w	r8, #0
 800dc08:	d0f1      	beq.n	800dbee <HAL_SPI_Receive+0x3e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dc0a:	2204      	movs	r2, #4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc0c:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dc0e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc12:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc14:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc16:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferCount = Size;
 800dc18:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800dc1c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800dc1e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800dc22:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800dc24:	87a3      	strh	r3, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc26:	6853      	ldr	r3, [r2, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dc28:	6427      	str	r7, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc2e:	bf8c      	ite	hi
 800dc30:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc34:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
  hspi->RxXferSize  = Size;
 800dc38:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc3c:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc3e:	68a0      	ldr	r0, [r4, #8]
 800dc40:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc44:	4613      	mov	r3, r2
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc46:	d107      	bne.n	800dc58 <HAL_SPI_Receive+0xa8>
    __HAL_SPI_DISABLE(hspi);
 800dc48:	6810      	ldr	r0, [r2, #0]
 800dc4a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800dc4e:	6010      	str	r0, [r2, #0]
    SPI_1LINE_RX(hspi);
 800dc50:	6810      	ldr	r0, [r2, #0]
 800dc52:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 800dc56:	6010      	str	r0, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc58:	6810      	ldr	r0, [r2, #0]
 800dc5a:	0640      	lsls	r0, r0, #25
 800dc5c:	d403      	bmi.n	800dc66 <HAL_SPI_Receive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 800dc5e:	6810      	ldr	r0, [r2, #0]
 800dc60:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800dc64:	6010      	str	r0, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800dc66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dc6a:	f240 8082 	bls.w	800dd72 <HAL_SPI_Receive+0x1c2>
    while (hspi->RxXferCount > 0U)
 800dc6e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800dc72:	b289      	uxth	r1, r1
 800dc74:	b1a1      	cbz	r1, 800dca0 <HAL_SPI_Receive+0xf0>
 800dc76:	1c6f      	adds	r7, r5, #1
 800dc78:	d157      	bne.n	800dd2a <HAL_SPI_Receive+0x17a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dc7a:	6893      	ldr	r3, [r2, #8]
 800dc7c:	07d8      	lsls	r0, r3, #31
 800dc7e:	d55d      	bpl.n	800dd3c <HAL_SPI_Receive+0x18c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dc80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc82:	68d1      	ldr	r1, [r2, #12]
 800dc84:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->RxXferCount--;
 800dc88:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc8c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800dc8e:	3901      	subs	r1, #1
 800dc90:	b289      	uxth	r1, r1
 800dc92:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800dc96:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1ec      	bne.n	800dc7a <HAL_SPI_Receive+0xca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dca0:	6863      	ldr	r3, [r4, #4]
 800dca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dca6:	f000 80a7 	beq.w	800ddf8 <HAL_SPI_Receive+0x248>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dcaa:	f7fb fd49 	bl	8009740 <HAL_GetTick>
 800dcae:	19af      	adds	r7, r5, r6
 800dcb0:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800dcb2:	f7fb fd45 	bl	8009740 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dcb6:	4b77      	ldr	r3, [pc, #476]	; (800de94 <HAL_SPI_Receive+0x2e4>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800dcbe:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 800dcc2:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dcc4:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dcc6:	1c69      	adds	r1, r5, #1
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	d140      	bne.n	800dd4e <HAL_SPI_Receive+0x19e>
 800dccc:	6899      	ldr	r1, [r3, #8]
 800dcce:	060a      	lsls	r2, r1, #24
 800dcd0:	d4fc      	bmi.n	800dccc <HAL_SPI_Receive+0x11c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcd2:	6863      	ldr	r3, [r4, #4]
 800dcd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcd8:	f000 809c 	beq.w	800de14 <HAL_SPI_Receive+0x264>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dcdc:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800dcde:	3800      	subs	r0, #0
 800dce0:	bf18      	it	ne
 800dce2:	2001      	movne	r0, #1
error :
 800dce4:	e783      	b.n	800dbee <HAL_SPI_Receive+0x3e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dce6:	6883      	ldr	r3, [r0, #8]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f47f af6d 	bne.w	800dbc8 <HAL_SPI_Receive+0x18>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dcee:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dcf0:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dcf2:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dcf4:	f880 505d 	strb.w	r5, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dcf8:	460a      	mov	r2, r1
 800dcfa:	f7ff fdd3 	bl	800d8a4 <HAL_SPI_TransmitReceive>
 800dcfe:	e77c      	b.n	800dbfa <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800dd00:	2002      	movs	r0, #2
}
 800dd02:	b004      	add	sp, #16
 800dd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800dd10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd14:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800dd16:	3b01      	subs	r3, #1
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800dd1e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d0bb      	beq.n	800dca0 <HAL_SPI_Receive+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	689a      	ldr	r2, [r3, #8]
 800dd2c:	07d0      	lsls	r0, r2, #31
 800dd2e:	d4eb      	bmi.n	800dd08 <HAL_SPI_Receive+0x158>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd30:	f7fb fd06 	bl	8009740 <HAL_GetTick>
 800dd34:	1b80      	subs	r0, r0, r6
 800dd36:	42a8      	cmp	r0, r5
 800dd38:	d25c      	bcs.n	800ddf4 <HAL_SPI_Receive+0x244>
 800dd3a:	e7f0      	b.n	800dd1e <HAL_SPI_Receive+0x16e>
 800dd3c:	f7fb fd00 	bl	8009740 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800dd40:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d0aa      	beq.n	800dca0 <HAL_SPI_Receive+0xf0>
 800dd4a:	6822      	ldr	r2, [r4, #0]
 800dd4c:	e795      	b.n	800dc7a <HAL_SPI_Receive+0xca>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	061b      	lsls	r3, r3, #24
 800dd52:	d5be      	bpl.n	800dcd2 <HAL_SPI_Receive+0x122>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dd54:	f7fb fcf4 	bl	8009740 <HAL_GetTick>
 800dd58:	eba0 0008 	sub.w	r0, r0, r8
 800dd5c:	42b8      	cmp	r0, r7
 800dd5e:	d270      	bcs.n	800de42 <HAL_SPI_Receive+0x292>
      if (count == 0U)
 800dd60:	9a03      	ldr	r2, [sp, #12]
      count--;
 800dd62:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800dd64:	2a00      	cmp	r2, #0
      count--;
 800dd66:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800dd6a:	bf08      	it	eq
 800dd6c:	2700      	moveq	r7, #0
      count--;
 800dd6e:	9303      	str	r3, [sp, #12]
 800dd70:	e7a9      	b.n	800dcc6 <HAL_SPI_Receive+0x116>
    while (hspi->RxXferCount > 0U)
 800dd72:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800dd76:	b292      	uxth	r2, r2
 800dd78:	2a00      	cmp	r2, #0
 800dd7a:	d091      	beq.n	800dca0 <HAL_SPI_Receive+0xf0>
 800dd7c:	1c69      	adds	r1, r5, #1
 800dd7e:	d013      	beq.n	800dda8 <HAL_SPI_Receive+0x1f8>
 800dd80:	e030      	b.n	800dde4 <HAL_SPI_Receive+0x234>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dd82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dd84:	7b1b      	ldrb	r3, [r3, #12]
 800dd86:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800dd88:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800dd8e:	3901      	subs	r1, #1
 800dd90:	b289      	uxth	r1, r1
 800dd92:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800dd96:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd9a:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 800dd9c:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd9e:	6422      	str	r2, [r4, #64]	; 0x40
    while (hspi->RxXferCount > 0U)
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f43f af7d 	beq.w	800dca0 <HAL_SPI_Receive+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dda6:	6823      	ldr	r3, [r4, #0]
 800dda8:	689a      	ldr	r2, [r3, #8]
 800ddaa:	07d2      	lsls	r2, r2, #31
 800ddac:	d4e9      	bmi.n	800dd82 <HAL_SPI_Receive+0x1d2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddae:	f7fb fcc7 	bl	8009740 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800ddb2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1f4      	bne.n	800dda6 <HAL_SPI_Receive+0x1f6>
 800ddbc:	e770      	b.n	800dca0 <HAL_SPI_Receive+0xf0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ddbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ddc0:	7b1b      	ldrb	r3, [r3, #12]
 800ddc2:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800ddc4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddc8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800ddca:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddcc:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800ddce:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddd0:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800ddd2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800ddd6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f43f af5f 	beq.w	800dca0 <HAL_SPI_Receive+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	689a      	ldr	r2, [r3, #8]
 800dde6:	07d7      	lsls	r7, r2, #31
 800dde8:	d4e9      	bmi.n	800ddbe <HAL_SPI_Receive+0x20e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddea:	f7fb fca9 	bl	8009740 <HAL_GetTick>
 800ddee:	1b80      	subs	r0, r0, r6
 800ddf0:	42a8      	cmp	r0, r5
 800ddf2:	d3f0      	bcc.n	800ddd6 <HAL_SPI_Receive+0x226>
          errorcode = HAL_TIMEOUT;
 800ddf4:	2003      	movs	r0, #3
 800ddf6:	e6fa      	b.n	800dbee <HAL_SPI_Receive+0x3e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ddf8:	68a3      	ldr	r3, [r4, #8]
 800ddfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddfe:	d003      	beq.n	800de08 <HAL_SPI_Receive+0x258>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de04:	f47f af51 	bne.w	800dcaa <HAL_SPI_Receive+0xfa>
    __HAL_SPI_DISABLE(hspi);
 800de08:	6822      	ldr	r2, [r4, #0]
 800de0a:	6813      	ldr	r3, [r2, #0]
 800de0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de10:	6013      	str	r3, [r2, #0]
 800de12:	e74a      	b.n	800dcaa <HAL_SPI_Receive+0xfa>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de14:	68a3      	ldr	r3, [r4, #8]
 800de16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de1a:	d003      	beq.n	800de24 <HAL_SPI_Receive+0x274>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de20:	f47f af5c 	bne.w	800dcdc <HAL_SPI_Receive+0x12c>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800de24:	4632      	mov	r2, r6
 800de26:	4629      	mov	r1, r5
 800de28:	4620      	mov	r0, r4
 800de2a:	f7ff fa87 	bl	800d33c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800de2e:	2800      	cmp	r0, #0
 800de30:	f43f af54 	beq.w	800dcdc <HAL_SPI_Receive+0x12c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de34:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800de36:	f043 0320 	orr.w	r3, r3, #32
 800de3a:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800de3c:	2320      	movs	r3, #32
 800de3e:	6623      	str	r3, [r4, #96]	; 0x60
 800de40:	e74c      	b.n	800dcdc <HAL_SPI_Receive+0x12c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de42:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de46:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de48:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800de50:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de52:	d013      	beq.n	800de7c <HAL_SPI_Receive+0x2cc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800de54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800de56:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800de5a:	d107      	bne.n	800de6c <HAL_SPI_Receive+0x2bc>
          SPI_RESET_CRC(hspi);
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de6a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800de6c:	2301      	movs	r3, #1
 800de6e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de72:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800de74:	f043 0320 	orr.w	r3, r3, #32
 800de78:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800de7a:	e7df      	b.n	800de3c <HAL_SPI_Receive+0x28c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de7c:	68a2      	ldr	r2, [r4, #8]
 800de7e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800de82:	d002      	beq.n	800de8a <HAL_SPI_Receive+0x2da>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de84:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800de88:	d1e4      	bne.n	800de54 <HAL_SPI_Receive+0x2a4>
          __HAL_SPI_DISABLE(hspi);
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	e7df      	b.n	800de54 <HAL_SPI_Receive+0x2a4>
 800de94:	200000e4 	.word	0x200000e4

0800de98 <HAL_SPI_ErrorCallback>:
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop

0800de9c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800de9c:	6802      	ldr	r2, [r0, #0]
{
 800de9e:	b510      	push	{r4, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800dea0:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800dea2:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dea4:	f003 0c41 	and.w	ip, r3, #65	; 0x41
 800dea8:	f1bc 0f01 	cmp.w	ip, #1
{
 800deac:	b084      	sub	sp, #16
 800deae:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800deb0:	d05a      	beq.n	800df68 <HAL_SPI_IRQHandler+0xcc>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800deb2:	0798      	lsls	r0, r3, #30
 800deb4:	d501      	bpl.n	800deba <HAL_SPI_IRQHandler+0x1e>
 800deb6:	0608      	lsls	r0, r1, #24
 800deb8:	d45e      	bmi.n	800df78 <HAL_SPI_IRQHandler+0xdc>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800deba:	f413 7fb0 	tst.w	r3, #352	; 0x160
 800debe:	d051      	beq.n	800df64 <HAL_SPI_IRQHandler+0xc8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800dec0:	0688      	lsls	r0, r1, #26
 800dec2:	d54f      	bpl.n	800df64 <HAL_SPI_IRQHandler+0xc8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dec4:	0658      	lsls	r0, r3, #25
 800dec6:	d50e      	bpl.n	800dee6 <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dec8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800decc:	2803      	cmp	r0, #3
 800dece:	d05d      	beq.n	800df8c <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ded0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ded2:	f040 0004 	orr.w	r0, r0, #4
 800ded6:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ded8:	2000      	movs	r0, #0
 800deda:	9000      	str	r0, [sp, #0]
 800dedc:	68d0      	ldr	r0, [r2, #12]
 800dede:	9000      	str	r0, [sp, #0]
 800dee0:	6890      	ldr	r0, [r2, #8]
 800dee2:	9000      	str	r0, [sp, #0]
 800dee4:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800dee6:	0698      	lsls	r0, r3, #26
 800dee8:	d50c      	bpl.n	800df04 <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800deea:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800deec:	f040 0001 	orr.w	r0, r0, #1
 800def0:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800def2:	2000      	movs	r0, #0
 800def4:	9002      	str	r0, [sp, #8]
 800def6:	6890      	ldr	r0, [r2, #8]
 800def8:	9002      	str	r0, [sp, #8]
 800defa:	6810      	ldr	r0, [r2, #0]
 800defc:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800df00:	6010      	str	r0, [r2, #0]
 800df02:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800df04:	05d8      	lsls	r0, r3, #23
 800df06:	d508      	bpl.n	800df1a <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df08:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800df0a:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df0c:	f043 0308 	orr.w	r3, r3, #8
 800df10:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800df12:	9003      	str	r0, [sp, #12]
 800df14:	6893      	ldr	r3, [r2, #8]
 800df16:	9303      	str	r3, [sp, #12]
 800df18:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df1a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800df1c:	b313      	cbz	r3, 800df64 <HAL_SPI_IRQHandler+0xc8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800df1e:	6853      	ldr	r3, [r2, #4]
 800df20:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800df24:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800df26:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800df28:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 800df2a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800df2e:	d029      	beq.n	800df84 <HAL_SPI_IRQHandler+0xe8>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800df30:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800df32:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800df34:	f023 0303 	bic.w	r3, r3, #3
 800df38:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800df3a:	b140      	cbz	r0, 800df4e <HAL_SPI_IRQHandler+0xb2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800df3c:	4b17      	ldr	r3, [pc, #92]	; (800df9c <HAL_SPI_IRQHandler+0x100>)
 800df3e:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800df40:	f7fb fcc2 	bl	80098c8 <HAL_DMA_Abort_IT>
 800df44:	b118      	cbz	r0, 800df4e <HAL_SPI_IRQHandler+0xb2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800df46:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800df48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df4c:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800df4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df50:	b140      	cbz	r0, 800df64 <HAL_SPI_IRQHandler+0xc8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800df52:	4b12      	ldr	r3, [pc, #72]	; (800df9c <HAL_SPI_IRQHandler+0x100>)
 800df54:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800df56:	f7fb fcb7 	bl	80098c8 <HAL_DMA_Abort_IT>
 800df5a:	b118      	cbz	r0, 800df64 <HAL_SPI_IRQHandler+0xc8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800df5c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800df5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df62:	6623      	str	r3, [r4, #96]	; 0x60
}
 800df64:	b004      	add	sp, #16
 800df66:	bd10      	pop	{r4, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800df68:	f011 0f40 	tst.w	r1, #64	; 0x40
 800df6c:	d0a1      	beq.n	800deb2 <HAL_SPI_IRQHandler+0x16>
    hspi->RxISR(hspi);
 800df6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 800df70:	b004      	add	sp, #16
 800df72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 800df76:	4718      	bx	r3
 800df78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800df7a:	4620      	mov	r0, r4
}
 800df7c:	b004      	add	sp, #16
 800df7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 800df82:	4718      	bx	r3
        HAL_SPI_ErrorCallback(hspi);
 800df84:	4620      	mov	r0, r4
 800df86:	f7ff ff87 	bl	800de98 <HAL_SPI_ErrorCallback>
 800df8a:	e7eb      	b.n	800df64 <HAL_SPI_IRQHandler+0xc8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df8c:	2300      	movs	r3, #0
 800df8e:	9301      	str	r3, [sp, #4]
 800df90:	68d3      	ldr	r3, [r2, #12]
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	6893      	ldr	r3, [r2, #8]
 800df96:	9301      	str	r3, [sp, #4]
 800df98:	9b01      	ldr	r3, [sp, #4]
        return;
 800df9a:	e7e3      	b.n	800df64 <HAL_SPI_IRQHandler+0xc8>
 800df9c:	0800dfa1 	.word	0x0800dfa1

0800dfa0 <SPI_DMAAbortOnError>:
{
 800dfa0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dfa2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800dfaa:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800dfac:	f7ff ff74 	bl	800de98 <HAL_SPI_ErrorCallback>
}
 800dfb0:	bd08      	pop	{r3, pc}
 800dfb2:	bf00      	nop

0800dfb4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d070      	beq.n	800e09a <HAL_TIM_Base_Init+0xe6>
{
 800dfb8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d047      	beq.n	800e058 <HAL_TIM_Base_Init+0xa4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfc8:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfca:	4935      	ldr	r1, [pc, #212]	; (800e0a0 <HAL_TIM_Base_Init+0xec>)
  htim->State = HAL_TIM_STATE_BUSY;
 800dfcc:	2302      	movs	r3, #2
 800dfce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfd2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800dfd4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfd6:	d044      	beq.n	800e062 <HAL_TIM_Base_Init+0xae>
 800dfd8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800dfdc:	d04b      	beq.n	800e076 <HAL_TIM_Base_Init+0xc2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfde:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 800dfe2:	428a      	cmp	r2, r1
 800dfe4:	d00d      	beq.n	800e002 <HAL_TIM_Base_Init+0x4e>
 800dfe6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800dfea:	428a      	cmp	r2, r1
 800dfec:	d009      	beq.n	800e002 <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dfee:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dff0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dff6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800dff8:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dffa:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dffc:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800dffe:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e000:	e00e      	b.n	800e020 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e002:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e004:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800e006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e00a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e00c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e010:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800e012:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e014:	68e3      	ldr	r3, [r4, #12]
 800e016:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800e018:	6863      	ldr	r3, [r4, #4]
 800e01a:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e01c:	6963      	ldr	r3, [r4, #20]
 800e01e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e020:	2301      	movs	r3, #1
 800e022:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e024:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e028:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800e02c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800e030:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800e034:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e040:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800e044:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e048:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800e04c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800e050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800e054:	2000      	movs	r0, #0
}
 800e056:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800e058:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800e05c:	f7fb f9cc 	bl	80093f8 <HAL_TIM_Base_MspInit>
 800e060:	e7b2      	b.n	800dfc8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800e062:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e064:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800e06a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800e06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e070:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e072:	69a1      	ldr	r1, [r4, #24]
 800e074:	e7ca      	b.n	800e00c <HAL_TIM_Base_Init+0x58>
    tmpcr1 |= Structure->CounterMode;
 800e076:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e078:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800e07e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800e080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e084:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e086:	69a1      	ldr	r1, [r4, #24]
 800e088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e08c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800e08e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e090:	68e3      	ldr	r3, [r4, #12]
 800e092:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800e094:	6863      	ldr	r3, [r4, #4]
 800e096:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e098:	e7c2      	b.n	800e020 <HAL_TIM_Base_Init+0x6c>
    return HAL_ERROR;
 800e09a:	2001      	movs	r0, #1
}
 800e09c:	4770      	bx	lr
 800e09e:	bf00      	nop
 800e0a0:	40012c00 	.word	0x40012c00

0800e0a4 <HAL_UART_TxCpltCallback>:
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop

0800e0a8 <HAL_UART_ErrorCallback>:
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop

0800e0ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e0b6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0ba:	f7ff fff5 	bl	800e0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0be:	bd08      	pop	{r3, pc}

0800e0c0 <HAL_UARTEx_RxEventCallback>:
}
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop

0800e0c4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e0c4:	6803      	ldr	r3, [r0, #0]
 800e0c6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0c8:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e0ca:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 800e0ce:	ea12 0f0c 	tst.w	r2, ip
{
 800e0d2:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e0d4:	689d      	ldr	r5, [r3, #8]
{
 800e0d6:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800e0d8:	d14e      	bne.n	800e178 <HAL_UART_IRQHandler+0xb4>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e0da:	0696      	lsls	r6, r2, #26
 800e0dc:	d502      	bpl.n	800e0e4 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e0de:	068e      	lsls	r6, r1, #26
 800e0e0:	f100 80e3 	bmi.w	800e2aa <HAL_UART_IRQHandler+0x1e6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0e4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e0e6:	2801      	cmp	r0, #1
 800e0e8:	d024      	beq.n	800e134 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e0ea:	02d6      	lsls	r6, r2, #11
 800e0ec:	d502      	bpl.n	800e0f4 <HAL_UART_IRQHandler+0x30>
 800e0ee:	0268      	lsls	r0, r5, #9
 800e0f0:	f100 80e0 	bmi.w	800e2b4 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e0f4:	0616      	lsls	r6, r2, #24
 800e0f6:	d414      	bmi.n	800e122 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e0f8:	0650      	lsls	r0, r2, #25
 800e0fa:	d501      	bpl.n	800e100 <HAL_UART_IRQHandler+0x3c>
 800e0fc:	064a      	lsls	r2, r1, #25
 800e0fe:	d400      	bmi.n	800e102 <HAL_UART_IRQHandler+0x3e>
}
 800e100:	bd70      	pop	{r4, r5, r6, pc}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e102:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e10a:	e843 2100 	strex	r1, r2, [r3]
 800e10e:	2900      	cmp	r1, #0
 800e110:	d1f7      	bne.n	800e102 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e112:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e114:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800e116:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 800e118:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e11a:	4620      	mov	r0, r4
 800e11c:	f7ff ffc2 	bl	800e0a4 <HAL_UART_TxCpltCallback>
}
 800e120:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e122:	060d      	lsls	r5, r1, #24
 800e124:	d5e8      	bpl.n	800e0f8 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 800e126:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0e9      	beq.n	800e100 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 800e12c:	4620      	mov	r0, r4
}
 800e12e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800e132:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e134:	06d6      	lsls	r6, r2, #27
 800e136:	d5d8      	bpl.n	800e0ea <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e138:	06c8      	lsls	r0, r1, #27
 800e13a:	d5d6      	bpl.n	800e0ea <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e13c:	2210      	movs	r2, #16
 800e13e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e140:	689a      	ldr	r2, [r3, #8]
 800e142:	0651      	lsls	r1, r2, #25
 800e144:	f140 80d3 	bpl.w	800e2ee <HAL_UART_IRQHandler+0x22a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e148:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800e14a:	6801      	ldr	r1, [r0, #0]
 800e14c:	684a      	ldr	r2, [r1, #4]
 800e14e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800e150:	2a00      	cmp	r2, #0
 800e152:	d0d5      	beq.n	800e100 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e154:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 800e158:	4295      	cmp	r5, r2
 800e15a:	d9d1      	bls.n	800e100 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 800e15c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e160:	680a      	ldr	r2, [r1, #0]
 800e162:	0692      	lsls	r2, r2, #26
 800e164:	f140 80f7 	bpl.w	800e356 <HAL_UART_IRQHandler+0x292>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e168:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800e16c:	1ae9      	subs	r1, r5, r3
 800e16e:	4620      	mov	r0, r4
 800e170:	b289      	uxth	r1, r1
 800e172:	f7ff ffa5 	bl	800e0c0 <HAL_UARTEx_RxEventCallback>
}
 800e176:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e178:	4892      	ldr	r0, [pc, #584]	; (800e3c4 <HAL_UART_IRQHandler+0x300>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e17a:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e17e:	4008      	ands	r0, r1
 800e180:	4330      	orrs	r0, r6
 800e182:	d0af      	beq.n	800e0e4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e184:	07d5      	lsls	r5, r2, #31
 800e186:	d509      	bpl.n	800e19c <HAL_UART_IRQHandler+0xd8>
 800e188:	05c8      	lsls	r0, r1, #23
 800e18a:	d507      	bpl.n	800e19c <HAL_UART_IRQHandler+0xd8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e18c:	2001      	movs	r0, #1
 800e18e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e190:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800e194:	f040 0001 	orr.w	r0, r0, #1
 800e198:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e19c:	0795      	lsls	r5, r2, #30
 800e19e:	d57f      	bpl.n	800e2a0 <HAL_UART_IRQHandler+0x1dc>
 800e1a0:	b18e      	cbz	r6, 800e1c6 <HAL_UART_IRQHandler+0x102>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e1a2:	2002      	movs	r0, #2
 800e1a4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1a6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800e1aa:	f040 0004 	orr.w	r0, r0, #4
 800e1ae:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1b2:	0750      	lsls	r0, r2, #29
 800e1b4:	d507      	bpl.n	800e1c6 <HAL_UART_IRQHandler+0x102>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1b6:	2004      	movs	r0, #4
 800e1b8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1ba:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800e1be:	f040 0002 	orr.w	r0, r0, #2
 800e1c2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e1c6:	0710      	lsls	r0, r2, #28
 800e1c8:	d50b      	bpl.n	800e1e2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e1ca:	f001 0020 	and.w	r0, r1, #32
 800e1ce:	4330      	orrs	r0, r6
 800e1d0:	d007      	beq.n	800e1e2 <HAL_UART_IRQHandler+0x11e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1d2:	2008      	movs	r0, #8
 800e1d4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e1d6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800e1da:	f040 0008 	orr.w	r0, r0, #8
 800e1de:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e1e2:	0516      	lsls	r6, r2, #20
 800e1e4:	d50a      	bpl.n	800e1fc <HAL_UART_IRQHandler+0x138>
 800e1e6:	014d      	lsls	r5, r1, #5
 800e1e8:	d508      	bpl.n	800e1fc <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e1ee:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e1f0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800e1f4:	f040 0020 	orr.w	r0, r0, #32
 800e1f8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1fc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800e200:	2800      	cmp	r0, #0
 800e202:	f43f af7d 	beq.w	800e100 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e206:	0690      	lsls	r0, r2, #26
 800e208:	d506      	bpl.n	800e218 <HAL_UART_IRQHandler+0x154>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e20a:	0689      	lsls	r1, r1, #26
 800e20c:	d504      	bpl.n	800e218 <HAL_UART_IRQHandler+0x154>
        if (huart->RxISR != NULL)
 800e20e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e210:	b112      	cbz	r2, 800e218 <HAL_UART_IRQHandler+0x154>
          huart->RxISR(huart);
 800e212:	4620      	mov	r0, r4
 800e214:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e216:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800e218:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e21c:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e21e:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e222:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800e226:	ea52 0501 	orrs.w	r5, r2, r1
 800e22a:	f000 80c4 	beq.w	800e3b6 <HAL_UART_IRQHandler+0x2f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e232:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e236:	e843 2100 	strex	r1, r2, [r3]
 800e23a:	2900      	cmp	r1, #0
 800e23c:	d1f7      	bne.n	800e22e <HAL_UART_IRQHandler+0x16a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23e:	f103 0208 	add.w	r2, r3, #8
 800e242:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e246:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24a:	f103 0008 	add.w	r0, r3, #8
 800e24e:	e840 2100 	strex	r1, r2, [r0]
 800e252:	2900      	cmp	r1, #0
 800e254:	d1f3      	bne.n	800e23e <HAL_UART_IRQHandler+0x17a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e256:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e258:	2a01      	cmp	r2, #1
 800e25a:	d033      	beq.n	800e2c4 <HAL_UART_IRQHandler+0x200>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e25c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e25e:	2120      	movs	r1, #32
 800e260:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e262:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e264:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800e266:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e268:	064a      	lsls	r2, r1, #25
 800e26a:	d53c      	bpl.n	800e2e6 <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26c:	f103 0208 	add.w	r2, r3, #8
 800e270:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e278:	f103 0008 	add.w	r0, r3, #8
 800e27c:	e840 2100 	strex	r1, r2, [r0]
 800e280:	2900      	cmp	r1, #0
 800e282:	d1f3      	bne.n	800e26c <HAL_UART_IRQHandler+0x1a8>
          if (huart->hdmarx != NULL)
 800e284:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800e286:	b370      	cbz	r0, 800e2e6 <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e288:	4b4f      	ldr	r3, [pc, #316]	; (800e3c8 <HAL_UART_IRQHandler+0x304>)
 800e28a:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e28c:	f7fb fb1c 	bl	80098c8 <HAL_DMA_Abort_IT>
 800e290:	2800      	cmp	r0, #0
 800e292:	f43f af35 	beq.w	800e100 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e296:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 800e298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e29c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e29e:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2a0:	0755      	lsls	r5, r2, #29
 800e2a2:	d590      	bpl.n	800e1c6 <HAL_UART_IRQHandler+0x102>
 800e2a4:	2e00      	cmp	r6, #0
 800e2a6:	d186      	bne.n	800e1b6 <HAL_UART_IRQHandler+0xf2>
 800e2a8:	e78d      	b.n	800e1c6 <HAL_UART_IRQHandler+0x102>
      if (huart->RxISR != NULL)
 800e2aa:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f47f af3e 	bne.w	800e12e <HAL_UART_IRQHandler+0x6a>
 800e2b2:	e725      	b.n	800e100 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e2b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800e2b8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e2ba:	621a      	str	r2, [r3, #32]
}
 800e2bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800e2c0:	f000 bba8 	b.w	800ea14 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2c8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2cc:	e843 2100 	strex	r1, r2, [r3]
 800e2d0:	2900      	cmp	r1, #0
 800e2d2:	d0c3      	beq.n	800e25c <HAL_UART_IRQHandler+0x198>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d4:	e853 2f00 	ldrex	r2, [r3]
 800e2d8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2dc:	e843 2100 	strex	r1, r2, [r3]
 800e2e0:	2900      	cmp	r1, #0
 800e2e2:	d1ef      	bne.n	800e2c4 <HAL_UART_IRQHandler+0x200>
 800e2e4:	e7ba      	b.n	800e25c <HAL_UART_IRQHandler+0x198>
            HAL_UART_ErrorCallback(huart);
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	f7ff fede 	bl	800e0a8 <HAL_UART_ErrorCallback>
}
 800e2ec:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e2ee:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 800e2f2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e2f6:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 800e2fa:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e2fc:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800e2fe:	2a00      	cmp	r2, #0
 800e300:	f43f aefe 	beq.w	800e100 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e304:	1a41      	subs	r1, r0, r1
 800e306:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800e308:	2900      	cmp	r1, #0
 800e30a:	f43f aef9 	beq.w	800e100 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e312:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e316:	e843 2000 	strex	r0, r2, [r3]
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d1f7      	bne.n	800e30e <HAL_UART_IRQHandler+0x24a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31e:	f103 0208 	add.w	r2, r3, #8
 800e322:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e326:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32a:	f103 0508 	add.w	r5, r3, #8
 800e32e:	e845 2000 	strex	r0, r2, [r5]
 800e332:	2800      	cmp	r0, #0
 800e334:	d1f3      	bne.n	800e31e <HAL_UART_IRQHandler+0x25a>
        huart->RxState = HAL_UART_STATE_READY;
 800e336:	2220      	movs	r2, #32
 800e338:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 800e33a:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e33c:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e33e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e342:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e346:	e843 2000 	strex	r0, r2, [r3]
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d1f7      	bne.n	800e33e <HAL_UART_IRQHandler+0x27a>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e34e:	4620      	mov	r0, r4
 800e350:	f7ff feb6 	bl	800e0c0 <HAL_UARTEx_RxEventCallback>
}
 800e354:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e356:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e35a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e35e:	e843 2100 	strex	r1, r2, [r3]
 800e362:	2900      	cmp	r1, #0
 800e364:	d1f7      	bne.n	800e356 <HAL_UART_IRQHandler+0x292>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e366:	f103 0208 	add.w	r2, r3, #8
 800e36a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e36e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e372:	f103 0508 	add.w	r5, r3, #8
 800e376:	e845 2100 	strex	r1, r2, [r5]
 800e37a:	2900      	cmp	r1, #0
 800e37c:	d1f3      	bne.n	800e366 <HAL_UART_IRQHandler+0x2a2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37e:	f103 0208 	add.w	r2, r3, #8
 800e382:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e38a:	f103 0508 	add.w	r5, r3, #8
 800e38e:	e845 2100 	strex	r1, r2, [r5]
 800e392:	2900      	cmp	r1, #0
 800e394:	d1f3      	bne.n	800e37e <HAL_UART_IRQHandler+0x2ba>
          huart->RxState = HAL_UART_STATE_READY;
 800e396:	2220      	movs	r2, #32
 800e398:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e39a:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3a0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a4:	e843 2100 	strex	r1, r2, [r3]
 800e3a8:	2900      	cmp	r1, #0
 800e3aa:	d1f7      	bne.n	800e39c <HAL_UART_IRQHandler+0x2d8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e3ac:	f7fb fa66 	bl	800987c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e3b0:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 800e3b4:	e6d8      	b.n	800e168 <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f7ff fe76 	bl	800e0a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3bc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800e3c0:	bd70      	pop	{r4, r5, r6, pc}
 800e3c2:	bf00      	nop
 800e3c4:	04000120 	.word	0x04000120
 800e3c8:	0800e0ad 	.word	0x0800e0ad

0800e3cc <UART_SetConfig>:
{
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800e3d0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e3d2:	6883      	ldr	r3, [r0, #8]
 800e3d4:	6900      	ldr	r0, [r0, #16]
 800e3d6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e3d8:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e3da:	4303      	orrs	r3, r0
 800e3dc:	430b      	orrs	r3, r1
 800e3de:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e3e0:	4988      	ldr	r1, [pc, #544]	; (800e604 <UART_SetConfig+0x238>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e3e2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e3e4:	4029      	ands	r1, r5
 800e3e6:	430b      	orrs	r3, r1
 800e3e8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3ea:	6853      	ldr	r3, [r2, #4]
 800e3ec:	68e1      	ldr	r1, [r4, #12]
 800e3ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e3f2:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e3f4:	4984      	ldr	r1, [pc, #528]	; (800e608 <UART_SetConfig+0x23c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3f6:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e3f8:	428a      	cmp	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e3fa:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e3fc:	6891      	ldr	r1, [r2, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e3fe:	d059      	beq.n	800e4b4 <UART_SetConfig+0xe8>
    tmpreg |= huart->Init.OneBitSampling;
 800e400:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e402:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800e406:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e408:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e40a:	4980      	ldr	r1, [pc, #512]	; (800e60c <UART_SetConfig+0x240>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e40c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e40e:	428a      	cmp	r2, r1
 800e410:	d00b      	beq.n	800e42a <UART_SetConfig+0x5e>
 800e412:	4b7f      	ldr	r3, [pc, #508]	; (800e610 <UART_SetConfig+0x244>)
 800e414:	429a      	cmp	r2, r3
 800e416:	d02a      	beq.n	800e46e <UART_SetConfig+0xa2>
 800e418:	4b7e      	ldr	r3, [pc, #504]	; (800e614 <UART_SetConfig+0x248>)
 800e41a:	429a      	cmp	r2, r3
 800e41c:	f000 80a4 	beq.w	800e568 <UART_SetConfig+0x19c>
        ret = HAL_ERROR;
 800e420:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800e422:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 800e424:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
}
 800e428:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e42a:	4b7b      	ldr	r3, [pc, #492]	; (800e618 <UART_SetConfig+0x24c>)
 800e42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e430:	f003 0303 	and.w	r3, r3, #3
 800e434:	3b01      	subs	r3, #1
 800e436:	2b02      	cmp	r3, #2
 800e438:	d978      	bls.n	800e52c <UART_SetConfig+0x160>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e43a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e43e:	f000 80d5 	beq.w	800e5ec <UART_SetConfig+0x220>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e442:	f7fe fdbd 	bl	800cfc0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800e446:	2800      	cmp	r0, #0
 800e448:	d048      	beq.n	800e4dc <UART_SetConfig+0x110>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e44a:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e44c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e450:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800e454:	fbb0 f2f2 	udiv	r2, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e458:	f1a2 0310 	sub.w	r3, r2, #16
 800e45c:	428b      	cmp	r3, r1
 800e45e:	d8df      	bhi.n	800e420 <UART_SetConfig+0x54>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e460:	6823      	ldr	r3, [r4, #0]
 800e462:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 800e464:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 800e466:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
 800e46a:	2000      	movs	r0, #0
}
 800e46c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e46e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800e472:	4a6a      	ldr	r2, [pc, #424]	; (800e61c <UART_SetConfig+0x250>)
 800e474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e478:	f003 030c 	and.w	r3, r3, #12
 800e47c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e47e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e482:	d059      	beq.n	800e538 <UART_SetConfig+0x16c>
    switch (clocksource)
 800e484:	2b08      	cmp	r3, #8
 800e486:	d8cb      	bhi.n	800e420 <UART_SetConfig+0x54>
 800e488:	a201      	add	r2, pc, #4	; (adr r2, 800e490 <UART_SetConfig+0xc4>)
 800e48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e48e:	bf00      	nop
 800e490:	0800e593 	.word	0x0800e593
 800e494:	0800e443 	.word	0x0800e443
 800e498:	0800e5b5 	.word	0x0800e5b5
 800e49c:	0800e421 	.word	0x0800e421
 800e4a0:	0800e587 	.word	0x0800e587
 800e4a4:	0800e421 	.word	0x0800e421
 800e4a8:	0800e421 	.word	0x0800e421
 800e4ac:	0800e421 	.word	0x0800e421
 800e4b0:	0800e5a5 	.word	0x0800e5a5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e4b4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800e4b8:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4ba:	4857      	ldr	r0, [pc, #348]	; (800e618 <UART_SetConfig+0x24c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e4bc:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4be:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e4c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e4c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4ca:	d06e      	beq.n	800e5aa <UART_SetConfig+0x1de>
 800e4cc:	d80b      	bhi.n	800e4e6 <UART_SetConfig+0x11a>
 800e4ce:	b383      	cbz	r3, 800e532 <UART_SetConfig+0x166>
 800e4d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4d4:	d1a4      	bne.n	800e420 <UART_SetConfig+0x54>
        pclk = HAL_RCC_GetSysClockFreq();
 800e4d6:	f7fe f91b 	bl	800c710 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800e4da:	b948      	cbnz	r0, 800e4f0 <UART_SetConfig+0x124>
  huart->RxISR = NULL;
 800e4dc:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 800e4de:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
 800e4e2:	2000      	movs	r0, #0
}
 800e4e4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e4ea:	d199      	bne.n	800e420 <UART_SetConfig+0x54>
        pclk = (uint32_t) LSE_VALUE;
 800e4ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e4f0:	6862      	ldr	r2, [r4, #4]
 800e4f2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e4f6:	4283      	cmp	r3, r0
 800e4f8:	d892      	bhi.n	800e420 <UART_SetConfig+0x54>
 800e4fa:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800e4fe:	d88f      	bhi.n	800e420 <UART_SetConfig+0x54>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e500:	2500      	movs	r5, #0
 800e502:	0853      	lsrs	r3, r2, #1
 800e504:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800e508:	4629      	mov	r1, r5
 800e50a:	fbe0 310c 	umlal	r3, r1, r0, ip
 800e50e:	4618      	mov	r0, r3
 800e510:	462b      	mov	r3, r5
 800e512:	f7f2 fbb9 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e516:	4a42      	ldr	r2, [pc, #264]	; (800e620 <UART_SetConfig+0x254>)
 800e518:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800e51c:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e51e:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e520:	f63f af7e 	bhi.w	800e420 <UART_SetConfig+0x54>
          huart->Instance->BRR = usartdiv;
 800e524:	6822      	ldr	r2, [r4, #0]
 800e526:	4628      	mov	r0, r5
 800e528:	60d3      	str	r3, [r2, #12]
 800e52a:	e77a      	b.n	800e422 <UART_SetConfig+0x56>
 800e52c:	4a3d      	ldr	r2, [pc, #244]	; (800e624 <UART_SetConfig+0x258>)
 800e52e:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800e530:	e7a5      	b.n	800e47e <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e532:	f7fe fd33 	bl	800cf9c <HAL_RCC_GetPCLK1Freq>
        break;
 800e536:	e7d0      	b.n	800e4da <UART_SetConfig+0x10e>
    switch (clocksource)
 800e538:	2b08      	cmp	r3, #8
 800e53a:	f63f af71 	bhi.w	800e420 <UART_SetConfig+0x54>
 800e53e:	a201      	add	r2, pc, #4	; (adr r2, 800e544 <UART_SetConfig+0x178>)
 800e540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e544:	0800e5b9 	.word	0x0800e5b9
 800e548:	0800e5ed 	.word	0x0800e5ed
 800e54c:	0800e5f9 	.word	0x0800e5f9
 800e550:	0800e421 	.word	0x0800e421
 800e554:	0800e5f3 	.word	0x0800e5f3
 800e558:	0800e421 	.word	0x0800e421
 800e55c:	0800e421 	.word	0x0800e421
 800e560:	0800e421 	.word	0x0800e421
 800e564:	0800e5fd 	.word	0x0800e5fd
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e568:	4b2b      	ldr	r3, [pc, #172]	; (800e618 <UART_SetConfig+0x24c>)
 800e56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e56e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e572:	2b20      	cmp	r3, #32
 800e574:	d01b      	beq.n	800e5ae <UART_SetConfig+0x1e2>
 800e576:	d80f      	bhi.n	800e598 <UART_SetConfig+0x1cc>
 800e578:	b143      	cbz	r3, 800e58c <UART_SetConfig+0x1c0>
 800e57a:	2b10      	cmp	r3, #16
 800e57c:	f47f af50 	bne.w	800e420 <UART_SetConfig+0x54>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e580:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e584:	d035      	beq.n	800e5f2 <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetSysClockFreq();
 800e586:	f7fe f8c3 	bl	800c710 <HAL_RCC_GetSysClockFreq>
        break;
 800e58a:	e75c      	b.n	800e446 <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e58c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e590:	d012      	beq.n	800e5b8 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e592:	f7fe fd03 	bl	800cf9c <HAL_RCC_GetPCLK1Freq>
        break;
 800e596:	e756      	b.n	800e446 <UART_SetConfig+0x7a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e598:	2b30      	cmp	r3, #48	; 0x30
 800e59a:	f47f af41 	bne.w	800e420 <UART_SetConfig+0x54>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e59e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e5a2:	d02b      	beq.n	800e5fc <UART_SetConfig+0x230>
    switch (clocksource)
 800e5a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e5a8:	e74f      	b.n	800e44a <UART_SetConfig+0x7e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5aa:	481f      	ldr	r0, [pc, #124]	; (800e628 <UART_SetConfig+0x25c>)
 800e5ac:	e7a0      	b.n	800e4f0 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e5ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e5b2:	d021      	beq.n	800e5f8 <UART_SetConfig+0x22c>
        pclk = (uint32_t) HSI_VALUE;
 800e5b4:	481c      	ldr	r0, [pc, #112]	; (800e628 <UART_SetConfig+0x25c>)
 800e5b6:	e748      	b.n	800e44a <UART_SetConfig+0x7e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5b8:	f7fe fcf0 	bl	800cf9c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d08d      	beq.n	800e4dc <UART_SetConfig+0x110>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e5c0:	0043      	lsls	r3, r0, #1
 800e5c2:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5c4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e5c8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e5cc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5d0:	f1a3 0210 	sub.w	r2, r3, #16
 800e5d4:	428a      	cmp	r2, r1
 800e5d6:	f63f af23 	bhi.w	800e420 <UART_SetConfig+0x54>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5da:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800e5de:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5e0:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5e2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	60cb      	str	r3, [r1, #12]
 800e5ea:	e777      	b.n	800e4dc <UART_SetConfig+0x110>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5ec:	f7fe fce8 	bl	800cfc0 <HAL_RCC_GetPCLK2Freq>
        break;
 800e5f0:	e7e4      	b.n	800e5bc <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 800e5f2:	f7fe f88d 	bl	800c710 <HAL_RCC_GetSysClockFreq>
        break;
 800e5f6:	e7e1      	b.n	800e5bc <UART_SetConfig+0x1f0>
    switch (clocksource)
 800e5f8:	4b0c      	ldr	r3, [pc, #48]	; (800e62c <UART_SetConfig+0x260>)
 800e5fa:	e7e2      	b.n	800e5c2 <UART_SetConfig+0x1f6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e5fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e600:	e7df      	b.n	800e5c2 <UART_SetConfig+0x1f6>
 800e602:	bf00      	nop
 800e604:	efff69f3 	.word	0xefff69f3
 800e608:	40008000 	.word	0x40008000
 800e60c:	40013800 	.word	0x40013800
 800e610:	40004400 	.word	0x40004400
 800e614:	40004800 	.word	0x40004800
 800e618:	40021000 	.word	0x40021000
 800e61c:	08016de4 	.word	0x08016de4
 800e620:	000ffcff 	.word	0x000ffcff
 800e624:	08016de0 	.word	0x08016de0
 800e628:	00f42400 	.word	0x00f42400
 800e62c:	01e84800 	.word	0x01e84800

0800e630 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e630:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e632:	07da      	lsls	r2, r3, #31
{
 800e634:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e636:	d506      	bpl.n	800e646 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e638:	6801      	ldr	r1, [r0, #0]
 800e63a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e63c:	684a      	ldr	r2, [r1, #4]
 800e63e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e642:	4322      	orrs	r2, r4
 800e644:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e646:	079c      	lsls	r4, r3, #30
 800e648:	d506      	bpl.n	800e658 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e64a:	6801      	ldr	r1, [r0, #0]
 800e64c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800e64e:	684a      	ldr	r2, [r1, #4]
 800e650:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e654:	4322      	orrs	r2, r4
 800e656:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e658:	0759      	lsls	r1, r3, #29
 800e65a:	d506      	bpl.n	800e66a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e65c:	6801      	ldr	r1, [r0, #0]
 800e65e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800e660:	684a      	ldr	r2, [r1, #4]
 800e662:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e666:	4322      	orrs	r2, r4
 800e668:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e66a:	071a      	lsls	r2, r3, #28
 800e66c:	d506      	bpl.n	800e67c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e66e:	6801      	ldr	r1, [r0, #0]
 800e670:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e672:	684a      	ldr	r2, [r1, #4]
 800e674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e678:	4322      	orrs	r2, r4
 800e67a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e67c:	06dc      	lsls	r4, r3, #27
 800e67e:	d506      	bpl.n	800e68e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e680:	6801      	ldr	r1, [r0, #0]
 800e682:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800e684:	688a      	ldr	r2, [r1, #8]
 800e686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e68a:	4322      	orrs	r2, r4
 800e68c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e68e:	0699      	lsls	r1, r3, #26
 800e690:	d506      	bpl.n	800e6a0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e692:	6801      	ldr	r1, [r0, #0]
 800e694:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e696:	688a      	ldr	r2, [r1, #8]
 800e698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e69c:	4322      	orrs	r2, r4
 800e69e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e6a0:	065a      	lsls	r2, r3, #25
 800e6a2:	d509      	bpl.n	800e6b8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e6a4:	6801      	ldr	r1, [r0, #0]
 800e6a6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800e6a8:	684a      	ldr	r2, [r1, #4]
 800e6aa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800e6ae:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e6b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e6b4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e6b6:	d00b      	beq.n	800e6d0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e6b8:	061b      	lsls	r3, r3, #24
 800e6ba:	d506      	bpl.n	800e6ca <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e6bc:	6802      	ldr	r2, [r0, #0]
 800e6be:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800e6c0:	6853      	ldr	r3, [r2, #4]
 800e6c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800e6c6:	430b      	orrs	r3, r1
 800e6c8:	6053      	str	r3, [r2, #4]
}
 800e6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6ce:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e6d0:	684a      	ldr	r2, [r1, #4]
 800e6d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800e6d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800e6d8:	4322      	orrs	r2, r4
 800e6da:	604a      	str	r2, [r1, #4]
 800e6dc:	e7ec      	b.n	800e6b8 <UART_AdvFeatureConfig+0x88>
 800e6de:	bf00      	nop

0800e6e0 <UART_WaitOnFlagUntilTimeout>:
{
 800e6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6e8:	6804      	ldr	r4, [r0, #0]
{
 800e6ea:	4607      	mov	r7, r0
 800e6ec:	460e      	mov	r6, r1
 800e6ee:	4615      	mov	r5, r2
 800e6f0:	4699      	mov	r9, r3
 800e6f2:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e6f6:	d10a      	bne.n	800e70e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6f8:	69e3      	ldr	r3, [r4, #28]
 800e6fa:	ea36 0303 	bics.w	r3, r6, r3
 800e6fe:	bf0c      	ite	eq
 800e700:	2301      	moveq	r3, #1
 800e702:	2300      	movne	r3, #0
 800e704:	429d      	cmp	r5, r3
 800e706:	d0f7      	beq.n	800e6f8 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800e708:	2000      	movs	r0, #0
}
 800e70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e70e:	69e2      	ldr	r2, [r4, #28]
 800e710:	ea36 0202 	bics.w	r2, r6, r2
 800e714:	bf0c      	ite	eq
 800e716:	2301      	moveq	r3, #1
 800e718:	2300      	movne	r3, #0
 800e71a:	42ab      	cmp	r3, r5
 800e71c:	d1f4      	bne.n	800e708 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e71e:	f7fb f80f 	bl	8009740 <HAL_GetTick>
 800e722:	eba0 0009 	sub.w	r0, r0, r9
 800e726:	4540      	cmp	r0, r8
 800e728:	d831      	bhi.n	800e78e <UART_WaitOnFlagUntilTimeout+0xae>
 800e72a:	f1b8 0f00 	cmp.w	r8, #0
 800e72e:	d02e      	beq.n	800e78e <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e730:	683c      	ldr	r4, [r7, #0]
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	0758      	lsls	r0, r3, #29
 800e736:	4622      	mov	r2, r4
 800e738:	d5db      	bpl.n	800e6f2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e73a:	69e3      	ldr	r3, [r4, #28]
 800e73c:	0519      	lsls	r1, r3, #20
 800e73e:	d5d8      	bpl.n	800e6f2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e744:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e746:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e74a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74e:	e844 3100 	strex	r1, r3, [r4]
 800e752:	b139      	cbz	r1, 800e764 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e754:	e852 3f00 	ldrex	r3, [r2]
 800e758:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75c:	e842 3100 	strex	r1, r3, [r2]
 800e760:	2900      	cmp	r1, #0
 800e762:	d1f7      	bne.n	800e754 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e764:	f102 0308 	add.w	r3, r2, #8
 800e768:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e76c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e770:	f102 0008 	add.w	r0, r2, #8
 800e774:	e840 3100 	strex	r1, r3, [r0]
 800e778:	2900      	cmp	r1, #0
 800e77a:	d1f3      	bne.n	800e764 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800e77c:	2320      	movs	r3, #32
 800e77e:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800e780:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800e784:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 800e786:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 800e78c:	e7bd      	b.n	800e70a <UART_WaitOnFlagUntilTimeout+0x2a>
 800e78e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e790:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e798:	e842 3100 	strex	r1, r3, [r2]
 800e79c:	2900      	cmp	r1, #0
 800e79e:	d1f7      	bne.n	800e790 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a0:	f102 0308 	add.w	r3, r2, #8
 800e7a4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ac:	f102 0008 	add.w	r0, r2, #8
 800e7b0:	e840 3100 	strex	r1, r3, [r0]
 800e7b4:	2900      	cmp	r1, #0
 800e7b6:	d1f3      	bne.n	800e7a0 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 800e7b8:	2320      	movs	r3, #32
 800e7ba:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800e7bc:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800e7c0:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 800e7c2:	2003      	movs	r0, #3
 800e7c4:	e7a1      	b.n	800e70a <UART_WaitOnFlagUntilTimeout+0x2a>
 800e7c6:	bf00      	nop

0800e7c8 <HAL_UART_Transmit>:
{
 800e7c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7cc:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800e7ce:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800e7d0:	2820      	cmp	r0, #32
{
 800e7d2:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800e7d4:	f040 808b 	bne.w	800e8ee <HAL_UART_Transmit+0x126>
    if ((pData == NULL) || (Size == 0U))
 800e7d8:	4689      	mov	r9, r1
 800e7da:	2900      	cmp	r1, #0
 800e7dc:	d045      	beq.n	800e86a <HAL_UART_Transmit+0xa2>
 800e7de:	4614      	mov	r4, r2
 800e7e0:	2a00      	cmp	r2, #0
 800e7e2:	d042      	beq.n	800e86a <HAL_UART_Transmit+0xa2>
 800e7e4:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800e7e6:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d07f      	beq.n	800e8ee <HAL_UART_Transmit+0x126>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7f4:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e7f8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7fa:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e7fe:	67ab      	str	r3, [r5, #120]	; 0x78
    tickstart = HAL_GetTick();
 800e800:	f7fa ff9e 	bl	8009740 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e804:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 800e806:	f8a5 4050 	strh.w	r4, [r5, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e80a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800e80e:	f8a5 4052 	strh.w	r4, [r5, #82]	; 0x52
    tickstart = HAL_GetTick();
 800e812:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e814:	d06f      	beq.n	800e8f6 <HAL_UART_Transmit+0x12e>
    while (huart->TxXferCount > 0U)
 800e816:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    __HAL_UNLOCK(huart);
 800e81a:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800e81c:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800e81e:	f885 2074 	strb.w	r2, [r5, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800e822:	b1b3      	cbz	r3, 800e852 <HAL_UART_Transmit+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e824:	682c      	ldr	r4, [r5, #0]
 800e826:	1c71      	adds	r1, r6, #1
 800e828:	d123      	bne.n	800e872 <HAL_UART_Transmit+0xaa>
 800e82a:	69e2      	ldr	r2, [r4, #28]
 800e82c:	0612      	lsls	r2, r2, #24
 800e82e:	d5fc      	bpl.n	800e82a <HAL_UART_Transmit+0x62>
      if (pdata8bits == NULL)
 800e830:	f1b9 0f00 	cmp.w	r9, #0
 800e834:	d056      	beq.n	800e8e4 <HAL_UART_Transmit+0x11c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e836:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e83a:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 800e83c:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800e840:	3b01      	subs	r3, #1
 800e842:	b29b      	uxth	r3, r3
 800e844:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e848:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1e9      	bne.n	800e826 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e852:	9600      	str	r6, [sp, #0]
 800e854:	463b      	mov	r3, r7
 800e856:	2200      	movs	r2, #0
 800e858:	2140      	movs	r1, #64	; 0x40
 800e85a:	4628      	mov	r0, r5
 800e85c:	f7ff ff40 	bl	800e6e0 <UART_WaitOnFlagUntilTimeout>
 800e860:	2800      	cmp	r0, #0
 800e862:	d16c      	bne.n	800e93e <HAL_UART_Transmit+0x176>
    huart->gState = HAL_UART_STATE_READY;
 800e864:	2320      	movs	r3, #32
 800e866:	67ab      	str	r3, [r5, #120]	; 0x78
    return HAL_OK;
 800e868:	e000      	b.n	800e86c <HAL_UART_Transmit+0xa4>
      return  HAL_ERROR;
 800e86a:	2001      	movs	r0, #1
}
 800e86c:	b003      	add	sp, #12
 800e86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e872:	69e3      	ldr	r3, [r4, #28]
 800e874:	061b      	lsls	r3, r3, #24
 800e876:	d4db      	bmi.n	800e830 <HAL_UART_Transmit+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e878:	f7fa ff62 	bl	8009740 <HAL_GetTick>
 800e87c:	1bc0      	subs	r0, r0, r7
 800e87e:	4286      	cmp	r6, r0
 800e880:	d33f      	bcc.n	800e902 <HAL_UART_Transmit+0x13a>
 800e882:	2e00      	cmp	r6, #0
 800e884:	d03d      	beq.n	800e902 <HAL_UART_Transmit+0x13a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e886:	682c      	ldr	r4, [r5, #0]
 800e888:	6822      	ldr	r2, [r4, #0]
 800e88a:	0752      	lsls	r2, r2, #29
 800e88c:	4623      	mov	r3, r4
 800e88e:	d5ca      	bpl.n	800e826 <HAL_UART_Transmit+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e890:	69e2      	ldr	r2, [r4, #28]
 800e892:	0510      	lsls	r0, r2, #20
 800e894:	d5c7      	bpl.n	800e826 <HAL_UART_Transmit+0x5e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e89a:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89c:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e8a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a4:	e844 2100 	strex	r1, r2, [r4]
 800e8a8:	b139      	cbz	r1, 800e8ba <HAL_UART_Transmit+0xf2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8aa:	e853 2f00 	ldrex	r2, [r3]
 800e8ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b2:	e843 2100 	strex	r1, r2, [r3]
 800e8b6:	2900      	cmp	r1, #0
 800e8b8:	d1f7      	bne.n	800e8aa <HAL_UART_Transmit+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ba:	f103 0208 	add.w	r2, r3, #8
 800e8be:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8c2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c6:	f103 0008 	add.w	r0, r3, #8
 800e8ca:	e840 2100 	strex	r1, r2, [r0]
 800e8ce:	2900      	cmp	r1, #0
 800e8d0:	d1f3      	bne.n	800e8ba <HAL_UART_Transmit+0xf2>
          huart->gState = HAL_UART_STATE_READY;
 800e8d2:	2320      	movs	r3, #32
 800e8d4:	67ab      	str	r3, [r5, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800e8d6:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800e8da:	67eb      	str	r3, [r5, #124]	; 0x7c
        return HAL_TIMEOUT;
 800e8dc:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e8de:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800e8e2:	e7c3      	b.n	800e86c <HAL_UART_Transmit+0xa4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e8e4:	f838 3b02 	ldrh.w	r3, [r8], #2
 800e8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ec:	e7a5      	b.n	800e83a <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800e8ee:	2002      	movs	r0, #2
}
 800e8f0:	b003      	add	sp, #12
 800e8f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8f6:	692b      	ldr	r3, [r5, #16]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d18c      	bne.n	800e816 <HAL_UART_Transmit+0x4e>
 800e8fc:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800e8fe:	4699      	mov	r9, r3
 800e900:	e789      	b.n	800e816 <HAL_UART_Transmit+0x4e>
 800e902:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e904:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e908:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e90c:	e843 2100 	strex	r1, r2, [r3]
 800e910:	2900      	cmp	r1, #0
 800e912:	d1f7      	bne.n	800e904 <HAL_UART_Transmit+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e914:	f103 0208 	add.w	r2, r3, #8
 800e918:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e91c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e920:	f103 0008 	add.w	r0, r3, #8
 800e924:	e840 2100 	strex	r1, r2, [r0]
 800e928:	2900      	cmp	r1, #0
 800e92a:	d1f3      	bne.n	800e914 <HAL_UART_Transmit+0x14c>
        huart->gState = HAL_UART_STATE_READY;
 800e92c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800e92e:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800e930:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800e932:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800e936:	67eb      	str	r3, [r5, #124]	; 0x7c
}
 800e938:	b003      	add	sp, #12
 800e93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800e93e:	2003      	movs	r0, #3
 800e940:	e794      	b.n	800e86c <HAL_UART_Transmit+0xa4>
 800e942:	bf00      	nop

0800e944 <HAL_UART_Init>:
  if (huart == NULL)
 800e944:	2800      	cmp	r0, #0
 800e946:	d062      	beq.n	800ea0e <HAL_UART_Init+0xca>
{
 800e948:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800e94a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800e94c:	b082      	sub	sp, #8
 800e94e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800e950:	2b00      	cmp	r3, #0
 800e952:	d049      	beq.n	800e9e8 <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 800e954:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e956:	2324      	movs	r3, #36	; 0x24
 800e958:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800e95a:	6813      	ldr	r3, [r2, #0]
 800e95c:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e960:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800e962:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e964:	f7ff fd32 	bl	800e3cc <UART_SetConfig>
 800e968:	2801      	cmp	r0, #1
 800e96a:	d03a      	beq.n	800e9e2 <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e96c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d133      	bne.n	800e9da <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e972:	6823      	ldr	r3, [r4, #0]
 800e974:	6859      	ldr	r1, [r3, #4]
 800e976:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800e97a:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e97c:	6899      	ldr	r1, [r3, #8]
 800e97e:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800e982:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e984:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e986:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800e988:	f041 0101 	orr.w	r1, r1, #1
 800e98c:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e98e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800e992:	f7fa fed5 	bl	8009740 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e996:	6823      	ldr	r3, [r4, #0]
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800e99c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e99e:	d40c      	bmi.n	800e9ba <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	075b      	lsls	r3, r3, #29
 800e9a4:	d425      	bmi.n	800e9f2 <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9a6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800e9a8:	2220      	movs	r2, #32
 800e9aa:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800e9ac:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e9b0:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 800e9b2:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9b4:	6623      	str	r3, [r4, #96]	; 0x60
}
 800e9b6:	b002      	add	sp, #8
 800e9b8:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	462a      	mov	r2, r5
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f7ff fe89 	bl	800e6e0 <UART_WaitOnFlagUntilTimeout>
 800e9ce:	b9e0      	cbnz	r0, 800ea0a <HAL_UART_Init+0xc6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e9d0:	6823      	ldr	r3, [r4, #0]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	075b      	lsls	r3, r3, #29
 800e9d6:	d40c      	bmi.n	800e9f2 <HAL_UART_Init+0xae>
 800e9d8:	e7e5      	b.n	800e9a6 <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f7ff fe28 	bl	800e630 <UART_AdvFeatureConfig>
 800e9e0:	e7c7      	b.n	800e972 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800e9e2:	2001      	movs	r0, #1
}
 800e9e4:	b002      	add	sp, #8
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800e9e8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800e9ec:	f7fa fd1c 	bl	8009428 <HAL_UART_MspInit>
 800e9f0:	e7b0      	b.n	800e954 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	4633      	mov	r3, r6
 800e9fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ea00:	4620      	mov	r0, r4
 800ea02:	f7ff fe6d 	bl	800e6e0 <UART_WaitOnFlagUntilTimeout>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d0cd      	beq.n	800e9a6 <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 800ea0a:	2003      	movs	r0, #3
 800ea0c:	e7d3      	b.n	800e9b6 <HAL_UART_Init+0x72>
    return HAL_ERROR;
 800ea0e:	2001      	movs	r0, #1
}
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop

0800ea14 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop

0800ea18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ea18:	b084      	sub	sp, #16
 800ea1a:	a801      	add	r0, sp, #4
 800ea1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800ea20:	b004      	add	sp, #16
 800ea22:	2000      	movs	r0, #0
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop

0800ea28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ea28:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ea2a:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 800ea2e:	2000      	movs	r0, #0
 800ea30:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800ea34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop

0800ea3c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ea3c:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
{
 800ea40:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ea42:	f244 027f 	movw	r2, #16511	; 0x407f
 800ea46:	400a      	ands	r2, r1

  return HAL_OK;
}
 800ea48:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ea4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800ea4e:	4770      	bx	lr

0800ea50 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800ea50:	2000      	movs	r0, #0
 800ea52:	4770      	bx	lr

0800ea54 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ea54:	b084      	sub	sp, #16
 800ea56:	4684      	mov	ip, r0
 800ea58:	a801      	add	r0, sp, #4
 800ea5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ea5e:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ea60:	2301      	movs	r3, #1
 800ea62:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800ea66:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800ea68:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40
  USBx->ISTR = 0U;
 800ea6c:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800ea70:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50
}
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop

0800ea78 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ea78:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ea7a:	780c      	ldrb	r4, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800ea7c:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ea80:	fa0f fc84 	sxth.w	ip, r4
{
 800ea84:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ea86:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800ea8a:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800ea8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ea92:	0412      	lsls	r2, r2, #16
 800ea94:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 800ea96:	f1be 0f03 	cmp.w	lr, #3
 800ea9a:	f200 8188 	bhi.w	800edae <USB_ActivateEndpoint+0x336>
 800ea9e:	e8df f00e 	tbb	[pc, lr]
 800eaa2:	c8c5      	.short	0xc8c5
 800eaa4:	027e      	.short	0x027e
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800eaa6:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800eaaa:	f248 0080 	movw	r0, #32896	; 0x8080
 800eaae:	4302      	orrs	r2, r0
 800eab0:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800eab4:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800eab8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800eabc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800eac0:	0412      	lsls	r2, r2, #16
 800eac2:	0c12      	lsrs	r2, r2, #16
 800eac4:	4322      	orrs	r2, r4
 800eac6:	4310      	orrs	r0, r2
 800eac8:	f823 002c 	strh.w	r0, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800eacc:	7b08      	ldrb	r0, [r1, #12]
 800eace:	2800      	cmp	r0, #0
 800ead0:	d077      	beq.n	800ebc2 <USB_ActivateEndpoint+0x14a>
 800ead2:	2000      	movs	r0, #0
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ead4:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ead8:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 800eadc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800eae0:	0412      	lsls	r2, r2, #16
 800eae2:	0c12      	lsrs	r2, r2, #16
 800eae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eaec:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800eaf0:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800eaf4:	890a      	ldrh	r2, [r1, #8]
 800eaf6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800eafa:	fa14 f585 	uxtah	r5, r4, r5
 800eafe:	0852      	lsrs	r2, r2, #1
 800eb00:	0052      	lsls	r2, r2, #1
 800eb02:	f8a5 2400 	strh.w	r2, [r5, #1024]	; 0x400
 800eb06:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800eb0a:	fa14 f482 	uxtah	r4, r4, r2
 800eb0e:	894a      	ldrh	r2, [r1, #10]
 800eb10:	0852      	lsrs	r2, r2, #1
 800eb12:	0052      	lsls	r2, r2, #1
 800eb14:	f8a4 2404 	strh.w	r2, [r4, #1028]	; 0x404

    if (ep->is_in == 0U)
 800eb18:	784a      	ldrb	r2, [r1, #1]
 800eb1a:	2a00      	cmp	r2, #0
 800eb1c:	f040 80e0 	bne.w	800ece0 <USB_ActivateEndpoint+0x268>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eb20:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800eb24:	0455      	lsls	r5, r2, #17
 800eb26:	d50d      	bpl.n	800eb44 <USB_ActivateEndpoint+0xcc>
 800eb28:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800eb2c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800eb30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800eb34:	0412      	lsls	r2, r2, #16
 800eb36:	0c12      	lsrs	r2, r2, #16
 800eb38:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800eb3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eb40:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eb44:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800eb48:	0654      	lsls	r4, r2, #25
 800eb4a:	d50d      	bpl.n	800eb68 <USB_ActivateEndpoint+0xf0>
 800eb4c:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800eb50:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800eb54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800eb58:	0412      	lsls	r2, r2, #16
 800eb5a:	0c12      	lsrs	r2, r2, #16
 800eb5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eb60:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800eb64:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eb68:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800eb6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eb70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800eb74:	0412      	lsls	r2, r2, #16
 800eb76:	0c12      	lsrs	r2, r2, #16
 800eb78:	f248 0180 	movw	r1, #32896	; 0x8080
 800eb7c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800eb80:	430a      	orrs	r2, r1
 800eb82:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eb86:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800eb8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800eb8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb92:	0412      	lsls	r2, r2, #16
 800eb94:	0c12      	lsrs	r2, r2, #16
 800eb96:	4311      	orrs	r1, r2
 800eb98:	f823 102c 	strh.w	r1, [r3, ip, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800eb9c:	bd70      	pop	{r4, r5, r6, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800eb9e:	f248 0080 	movw	r0, #32896	; 0x8080
 800eba2:	4302      	orrs	r2, r0
 800eba4:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800eba8:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ebac:	4d8b      	ldr	r5, [pc, #556]	; (800eddc <USB_ActivateEndpoint+0x364>)
 800ebae:	b292      	uxth	r2, r2
 800ebb0:	402a      	ands	r2, r5
 800ebb2:	4322      	orrs	r2, r4
 800ebb4:	4310      	orrs	r0, r2
 800ebb6:	f823 002c 	strh.w	r0, [r3, ip, lsl #2]
  if (ep->doublebuffer == 0U)
 800ebba:	7b08      	ldrb	r0, [r1, #12]
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	f040 80e1 	bne.w	800ed84 <USB_ActivateEndpoint+0x30c>
    if (ep->is_in != 0U)
 800ebc2:	784a      	ldrb	r2, [r1, #1]
 800ebc4:	2a00      	cmp	r2, #0
 800ebc6:	d040      	beq.n	800ec4a <USB_ActivateEndpoint+0x1d2>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ebc8:	88ca      	ldrh	r2, [r1, #6]
 800ebca:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800ebce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ebd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ebd6:	0852      	lsrs	r2, r2, #1
 800ebd8:	b289      	uxth	r1, r1
 800ebda:	0052      	lsls	r2, r2, #1
 800ebdc:	5262      	strh	r2, [r4, r1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ebde:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ebe2:	0652      	lsls	r2, r2, #25
 800ebe4:	d50d      	bpl.n	800ec02 <USB_ActivateEndpoint+0x18a>
 800ebe6:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ebea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ebee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ebf2:	0412      	lsls	r2, r2, #16
 800ebf4:	0c12      	lsrs	r2, r2, #16
 800ebf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ebfa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800ebfe:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ec02:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ec06:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ec0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec0e:	0412      	lsls	r2, r2, #16
      if (ep->type != EP_TYPE_ISOC)
 800ec10:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ec14:	ea4f 4212 	mov.w	r2, r2, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800ec18:	d010      	beq.n	800ec3c <USB_ActivateEndpoint+0x1c4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ec1a:	f082 0220 	eor.w	r2, r2, #32
 800ec1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ec26:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 800ec2a:	bd70      	pop	{r4, r5, r6, pc}
      wEpRegVal |= USB_EP_CONTROL;
 800ec2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 800ec30:	e73b      	b.n	800eaaa <USB_ActivateEndpoint+0x32>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ec32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 800ec36:	e738      	b.n	800eaaa <USB_ActivateEndpoint+0x32>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ec38:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800ec3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ec44:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 800ec48:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ec4a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800ec4e:	88ca      	ldrh	r2, [r1, #6]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ec50:	690e      	ldr	r6, [r1, #16]
 800ec52:	eb03 0ec4 	add.w	lr, r3, r4, lsl #3
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ec56:	0852      	lsrs	r2, r2, #1
 800ec58:	fa1e f185 	uxtah	r1, lr, r5
 800ec5c:	0052      	lsls	r2, r2, #1
 800ec5e:	f8a1 2404 	strh.w	r2, [r1, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ec62:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ec66:	2e3e      	cmp	r6, #62	; 0x3e
 800ec68:	fa1e f282 	uxtah	r2, lr, r2
 800ec6c:	d87e      	bhi.n	800ed6c <USB_ActivateEndpoint+0x2f4>
 800ec6e:	2e00      	cmp	r6, #0
 800ec70:	f040 8094 	bne.w	800ed9c <USB_ActivateEndpoint+0x324>
 800ec74:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 800ec78:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800ec7c:	0409      	lsls	r1, r1, #16
 800ec7e:	0c09      	lsrs	r1, r1, #16
 800ec80:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800ec84:	f8b2 1406 	ldrh.w	r1, [r2, #1030]	; 0x406
 800ec88:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800ec8c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800ec90:	b289      	uxth	r1, r1
 800ec92:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ec96:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ec9a:	0456      	lsls	r6, r2, #17
 800ec9c:	d50d      	bpl.n	800ecba <USB_ActivateEndpoint+0x242>
 800ec9e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800eca2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800eca6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ecaa:	0412      	lsls	r2, r2, #16
 800ecac:	0c12      	lsrs	r2, r2, #16
 800ecae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800ecb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ecb6:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ecba:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ecbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ecc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ecc6:	0412      	lsls	r2, r2, #16
 800ecc8:	0c12      	lsrs	r2, r2, #16
      if (ep->num == 0U)
 800ecca:	2c00      	cmp	r4, #0
 800eccc:	d1b4      	bne.n	800ec38 <USB_ActivateEndpoint+0x1c0>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ecce:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800ecd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ecd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ecda:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 800ecde:	bd70      	pop	{r4, r5, r6, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ece0:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ece4:	0451      	lsls	r1, r2, #17
 800ece6:	d50d      	bpl.n	800ed04 <USB_ActivateEndpoint+0x28c>
 800ece8:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ecec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ecf0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ecf4:	0412      	lsls	r2, r2, #16
 800ecf6:	0c12      	lsrs	r2, r2, #16
 800ecf8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800ecfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ed00:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ed04:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ed08:	0652      	lsls	r2, r2, #25
 800ed0a:	d50d      	bpl.n	800ed28 <USB_ActivateEndpoint+0x2b0>
 800ed0c:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ed10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ed14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ed18:	0412      	lsls	r2, r2, #16
 800ed1a:	0c12      	lsrs	r2, r2, #16
 800ed1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed20:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800ed24:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ed28:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ed2c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ed30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed34:	0412      	lsls	r2, r2, #16
 800ed36:	0c12      	lsrs	r2, r2, #16
      if (ep->type != EP_TYPE_ISOC)
 800ed38:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ed3c:	bf18      	it	ne
 800ed3e:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ed42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ed4a:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ed4e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ed52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ed56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ed5a:	0412      	lsls	r2, r2, #16
 800ed5c:	0c12      	lsrs	r2, r2, #16
 800ed5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ed66:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ed6c:	0975      	lsrs	r5, r6, #5
 800ed6e:	491c      	ldr	r1, [pc, #112]	; (800ede0 <USB_ActivateEndpoint+0x368>)
 800ed70:	06f6      	lsls	r6, r6, #27
 800ed72:	bf08      	it	eq
 800ed74:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800ed78:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800ed7c:	b289      	uxth	r1, r1
 800ed7e:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800ed82:	e788      	b.n	800ec96 <USB_ActivateEndpoint+0x21e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ed84:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800ed88:	b292      	uxth	r2, r2
 800ed8a:	402a      	ands	r2, r5
 800ed8c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800ed90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ed94:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
 800ed98:	2000      	movs	r0, #0
 800ed9a:	e6a9      	b.n	800eaf0 <USB_ActivateEndpoint+0x78>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ed9c:	0871      	lsrs	r1, r6, #1
 800ed9e:	07f5      	lsls	r5, r6, #31
 800eda0:	bf48      	it	mi
 800eda2:	3101      	addmi	r1, #1
 800eda4:	0289      	lsls	r1, r1, #10
 800eda6:	b289      	uxth	r1, r1
 800eda8:	f8a2 1406 	strh.w	r1, [r2, #1030]	; 0x406
 800edac:	e773      	b.n	800ec96 <USB_ActivateEndpoint+0x21e>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800edae:	f248 0080 	movw	r0, #32896	; 0x8080
 800edb2:	4302      	orrs	r2, r0
 800edb4:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800edb8:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 800edbc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800edc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800edc4:	0412      	lsls	r2, r2, #16
 800edc6:	0c12      	lsrs	r2, r2, #16
 800edc8:	4322      	orrs	r2, r4
 800edca:	4310      	orrs	r0, r2
 800edcc:	f823 002c 	strh.w	r0, [r3, ip, lsl #2]
  if (ep->doublebuffer == 0U)
 800edd0:	7b0a      	ldrb	r2, [r1, #12]
 800edd2:	2001      	movs	r0, #1
 800edd4:	2a00      	cmp	r2, #0
 800edd6:	f47f ae7d 	bne.w	800ead4 <USB_ActivateEndpoint+0x5c>
 800edda:	e6f2      	b.n	800ebc2 <USB_ActivateEndpoint+0x14a>
 800eddc:	ffff8f8f 	.word	0xffff8f8f
 800ede0:	ffff8000 	.word	0xffff8000

0800ede4 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800ede4:	7b0b      	ldrb	r3, [r1, #12]
 800ede6:	b9cb      	cbnz	r3, 800ee1c <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 800ede8:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800edea:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800edec:	2b00      	cmp	r3, #0
 800edee:	f000 80b1 	beq.w	800ef54 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800edf2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800edf6:	0659      	lsls	r1, r3, #25
 800edf8:	f100 80c5 	bmi.w	800ef86 <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800edfc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ee00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ee08:	041b      	lsls	r3, r3, #16
 800ee0a:	0c1b      	lsrs	r3, r3, #16
 800ee0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800ee18:	2000      	movs	r0, #0
 800ee1a:	4770      	bx	lr
    if (ep->is_in == 0U)
 800ee1c:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ee1e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d14b      	bne.n	800eebc <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ee24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ee28:	0459      	lsls	r1, r3, #17
 800ee2a:	d50d      	bpl.n	800ee48 <USB_DeactivateEndpoint+0x64>
 800ee2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ee30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee38:	041b      	lsls	r3, r3, #16
 800ee3a:	0c1b      	lsrs	r3, r3, #16
 800ee3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ee40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee44:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ee48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ee4c:	065b      	lsls	r3, r3, #25
 800ee4e:	d50d      	bpl.n	800ee6c <USB_DeactivateEndpoint+0x88>
 800ee50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ee54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee5c:	041b      	lsls	r3, r3, #16
 800ee5e:	0c1b      	lsrs	r3, r3, #16
 800ee60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ee68:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800ee6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ee70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee78:	041b      	lsls	r3, r3, #16
 800ee7a:	0c1b      	lsrs	r3, r3, #16
 800ee7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ee84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ee88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ee8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee94:	041b      	lsls	r3, r3, #16
 800ee96:	f248 0180 	movw	r1, #32896	; 0x8080
 800ee9a:	0c1b      	lsrs	r3, r3, #16
 800ee9c:	430b      	orrs	r3, r1
 800ee9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eea2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800eea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eeaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eeae:	041b      	lsls	r3, r3, #16
 800eeb0:	0c1b      	lsrs	r3, r3, #16
 800eeb2:	4319      	orrs	r1, r3
 800eeb4:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
}
 800eeb8:	2000      	movs	r0, #0
 800eeba:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eebc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800eec0:	0459      	lsls	r1, r3, #17
 800eec2:	d50d      	bpl.n	800eee0 <USB_DeactivateEndpoint+0xfc>
 800eec4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800eec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eed0:	041b      	lsls	r3, r3, #16
 800eed2:	0c1b      	lsrs	r3, r3, #16
 800eed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eedc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eee0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800eee4:	065b      	lsls	r3, r3, #25
 800eee6:	d50d      	bpl.n	800ef04 <USB_DeactivateEndpoint+0x120>
 800eee8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800eeec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eef4:	041b      	lsls	r3, r3, #16
 800eef6:	0c1b      	lsrs	r3, r3, #16
 800eef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eefc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ef00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800ef04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ef08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef10:	041b      	lsls	r3, r3, #16
 800ef12:	0c1b      	lsrs	r3, r3, #16
 800ef14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ef18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef1c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ef24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef2c:	041b      	lsls	r3, r3, #16
 800ef2e:	f248 0180 	movw	r1, #32896	; 0x8080
 800ef32:	0c1b      	lsrs	r3, r3, #16
 800ef34:	430b      	orrs	r3, r1
 800ef36:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ef3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ef3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef46:	041b      	lsls	r3, r3, #16
 800ef48:	0c1b      	lsrs	r3, r3, #16
 800ef4a:	4319      	orrs	r1, r3
 800ef4c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
}
 800ef50:	2000      	movs	r0, #0
 800ef52:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ef58:	045b      	lsls	r3, r3, #17
 800ef5a:	d50d      	bpl.n	800ef78 <USB_DeactivateEndpoint+0x194>
 800ef5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ef60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef68:	041b      	lsls	r3, r3, #16
 800ef6a:	0c1b      	lsrs	r3, r3, #16
 800ef6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ef70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ef78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ef7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef84:	e740      	b.n	800ee08 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ef8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef92:	041b      	lsls	r3, r3, #16
 800ef94:	0c1b      	lsrs	r3, r3, #16
 800ef96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ef9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800efa2:	e72b      	b.n	800edfc <USB_DeactivateEndpoint+0x18>

0800efa4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800efa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800efa8:	784b      	ldrb	r3, [r1, #1]
 800efaa:	2b01      	cmp	r3, #1
{
 800efac:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800efae:	f000 8084 	beq.w	800f0ba <USB_EPStartXfer+0x116>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800efb2:	7b08      	ldrb	r0, [r1, #12]
 800efb4:	2800      	cmp	r0, #0
 800efb6:	d048      	beq.n	800f04a <USB_EPStartXfer+0xa6>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800efb8:	78c8      	ldrb	r0, [r1, #3]
 800efba:	2802      	cmp	r0, #2
 800efbc:	f000 810c 	beq.w	800f1d8 <USB_EPStartXfer+0x234>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800efc0:	2801      	cmp	r0, #1
 800efc2:	f040 80ee 	bne.w	800f1a2 <USB_EPStartXfer+0x1fe>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800efc6:	6988      	ldr	r0, [r1, #24]
 800efc8:	690c      	ldr	r4, [r1, #16]
 800efca:	42a0      	cmp	r0, r4
        {
          len = ep->maxpacket;
          ep->xfer_len -= len;
 800efcc:	bf8a      	itet	hi
 800efce:	1b05      	subhi	r5, r0, r4
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800efd0:	2500      	movls	r5, #0
 800efd2:	4620      	movhi	r0, r4
 800efd4:	618d      	str	r5, [r1, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f040 80fc 	bne.w	800f1d4 <USB_EPStartXfer+0x230>
 800efdc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800efe0:	780c      	ldrb	r4, [r1, #0]
 800efe2:	f202 4502 	addw	r5, r2, #1026	; 0x402
 800efe6:	283e      	cmp	r0, #62	; 0x3e
 800efe8:	fa15 f383 	uxtah	r3, r5, r3
 800efec:	f200 8216 	bhi.w	800f41c <USB_EPStartXfer+0x478>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	f040 80d9 	bne.w	800f1a8 <USB_EPStartXfer+0x204>
 800eff6:	f833 0034 	ldrh.w	r0, [r3, r4, lsl #3]
 800effa:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800effe:	0400      	lsls	r0, r0, #16
 800f000:	0c00      	lsrs	r0, r0, #16
 800f002:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 800f006:	f833 0034 	ldrh.w	r0, [r3, r4, lsl #3]
 800f00a:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800f00e:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800f012:	b280      	uxth	r0, r0
 800f014:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 800f018:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800f01c:	f202 4306 	addw	r3, r2, #1030	; 0x406
 800f020:	fa13 f080 	uxtah	r0, r3, r0
 800f024:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 800f028:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f02c:	041b      	lsls	r3, r3, #16
 800f02e:	0c1b      	lsrs	r3, r3, #16
 800f030:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 800f034:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 800f038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f03c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f040:	b29b      	uxth	r3, r3
 800f042:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 800f046:	780b      	ldrb	r3, [r1, #0]
 800f048:	e023      	b.n	800f092 <USB_EPStartXfer+0xee>
      if (ep->xfer_len > ep->maxpacket)
 800f04a:	698c      	ldr	r4, [r1, #24]
 800f04c:	690b      	ldr	r3, [r1, #16]
 800f04e:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 800f050:	bf84      	itt	hi
 800f052:	1ae0      	subhi	r0, r4, r3
 800f054:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f056:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800f05a:	6188      	str	r0, [r1, #24]
 800f05c:	f202 4c06 	addw	ip, r2, #1030	; 0x406
 800f060:	7808      	ldrb	r0, [r1, #0]
 800f062:	fa1c f383 	uxtah	r3, ip, r3
 800f066:	2c3e      	cmp	r4, #62	; 0x3e
 800f068:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800f06c:	f200 808c 	bhi.w	800f188 <USB_EPStartXfer+0x1e4>
 800f070:	2c00      	cmp	r4, #0
 800f072:	f040 80f9 	bne.w	800f268 <USB_EPStartXfer+0x2c4>
 800f076:	8818      	ldrh	r0, [r3, #0]
 800f078:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800f07c:	0400      	lsls	r0, r0, #16
 800f07e:	0c00      	lsrs	r0, r0, #16
 800f080:	8018      	strh	r0, [r3, #0]
 800f082:	8818      	ldrh	r0, [r3, #0]
 800f084:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800f088:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800f08c:	b280      	uxth	r0, r0
 800f08e:	8018      	strh	r0, [r3, #0]
 800f090:	780b      	ldrb	r3, [r1, #0]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f092:	b219      	sxth	r1, r3
  }

  return HAL_OK;
 800f094:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f096:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800f09a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0a2:	041b      	lsls	r3, r3, #16
 800f0a4:	0c1b      	lsrs	r3, r3, #16
 800f0a6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800f0aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0b2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800f0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 800f0ba:	690c      	ldr	r4, [r1, #16]
 800f0bc:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800f0be:	7b0b      	ldrb	r3, [r1, #12]
 800f0c0:	42a0      	cmp	r0, r4
 800f0c2:	bf28      	it	cs
 800f0c4:	4620      	movcs	r0, r4
 800f0c6:	bb93      	cbnz	r3, 800f12e <USB_EPStartXfer+0x18a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f0c8:	b284      	uxth	r4, r0
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f0ca:	4620      	mov	r0, r4
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f0cc:	f8b1 e006 	ldrh.w	lr, [r1, #6]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f0d0:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f0d2:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f0d4:	f502 6580 	add.w	r5, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 800f0d8:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f0da:	44ae      	add	lr, r5
  for (count = n; count != 0U; count--)
 800f0dc:	d009      	beq.n	800f0f2 <USB_EPStartXfer+0x14e>
 800f0de:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 800f0e2:	ebae 0e03 	sub.w	lr, lr, r3
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f0e6:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800f0e8:	f823 000e 	strh.w	r0, [r3, lr]
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 800f0ec:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800f0ee:	4563      	cmp	r3, ip
 800f0f0:	d1f9      	bne.n	800f0e6 <USB_EPStartXfer+0x142>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f0f2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800f0f6:	7808      	ldrb	r0, [r1, #0]
 800f0f8:	f202 4502 	addw	r5, r2, #1026	; 0x402
 800f0fc:	fa15 f383 	uxtah	r3, r5, r3
 800f100:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800f104:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f106:	7809      	ldrb	r1, [r1, #0]
 800f108:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800f10c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f114:	041b      	lsls	r3, r3, #16
 800f116:	0c1b      	lsrs	r3, r3, #16
 800f118:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800f11c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f124:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  return HAL_OK;
 800f128:	2000      	movs	r0, #0
}
 800f12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ep->type == EP_TYPE_BULK)
 800f12e:	78cb      	ldrb	r3, [r1, #3]
 800f130:	2b02      	cmp	r3, #2
 800f132:	f000 80a2 	beq.w	800f27a <USB_EPStartXfer+0x2d6>
        ep->xfer_len_db -= len;
 800f136:	6a0b      	ldr	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f138:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 800f13a:	1a1b      	subs	r3, r3, r0
 800f13c:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f13e:	b223      	sxth	r3, r4
 800f140:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800f144:	f013 0f40 	tst.w	r3, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f148:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f14c:	f000 80f2 	beq.w	800f334 <USB_EPStartXfer+0x390>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f150:	f202 4506 	addw	r5, r2, #1030	; 0x406
 800f154:	fa15 f383 	uxtah	r3, r5, r3
 800f158:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f15c:	b284      	uxth	r4, r0
 800f15e:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f160:	4620      	mov	r0, r4
 800f162:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f164:	894c      	ldrh	r4, [r1, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f166:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f168:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800f16c:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f16e:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 800f170:	d0c9      	beq.n	800f106 <USB_EPStartXfer+0x162>
 800f172:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 800f176:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f17a:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800f17c:	f823 000c 	strh.w	r0, [r3, ip]
    pBuf++;
 800f180:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800f182:	42a3      	cmp	r3, r4
 800f184:	d1f9      	bne.n	800f17a <USB_EPStartXfer+0x1d6>
 800f186:	e7be      	b.n	800f106 <USB_EPStartXfer+0x162>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f188:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 800f18c:	48ae      	ldr	r0, [pc, #696]	; (800f448 <USB_EPStartXfer+0x4a4>)
 800f18e:	06e5      	lsls	r5, r4, #27
 800f190:	bf08      	it	eq
 800f192:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800f196:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 800f19a:	b280      	uxth	r0, r0
 800f19c:	8018      	strh	r0, [r3, #0]
 800f19e:	780b      	ldrb	r3, [r1, #0]
 800f1a0:	e777      	b.n	800f092 <USB_EPStartXfer+0xee>
        return HAL_ERROR;
 800f1a2:	2001      	movs	r0, #1
}
 800f1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f1a8:	0845      	lsrs	r5, r0, #1
 800f1aa:	f010 0001 	ands.w	r0, r0, #1
 800f1ae:	462e      	mov	r6, r5
 800f1b0:	bf18      	it	ne
 800f1b2:	1c6e      	addne	r6, r5, #1
 800f1b4:	02b6      	lsls	r6, r6, #10
 800f1b6:	b2b6      	uxth	r6, r6
 800f1b8:	f823 6034 	strh.w	r6, [r3, r4, lsl #3]
 800f1bc:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
 800f1c0:	f202 4306 	addw	r3, r2, #1030	; 0x406
 800f1c4:	fa13 f686 	uxtah	r6, r3, r6
 800f1c8:	b100      	cbz	r0, 800f1cc <USB_EPStartXfer+0x228>
 800f1ca:	3501      	adds	r5, #1
 800f1cc:	02ad      	lsls	r5, r5, #10
 800f1ce:	b2ab      	uxth	r3, r5
 800f1d0:	f826 3034 	strh.w	r3, [r6, r4, lsl #3]
 800f1d4:	780b      	ldrb	r3, [r1, #0]
 800f1d6:	e75c      	b.n	800f092 <USB_EPStartXfer+0xee>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f1d8:	bb33      	cbnz	r3, 800f228 <USB_EPStartXfer+0x284>
 800f1da:	690b      	ldr	r3, [r1, #16]
 800f1dc:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800f1e0:	780c      	ldrb	r4, [r1, #0]
 800f1e2:	f202 4502 	addw	r5, r2, #1026	; 0x402
 800f1e6:	2b3e      	cmp	r3, #62	; 0x3e
 800f1e8:	fa15 f080 	uxtah	r0, r5, r0
 800f1ec:	f240 80eb 	bls.w	800f3c6 <USB_EPStartXfer+0x422>
 800f1f0:	095d      	lsrs	r5, r3, #5
 800f1f2:	f013 031f 	ands.w	r3, r3, #31
 800f1f6:	462f      	mov	r7, r5
 800f1f8:	462e      	mov	r6, r5
 800f1fa:	bf08      	it	eq
 800f1fc:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800f200:	4d91      	ldr	r5, [pc, #580]	; (800f448 <USB_EPStartXfer+0x4a4>)
 800f202:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800f206:	b2ad      	uxth	r5, r5
 800f208:	f820 5034 	strh.w	r5, [r0, r4, lsl #3]
 800f20c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800f210:	f202 4506 	addw	r5, r2, #1030	; 0x406
 800f214:	fa15 f080 	uxtah	r0, r5, r0
 800f218:	b903      	cbnz	r3, 800f21c <USB_EPStartXfer+0x278>
 800f21a:	3e01      	subs	r6, #1
 800f21c:	4b8a      	ldr	r3, [pc, #552]	; (800f448 <USB_EPStartXfer+0x4a4>)
 800f21e:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 800f222:	b29b      	uxth	r3, r3
 800f224:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
        if (ep->xfer_count != 0U)
 800f228:	69cb      	ldr	r3, [r1, #28]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d0d2      	beq.n	800f1d4 <USB_EPStartXfer+0x230>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f22e:	780b      	ldrb	r3, [r1, #0]
 800f230:	b21c      	sxth	r4, r3
 800f232:	f244 0040 	movw	r0, #16448	; 0x4040
 800f236:	f832 5024 	ldrh.w	r5, [r2, r4, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f23a:	ea00 0605 	and.w	r6, r0, r5
 800f23e:	43a8      	bics	r0, r5
 800f240:	d002      	beq.n	800f248 <USB_EPStartXfer+0x2a4>
 800f242:	2e00      	cmp	r6, #0
 800f244:	f47f af25 	bne.w	800f092 <USB_EPStartXfer+0xee>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f248:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800f24c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f254:	041b      	lsls	r3, r3, #16
 800f256:	0c1b      	lsrs	r3, r3, #16
 800f258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f25c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f260:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
 800f264:	780b      	ldrb	r3, [r1, #0]
 800f266:	e714      	b.n	800f092 <USB_EPStartXfer+0xee>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f268:	0860      	lsrs	r0, r4, #1
 800f26a:	07e4      	lsls	r4, r4, #31
 800f26c:	bf48      	it	mi
 800f26e:	3001      	addmi	r0, #1
 800f270:	0280      	lsls	r0, r0, #10
 800f272:	b280      	uxth	r0, r0
 800f274:	8018      	strh	r0, [r3, #0]
 800f276:	780b      	ldrb	r3, [r1, #0]
 800f278:	e70b      	b.n	800f092 <USB_EPStartXfer+0xee>
        if (ep->xfer_len_db > ep->maxpacket)
 800f27a:	6a0b      	ldr	r3, [r1, #32]
 800f27c:	429c      	cmp	r4, r3
 800f27e:	d276      	bcs.n	800f36e <USB_EPStartXfer+0x3ca>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f280:	780d      	ldrb	r5, [r1, #0]
 800f282:	f832 c025 	ldrh.w	ip, [r2, r5, lsl #2]
 800f286:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 800f28a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800f28e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800f292:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f296:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800f29a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800f29e:	f822 c025 	strh.w	ip, [r2, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f2a2:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
          ep->xfer_len_db -= len;
 800f2a6:	1a1b      	subs	r3, r3, r0
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f2a8:	f016 0f40 	tst.w	r6, #64	; 0x40
          ep->xfer_len_db -= len;
 800f2ac:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f2ae:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f2b2:	f000 80cb 	beq.w	800f44c <USB_EPStartXfer+0x4a8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f2b6:	f202 4706 	addw	r7, r2, #1030	; 0x406
 800f2ba:	fa17 f686 	uxtah	r6, r7, r6
 800f2be:	fa1f fa80 	uxth.w	sl, r0
 800f2c2:	f826 a035 	strh.w	sl, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f2c6:	4657      	mov	r7, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f2c8:	894e      	ldrh	r6, [r1, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f2ca:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f2ce:	3701      	adds	r7, #1
 800f2d0:	f502 6980 	add.w	r9, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800f2d4:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f2d6:	444e      	add	r6, r9
  for (count = n; count != 0U; count--)
 800f2d8:	d00c      	beq.n	800f2f4 <USB_EPStartXfer+0x350>
 800f2da:	eba6 080c 	sub.w	r8, r6, ip
 800f2de:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800f2e2:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f2e4:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 800f2e8:	f82e 6008 	strh.w	r6, [lr, r8]
    pBuf++;
 800f2ec:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 800f2f0:	45f3      	cmp	fp, lr
 800f2f2:	d1f7      	bne.n	800f2e4 <USB_EPStartXfer+0x340>
            ep->xfer_buff += len;
 800f2f4:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800f2f8:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 800f2fa:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800f2fc:	f080 8102 	bcs.w	800f504 <USB_EPStartXfer+0x560>
              ep->xfer_len_db -= len;
 800f300:	1a1b      	subs	r3, r3, r0
 800f302:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f304:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800f308:	f202 4002 	addw	r0, r2, #1026	; 0x402
 800f30c:	fa10 f383 	uxtah	r3, r0, r3
 800f310:	f823 a035 	strh.w	sl, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f314:	890b      	ldrh	r3, [r1, #8]
 800f316:	eb03 0509 	add.w	r5, r3, r9
  for (count = n; count != 0U; count--)
 800f31a:	2f00      	cmp	r7, #0
 800f31c:	f43f aef3 	beq.w	800f106 <USB_EPStartXfer+0x162>
 800f320:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800f324:	4633      	mov	r3, r6
 800f326:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f328:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800f32a:	5358      	strh	r0, [r3, r5]
    pBuf++;
 800f32c:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800f32e:	429c      	cmp	r4, r3
 800f330:	d1fa      	bne.n	800f328 <USB_EPStartXfer+0x384>
 800f332:	e6e8      	b.n	800f106 <USB_EPStartXfer+0x162>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f334:	f202 4502 	addw	r5, r2, #1026	; 0x402
 800f338:	fa15 f383 	uxtah	r3, r5, r3
 800f33c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f340:	b284      	uxth	r4, r0
 800f342:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f344:	4620      	mov	r0, r4
 800f346:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f348:	890c      	ldrh	r4, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f34a:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f34c:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800f350:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f352:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 800f354:	f43f aed7 	beq.w	800f106 <USB_EPStartXfer+0x162>
 800f358:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800f35c:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f360:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800f362:	f823 400c 	strh.w	r4, [r3, ip]
    pBuf++;
 800f366:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800f368:	4283      	cmp	r3, r0
 800f36a:	d1f9      	bne.n	800f360 <USB_EPStartXfer+0x3bc>
 800f36c:	e6cb      	b.n	800f106 <USB_EPStartXfer+0x162>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f36e:	780d      	ldrb	r5, [r1, #0]
 800f370:	b22e      	sxth	r6, r5
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f372:	f202 4402 	addw	r4, r2, #1026	; 0x402
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f376:	f832 0026 	ldrh.w	r0, [r2, r6, lsl #2]
 800f37a:	f420 40e2 	bic.w	r0, r0, #28928	; 0x7100
 800f37e:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 800f382:	0400      	lsls	r0, r0, #16
 800f384:	0c00      	lsrs	r0, r0, #16
 800f386:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800f38a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800f38e:	f822 0026 	strh.w	r0, [r2, r6, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f392:	b29e      	uxth	r6, r3
 800f394:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800f398:	fa14 f383 	uxtah	r3, r4, r3
 800f39c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f3a0:	1c70      	adds	r0, r6, #1
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f3a2:	801e      	strh	r6, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f3a4:	890c      	ldrh	r4, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f3a6:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f3a8:	f502 6580 	add.w	r5, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800f3ac:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f3ae:	4425      	add	r5, r4
  for (count = n; count != 0U; count--)
 800f3b0:	f43f aea9 	beq.w	800f106 <USB_EPStartXfer+0x162>
 800f3b4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800f3b8:	1aed      	subs	r5, r5, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f3ba:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800f3bc:	535c      	strh	r4, [r3, r5]
    pBuf++;
 800f3be:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800f3c0:	4298      	cmp	r0, r3
 800f3c2:	d1fa      	bne.n	800f3ba <USB_EPStartXfer+0x416>
 800f3c4:	e69f      	b.n	800f106 <USB_EPStartXfer+0x162>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d17e      	bne.n	800f4c8 <USB_EPStartXfer+0x524>
 800f3ca:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 800f3ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f3d2:	041b      	lsls	r3, r3, #16
 800f3d4:	0c1b      	lsrs	r3, r3, #16
 800f3d6:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 800f3da:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 800f3de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f3e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 800f3ec:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800f3f0:	f202 4306 	addw	r3, r2, #1030	; 0x406
 800f3f4:	fa13 f080 	uxtah	r0, r3, r0
 800f3f8:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 800f3fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f400:	041b      	lsls	r3, r3, #16
 800f402:	0c1b      	lsrs	r3, r3, #16
 800f404:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 800f408:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 800f40c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f414:	b29b      	uxth	r3, r3
 800f416:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 800f41a:	e705      	b.n	800f228 <USB_EPStartXfer+0x284>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f41c:	0945      	lsrs	r5, r0, #5
 800f41e:	06c0      	lsls	r0, r0, #27
 800f420:	4809      	ldr	r0, [pc, #36]	; (800f448 <USB_EPStartXfer+0x4a4>)
 800f422:	bf08      	it	eq
 800f424:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800f428:	ea40 2085 	orr.w	r0, r0, r5, lsl #10
 800f42c:	b280      	uxth	r0, r0
 800f42e:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 800f432:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800f436:	f202 4506 	addw	r5, r2, #1030	; 0x406
 800f43a:	fa15 f383 	uxtah	r3, r5, r3
 800f43e:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 800f442:	780b      	ldrb	r3, [r1, #0]
 800f444:	e625      	b.n	800f092 <USB_EPStartXfer+0xee>
 800f446:	bf00      	nop
 800f448:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f44c:	f202 4702 	addw	r7, r2, #1026	; 0x402
 800f450:	fa17 f686 	uxtah	r6, r7, r6
 800f454:	fa1f f980 	uxth.w	r9, r0
 800f458:	f826 9035 	strh.w	r9, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f45c:	464f      	mov	r7, r9
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f45e:	890e      	ldrh	r6, [r1, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f460:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f464:	3701      	adds	r7, #1
 800f466:	f502 6880 	add.w	r8, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800f46a:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f46c:	4446      	add	r6, r8
  for (count = n; count != 0U; count--)
 800f46e:	d00c      	beq.n	800f48a <USB_EPStartXfer+0x4e6>
 800f470:	eba6 0a0c 	sub.w	sl, r6, ip
 800f474:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800f478:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f47a:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 800f47e:	f82e 600a 	strh.w	r6, [lr, sl]
    pBuf++;
 800f482:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 800f486:	45de      	cmp	lr, fp
 800f488:	d1f7      	bne.n	800f47a <USB_EPStartXfer+0x4d6>
            ep->xfer_buff += len;
 800f48a:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800f48e:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 800f490:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800f492:	d230      	bcs.n	800f4f6 <USB_EPStartXfer+0x552>
              ep->xfer_len_db -= len;
 800f494:	1a1b      	subs	r3, r3, r0
 800f496:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f498:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800f49c:	f202 4006 	addw	r0, r2, #1030	; 0x406
 800f4a0:	fa10 f383 	uxtah	r3, r0, r3
 800f4a4:	f823 9035 	strh.w	r9, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f4a8:	894b      	ldrh	r3, [r1, #10]
 800f4aa:	eb03 0508 	add.w	r5, r3, r8
  for (count = n; count != 0U; count--)
 800f4ae:	2f00      	cmp	r7, #0
 800f4b0:	f43f ae29 	beq.w	800f106 <USB_EPStartXfer+0x162>
 800f4b4:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800f4b8:	4633      	mov	r3, r6
 800f4ba:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f4bc:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800f4be:	5358      	strh	r0, [r3, r5]
    pBuf++;
 800f4c0:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800f4c2:	429c      	cmp	r4, r3
 800f4c4:	d1fa      	bne.n	800f4bc <USB_EPStartXfer+0x518>
 800f4c6:	e61e      	b.n	800f106 <USB_EPStartXfer+0x162>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f4c8:	085d      	lsrs	r5, r3, #1
 800f4ca:	f013 0301 	ands.w	r3, r3, #1
 800f4ce:	462e      	mov	r6, r5
 800f4d0:	bf18      	it	ne
 800f4d2:	1c6e      	addne	r6, r5, #1
 800f4d4:	02b6      	lsls	r6, r6, #10
 800f4d6:	b2b6      	uxth	r6, r6
 800f4d8:	f820 6034 	strh.w	r6, [r0, r4, lsl #3]
 800f4dc:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800f4e0:	f202 4606 	addw	r6, r2, #1030	; 0x406
 800f4e4:	fa16 f080 	uxtah	r0, r6, r0
 800f4e8:	b103      	cbz	r3, 800f4ec <USB_EPStartXfer+0x548>
 800f4ea:	3501      	adds	r5, #1
 800f4ec:	02ad      	lsls	r5, r5, #10
 800f4ee:	b2ab      	uxth	r3, r5
 800f4f0:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 800f4f4:	e698      	b.n	800f228 <USB_EPStartXfer+0x284>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f4f6:	b29c      	uxth	r4, r3
 800f4f8:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f4fa:	fa1f f983 	uxth.w	r9, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f4fe:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 800f500:	2300      	movs	r3, #0
 800f502:	e7c8      	b.n	800f496 <USB_EPStartXfer+0x4f2>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f504:	b29c      	uxth	r4, r3
 800f506:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f508:	fa1f fa83 	uxth.w	sl, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f50c:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 800f50e:	2300      	movs	r3, #0
 800f510:	e6f7      	b.n	800f302 <USB_EPStartXfer+0x35e>
 800f512:	bf00      	nop

0800f514 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800f514:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f516:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800f518:	b18b      	cbz	r3, 800f53e <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f51a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f51e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f526:	041b      	lsls	r3, r3, #16
 800f528:	0c1b      	lsrs	r3, r3, #16
 800f52a:	f083 0310 	eor.w	r3, r3, #16
 800f52e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f536:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800f53a:	2000      	movs	r0, #0
 800f53c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f53e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f54a:	041b      	lsls	r3, r3, #16
 800f54c:	0c1b      	lsrs	r3, r3, #16
 800f54e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f55a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800f55e:	2000      	movs	r0, #0
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop

0800f564 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800f564:	7b0b      	ldrb	r3, [r1, #12]
 800f566:	bb3b      	cbnz	r3, 800f5b8 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800f568:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f56a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800f56c:	b333      	cbz	r3, 800f5bc <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f56e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f572:	065b      	lsls	r3, r3, #25
 800f574:	d50d      	bpl.n	800f592 <USB_EPClearStall+0x2e>
 800f576:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f57a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f57e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f582:	041b      	lsls	r3, r3, #16
 800f584:	0c1b      	lsrs	r3, r3, #16
 800f586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f58a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f58e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800f592:	78cb      	ldrb	r3, [r1, #3]
 800f594:	2b01      	cmp	r3, #1
 800f596:	d00f      	beq.n	800f5b8 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f598:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f59c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5a4:	041b      	lsls	r3, r3, #16
 800f5a6:	0c1b      	lsrs	r3, r3, #16
 800f5a8:	f083 0320 	eor.w	r3, r3, #32
 800f5ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f5bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f5c0:	045b      	lsls	r3, r3, #17
 800f5c2:	d50d      	bpl.n	800f5e0 <USB_EPClearStall+0x7c>
 800f5c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f5c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5d0:	041b      	lsls	r3, r3, #16
 800f5d2:	0c1b      	lsrs	r3, r3, #16
 800f5d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f5e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800f5e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f5e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ec:	041b      	lsls	r3, r3, #16
 800f5ee:	0c1b      	lsrs	r3, r3, #16
 800f5f0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800f5f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800f600:	2000      	movs	r0, #0
 800f602:	4770      	bx	lr

0800f604 <USB_SetDevAddress>:
  if (address == 0U)
 800f604:	b911      	cbnz	r1, 800f60c <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f606:	2380      	movs	r3, #128	; 0x80
 800f608:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800f60c:	2000      	movs	r0, #0
 800f60e:	4770      	bx	lr

0800f610 <USB_DevConnect>:
{
 800f610:	4602      	mov	r2, r0
}
 800f612:	2000      	movs	r0, #0
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f614:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 800f618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f61c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f620:	b29b      	uxth	r3, r3
 800f622:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
}
 800f626:	4770      	bx	lr

0800f628 <USB_DevDisconnect>:
{
 800f628:	4603      	mov	r3, r0
}
 800f62a:	2000      	movs	r0, #0
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800f62c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f630:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f634:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
}
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop

0800f63c <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800f63c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800f640:	b280      	uxth	r0, r0
 800f642:	4770      	bx	lr

0800f644 <USB_EP0_OutStart>:
}
 800f644:	2000      	movs	r0, #0
 800f646:	4770      	bx	lr

0800f648 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f648:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f64a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800f64e:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f650:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 800f652:	d008      	beq.n	800f666 <USB_WritePMA+0x1e>
  uint8_t *pBuf = pbUsrBuf;
 800f654:	460a      	mov	r2, r1
 800f656:	1a80      	subs	r0, r0, r2
 800f658:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f65c:	8813      	ldrh	r3, [r2, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800f65e:	5213      	strh	r3, [r2, r0]
    pBuf++;
 800f660:	3202      	adds	r2, #2
  for (count = n; count != 0U; count--)
 800f662:	4291      	cmp	r1, r2
 800f664:	d1fa      	bne.n	800f65c <USB_WritePMA+0x14>
  }
}
 800f666:	4770      	bx	lr

0800f668 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f668:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f66a:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 800f66e:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f670:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 800f672:	d01c      	beq.n	800f6ae <USB_ReadPMA+0x46>
 800f674:	f06f 0501 	mvn.w	r5, #1
 800f678:	1a6d      	subs	r5, r5, r1
 800f67a:	1c8a      	adds	r2, r1, #2
 800f67c:	4405      	add	r5, r0
 800f67e:	46b6      	mov	lr, r6
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f680:	f835 c002 	ldrh.w	ip, [r5, r2]
  for (count = n; count != 0U; count--)
 800f684:	3202      	adds	r2, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 800f686:	fa1f fc8c 	uxth.w	ip, ip
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f68a:	ea4f 241c 	mov.w	r4, ip, lsr #8
  for (count = n; count != 0U; count--)
 800f68e:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f692:	f802 cc04 	strb.w	ip, [r2, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f696:	f802 4c03 	strb.w	r4, [r2, #-3]
  for (count = n; count != 0U; count--)
 800f69a:	d1f1      	bne.n	800f680 <USB_ReadPMA+0x18>
    pdwVal++;
 800f69c:	eb00 0246 	add.w	r2, r0, r6, lsl #1
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f6a0:	07db      	lsls	r3, r3, #31
    pBuf++;
 800f6a2:	eb01 0146 	add.w	r1, r1, r6, lsl #1
  {
    RdVal = *pdwVal;
 800f6a6:	bf44      	itt	mi
 800f6a8:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f6aa:	700b      	strbmi	r3, [r1, #0]
  }
}
 800f6ac:	bd70      	pop	{r4, r5, r6, pc}
 800f6ae:	4602      	mov	r2, r0
  if ((wNBytes % 2U) != 0U)
 800f6b0:	07db      	lsls	r3, r3, #31
    RdVal = *pdwVal;
 800f6b2:	bf44      	itt	mi
 800f6b4:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f6b6:	700b      	strbmi	r3, [r1, #0]
}
 800f6b8:	bd70      	pop	{r4, r5, r6, pc}
 800f6ba:	bf00      	nop

0800f6bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f6bc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f6be:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800f6c2:	b184      	cbz	r4, 800f6e6 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f6c4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800f6c8:	b15b      	cbz	r3, 800f6e2 <USBD_CDC_EP0_RxReady+0x26>
 800f6ca:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800f6ce:	28ff      	cmp	r0, #255	; 0xff
 800f6d0:	d007      	beq.n	800f6e2 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800f6d8:	4621      	mov	r1, r4
 800f6da:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800f6dc:	23ff      	movs	r3, #255	; 0xff
 800f6de:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f6e2:	2000      	movs	r0, #0
}
 800f6e4:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f6e6:	2003      	movs	r0, #3
}
 800f6e8:	bd10      	pop	{r4, pc}
 800f6ea:	bf00      	nop

0800f6ec <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f6ec:	2343      	movs	r3, #67	; 0x43
 800f6ee:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800f6f0:	4800      	ldr	r0, [pc, #0]	; (800f6f4 <USBD_CDC_GetFSCfgDesc+0x8>)
 800f6f2:	4770      	bx	lr
 800f6f4:	20000148 	.word	0x20000148

0800f6f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f6f8:	2343      	movs	r3, #67	; 0x43
 800f6fa:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800f6fc:	4800      	ldr	r0, [pc, #0]	; (800f700 <USBD_CDC_GetHSCfgDesc+0x8>)
 800f6fe:	4770      	bx	lr
 800f700:	2000018c 	.word	0x2000018c

0800f704 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f704:	2343      	movs	r3, #67	; 0x43
 800f706:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800f708:	4800      	ldr	r0, [pc, #0]	; (800f70c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800f70a:	4770      	bx	lr
 800f70c:	200001dc 	.word	0x200001dc

0800f710 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f710:	230a      	movs	r3, #10
 800f712:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800f714:	4800      	ldr	r0, [pc, #0]	; (800f718 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800f716:	4770      	bx	lr
 800f718:	200001d0 	.word	0x200001d0

0800f71c <USBD_CDC_DataOut>:
{
 800f71c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f71e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800f722:	b17d      	cbz	r5, 800f744 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f724:	4604      	mov	r4, r0
 800f726:	f001 f9dd 	bl	8010ae4 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f72a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f72e:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f730:	68db      	ldr	r3, [r3, #12]
 800f732:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f736:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f73a:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800f73e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f740:	2000      	movs	r0, #0
}
 800f742:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800f744:	2003      	movs	r0, #3
}
 800f746:	bd38      	pop	{r3, r4, r5, pc}

0800f748 <USBD_CDC_DataIn>:
{
 800f748:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800f74a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f74e:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800f752:	b33d      	cbz	r5, 800f7a4 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f754:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800f758:	eb00 068e 	add.w	r6, r0, lr, lsl #2
 800f75c:	4684      	mov	ip, r0
 800f75e:	69b3      	ldr	r3, [r6, #24]
 800f760:	460a      	mov	r2, r1
 800f762:	b96b      	cbnz	r3, 800f780 <USBD_CDC_DataIn+0x38>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f764:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
 800f768:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800f76a:	2400      	movs	r4, #0
 800f76c:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f770:	b1b3      	cbz	r3, 800f7a0 <USBD_CDC_DataIn+0x58>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f772:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800f776:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800f77a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f77c:	4620      	mov	r0, r4
}
 800f77e:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f780:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 800f784:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800f786:	fbb3 fef4 	udiv	lr, r3, r4
 800f78a:	fb04 341e 	mls	r4, r4, lr, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f78e:	2c00      	cmp	r4, #0
 800f790:	d1e8      	bne.n	800f764 <USBD_CDC_DataIn+0x1c>
    pdev->ep_in[epnum].total_length = 0U;
 800f792:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f794:	4623      	mov	r3, r4
 800f796:	4622      	mov	r2, r4
 800f798:	f001 f988 	bl	8010aac <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800f79c:	4620      	mov	r0, r4
}
 800f79e:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800f7a0:	4618      	mov	r0, r3
}
 800f7a2:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800f7a4:	2003      	movs	r0, #3
}
 800f7a6:	bd70      	pop	{r4, r5, r6, pc}

0800f7a8 <USBD_CDC_Setup>:
{
 800f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f7ac:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
{
 800f7b0:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800f7b2:	2600      	movs	r6, #0
 800f7b4:	f88d 6005 	strb.w	r6, [sp, #5]
  uint16_t status_info = 0U;
 800f7b8:	f8ad 6006 	strh.w	r6, [sp, #6]
  if (hcdc == NULL)
 800f7bc:	f1b8 0f00 	cmp.w	r8, #0
 800f7c0:	d068      	beq.n	800f894 <USBD_CDC_Setup+0xec>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7c2:	780b      	ldrb	r3, [r1, #0]
 800f7c4:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800f7c8:	4607      	mov	r7, r0
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	d01f      	beq.n	800f80e <USBD_CDC_Setup+0x66>
 800f7ce:	2d20      	cmp	r5, #32
 800f7d0:	d008      	beq.n	800f7e4 <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 800f7d2:	4621      	mov	r1, r4
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	f000 fdf1 	bl	80103bc <USBD_CtlError>
          ret = USBD_FAIL;
 800f7da:	2503      	movs	r5, #3
}
 800f7dc:	4628      	mov	r0, r5
 800f7de:	b002      	add	sp, #8
 800f7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 800f7e4:	88cd      	ldrh	r5, [r1, #6]
 800f7e6:	b38d      	cbz	r5, 800f84c <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 800f7e8:	061b      	lsls	r3, r3, #24
 800f7ea:	d558      	bpl.n	800f89e <USBD_CDC_Setup+0xf6>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f7ec:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800f7f0:	7860      	ldrb	r0, [r4, #1]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	462a      	mov	r2, r5
 800f7f6:	4641      	mov	r1, r8
 800f7f8:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f7fa:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f7fc:	2a07      	cmp	r2, #7
 800f7fe:	4641      	mov	r1, r8
 800f800:	bf28      	it	cs
 800f802:	2207      	movcs	r2, #7
 800f804:	4638      	mov	r0, r7
  USBD_StatusTypeDef ret = USBD_OK;
 800f806:	4635      	mov	r5, r6
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f808:	f000 fe0e 	bl	8010428 <USBD_CtlSendData>
 800f80c:	e7e6      	b.n	800f7dc <USBD_CDC_Setup+0x34>
      switch (req->bRequest)
 800f80e:	784e      	ldrb	r6, [r1, #1]
 800f810:	2e0b      	cmp	r6, #11
 800f812:	d8de      	bhi.n	800f7d2 <USBD_CDC_Setup+0x2a>
 800f814:	a301      	add	r3, pc, #4	; (adr r3, 800f81c <USBD_CDC_Setup+0x74>)
 800f816:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 800f81a:	bf00      	nop
 800f81c:	0800f87f 	.word	0x0800f87f
 800f820:	0800f7dd 	.word	0x0800f7dd
 800f824:	0800f7d3 	.word	0x0800f7d3
 800f828:	0800f7d3 	.word	0x0800f7d3
 800f82c:	0800f7d3 	.word	0x0800f7d3
 800f830:	0800f7d3 	.word	0x0800f7d3
 800f834:	0800f7d3 	.word	0x0800f7d3
 800f838:	0800f7d3 	.word	0x0800f7d3
 800f83c:	0800f7d3 	.word	0x0800f7d3
 800f840:	0800f7d3 	.word	0x0800f7d3
 800f844:	0800f86b 	.word	0x0800f86b
 800f848:	0800f861 	.word	0x0800f861
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f84c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800f850:	7848      	ldrb	r0, [r1, #1]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	462a      	mov	r2, r5
 800f856:	4798      	blx	r3
}
 800f858:	4628      	mov	r0, r5
 800f85a:	b002      	add	sp, #8
 800f85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f860:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f864:	2b03      	cmp	r3, #3
 800f866:	d0b9      	beq.n	800f7dc <USBD_CDC_Setup+0x34>
 800f868:	e7b3      	b.n	800f7d2 <USBD_CDC_Setup+0x2a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f86a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f86e:	2b03      	cmp	r3, #3
 800f870:	d1af      	bne.n	800f7d2 <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f872:	2201      	movs	r2, #1
 800f874:	f10d 0105 	add.w	r1, sp, #5
 800f878:	f000 fdd6 	bl	8010428 <USBD_CtlSendData>
 800f87c:	e7ae      	b.n	800f7dc <USBD_CDC_Setup+0x34>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f87e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f882:	2b03      	cmp	r3, #3
 800f884:	d1a5      	bne.n	800f7d2 <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f886:	2202      	movs	r2, #2
 800f888:	f10d 0106 	add.w	r1, sp, #6
 800f88c:	f000 fdcc 	bl	8010428 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800f890:	4635      	mov	r5, r6
 800f892:	e7a3      	b.n	800f7dc <USBD_CDC_Setup+0x34>
    return (uint8_t)USBD_FAIL;
 800f894:	2503      	movs	r5, #3
}
 800f896:	4628      	mov	r0, r5
 800f898:	b002      	add	sp, #8
 800f89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 800f89e:	784b      	ldrb	r3, [r1, #1]
 800f8a0:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f8a4:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f8a8:	462a      	mov	r2, r5
 800f8aa:	4641      	mov	r1, r8
 800f8ac:	f000 fdd2 	bl	8010454 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800f8b0:	4635      	mov	r5, r6
 800f8b2:	e793      	b.n	800f7dc <USBD_CDC_Setup+0x34>

0800f8b4 <USBD_CDC_DeInit>:
{
 800f8b4:	b538      	push	{r3, r4, r5, lr}
 800f8b6:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f8b8:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f8ba:	2182      	movs	r1, #130	; 0x82
 800f8bc:	f001 f8aa 	bl	8010a14 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f8c0:	2102      	movs	r1, #2
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f8c2:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f001 f8a4 	bl	8010a14 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f8cc:	f8a4 518c 	strh.w	r5, [r4, #396]	; 0x18c
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f8d0:	2183      	movs	r1, #131	; 0x83
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f001 f89e 	bl	8010a14 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800f8d8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f8dc:	6625      	str	r5, [r4, #96]	; 0x60
  if (pdev->pClassData != NULL)
 800f8de:	b14b      	cbz	r3, 800f8f4 <USBD_CDC_DeInit+0x40>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f8e0:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f8e8:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800f8ec:	f001 f92e 	bl	8010b4c <USBD_static_free>
    pdev->pClassData = NULL;
 800f8f0:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	bd38      	pop	{r3, r4, r5, pc}

0800f8f8 <USBD_CDC_Init>:
{
 800f8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fa:	4604      	mov	r4, r0
  hcdc = USBD_static_CDC_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f8fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f900:	f001 f91c 	bl	8010b3c <USBD_static_CDC_malloc>
  if (hcdc == NULL)
 800f904:	4605      	mov	r5, r0
 800f906:	2800      	cmp	r0, #0
 800f908:	d04f      	beq.n	800f9aa <USBD_CDC_Init+0xb2>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f90a:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800f90c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f910:	b38b      	cbz	r3, 800f976 <USBD_CDC_Init+0x7e>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f912:	2340      	movs	r3, #64	; 0x40
 800f914:	2202      	movs	r2, #2
 800f916:	2182      	movs	r1, #130	; 0x82
 800f918:	4620      	mov	r0, r4
 800f91a:	f001 f86b 	bl	80109f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f91e:	2301      	movs	r3, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f920:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f922:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f926:	4611      	mov	r1, r2
 800f928:	2340      	movs	r3, #64	; 0x40
 800f92a:	4620      	mov	r0, r4
 800f92c:	f001 f862 	bl	80109f4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f930:	2601      	movs	r6, #1
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f932:	2210      	movs	r2, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f934:	2308      	movs	r3, #8
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f936:	f8a4 618c 	strh.w	r6, [r4, #396]	; 0x18c
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f93a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f93e:	2183      	movs	r1, #131	; 0x83
 800f940:	2203      	movs	r2, #3
 800f942:	4620      	mov	r0, r4
 800f944:	f001 f856 	bl	80109f4 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f948:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800f94c:	2700      	movs	r7, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f94e:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f950:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f954:	4798      	blx	r3
  hcdc->TxState = 0U;
 800f956:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800f95a:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f95e:	7c26      	ldrb	r6, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f960:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f964:	b9ce      	cbnz	r6, 800f99a <USBD_CDC_Init+0xa2>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f96a:	2102      	movs	r1, #2
 800f96c:	4620      	mov	r0, r4
 800f96e:	f001 f8ab 	bl	8010ac8 <USBD_LL_PrepareReceive>
}
 800f972:	4630      	mov	r0, r6
 800f974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f97a:	2202      	movs	r2, #2
 800f97c:	2182      	movs	r1, #130	; 0x82
 800f97e:	4620      	mov	r0, r4
 800f980:	f001 f838 	bl	80109f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f984:	2301      	movs	r3, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f986:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f988:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f98c:	4611      	mov	r1, r2
 800f98e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f992:	4620      	mov	r0, r4
 800f994:	f001 f82e 	bl	80109f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f998:	e7ca      	b.n	800f930 <USBD_CDC_Init+0x38>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f99a:	2340      	movs	r3, #64	; 0x40
 800f99c:	2102      	movs	r1, #2
 800f99e:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 800f9a0:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f9a2:	f001 f891 	bl	8010ac8 <USBD_LL_PrepareReceive>
}
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_EMEM;
 800f9aa:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800f9ac:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f9b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f9b4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800f9b8:	b12b      	cbz	r3, 800f9c6 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800f9ba:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f9be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f9c2:	2000      	movs	r0, #0
 800f9c4:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f9c6:	2003      	movs	r0, #3
}
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop

0800f9cc <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f9cc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800f9d0:	b11b      	cbz	r3, 800f9da <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800f9d2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f9d6:	2000      	movs	r0, #0
 800f9d8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f9da:	2003      	movs	r0, #3
}
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop

0800f9e0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f9e0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800f9e4:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800f9e6:	b18a      	cbz	r2, 800fa0c <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

#if 1
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9e8:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f9ea:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9ee:	b134      	cbz	r4, 800f9fe <USBD_CDC_ReceivePacket+0x1e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f9f0:	2340      	movs	r3, #64	; 0x40
 800f9f2:	2102      	movs	r1, #2
		/* Prepare Out endpoint to receive next packet */
		return USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
																 CDC_DATA_FS_OUT_PACKET_SIZE);
	}
#endif
	return (uint8_t)USBD_OK;
 800f9f4:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f9f6:	f001 f867 	bl	8010ac8 <USBD_LL_PrepareReceive>
}
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f9fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa02:	2102      	movs	r1, #2
 800fa04:	f001 f860 	bl	8010ac8 <USBD_LL_PrepareReceive>
}
 800fa08:	4620      	mov	r0, r4
 800fa0a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800fa0c:	2403      	movs	r4, #3
}
 800fa0e:	4620      	mov	r0, r4
 800fa10:	bd10      	pop	{r4, pc}
 800fa12:	bf00      	nop

0800fa14 <USBD_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800fa14:	2322      	movs	r3, #34	; 0x22
 800fa16:	8003      	strh	r3, [r0, #0]

  return USBD_HID_CfgFSDesc;
}
 800fa18:	4800      	ldr	r0, [pc, #0]	; (800fa1c <USBD_HID_GetFSCfgDesc+0x8>)
 800fa1a:	4770      	bx	lr
 800fa1c:	20000298 	.word	0x20000298

0800fa20 <USBD_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800fa20:	2322      	movs	r3, #34	; 0x22
 800fa22:	8003      	strh	r3, [r0, #0]

  return USBD_HID_CfgHSDesc;
}
 800fa24:	4800      	ldr	r0, [pc, #0]	; (800fa28 <USBD_HID_GetHSCfgDesc+0x8>)
 800fa26:	4770      	bx	lr
 800fa28:	200002bc 	.word	0x200002bc

0800fa2c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800fa2c:	2322      	movs	r3, #34	; 0x22
 800fa2e:	8003      	strh	r3, [r0, #0]

  return USBD_HID_OtherSpeedCfgDesc;
}
 800fa30:	4800      	ldr	r0, [pc, #0]	; (800fa34 <USBD_HID_GetOtherSpeedCfgDesc+0x8>)
 800fa32:	4770      	bx	lr
 800fa34:	200002f8 	.word	0x200002f8

0800fa38 <USBD_HID_DataIn>:
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800fa38:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800fa3c:	2300      	movs	r3, #0

  return (uint8_t)USBD_OK;
}
 800fa3e:	4618      	mov	r0, r3
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800fa40:	7313      	strb	r3, [r2, #12]
}
 800fa42:	4770      	bx	lr

0800fa44 <USBD_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800fa44:	230a      	movs	r3, #10
 800fa46:	8003      	strh	r3, [r0, #0]

  return USBD_HID_DeviceQualifierDesc;
}
 800fa48:	4800      	ldr	r0, [pc, #0]	; (800fa4c <USBD_HID_GetDeviceQualifierDesc+0x8>)
 800fa4a:	4770      	bx	lr
 800fa4c:	200002ec 	.word	0x200002ec

0800fa50 <USBD_HID_Setup>:
{
 800fa50:	b570      	push	{r4, r5, r6, lr}
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800fa52:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
{
 800fa56:	b082      	sub	sp, #8
  uint16_t status_info = 0U;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hhid == NULL)
 800fa5e:	2d00      	cmp	r5, #0
 800fa60:	d059      	beq.n	800fb16 <USBD_HID_Setup+0xc6>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa62:	780c      	ldrb	r4, [r1, #0]
 800fa64:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 800fa68:	d022      	beq.n	800fab0 <USBD_HID_Setup+0x60>
 800fa6a:	2c20      	cmp	r4, #32
 800fa6c:	d005      	beq.n	800fa7a <USBD_HID_Setup+0x2a>
            USBD_CtlError(pdev, req);
 800fa6e:	f000 fca5 	bl	80103bc <USBD_CtlError>
            ret = USBD_FAIL;
 800fa72:	2403      	movs	r4, #3
}
 800fa74:	4620      	mov	r0, r4
 800fa76:	b002      	add	sp, #8
 800fa78:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800fa7a:	784b      	ldrb	r3, [r1, #1]
 800fa7c:	3b02      	subs	r3, #2
 800fa7e:	2b09      	cmp	r3, #9
 800fa80:	d8f5      	bhi.n	800fa6e <USBD_HID_Setup+0x1e>
 800fa82:	a201      	add	r2, pc, #4	; (adr r2, 800fa88 <USBD_HID_Setup+0x38>)
 800fa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa88:	0800fb0b 	.word	0x0800fb0b
 800fa8c:	0800faff 	.word	0x0800faff
 800fa90:	0800fa6f 	.word	0x0800fa6f
 800fa94:	0800fa6f 	.word	0x0800fa6f
 800fa98:	0800fa6f 	.word	0x0800fa6f
 800fa9c:	0800fa6f 	.word	0x0800fa6f
 800faa0:	0800fa6f 	.word	0x0800fa6f
 800faa4:	0800fa6f 	.word	0x0800fa6f
 800faa8:	0800faf5 	.word	0x0800faf5
 800faac:	0800faed 	.word	0x0800faed
      switch (req->bRequest)
 800fab0:	784e      	ldrb	r6, [r1, #1]
 800fab2:	2e0b      	cmp	r6, #11
 800fab4:	d8db      	bhi.n	800fa6e <USBD_HID_Setup+0x1e>
 800fab6:	a301      	add	r3, pc, #4	; (adr r3, 800fabc <USBD_HID_Setup+0x6c>)
 800fab8:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 800fabc:	0800fb2d 	.word	0x0800fb2d
 800fac0:	0800fa75 	.word	0x0800fa75
 800fac4:	0800fa6f 	.word	0x0800fa6f
 800fac8:	0800fa6f 	.word	0x0800fa6f
 800facc:	0800fa6f 	.word	0x0800fa6f
 800fad0:	0800fa6f 	.word	0x0800fa6f
 800fad4:	0800fb43 	.word	0x0800fb43
 800fad8:	0800fa6f 	.word	0x0800fa6f
 800fadc:	0800fa6f 	.word	0x0800fa6f
 800fae0:	0800fa6f 	.word	0x0800fa6f
 800fae4:	0800fb5f 	.word	0x0800fb5f
 800fae8:	0800fb1f 	.word	0x0800fb1f
          hhid->Protocol = (uint8_t)(req->wValue);
 800faec:	788b      	ldrb	r3, [r1, #2]
 800faee:	602b      	str	r3, [r5, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800faf0:	2400      	movs	r4, #0
          break;
 800faf2:	e7bf      	b.n	800fa74 <USBD_HID_Setup+0x24>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800faf4:	884b      	ldrh	r3, [r1, #2]
 800faf6:	0a1b      	lsrs	r3, r3, #8
  USBD_StatusTypeDef ret = USBD_OK;
 800faf8:	2400      	movs	r4, #0
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800fafa:	606b      	str	r3, [r5, #4]
          break;
 800fafc:	e7ba      	b.n	800fa74 <USBD_HID_Setup+0x24>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800fafe:	2201      	movs	r2, #1
 800fb00:	4629      	mov	r1, r5
 800fb02:	f000 fc91 	bl	8010428 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800fb06:	2400      	movs	r4, #0
          break;
 800fb08:	e7b4      	b.n	800fa74 <USBD_HID_Setup+0x24>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	1d29      	adds	r1, r5, #4
 800fb0e:	f000 fc8b 	bl	8010428 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800fb12:	2400      	movs	r4, #0
          break;
 800fb14:	e7ae      	b.n	800fa74 <USBD_HID_Setup+0x24>
    return (uint8_t)USBD_FAIL;
 800fb16:	2403      	movs	r4, #3
}
 800fb18:	4620      	mov	r0, r4
 800fb1a:	b002      	add	sp, #8
 800fb1c:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb1e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fb22:	2b03      	cmp	r3, #3
 800fb24:	d1a3      	bne.n	800fa6e <USBD_HID_Setup+0x1e>
            hhid->AltSetting = (uint8_t)(req->wValue);
 800fb26:	788b      	ldrb	r3, [r1, #2]
 800fb28:	60ab      	str	r3, [r5, #8]
 800fb2a:	e7a3      	b.n	800fa74 <USBD_HID_Setup+0x24>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fb30:	2b03      	cmp	r3, #3
 800fb32:	d19c      	bne.n	800fa6e <USBD_HID_Setup+0x1e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fb34:	2202      	movs	r2, #2
 800fb36:	f10d 0106 	add.w	r1, sp, #6
 800fb3a:	f000 fc75 	bl	8010428 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800fb3e:	4634      	mov	r4, r6
 800fb40:	e798      	b.n	800fa74 <USBD_HID_Setup+0x24>
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800fb42:	884b      	ldrh	r3, [r1, #2]
 800fb44:	0a1b      	lsrs	r3, r3, #8
 800fb46:	2b22      	cmp	r3, #34	; 0x22
 800fb48:	d011      	beq.n	800fb6e <USBD_HID_Setup+0x11e>
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800fb4a:	2b21      	cmp	r3, #33	; 0x21
 800fb4c:	d18f      	bne.n	800fa6e <USBD_HID_Setup+0x1e>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800fb4e:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_HID_Desc;
 800fb50:	490a      	ldr	r1, [pc, #40]	; (800fb7c <USBD_HID_Setup+0x12c>)
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800fb52:	2a09      	cmp	r2, #9
 800fb54:	bf28      	it	cs
 800fb56:	2209      	movcs	r2, #9
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800fb58:	f000 fc66 	bl	8010428 <USBD_CtlSendData>
 800fb5c:	e78a      	b.n	800fa74 <USBD_HID_Setup+0x24>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb5e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fb62:	2b03      	cmp	r3, #3
 800fb64:	d183      	bne.n	800fa6e <USBD_HID_Setup+0x1e>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800fb66:	2201      	movs	r2, #1
 800fb68:	f105 0108 	add.w	r1, r5, #8
 800fb6c:	e7f4      	b.n	800fb58 <USBD_HID_Setup+0x108>
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800fb6e:	88ca      	ldrh	r2, [r1, #6]
            pbuf = HID_MOUSE_ReportDesc;
 800fb70:	4903      	ldr	r1, [pc, #12]	; (800fb80 <USBD_HID_Setup+0x130>)
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800fb72:	2a3f      	cmp	r2, #63	; 0x3f
 800fb74:	bf28      	it	cs
 800fb76:	223f      	movcs	r2, #63	; 0x3f
            pbuf = HID_MOUSE_ReportDesc;
 800fb78:	e7ee      	b.n	800fb58 <USBD_HID_Setup+0x108>
 800fb7a:	bf00      	nop
 800fb7c:	200002e0 	.word	0x200002e0
 800fb80:	20000220 	.word	0x20000220

0800fb84 <USBD_HID_DeInit>:
{
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800fb88:	2181      	movs	r1, #129	; 0x81
 800fb8a:	f000 ff43 	bl	8010a14 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800fb8e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800fb92:	2500      	movs	r5, #0
 800fb94:	63a5      	str	r5, [r4, #56]	; 0x38
  if (pdev->pClassData != NULL)
 800fb96:	b118      	cbz	r0, 800fba0 <USBD_HID_DeInit+0x1c>
    (void)USBD_free(pdev->pClassData);
 800fb98:	f000 ffd8 	bl	8010b4c <USBD_static_free>
    pdev->pClassData = NULL;
 800fb9c:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800fba0:	2000      	movs	r0, #0
 800fba2:	bd38      	pop	{r3, r4, r5, pc}

0800fba4 <USBD_HID_Init>:
{
 800fba4:	b538      	push	{r3, r4, r5, lr}
 800fba6:	4604      	mov	r4, r0
  hhid = USBD_static_HID_malloc(sizeof(USBD_HID_HandleTypeDef));
 800fba8:	2010      	movs	r0, #16
 800fbaa:	f000 ffcb 	bl	8010b44 <USBD_static_HID_malloc>
  if (hhid == NULL)
 800fbae:	4605      	mov	r5, r0
 800fbb0:	b198      	cbz	r0, 800fbda <USBD_HID_Init+0x36>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbb2:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hhid;
 800fbb4:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	bf0c      	ite	eq
 800fbbc:	2307      	moveq	r3, #7
 800fbbe:	230a      	movne	r3, #10
 800fbc0:	8763      	strh	r3, [r4, #58]	; 0x3a
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800fbc2:	2203      	movs	r2, #3
 800fbc4:	2304      	movs	r3, #4
 800fbc6:	2181      	movs	r1, #129	; 0x81
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f000 ff13 	bl	80109f4 <USBD_LL_OpenEP>
  hhid->state = HID_IDLE;
 800fbce:	2300      	movs	r3, #0
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	8722      	strh	r2, [r4, #56]	; 0x38
  hhid->state = HID_IDLE;
 800fbd4:	732b      	strb	r3, [r5, #12]
  return (uint8_t)USBD_OK;
 800fbd6:	4618      	mov	r0, r3
}
 800fbd8:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClassData = NULL;
 800fbda:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fbde:	2002      	movs	r0, #2
}
 800fbe0:	bd38      	pop	{r3, r4, r5, pc}
 800fbe2:	bf00      	nop

0800fbe4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fbe4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fbe6:	b188      	cbz	r0, 800fc0c <USBD_Init+0x28>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800fbee:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800fbf2:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fbf6:	b109      	cbz	r1, 800fbfc <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800fbf8:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800fc02:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);

  return ret;
}
 800fc04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ret = USBD_LL_Init(pdev);
 800fc08:	f000 be82 	b.w	8010910 <USBD_LL_Init>
    USBD_ErrLog("Invalid Device handle");
 800fc0c:	4805      	ldr	r0, [pc, #20]	; (800fc24 <USBD_Init+0x40>)
 800fc0e:	f002 ff15 	bl	8012a3c <iprintf>
 800fc12:	4805      	ldr	r0, [pc, #20]	; (800fc28 <USBD_Init+0x44>)
 800fc14:	f002 ff12 	bl	8012a3c <iprintf>
 800fc18:	200a      	movs	r0, #10
 800fc1a:	f002 ff21 	bl	8012a60 <putchar>
}
 800fc1e:	2003      	movs	r0, #3
 800fc20:	bd08      	pop	{r3, pc}
 800fc22:	bf00      	nop
 800fc24:	08016df4 	.word	0x08016df4
 800fc28:	08016dfc 	.word	0x08016dfc

0800fc2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fc2c:	b530      	push	{r4, r5, lr}
 800fc2e:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800fc30:	2400      	movs	r4, #0
 800fc32:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800fc36:	b179      	cbz	r1, 800fc58 <USBD_RegisterClass+0x2c>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fc38:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 800fc3a:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fc3e:	4605      	mov	r5, r0
 800fc40:	b13b      	cbz	r3, 800fc52 <USBD_RegisterClass+0x26>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fc42:	f10d 0006 	add.w	r0, sp, #6
 800fc46:	4798      	blx	r3
 800fc48:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fc4c:	4620      	mov	r0, r4
}
 800fc4e:	b003      	add	sp, #12
 800fc50:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800fc52:	4618      	mov	r0, r3
}
 800fc54:	b003      	add	sp, #12
 800fc56:	bd30      	pop	{r4, r5, pc}
    USBD_ErrLog("Invalid Class handle");
 800fc58:	4805      	ldr	r0, [pc, #20]	; (800fc70 <USBD_RegisterClass+0x44>)
 800fc5a:	f002 feef 	bl	8012a3c <iprintf>
 800fc5e:	4805      	ldr	r0, [pc, #20]	; (800fc74 <USBD_RegisterClass+0x48>)
 800fc60:	f002 feec 	bl	8012a3c <iprintf>
 800fc64:	200a      	movs	r0, #10
 800fc66:	f002 fefb 	bl	8012a60 <putchar>
    return USBD_FAIL;
 800fc6a:	2003      	movs	r0, #3
 800fc6c:	e7ef      	b.n	800fc4e <USBD_RegisterClass+0x22>
 800fc6e:	bf00      	nop
 800fc70:	08016df4 	.word	0x08016df4
 800fc74:	08016e14 	.word	0x08016e14

0800fc78 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fc78:	f000 beae 	b.w	80109d8 <USBD_LL_Start>

0800fc7c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800fc7c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fc80:	b10b      	cbz	r3, 800fc86 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	4718      	bx	r3
  }

  return ret;
}
 800fc86:	2003      	movs	r0, #3
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop

0800fc8c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc8c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fc8e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fc92:	b10b      	cbz	r3, 800fc98 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	4798      	blx	r3
  }

  return USBD_OK;
}
 800fc98:	2000      	movs	r0, #0
 800fc9a:	bd08      	pop	{r3, pc}

0800fc9c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fc9c:	b538      	push	{r3, r4, r5, lr}
 800fc9e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fca0:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800fca4:	4628      	mov	r0, r5
 800fca6:	f000 fb7d 	bl	80103a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800fcaa:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 800fcae:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 800fcb2:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800fcbc:	f001 031f 	and.w	r3, r1, #31
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d009      	beq.n	800fcd8 <USBD_LL_SetupStage+0x3c>
 800fcc4:	2b02      	cmp	r3, #2
 800fcc6:	d013      	beq.n	800fcf0 <USBD_LL_SetupStage+0x54>
 800fcc8:	b163      	cbz	r3, 800fce4 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fcca:	4620      	mov	r0, r4
 800fccc:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800fcd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fcd4:	f000 beac 	b.w	8010a30 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fcd8:	4629      	mov	r1, r5
 800fcda:	4620      	mov	r0, r4
}
 800fcdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fce0:	f000 ba98 	b.w	8010214 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fce4:	4629      	mov	r1, r5
 800fce6:	4620      	mov	r0, r4
}
 800fce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fcec:	f000 b8ec 	b.w	800fec8 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	4620      	mov	r0, r4
}
 800fcf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fcf8:	f000 babc 	b.w	8010274 <USBD_StdEPReq>

0800fcfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fcfc:	b510      	push	{r4, lr}
 800fcfe:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fd00:	b931      	cbnz	r1, 800fd10 <USBD_LL_DataOutStage+0x14>
 800fd02:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fd04:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800fd08:	2a03      	cmp	r2, #3
 800fd0a:	d00d      	beq.n	800fd28 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd10:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fd14:	2b03      	cmp	r3, #3
 800fd16:	d1f9      	bne.n	800fd0c <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 800fd18:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fd1c:	699b      	ldr	r3, [r3, #24]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d0f4      	beq.n	800fd0c <USBD_LL_DataOutStage+0x10>
}
 800fd22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fd26:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800fd28:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 800fd2c:	4291      	cmp	r1, r2
 800fd2e:	d808      	bhi.n	800fd42 <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fd34:	2b03      	cmp	r3, #3
 800fd36:	d00e      	beq.n	800fd56 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f000 fba1 	bl	8010480 <USBD_CtlSendStatus>
}
 800fd3e:	2000      	movs	r0, #0
 800fd40:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800fd42:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fd44:	428a      	cmp	r2, r1
 800fd46:	bf28      	it	cs
 800fd48:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800fd4a:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fd4e:	4619      	mov	r1, r3
 800fd50:	f000 fb8e 	bl	8010470 <USBD_CtlContinueRx>
 800fd54:	e7da      	b.n	800fd0c <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 800fd56:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fd5a:	691b      	ldr	r3, [r3, #16]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d0eb      	beq.n	800fd38 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 800fd60:	4798      	blx	r3
 800fd62:	e7e9      	b.n	800fd38 <USBD_LL_DataOutStage+0x3c>

0800fd64 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fd64:	b570      	push	{r4, r5, r6, lr}
 800fd66:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fd68:	b951      	cbnz	r1, 800fd80 <USBD_LL_DataInStage+0x1c>
 800fd6a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd6c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800fd70:	2a02      	cmp	r2, #2
 800fd72:	d011      	beq.n	800fd98 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fd74:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d022      	beq.n	800fdc2 <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd80:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fd84:	2b03      	cmp	r3, #3
 800fd86:	d1f9      	bne.n	800fd7c <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 800fd88:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fd8c:	695b      	ldr	r3, [r3, #20]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d0f4      	beq.n	800fd7c <USBD_LL_DataInStage+0x18>
}
 800fd92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fd96:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800fd98:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800fd9c:	42b2      	cmp	r2, r6
 800fd9e:	460d      	mov	r5, r1
 800fda0:	d814      	bhi.n	800fdcc <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800fda2:	d01f      	beq.n	800fde4 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fda4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800fda8:	2b03      	cmp	r3, #3
 800fdaa:	d028      	beq.n	800fdfe <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fdac:	2180      	movs	r1, #128	; 0x80
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f000 fe3e 	bl	8010a30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f000 fb6f 	bl	8010498 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800fdba:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d1dc      	bne.n	800fd7c <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800fdc8:	2000      	movs	r0, #0
 800fdca:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800fdcc:	1b92      	subs	r2, r2, r6
 800fdce:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	f000 fb37 	bl	8010444 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdd6:	462b      	mov	r3, r5
 800fdd8:	462a      	mov	r2, r5
 800fdda:	4629      	mov	r1, r5
 800fddc:	4620      	mov	r0, r4
 800fdde:	f000 fe73 	bl	8010ac8 <USBD_LL_PrepareReceive>
 800fde2:	e7c7      	b.n	800fd74 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800fde4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d8dc      	bhi.n	800fda4 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 800fdea:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d2d8      	bcs.n	800fda4 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fdf2:	460a      	mov	r2, r1
 800fdf4:	f000 fb26 	bl	8010444 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fdf8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800fdfc:	e7eb      	b.n	800fdd6 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800fdfe:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d0d1      	beq.n	800fdac <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 800fe08:	4620      	mov	r0, r4
 800fe0a:	4798      	blx	r3
 800fe0c:	e7ce      	b.n	800fdac <USBD_LL_DataInStage+0x48>
 800fe0e:	bf00      	nop

0800fe10 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800fe10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800fe14:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe16:	2201      	movs	r2, #1
 800fe18:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800fe1c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800fe1e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800fe22:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800fe26:	b1eb      	cbz	r3, 800fe64 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800fe28:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800fe2c:	b570      	push	{r4, r5, r6, lr}
 800fe2e:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800fe30:	b112      	cbz	r2, 800fe38 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	b103      	cbz	r3, 800fe38 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fe36:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe38:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	4611      	mov	r1, r2
 800fe3e:	462b      	mov	r3, r5
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fe40:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 fdd6 	bl	80109f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fe48:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe4c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe50:	462b      	mov	r3, r5
 800fe52:	2200      	movs	r2, #0
 800fe54:	2180      	movs	r1, #128	; 0x80
 800fe56:	4620      	mov	r0, r4
 800fe58:	f000 fdcc 	bl	80109f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fe5c:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe5e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800fe60:	2000      	movs	r0, #0
}
 800fe62:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800fe64:	2003      	movs	r0, #3
}
 800fe66:	4770      	bx	lr

0800fe68 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800fe68:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop

0800fe70 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800fe70:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 800fe74:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fe76:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 800fe78:	b2d2      	uxtb	r2, r2
 800fe7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d

  return USBD_OK;
}
 800fe7e:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fe80:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop

0800fe88 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fe88:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fe8c:	2b04      	cmp	r3, #4
 800fe8e:	d104      	bne.n	800fe9a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fe90:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800fe9a:	2000      	movs	r0, #0
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop

0800fea0 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800fea0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800fea4:	b15a      	cbz	r2, 800febe <USBD_LL_SOF+0x1e>
{
 800fea6:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fea8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800feac:	2b03      	cmp	r3, #3
 800feae:	d001      	beq.n	800feb4 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800feb0:	2000      	movs	r0, #0
}
 800feb2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800feb4:	69d3      	ldr	r3, [r2, #28]
 800feb6:	b123      	cbz	r3, 800fec2 <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800feb8:	4798      	blx	r3
  return USBD_OK;
 800feba:	2000      	movs	r0, #0
}
 800febc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800febe:	2003      	movs	r0, #3
}
 800fec0:	4770      	bx	lr
  return USBD_OK;
 800fec2:	4618      	mov	r0, r3
}
 800fec4:	bd08      	pop	{r3, pc}
 800fec6:	bf00      	nop

0800fec8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feca:	780c      	ldrb	r4, [r1, #0]
 800fecc:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fed0:	2c20      	cmp	r4, #32
{
 800fed2:	b083      	sub	sp, #12
 800fed4:	460e      	mov	r6, r1
 800fed6:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fed8:	d00e      	beq.n	800fef8 <USBD_StdDevReq+0x30>
 800feda:	2c40      	cmp	r4, #64	; 0x40
 800fedc:	d00c      	beq.n	800fef8 <USBD_StdDevReq+0x30>
 800fede:	b1a4      	cbz	r4, 800ff0a <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fee0:	2180      	movs	r1, #128	; 0x80
 800fee2:	4628      	mov	r0, r5
 800fee4:	f000 fda4 	bl	8010a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fee8:	2100      	movs	r1, #0
 800feea:	4628      	mov	r0, r5
 800feec:	f000 fda0 	bl	8010a30 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800fef0:	2400      	movs	r4, #0
}
 800fef2:	4620      	mov	r0, r4
 800fef4:	b003      	add	sp, #12
 800fef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fef8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800fefc:	689b      	ldr	r3, [r3, #8]
 800fefe:	4631      	mov	r1, r6
 800ff00:	4628      	mov	r0, r5
}
 800ff02:	b003      	add	sp, #12
 800ff04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff08:	4718      	bx	r3
      switch (req->bRequest)
 800ff0a:	784f      	ldrb	r7, [r1, #1]
 800ff0c:	2f09      	cmp	r7, #9
 800ff0e:	d8e7      	bhi.n	800fee0 <USBD_StdDevReq+0x18>
 800ff10:	a301      	add	r3, pc, #4	; (adr r3, 800ff18 <USBD_StdDevReq+0x50>)
 800ff12:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800ff16:	bf00      	nop
 800ff18:	0800ff79 	.word	0x0800ff79
 800ff1c:	0800ffa3 	.word	0x0800ffa3
 800ff20:	0800fee1 	.word	0x0800fee1
 800ff24:	0800ffc1 	.word	0x0800ffc1
 800ff28:	0800fee1 	.word	0x0800fee1
 800ff2c:	0800ffc9 	.word	0x0800ffc9
 800ff30:	08010001 	.word	0x08010001
 800ff34:	0800fee1 	.word	0x0800fee1
 800ff38:	08010025 	.word	0x08010025
 800ff3c:	0800ff41 	.word	0x0800ff41
  cfgidx = (uint8_t)(req->wValue);
 800ff40:	788e      	ldrb	r6, [r1, #2]
 800ff42:	4fac      	ldr	r7, [pc, #688]	; (80101f4 <USBD_StdDevReq+0x32c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ff44:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 800ff46:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ff48:	f200 813f 	bhi.w	80101ca <USBD_StdDevReq+0x302>
  switch (pdev->dev_state)
 800ff4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ff50:	2b02      	cmp	r3, #2
 800ff52:	b2da      	uxtb	r2, r3
 800ff54:	f000 8127 	beq.w	80101a6 <USBD_StdDevReq+0x2de>
 800ff58:	2a03      	cmp	r2, #3
 800ff5a:	f000 8101 	beq.w	8010160 <USBD_StdDevReq+0x298>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff5e:	2180      	movs	r1, #128	; 0x80
 800ff60:	f000 fd66 	bl	8010a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff64:	2100      	movs	r1, #0
 800ff66:	4628      	mov	r0, r5
 800ff68:	f000 fd62 	bl	8010a30 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff6c:	7839      	ldrb	r1, [r7, #0]
 800ff6e:	4628      	mov	r0, r5
 800ff70:	f7ff fe8c 	bl	800fc8c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ff74:	2403      	movs	r4, #3
      break;
 800ff76:	e7bc      	b.n	800fef2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ff78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	2b02      	cmp	r3, #2
 800ff80:	d867      	bhi.n	8010052 <USBD_StdDevReq+0x18a>
      if (req->wLength != 0x2U)
 800ff82:	88ca      	ldrh	r2, [r1, #6]
 800ff84:	2a02      	cmp	r2, #2
 800ff86:	d164      	bne.n	8010052 <USBD_StdDevReq+0x18a>
      if (pdev->dev_remote_wakeup != 0U)
 800ff88:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800ff8c:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	bf14      	ite	ne
 800ff92:	2303      	movne	r3, #3
 800ff94:	2301      	moveq	r3, #1
 800ff96:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff9a:	f000 fa45 	bl	8010428 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ff9e:	463c      	mov	r4, r7
      break;
 800ffa0:	e7a7      	b.n	800fef2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ffa2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	2b02      	cmp	r3, #2
 800ffaa:	d852      	bhi.n	8010052 <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ffac:	884b      	ldrh	r3, [r1, #2]
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d19f      	bne.n	800fef2 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ffb8:	4628      	mov	r0, r5
 800ffba:	f000 fa61 	bl	8010480 <USBD_CtlSendStatus>
 800ffbe:	e798      	b.n	800fef2 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ffc0:	884b      	ldrh	r3, [r1, #2]
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d195      	bne.n	800fef2 <USBD_StdDevReq+0x2a>
 800ffc6:	e7f5      	b.n	800ffb4 <USBD_StdDevReq+0xec>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ffc8:	888b      	ldrh	r3, [r1, #4]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d141      	bne.n	8010052 <USBD_StdDevReq+0x18a>
 800ffce:	88cb      	ldrh	r3, [r1, #6]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d13e      	bne.n	8010052 <USBD_StdDevReq+0x18a>
 800ffd4:	884e      	ldrh	r6, [r1, #2]
 800ffd6:	2e7f      	cmp	r6, #127	; 0x7f
 800ffd8:	d83b      	bhi.n	8010052 <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffda:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ffde:	2b03      	cmp	r3, #3
 800ffe0:	d037      	beq.n	8010052 <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ffe2:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800ffe4:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ffe8:	f000 fd52 	bl	8010a90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ffec:	4628      	mov	r0, r5
 800ffee:	f000 fa47 	bl	8010480 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800fff2:	2e00      	cmp	r6, #0
 800fff4:	f000 8109 	beq.w	801020a <USBD_StdDevReq+0x342>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fff8:	2302      	movs	r3, #2
 800fffa:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800fffe:	e778      	b.n	800fef2 <USBD_StdDevReq+0x2a>
  switch (req->wValue >> 8)
 8010000:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8010002:	2300      	movs	r3, #0
 8010004:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8010008:	0a13      	lsrs	r3, r2, #8
 801000a:	3b01      	subs	r3, #1
 801000c:	2b0e      	cmp	r3, #14
 801000e:	d820      	bhi.n	8010052 <USBD_StdDevReq+0x18a>
 8010010:	e8df f003 	tbb	[pc, r3]
 8010014:	1f5a6c79 	.word	0x1f5a6c79
 8010018:	1f44501f 	.word	0x1f44501f
 801001c:	1f1f1f1f 	.word	0x1f1f1f1f
 8010020:	1f1f      	.short	0x1f1f
 8010022:	2a          	.byte	0x2a
 8010023:	00          	.byte	0x00
  if (req->wLength != 1U)
 8010024:	88ca      	ldrh	r2, [r1, #6]
 8010026:	2a01      	cmp	r2, #1
 8010028:	d113      	bne.n	8010052 <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 801002a:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 801002e:	2902      	cmp	r1, #2
 8010030:	b2cb      	uxtb	r3, r1
 8010032:	f200 808e 	bhi.w	8010152 <USBD_StdDevReq+0x28a>
 8010036:	2b00      	cmp	r3, #0
 8010038:	f43f af52 	beq.w	800fee0 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 801003c:	4601      	mov	r1, r0
 801003e:	2300      	movs	r3, #0
 8010040:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010044:	f000 f9f0 	bl	8010428 <USBD_CtlSendData>
        break;
 8010048:	e753      	b.n	800fef2 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801004a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801004e:	699b      	ldr	r3, [r3, #24]
 8010050:	b97b      	cbnz	r3, 8010072 <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010052:	2180      	movs	r1, #128	; 0x80
 8010054:	4628      	mov	r0, r5
 8010056:	f000 fceb 	bl	8010a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801005a:	2100      	movs	r1, #0
 801005c:	4628      	mov	r0, r5
 801005e:	f000 fce7 	bl	8010a30 <USBD_LL_StallEP>
}
 8010062:	4620      	mov	r0, r4
 8010064:	b003      	add	sp, #12
 8010066:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010068:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801006c:	69db      	ldr	r3, [r3, #28]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d0ef      	beq.n	8010052 <USBD_StdDevReq+0x18a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010072:	7c28      	ldrb	r0, [r5, #16]
 8010074:	f10d 0106 	add.w	r1, sp, #6
 8010078:	4798      	blx	r3
  if (req->wLength != 0U)
 801007a:	88f2      	ldrh	r2, [r6, #6]
 801007c:	2a00      	cmp	r2, #0
 801007e:	d09b      	beq.n	800ffb8 <USBD_StdDevReq+0xf0>
    if (len != 0U)
 8010080:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d0e4      	beq.n	8010052 <USBD_StdDevReq+0x18a>
      len = MIN(len, req->wLength);
 8010088:	429a      	cmp	r2, r3
 801008a:	bf28      	it	cs
 801008c:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801008e:	4601      	mov	r1, r0
 8010090:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8010092:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010096:	f000 f9c7 	bl	8010428 <USBD_CtlSendData>
 801009a:	e72a      	b.n	800fef2 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801009c:	7c03      	ldrb	r3, [r0, #16]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1d7      	bne.n	8010052 <USBD_StdDevReq+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80100a2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80100a6:	f10d 0006 	add.w	r0, sp, #6
 80100aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ac:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80100ae:	2307      	movs	r3, #7
 80100b0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80100b2:	e7e2      	b.n	801007a <USBD_StdDevReq+0x1b2>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100b4:	7c03      	ldrb	r3, [r0, #16]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d1cb      	bne.n	8010052 <USBD_StdDevReq+0x18a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80100ba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80100be:	f10d 0006 	add.w	r0, sp, #6
 80100c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100c4:	4798      	blx	r3
  if (err != 0U)
 80100c6:	e7d8      	b.n	801007a <USBD_StdDevReq+0x1b2>
      switch ((uint8_t)(req->wValue))
 80100c8:	b2d2      	uxtb	r2, r2
 80100ca:	2a05      	cmp	r2, #5
 80100cc:	d8c1      	bhi.n	8010052 <USBD_StdDevReq+0x18a>
 80100ce:	a301      	add	r3, pc, #4	; (adr r3, 80100d4 <USBD_StdDevReq+0x20c>)
 80100d0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80100d4:	08010147 	.word	0x08010147
 80100d8:	0801013b 	.word	0x0801013b
 80100dc:	0801012f 	.word	0x0801012f
 80100e0:	08010123 	.word	0x08010123
 80100e4:	08010117 	.word	0x08010117
 80100e8:	0801004b 	.word	0x0801004b
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100ec:	7c03      	ldrb	r3, [r0, #16]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	f040 8082 	bne.w	80101f8 <USBD_StdDevReq+0x330>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80100f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80100f8:	f10d 0006 	add.w	r0, sp, #6
 80100fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100fe:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010100:	2302      	movs	r3, #2
 8010102:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8010104:	e7b9      	b.n	801007a <USBD_StdDevReq+0x1b2>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010106:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801010a:	7c00      	ldrb	r0, [r0, #16]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f10d 0106 	add.w	r1, sp, #6
 8010112:	4798      	blx	r3
  if (err != 0U)
 8010114:	e7b1      	b.n	801007a <USBD_StdDevReq+0x1b2>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010116:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801011a:	695b      	ldr	r3, [r3, #20]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1a8      	bne.n	8010072 <USBD_StdDevReq+0x1aa>
 8010120:	e797      	b.n	8010052 <USBD_StdDevReq+0x18a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010122:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1a2      	bne.n	8010072 <USBD_StdDevReq+0x1aa>
 801012c:	e791      	b.n	8010052 <USBD_StdDevReq+0x18a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801012e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d19c      	bne.n	8010072 <USBD_StdDevReq+0x1aa>
 8010138:	e78b      	b.n	8010052 <USBD_StdDevReq+0x18a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801013a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801013e:	689b      	ldr	r3, [r3, #8]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d196      	bne.n	8010072 <USBD_StdDevReq+0x1aa>
 8010144:	e785      	b.n	8010052 <USBD_StdDevReq+0x18a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010146:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d190      	bne.n	8010072 <USBD_StdDevReq+0x1aa>
 8010150:	e77f      	b.n	8010052 <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 8010152:	2b03      	cmp	r3, #3
 8010154:	f47f aec4 	bne.w	800fee0 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010158:	1d01      	adds	r1, r0, #4
 801015a:	f000 f965 	bl	8010428 <USBD_CtlSendData>
        break;
 801015e:	e6c8      	b.n	800fef2 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 8010160:	2e00      	cmp	r6, #0
 8010162:	d03b      	beq.n	80101dc <USBD_StdDevReq+0x314>
      else if (cfgidx != pdev->dev_config)
 8010164:	6841      	ldr	r1, [r0, #4]
 8010166:	2901      	cmp	r1, #1
 8010168:	f43f af26 	beq.w	800ffb8 <USBD_StdDevReq+0xf0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801016c:	b2c9      	uxtb	r1, r1
 801016e:	f7ff fd8d 	bl	800fc8c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010172:	7839      	ldrb	r1, [r7, #0]
 8010174:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010176:	4628      	mov	r0, r5
 8010178:	f7ff fd80 	bl	800fc7c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 801017c:	4606      	mov	r6, r0
 801017e:	2800      	cmp	r0, #0
 8010180:	f43f af1a 	beq.w	800ffb8 <USBD_StdDevReq+0xf0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010184:	2180      	movs	r1, #128	; 0x80
 8010186:	4628      	mov	r0, r5
 8010188:	f000 fc52 	bl	8010a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801018c:	2100      	movs	r1, #0
 801018e:	4628      	mov	r0, r5
 8010190:	f000 fc4e 	bl	8010a30 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010194:	7929      	ldrb	r1, [r5, #4]
 8010196:	4628      	mov	r0, r5
 8010198:	f7ff fd78 	bl	800fc8c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801019c:	2302      	movs	r3, #2
 801019e:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80101a2:	4634      	mov	r4, r6
 80101a4:	e6a5      	b.n	800fef2 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 80101a6:	2e00      	cmp	r6, #0
 80101a8:	f43f af06 	beq.w	800ffb8 <USBD_StdDevReq+0xf0>
        pdev->dev_config = cfgidx;
 80101ac:	2101      	movs	r1, #1
 80101ae:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80101b0:	f7ff fd64 	bl	800fc7c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80101b4:	4604      	mov	r4, r0
 80101b6:	2800      	cmp	r0, #0
 80101b8:	f47f af4b 	bne.w	8010052 <USBD_StdDevReq+0x18a>
          (void)USBD_CtlSendStatus(pdev);
 80101bc:	4628      	mov	r0, r5
 80101be:	f000 f95f 	bl	8010480 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80101c2:	2303      	movs	r3, #3
 80101c4:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80101c8:	e693      	b.n	800fef2 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80101ca:	2180      	movs	r1, #128	; 0x80
 80101cc:	f000 fc30 	bl	8010a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80101d0:	2100      	movs	r1, #0
 80101d2:	4628      	mov	r0, r5
 80101d4:	f000 fc2c 	bl	8010a30 <USBD_LL_StallEP>
    return USBD_FAIL;
 80101d8:	2403      	movs	r4, #3
 80101da:	e68a      	b.n	800fef2 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80101dc:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80101de:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80101e0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80101e4:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80101e6:	f7ff fd51 	bl	800fc8c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80101ea:	4628      	mov	r0, r5
 80101ec:	f000 f948 	bl	8010480 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80101f0:	4634      	mov	r4, r6
 80101f2:	e67e      	b.n	800fef2 <USBD_StdDevReq+0x2a>
 80101f4:	20003d6c 	.word	0x20003d6c
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80101f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80101fc:	f10d 0006 	add.w	r0, sp, #6
 8010200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010202:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010204:	2302      	movs	r3, #2
 8010206:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8010208:	e737      	b.n	801007a <USBD_StdDevReq+0x1b2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 801020a:	2301      	movs	r3, #1
 801020c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8010210:	e66f      	b.n	800fef2 <USBD_StdDevReq+0x2a>
 8010212:	bf00      	nop

08010214 <USBD_StdItfReq>:
{
 8010214:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010216:	780b      	ldrb	r3, [r1, #0]
 8010218:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801021c:	2a40      	cmp	r2, #64	; 0x40
{
 801021e:	460d      	mov	r5, r1
 8010220:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010222:	d00b      	beq.n	801023c <USBD_StdItfReq+0x28>
 8010224:	065b      	lsls	r3, r3, #25
 8010226:	d509      	bpl.n	801023c <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010228:	2180      	movs	r1, #128	; 0x80
 801022a:	f000 fc01 	bl	8010a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801022e:	2100      	movs	r1, #0
 8010230:	4620      	mov	r0, r4
 8010232:	f000 fbfd 	bl	8010a30 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8010236:	2500      	movs	r5, #0
}
 8010238:	4628      	mov	r0, r5
 801023a:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 801023c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8010240:	3b01      	subs	r3, #1
 8010242:	2b02      	cmp	r3, #2
 8010244:	d812      	bhi.n	801026c <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010246:	792b      	ldrb	r3, [r5, #4]
 8010248:	2b03      	cmp	r3, #3
 801024a:	d80f      	bhi.n	801026c <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801024c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8010250:	4629      	mov	r1, r5
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	4620      	mov	r0, r4
 8010256:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010258:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801025a:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1eb      	bne.n	8010238 <USBD_StdItfReq+0x24>
 8010260:	2800      	cmp	r0, #0
 8010262:	d1e9      	bne.n	8010238 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8010264:	4620      	mov	r0, r4
 8010266:	f000 f90b 	bl	8010480 <USBD_CtlSendStatus>
 801026a:	e7e5      	b.n	8010238 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801026c:	2180      	movs	r1, #128	; 0x80
 801026e:	4620      	mov	r0, r4
 8010270:	e7db      	b.n	801022a <USBD_StdItfReq+0x16>
 8010272:	bf00      	nop

08010274 <USBD_StdEPReq>:
{
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 8010278:	888a      	ldrh	r2, [r1, #4]
 801027a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801027e:	2b20      	cmp	r3, #32
{
 8010280:	460c      	mov	r4, r1
 8010282:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010284:	d01b      	beq.n	80102be <USBD_StdEPReq+0x4a>
 8010286:	2b40      	cmp	r3, #64	; 0x40
 8010288:	d019      	beq.n	80102be <USBD_StdEPReq+0x4a>
 801028a:	b303      	cbz	r3, 80102ce <USBD_StdEPReq+0x5a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801028c:	2180      	movs	r1, #128	; 0x80
 801028e:	4628      	mov	r0, r5
 8010290:	f000 fbce 	bl	8010a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010294:	2100      	movs	r1, #0
 8010296:	4628      	mov	r0, r5
 8010298:	f000 fbca 	bl	8010a30 <USBD_LL_StallEP>
}
 801029c:	2000      	movs	r0, #0
 801029e:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 80102a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80102a4:	2b02      	cmp	r3, #2
 80102a6:	b2da      	uxtb	r2, r3
 80102a8:	d052      	beq.n	8010350 <USBD_StdEPReq+0xdc>
 80102aa:	2a03      	cmp	r2, #3
 80102ac:	d1ee      	bne.n	801028c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80102ae:	8863      	ldrh	r3, [r4, #2]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d1f3      	bne.n	801029c <USBD_StdEPReq+0x28>
                if ((ep_addr & 0x7FU) != 0x00U)
 80102b4:	064e      	lsls	r6, r1, #25
 80102b6:	d16e      	bne.n	8010396 <USBD_StdEPReq+0x122>
                (void)USBD_CtlSendStatus(pdev);
 80102b8:	4628      	mov	r0, r5
 80102ba:	f000 f8e1 	bl	8010480 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80102be:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80102c2:	4621      	mov	r1, r4
 80102c4:	4628      	mov	r0, r5
 80102c6:	689b      	ldr	r3, [r3, #8]
}
 80102c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80102cc:	4718      	bx	r3
      switch (req->bRequest)
 80102ce:	7863      	ldrb	r3, [r4, #1]
 80102d0:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 80102d2:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 80102d4:	d0e4      	beq.n	80102a0 <USBD_StdEPReq+0x2c>
 80102d6:	2b03      	cmp	r3, #3
 80102d8:	d029      	beq.n	801032e <USBD_StdEPReq+0xba>
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1d6      	bne.n	801028c <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 80102de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	b2d8      	uxtb	r0, r3
 80102e6:	d03c      	beq.n	8010362 <USBD_StdEPReq+0xee>
 80102e8:	2803      	cmp	r0, #3
 80102ea:	d1cf      	bne.n	801028c <USBD_StdEPReq+0x18>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80102ec:	f001 030f 	and.w	r3, r1, #15
 80102f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80102f4:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80102f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80102fa:	d441      	bmi.n	8010380 <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80102fc:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8010300:	2b00      	cmp	r3, #0
 8010302:	d0c3      	beq.n	801028c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010304:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8010308:	2414      	movs	r4, #20
 801030a:	fb04 5403 	mla	r4, r4, r3, r5
 801030e:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010312:	b12b      	cbz	r3, 8010320 <USBD_StdEPReq+0xac>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010314:	4628      	mov	r0, r5
 8010316:	f000 fba7 	bl	8010a68 <USBD_LL_IsStallEP>
 801031a:	1e03      	subs	r3, r0, #0
 801031c:	bf18      	it	ne
 801031e:	2301      	movne	r3, #1
                pep->status = 0x0000U;
 8010320:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010322:	2202      	movs	r2, #2
 8010324:	4621      	mov	r1, r4
 8010326:	4628      	mov	r0, r5
 8010328:	f000 f87e 	bl	8010428 <USBD_CtlSendData>
              break;
 801032c:	e7b6      	b.n	801029c <USBD_StdEPReq+0x28>
          switch (pdev->dev_state)
 801032e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010332:	2b02      	cmp	r3, #2
 8010334:	b2da      	uxtb	r2, r3
 8010336:	d00b      	beq.n	8010350 <USBD_StdEPReq+0xdc>
 8010338:	2a03      	cmp	r2, #3
 801033a:	d1a7      	bne.n	801028c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 801033c:	8863      	ldrh	r3, [r4, #2]
 801033e:	b91b      	cbnz	r3, 8010348 <USBD_StdEPReq+0xd4>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010340:	064a      	lsls	r2, r1, #25
 8010342:	d001      	beq.n	8010348 <USBD_StdEPReq+0xd4>
 8010344:	88e3      	ldrh	r3, [r4, #6]
 8010346:	b34b      	cbz	r3, 801039c <USBD_StdEPReq+0x128>
              (void)USBD_CtlSendStatus(pdev);
 8010348:	4628      	mov	r0, r5
 801034a:	f000 f899 	bl	8010480 <USBD_CtlSendStatus>
              break;
 801034e:	e7a5      	b.n	801029c <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010350:	064b      	lsls	r3, r1, #25
 8010352:	d09b      	beq.n	801028c <USBD_StdEPReq+0x18>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010354:	f000 fb6c 	bl	8010a30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010358:	2180      	movs	r1, #128	; 0x80
 801035a:	4628      	mov	r0, r5
 801035c:	f000 fb68 	bl	8010a30 <USBD_LL_StallEP>
 8010360:	e79c      	b.n	801029c <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010362:	0648      	lsls	r0, r1, #25
 8010364:	d192      	bne.n	801028c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010366:	0611      	lsls	r1, r2, #24
 8010368:	bf4c      	ite	mi
 801036a:	f105 0114 	addmi.w	r1, r5, #20
 801036e:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 8010372:	2300      	movs	r3, #0
 8010374:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010376:	2202      	movs	r2, #2
 8010378:	4628      	mov	r0, r5
 801037a:	f000 f855 	bl	8010428 <USBD_CtlSendData>
              break;
 801037e:	e78d      	b.n	801029c <USBD_StdEPReq+0x28>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010380:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010382:	2b00      	cmp	r3, #0
 8010384:	d082      	beq.n	801028c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010386:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801038a:	1c5c      	adds	r4, r3, #1
 801038c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010390:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8010394:	e7bd      	b.n	8010312 <USBD_StdEPReq+0x9e>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010396:	f000 fb59 	bl	8010a4c <USBD_LL_ClearStallEP>
 801039a:	e78d      	b.n	80102b8 <USBD_StdEPReq+0x44>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801039c:	f000 fb48 	bl	8010a30 <USBD_LL_StallEP>
 80103a0:	e7d2      	b.n	8010348 <USBD_StdEPReq+0xd4>
 80103a2:	bf00      	nop

080103a4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80103a4:	780b      	ldrb	r3, [r1, #0]
 80103a6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80103a8:	784b      	ldrb	r3, [r1, #1]
 80103aa:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 80103ac:	884b      	ldrh	r3, [r1, #2]
 80103ae:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 80103b0:	888b      	ldrh	r3, [r1, #4]
 80103b2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 80103b4:	88cb      	ldrh	r3, [r1, #6]
 80103b6:	80c3      	strh	r3, [r0, #6]
}
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop

080103bc <USBD_CtlError>:
{
 80103bc:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80103be:	2180      	movs	r1, #128	; 0x80
{
 80103c0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80103c2:	f000 fb35 	bl	8010a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80103c6:	4620      	mov	r0, r4
 80103c8:	2100      	movs	r1, #0
}
 80103ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80103ce:	f000 bb2f 	b.w	8010a30 <USBD_LL_StallEP>
 80103d2:	bf00      	nop

080103d4 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80103d4:	b318      	cbz	r0, 801041e <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80103d6:	7803      	ldrb	r3, [r0, #0]
{
 80103d8:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 80103da:	b30b      	cbz	r3, 8010420 <USBD_GetString+0x4c>
 80103dc:	4604      	mov	r4, r0
 80103de:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80103e2:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 80103e6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	2d00      	cmp	r5, #0
 80103ee:	d1f8      	bne.n	80103e2 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80103f0:	3301      	adds	r3, #1
 80103f2:	005b      	lsls	r3, r3, #1
 80103f4:	b2dc      	uxtb	r4, r3
 80103f6:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80103f8:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80103fa:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80103fc:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80103fe:	7804      	ldrb	r4, [r0, #0]
 8010400:	b15c      	cbz	r4, 801041a <USBD_GetString+0x46>
  idx++;
 8010402:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8010404:	2500      	movs	r5, #0
    idx++;
 8010406:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8010408:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 801040a:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 801040c:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 801040e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8010412:	3302      	adds	r3, #2
 8010414:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8010416:	2c00      	cmp	r4, #0
 8010418:	d1f5      	bne.n	8010406 <USBD_GetString+0x32>
}
 801041a:	bc30      	pop	{r4, r5}
 801041c:	4770      	bx	lr
 801041e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8010420:	2402      	movs	r4, #2
 8010422:	4623      	mov	r3, r4
 8010424:	e7e7      	b.n	80103f6 <USBD_GetString+0x22>
 8010426:	bf00      	nop

08010428 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010428:	b508      	push	{r3, lr}
 801042a:	4613      	mov	r3, r2
 801042c:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801042e:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010430:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010434:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010438:	2100      	movs	r1, #0
 801043a:	f000 fb37 	bl	8010aac <USBD_LL_Transmit>

  return USBD_OK;
}
 801043e:	2000      	movs	r0, #0
 8010440:	bd08      	pop	{r3, pc}
 8010442:	bf00      	nop

08010444 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010444:	b508      	push	{r3, lr}
 8010446:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010448:	460a      	mov	r2, r1
 801044a:	2100      	movs	r1, #0
 801044c:	f000 fb2e 	bl	8010aac <USBD_LL_Transmit>

  return USBD_OK;
}
 8010450:	2000      	movs	r0, #0
 8010452:	bd08      	pop	{r3, pc}

08010454 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010454:	b508      	push	{r3, lr}
 8010456:	4613      	mov	r3, r2
 8010458:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801045a:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801045c:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010460:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010464:	2100      	movs	r1, #0
 8010466:	f000 fb2f 	bl	8010ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801046a:	2000      	movs	r0, #0
 801046c:	bd08      	pop	{r3, pc}
 801046e:	bf00      	nop

08010470 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010470:	b508      	push	{r3, lr}
 8010472:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010474:	460a      	mov	r2, r1
 8010476:	2100      	movs	r1, #0
 8010478:	f000 fb26 	bl	8010ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801047c:	2000      	movs	r0, #0
 801047e:	bd08      	pop	{r3, pc}

08010480 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010480:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010482:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010484:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010486:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801048a:	461a      	mov	r2, r3
 801048c:	4619      	mov	r1, r3
 801048e:	f000 fb0d 	bl	8010aac <USBD_LL_Transmit>

  return USBD_OK;
}
 8010492:	2000      	movs	r0, #0
 8010494:	bd08      	pop	{r3, pc}
 8010496:	bf00      	nop

08010498 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010498:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801049a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801049c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801049e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80104a2:	461a      	mov	r2, r3
 80104a4:	4619      	mov	r1, r3
 80104a6:	f000 fb0f 	bl	8010ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80104aa:	2000      	movs	r0, #0
 80104ac:	bd08      	pop	{r3, pc}
 80104ae:	bf00      	nop

080104b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80104b0:	b508      	push	{r3, lr}
    USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC_HID);

    USBD_Start(&hUsbDeviceFS);
    */
  /* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80104b2:	4911      	ldr	r1, [pc, #68]	; (80104f8 <MX_USB_DEVICE_Init+0x48>)
 80104b4:	4811      	ldr	r0, [pc, #68]	; (80104fc <MX_USB_DEVICE_Init+0x4c>)
 80104b6:	2200      	movs	r2, #0
 80104b8:	f7ff fb94 	bl	800fbe4 <USBD_Init>
 80104bc:	b948      	cbnz	r0, 80104d2 <MX_USB_DEVICE_Init+0x22>
	{
		Error_Handler();
	}

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_COMPOSITE) != USBD_OK)
 80104be:	4910      	ldr	r1, [pc, #64]	; (8010500 <MX_USB_DEVICE_Init+0x50>)
 80104c0:	480e      	ldr	r0, [pc, #56]	; (80104fc <MX_USB_DEVICE_Init+0x4c>)
 80104c2:	f7ff fbb3 	bl	800fc2c <USBD_RegisterClass>
 80104c6:	b960      	cbnz	r0, 80104e2 <MX_USB_DEVICE_Init+0x32>
	{
		Error_Handler();
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80104c8:	480c      	ldr	r0, [pc, #48]	; (80104fc <MX_USB_DEVICE_Init+0x4c>)
 80104ca:	f7ff fbd5 	bl	800fc78 <USBD_Start>
 80104ce:	b978      	cbnz	r0, 80104f0 <MX_USB_DEVICE_Init+0x40>
	{
		Error_Handler();
	}
#endif
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80104d0:	bd08      	pop	{r3, pc}
		Error_Handler();
 80104d2:	f7f8 fe49 	bl	8009168 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_COMPOSITE) != USBD_OK)
 80104d6:	490a      	ldr	r1, [pc, #40]	; (8010500 <MX_USB_DEVICE_Init+0x50>)
 80104d8:	4808      	ldr	r0, [pc, #32]	; (80104fc <MX_USB_DEVICE_Init+0x4c>)
 80104da:	f7ff fba7 	bl	800fc2c <USBD_RegisterClass>
 80104de:	2800      	cmp	r0, #0
 80104e0:	d0f2      	beq.n	80104c8 <MX_USB_DEVICE_Init+0x18>
		Error_Handler();
 80104e2:	f7f8 fe41 	bl	8009168 <Error_Handler>
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80104e6:	4805      	ldr	r0, [pc, #20]	; (80104fc <MX_USB_DEVICE_Init+0x4c>)
 80104e8:	f7ff fbc6 	bl	800fc78 <USBD_Start>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d0ef      	beq.n	80104d0 <MX_USB_DEVICE_Init+0x20>
}
 80104f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 80104f4:	f7f8 be38 	b.w	8009168 <Error_Handler>
 80104f8:	20000330 	.word	0x20000330
 80104fc:	20003d70 	.word	0x20003d70
 8010500:	20000034 	.word	0x20000034

08010504 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8010504:	2000      	movs	r0, #0
 8010506:	4770      	bx	lr

08010508 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8010508:	2000      	movs	r0, #0
 801050a:	4770      	bx	lr

0801050c <CDC_Receive_FS>:
{
 801050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!INT_CDC_RECEIVED) cdcReceiveBufferLen = 0;
 801050e:	4b10      	ldr	r3, [pc, #64]	; (8010550 <CDC_Receive_FS+0x44>)
	hUsbDeviceFS.pClassData=pCDCData;
 8010510:	4c10      	ldr	r4, [pc, #64]	; (8010554 <CDC_Receive_FS+0x48>)
 8010512:	4811      	ldr	r0, [pc, #68]	; (8010558 <CDC_Receive_FS+0x4c>)
	if (!INT_CDC_RECEIVED) cdcReceiveBufferLen = 0;
 8010514:	781a      	ldrb	r2, [r3, #0]
	hUsbDeviceFS.pClassData=pCDCData;
 8010516:	6824      	ldr	r4, [r4, #0]
	uint32_t length = *Len, i;
 8010518:	680f      	ldr	r7, [r1, #0]
	if (!INT_CDC_RECEIVED) cdcReceiveBufferLen = 0;
 801051a:	4d10      	ldr	r5, [pc, #64]	; (801055c <CDC_Receive_FS+0x50>)
	hUsbDeviceFS.pClassData=pCDCData;
 801051c:	f8c0 42bc 	str.w	r4, [r0, #700]	; 0x2bc
	if (!INT_CDC_RECEIVED) cdcReceiveBufferLen = 0;
 8010520:	b902      	cbnz	r2, 8010524 <CDC_Receive_FS+0x18>
 8010522:	602a      	str	r2, [r5, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010524:	490e      	ldr	r1, [pc, #56]	; (8010560 <CDC_Receive_FS+0x54>)
 8010526:	480c      	ldr	r0, [pc, #48]	; (8010558 <CDC_Receive_FS+0x4c>)
	INT_CDC_RECEIVED = true;
 8010528:	2601      	movs	r6, #1
 801052a:	701e      	strb	r6, [r3, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801052c:	f7ff fa4e 	bl	800f9cc <USBD_CDC_SetRxBuffer>
  	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010530:	4809      	ldr	r0, [pc, #36]	; (8010558 <CDC_Receive_FS+0x4c>)
 8010532:	f7ff fa55 	bl	800f9e0 <USBD_CDC_ReceivePacket>
  	memcpy(cdcReceiveBuffer+cdcReceiveBufferLen, UserRxBufferFS, length);
 8010536:	682c      	ldr	r4, [r5, #0]
 8010538:	480a      	ldr	r0, [pc, #40]	; (8010564 <CDC_Receive_FS+0x58>)
 801053a:	4909      	ldr	r1, [pc, #36]	; (8010560 <CDC_Receive_FS+0x54>)
 801053c:	4420      	add	r0, r4
 801053e:	463a      	mov	r2, r7
 8010540:	f002 fd15 	bl	8012f6e <memcpy>
  reinit_needed = true;
 8010544:	4b08      	ldr	r3, [pc, #32]	; (8010568 <CDC_Receive_FS+0x5c>)
  	cdcReceiveBufferLen += length;
 8010546:	443c      	add	r4, r7
 8010548:	602c      	str	r4, [r5, #0]
  reinit_needed = true;
 801054a:	701e      	strb	r6, [r3, #0]
}
 801054c:	2000      	movs	r0, #0
 801054e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010550:	20004040 	.word	0x20004040
 8010554:	20003b3c 	.word	0x20003b3c
 8010558:	20003d70 	.word	0x20003d70
 801055c:	20003b38 	.word	0x20003b38
 8010560:	20004044 	.word	0x20004044
 8010564:	20003af8 	.word	0x20003af8
 8010568:	20004814 	.word	0x20004814

0801056c <CDC_Init_FS>:
{
 801056c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801056e:	4c06      	ldr	r4, [pc, #24]	; (8010588 <CDC_Init_FS+0x1c>)
 8010570:	4906      	ldr	r1, [pc, #24]	; (801058c <CDC_Init_FS+0x20>)
 8010572:	2200      	movs	r2, #0
 8010574:	4620      	mov	r0, r4
 8010576:	f7ff fa1d 	bl	800f9b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801057a:	4905      	ldr	r1, [pc, #20]	; (8010590 <CDC_Init_FS+0x24>)
 801057c:	4620      	mov	r0, r4
 801057e:	f7ff fa25 	bl	800f9cc <USBD_CDC_SetRxBuffer>
}
 8010582:	2000      	movs	r0, #0
 8010584:	bd10      	pop	{r4, pc}
 8010586:	bf00      	nop
 8010588:	20003d70 	.word	0x20003d70
 801058c:	2000442c 	.word	0x2000442c
 8010590:	20004044 	.word	0x20004044

08010594 <CDC_Control_FS>:
  switch(cmd)
 8010594:	2822      	cmp	r0, #34	; 0x22
 8010596:	d001      	beq.n	801059c <CDC_Control_FS+0x8>
}
 8010598:	2000      	movs	r0, #0
 801059a:	4770      	bx	lr
{
 801059c:	b510      	push	{r4, lr}
    if (reinit_needed)
 801059e:	4c05      	ldr	r4, [pc, #20]	; (80105b4 <CDC_Control_FS+0x20>)
 80105a0:	7823      	ldrb	r3, [r4, #0]
 80105a2:	b90b      	cbnz	r3, 80105a8 <CDC_Control_FS+0x14>
}
 80105a4:	2000      	movs	r0, #0
 80105a6:	bd10      	pop	{r4, pc}
        MX_USB_DEVICE_Init();
 80105a8:	f7ff ff82 	bl	80104b0 <MX_USB_DEVICE_Init>
    	reinit_needed= false;
 80105ac:	2300      	movs	r3, #0
 80105ae:	7023      	strb	r3, [r4, #0]
}
 80105b0:	2000      	movs	r0, #0
 80105b2:	bd10      	pop	{r4, pc}
 80105b4:	20004814 	.word	0x20004814

080105b8 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pCDCData;//(USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80105b8:	4b10      	ldr	r3, [pc, #64]	; (80105fc <CDC_Transmit_FS+0x44>)
{
 80105ba:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pCDCData;//(USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80105bc:	681c      	ldr	r4, [r3, #0]
	if (hcdc->TxState != 0){
 80105be:	f8d4 5214 	ldr.w	r5, [r4, #532]	; 0x214
 80105c2:	b9c5      	cbnz	r5, 80105f6 <CDC_Transmit_FS+0x3e>
	hUsbDeviceFS.pClassData=pCDCData;
 80105c4:	4b0e      	ldr	r3, [pc, #56]	; (8010600 <CDC_Transmit_FS+0x48>)
	if (hcdc->TxState == 0U)
 80105c6:	f8d4 6214 	ldr.w	r6, [r4, #532]	; 0x214
	hUsbDeviceFS.pClassData=pCDCData;
 80105ca:	f8c3 42bc 	str.w	r4, [r3, #700]	; 0x2bc
	hcdc->TxBuffer = Buf;
 80105ce:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
	hcdc->TxLength = Len;
 80105d2:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
	if (hcdc->TxState == 0U)
 80105d6:	b10e      	cbz	r6, 80105dc <CDC_Transmit_FS+0x24>
  return result;
 80105d8:	4628      	mov	r0, r5
}
 80105da:	bd70      	pop	{r4, r5, r6, pc}
		HAL_PCD_EP_Transmit(hUsbDeviceFS.pData, CDC_IN_EP, Buf, Len);
 80105dc:	4602      	mov	r2, r0
		hUsbDeviceFS.ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80105de:	6419      	str	r1, [r3, #64]	; 0x40
		HAL_PCD_EP_Transmit(hUsbDeviceFS.pData, CDC_IN_EP, Buf, Len);
 80105e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80105e4:	460b      	mov	r3, r1
		hcdc->TxState = 1U;
 80105e6:	2101      	movs	r1, #1
 80105e8:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
		HAL_PCD_EP_Transmit(hUsbDeviceFS.pData, CDC_IN_EP, Buf, Len);
 80105ec:	2182      	movs	r1, #130	; 0x82
 80105ee:	f7fb ff1f 	bl	800c430 <HAL_PCD_EP_Transmit>
  return result;
 80105f2:	4630      	mov	r0, r6
}
 80105f4:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_BUSY;
 80105f6:	2001      	movs	r0, #1
}
 80105f8:	bd70      	pop	{r4, r5, r6, pc}
 80105fa:	bf00      	nop
 80105fc:	20003b3c 	.word	0x20003b3c
 8010600:	20003d70 	.word	0x20003d70

08010604 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010604:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8010606:	4801      	ldr	r0, [pc, #4]	; (801060c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8010608:	800b      	strh	r3, [r1, #0]
}
 801060a:	4770      	bx	lr
 801060c:	2000035c 	.word	0x2000035c

08010610 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010610:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8010612:	4801      	ldr	r0, [pc, #4]	; (8010618 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8010614:	800b      	strh	r3, [r1, #0]
}
 8010616:	4770      	bx	lr
 8010618:	20000370 	.word	0x20000370

0801061c <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801061c:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 801061e:	4801      	ldr	r0, [pc, #4]	; (8010624 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8010620:	800b      	strh	r3, [r1, #0]
}
 8010622:	4770      	bx	lr
 8010624:	20000350 	.word	0x20000350

08010628 <USBD_FS_ManufacturerStrDescriptor>:
{
 8010628:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801062a:	4c04      	ldr	r4, [pc, #16]	; (801063c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 801062c:	4804      	ldr	r0, [pc, #16]	; (8010640 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 801062e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010630:	4621      	mov	r1, r4
 8010632:	f7ff fecf 	bl	80103d4 <USBD_GetString>
}
 8010636:	4620      	mov	r0, r4
 8010638:	bd10      	pop	{r4, pc}
 801063a:	bf00      	nop
 801063c:	20004818 	.word	0x20004818
 8010640:	08016e2c 	.word	0x08016e2c

08010644 <USBD_FS_ProductStrDescriptor>:
{
 8010644:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010646:	4c04      	ldr	r4, [pc, #16]	; (8010658 <USBD_FS_ProductStrDescriptor+0x14>)
 8010648:	4804      	ldr	r0, [pc, #16]	; (801065c <USBD_FS_ProductStrDescriptor+0x18>)
{
 801064a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801064c:	4621      	mov	r1, r4
 801064e:	f7ff fec1 	bl	80103d4 <USBD_GetString>
}
 8010652:	4620      	mov	r0, r4
 8010654:	bd10      	pop	{r4, pc}
 8010656:	bf00      	nop
 8010658:	20004818 	.word	0x20004818
 801065c:	08016e40 	.word	0x08016e40

08010660 <USBD_FS_ConfigStrDescriptor>:
{
 8010660:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010662:	4c04      	ldr	r4, [pc, #16]	; (8010674 <USBD_FS_ConfigStrDescriptor+0x14>)
 8010664:	4804      	ldr	r0, [pc, #16]	; (8010678 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 8010666:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010668:	4621      	mov	r1, r4
 801066a:	f7ff feb3 	bl	80103d4 <USBD_GetString>
}
 801066e:	4620      	mov	r0, r4
 8010670:	bd10      	pop	{r4, pc}
 8010672:	bf00      	nop
 8010674:	20004818 	.word	0x20004818
 8010678:	08016e50 	.word	0x08016e50

0801067c <USBD_FS_InterfaceStrDescriptor>:
{
 801067c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801067e:	4c04      	ldr	r4, [pc, #16]	; (8010690 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8010680:	4804      	ldr	r0, [pc, #16]	; (8010694 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 8010682:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010684:	4621      	mov	r1, r4
 8010686:	f7ff fea5 	bl	80103d4 <USBD_GetString>
}
 801068a:	4620      	mov	r0, r4
 801068c:	bd10      	pop	{r4, pc}
 801068e:	bf00      	nop
 8010690:	20004818 	.word	0x20004818
 8010694:	08016e64 	.word	0x08016e64

08010698 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010698:	4a45      	ldr	r2, [pc, #276]	; (80107b0 <USBD_FS_SerialStrDescriptor+0x118>)
 801069a:	f8d2 3590 	ldr.w	r3, [r2, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 801069e:	f8d2 0598 	ldr.w	r0, [r2, #1432]	; 0x598
  *length = USB_SIZ_STRING_SERIAL;
 80106a2:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 80106a6:	181b      	adds	r3, r3, r0
  *length = USB_SIZ_STRING_SERIAL;
 80106a8:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 80106ac:	d101      	bne.n	80106b2 <USBD_FS_SerialStrDescriptor+0x1a>
}
 80106ae:	4841      	ldr	r0, [pc, #260]	; (80107b4 <USBD_FS_SerialStrDescriptor+0x11c>)
 80106b0:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80106b2:	f8d2 1594 	ldr.w	r1, [r2, #1428]	; 0x594

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80106b6:	4a3f      	ldr	r2, [pc, #252]	; (80107b4 <USBD_FS_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 80106b8:	0f18      	lsrs	r0, r3, #28
 80106ba:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80106be:	bf2c      	ite	cs
 80106c0:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80106c2:	3030      	addcc	r0, #48	; 0x30
 80106c4:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 80106c6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80106ca:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80106cc:	bf8c      	ite	hi
 80106ce:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80106d0:	3030      	addls	r0, #48	; 0x30
 80106d2:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 80106d4:	f3c3 5003 	ubfx	r0, r3, #20, #4
 80106d8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80106da:	bf8c      	ite	hi
 80106dc:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80106de:	3030      	addls	r0, #48	; 0x30
 80106e0:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 80106e2:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80106e6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80106e8:	bf8c      	ite	hi
 80106ea:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80106ec:	3030      	addls	r0, #48	; 0x30
 80106ee:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 80106f0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80106f4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80106f6:	bf8c      	ite	hi
 80106f8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80106fa:	3030      	addls	r0, #48	; 0x30
 80106fc:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 80106fe:	f3c3 2003 	ubfx	r0, r3, #8, #4
 8010702:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010704:	bf8c      	ite	hi
 8010706:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8010708:	3030      	addls	r0, #48	; 0x30
 801070a:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 801070c:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8010710:	2809      	cmp	r0, #9
 8010712:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010716:	bf8c      	ite	hi
 8010718:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801071a:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 801071c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801071e:	bf94      	ite	ls
 8010720:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010722:	3337      	addhi	r3, #55	; 0x37
 8010724:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8010726:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 8010728:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 801072c:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 801072e:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010732:	bf2c      	ite	cs
 8010734:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8010736:	3330      	addcc	r3, #48	; 0x30
 8010738:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 801073a:	f3c1 6303 	ubfx	r3, r1, #24, #4
 801073e:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010740:	bf8c      	ite	hi
 8010742:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8010744:	3330      	addls	r3, #48	; 0x30
 8010746:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8010748:	f3c1 5303 	ubfx	r3, r1, #20, #4
 801074c:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 801074e:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010752:	bf8c      	ite	hi
 8010754:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8010756:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8010758:	f882 c003 	strb.w	ip, [r2, #3]
 801075c:	f04f 0c00 	mov.w	ip, #0
 8010760:	f882 c005 	strb.w	ip, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 8010764:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8010766:	f04f 0c00 	mov.w	ip, #0
 801076a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 801076c:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 801076e:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8010772:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8010774:	f882 c007 	strb.w	ip, [r2, #7]
 8010778:	73d0      	strb	r0, [r2, #15]
 801077a:	f04f 0c00 	mov.w	ip, #0
 801077e:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8010782:	bf94      	ite	ls
 8010784:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010786:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8010788:	f882 c009 	strb.w	ip, [r2, #9]
 801078c:	74d0      	strb	r0, [r2, #19]
 801078e:	f04f 0c00 	mov.w	ip, #0
 8010792:	2000      	movs	r0, #0
 8010794:	f882 c00b 	strb.w	ip, [r2, #11]
 8010798:	7550      	strb	r0, [r2, #21]
 801079a:	f04f 0c00 	mov.w	ip, #0
 801079e:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80107a0:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 80107a2:	2300      	movs	r3, #0
 80107a4:	75d0      	strb	r0, [r2, #23]
 80107a6:	f882 c00d 	strb.w	ip, [r2, #13]
}
 80107aa:	4802      	ldr	r0, [pc, #8]	; (80107b4 <USBD_FS_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 80107ac:	7653      	strb	r3, [r2, #25]
}
 80107ae:	4770      	bx	lr
 80107b0:	1fff7000 	.word	0x1fff7000
 80107b4:	20000374 	.word	0x20000374

080107b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80107b8:	b510      	push	{r4, lr}
 80107ba:	4604      	mov	r4, r0
 80107bc:	b094      	sub	sp, #80	; 0x50
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107be:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80107c0:	2234      	movs	r2, #52	; 0x34
 80107c2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107c4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80107c8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80107cc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80107ce:	f002 fad1 	bl	8012d74 <memset>
  if(pcdHandle->Instance==USB)
 80107d2:	4b20      	ldr	r3, [pc, #128]	; (8010854 <HAL_PCD_MspInit+0x9c>)
 80107d4:	6822      	ldr	r2, [r4, #0]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d001      	beq.n	80107de <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USB_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80107da:	b014      	add	sp, #80	; 0x50
 80107dc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80107de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80107e2:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80107e6:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80107e8:	9207      	str	r2, [sp, #28]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80107ea:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80107ec:	f7fc fbfa 	bl	800cfe4 <HAL_RCCEx_PeriphCLKConfig>
 80107f0:	bb60      	cbnz	r0, 801084c <HAL_PCD_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80107f2:	4c19      	ldr	r4, [pc, #100]	; (8010858 <HAL_PCD_MspInit+0xa0>)
 80107f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80107f6:	f043 0301 	orr.w	r3, r3, #1
 80107fa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80107fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80107fe:	f003 0301 	and.w	r3, r3, #1
 8010802:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010804:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8010808:	2302      	movs	r3, #2
 801080a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801080e:	2200      	movs	r2, #0
 8010810:	2303      	movs	r3, #3
 8010812:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010816:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8010818:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801081e:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8010820:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010822:	f7f9 faab 	bl	8009d7c <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 8010826:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801082c:	65a3      	str	r3, [r4, #88]	; 0x58
 801082e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8010830:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8010832:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010836:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8010838:	4611      	mov	r1, r2
 801083a:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_CLK_ENABLE();
 801083c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801083e:	f7f8 ffa9 	bl	8009794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8010842:	2043      	movs	r0, #67	; 0x43
 8010844:	f7f8 ffe4 	bl	8009810 <HAL_NVIC_EnableIRQ>
}
 8010848:	b014      	add	sp, #80	; 0x50
 801084a:	bd10      	pop	{r4, pc}
      Error_Handler();
 801084c:	f7f8 fc8c 	bl	8009168 <Error_Handler>
 8010850:	e7cf      	b.n	80107f2 <HAL_PCD_MspInit+0x3a>
 8010852:	bf00      	nop
 8010854:	40006800 	.word	0x40006800
 8010858:	40021000 	.word	0x40021000

0801085c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801085c:	f500 712d 	add.w	r1, r0, #692	; 0x2b4
 8010860:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8010864:	f7ff ba1a 	b.w	800fc9c <USBD_LL_SetupStage>

08010868 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010868:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 801086c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8010870:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8010874:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8010878:	f7ff ba40 	b.w	800fcfc <USBD_LL_DataOutStage>

0801087c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801087c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8010880:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8010884:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8010888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801088a:	f7ff ba6b 	b.w	800fd64 <USBD_LL_DataInStage>
 801088e:	bf00      	nop

08010890 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010890:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8010894:	f7ff bb04 	b.w	800fea0 <USBD_LL_SOF>

08010898 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010898:	6883      	ldr	r3, [r0, #8]
 801089a:	2b02      	cmp	r3, #2
{
 801089c:	b510      	push	{r4, lr}
 801089e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80108a0:	d001      	beq.n	80108a6 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80108a2:	f7f8 fc61 	bl	8009168 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80108a6:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
 80108aa:	2101      	movs	r1, #1
 80108ac:	f7ff fadc 	bl	800fe68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80108b0:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 80108b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80108b8:	f7ff baaa 	b.w	800fe10 <USBD_LL_Reset>

080108bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108bc:	b510      	push	{r4, lr}
 80108be:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80108c0:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 80108c4:	f7ff fad4 	bl	800fe70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80108c8:	69a3      	ldr	r3, [r4, #24]
 80108ca:	b123      	cbz	r3, 80108d6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80108cc:	4a02      	ldr	r2, [pc, #8]	; (80108d8 <HAL_PCD_SuspendCallback+0x1c>)
 80108ce:	6913      	ldr	r3, [r2, #16]
 80108d0:	f043 0306 	orr.w	r3, r3, #6
 80108d4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80108d6:	bd10      	pop	{r4, pc}
 80108d8:	e000ed00 	.word	0xe000ed00

080108dc <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80108dc:	6983      	ldr	r3, [r0, #24]
{
 80108de:	b510      	push	{r4, lr}
 80108e0:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80108e2:	b92b      	cbnz	r3, 80108f0 <HAL_PCD_ResumeCallback+0x14>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80108e4:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 80108e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80108ec:	f7ff bacc 	b.w	800fe88 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80108f0:	4a06      	ldr	r2, [pc, #24]	; (801090c <HAL_PCD_ResumeCallback+0x30>)
 80108f2:	6913      	ldr	r3, [r2, #16]
 80108f4:	f023 0306 	bic.w	r3, r3, #6
 80108f8:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80108fa:	f7f8 fa21 	bl	8008d40 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80108fe:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8010902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010906:	f7ff babf 	b.w	800fe88 <USBD_LL_Resume>
 801090a:	bf00      	nop
 801090c:	e000ed00 	.word	0xe000ed00

08010910 <USBD_LL_Init>:
{
 8010910:	b538      	push	{r3, r4, r5, lr}
	if (pdev->id == DEVICE_FS) {
 8010912:	7805      	ldrb	r5, [r0, #0]
 8010914:	b10d      	cbz	r5, 801091a <USBD_LL_Init+0xa>
}
 8010916:	2000      	movs	r0, #0
 8010918:	bd38      	pop	{r3, r4, r5, pc}
	  HAL_PWREx_EnableVddUSB();
 801091a:	4604      	mov	r4, r0
 801091c:	f7fb feaa 	bl	800c674 <HAL_PWREx_EnableVddUSB>
	  hpcd_USB_FS.pData = pdev;
 8010920:	482b      	ldr	r0, [pc, #172]	; (80109d0 <USBD_LL_Init+0xc0>)
	  hpcd_USB_FS.Instance = USB;
 8010922:	4a2c      	ldr	r2, [pc, #176]	; (80109d4 <USBD_LL_Init+0xc4>)
	  hpcd_USB_FS.pData = pdev;
 8010924:	f8c0 42f8 	str.w	r4, [r0, #760]	; 0x2f8
	  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010928:	2308      	movs	r3, #8
 801092a:	e9c0 2300 	strd	r2, r3, [r0]
	  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801092e:	2302      	movs	r3, #2
	  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010930:	2202      	movs	r2, #2
	  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010932:	6083      	str	r3, [r0, #8]
	  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010934:	2300      	movs	r3, #0
 8010936:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801093a:	2200      	movs	r2, #0
 801093c:	2300      	movs	r3, #0
 801093e:	e9c0 2306 	strd	r2, r3, [r0, #24]
	  pdev->pData = &hpcd_USB_FS;
 8010942:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
	  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010946:	6205      	str	r5, [r0, #32]
	  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010948:	f7fa fe90 	bl	800b66c <HAL_PCD_Init>
 801094c:	bbe0      	cbnz	r0, 80109c8 <USBD_LL_Init+0xb8>
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801094e:	2200      	movs	r2, #0
 8010950:	4611      	mov	r1, r2
 8010952:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8010956:	2318      	movs	r3, #24
 8010958:	f7fb fe0a 	bl	800c570 <HAL_PCDEx_PMAConfig>
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801095c:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8010960:	2358      	movs	r3, #88	; 0x58
 8010962:	2200      	movs	r2, #0
 8010964:	2180      	movs	r1, #128	; 0x80
 8010966:	f7fb fe03 	bl	800c570 <HAL_PCDEx_PMAConfig>
		HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 801096a:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 801096e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010972:	2200      	movs	r2, #0
 8010974:	2181      	movs	r1, #129	; 0x81
 8010976:	f7fb fdfb 	bl	800c570 <HAL_PCDEx_PMAConfig>
    HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801097a:	2200      	movs	r2, #0
 801097c:	4611      	mov	r1, r2
 801097e:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8010982:	2318      	movs	r3, #24
 8010984:	f7fb fdf4 	bl	800c570 <HAL_PCDEx_PMAConfig>
		HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010988:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 801098c:	2358      	movs	r3, #88	; 0x58
 801098e:	2200      	movs	r2, #0
 8010990:	2180      	movs	r1, #128	; 0x80
 8010992:	f7fb fded 	bl	800c570 <HAL_PCDEx_PMAConfig>
		HAL_PCDEx_PMAConfig(pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  // CDC IN
 8010996:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 801099a:	23c0      	movs	r3, #192	; 0xc0
 801099c:	2200      	movs	r2, #0
 801099e:	2181      	movs	r1, #129	; 0x81
 80109a0:	f7fb fde6 	bl	800c570 <HAL_PCDEx_PMAConfig>
		HAL_PCDEx_PMAConfig(pdev->pData , 0x82 , PCD_SNG_BUF, 0x100); // CDC CMD
 80109a4:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80109a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109ac:	2200      	movs	r2, #0
 80109ae:	2182      	movs	r1, #130	; 0x82
 80109b0:	f7fb fdde 	bl	800c570 <HAL_PCDEx_PMAConfig>
		HAL_PCDEx_PMAConfig(pdev->pData , 0x01 , PCD_SNG_BUF, 0x110); // CDC OUT
 80109b4:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80109b8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80109bc:	2200      	movs	r2, #0
 80109be:	2101      	movs	r1, #1
 80109c0:	f7fb fdd6 	bl	800c570 <HAL_PCDEx_PMAConfig>
}
 80109c4:	2000      	movs	r0, #0
 80109c6:	bd38      	pop	{r3, r4, r5, pc}
	    Error_Handler( );
 80109c8:	f7f8 fbce 	bl	8009168 <Error_Handler>
 80109cc:	e7bf      	b.n	801094e <USBD_LL_Init+0x3e>
 80109ce:	bf00      	nop
 80109d0:	20004a18 	.word	0x20004a18
 80109d4:	40006800 	.word	0x40006800

080109d8 <USBD_LL_Start>:
{
 80109d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80109da:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80109de:	f7fa fed3 	bl	800b788 <HAL_PCD_Start>
  switch (hal_status) {
 80109e2:	2803      	cmp	r0, #3
 80109e4:	bf96      	itet	ls
 80109e6:	4b02      	ldrls	r3, [pc, #8]	; (80109f0 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80109e8:	2003      	movhi	r0, #3
 80109ea:	5c18      	ldrbls	r0, [r3, r0]
}
 80109ec:	bd08      	pop	{r3, pc}
 80109ee:	bf00      	nop
 80109f0:	08016e78 	.word	0x08016e78

080109f4 <USBD_LL_OpenEP>:
{
 80109f4:	4694      	mov	ip, r2
 80109f6:	b508      	push	{r3, lr}
 80109f8:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80109fa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80109fe:	4663      	mov	r3, ip
 8010a00:	f7fb fc7e 	bl	800c300 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8010a04:	2803      	cmp	r0, #3
 8010a06:	bf96      	itet	ls
 8010a08:	4b01      	ldrls	r3, [pc, #4]	; (8010a10 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a0a:	2003      	movhi	r0, #3
 8010a0c:	5c18      	ldrbls	r0, [r3, r0]
}
 8010a0e:	bd08      	pop	{r3, pc}
 8010a10:	08016e78 	.word	0x08016e78

08010a14 <USBD_LL_CloseEP>:
{
 8010a14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010a16:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010a1a:	f7fb fcb1 	bl	800c380 <HAL_PCD_EP_Close>
  switch (hal_status) {
 8010a1e:	2803      	cmp	r0, #3
 8010a20:	bf96      	itet	ls
 8010a22:	4b02      	ldrls	r3, [pc, #8]	; (8010a2c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010a24:	2003      	movhi	r0, #3
 8010a26:	5c18      	ldrbls	r0, [r3, r0]
}
 8010a28:	bd08      	pop	{r3, pc}
 8010a2a:	bf00      	nop
 8010a2c:	08016e78 	.word	0x08016e78

08010a30 <USBD_LL_StallEP>:
{
 8010a30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010a32:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010a36:	f7fb fd1f 	bl	800c478 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8010a3a:	2803      	cmp	r0, #3
 8010a3c:	bf96      	itet	ls
 8010a3e:	4b02      	ldrls	r3, [pc, #8]	; (8010a48 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010a40:	2003      	movhi	r0, #3
 8010a42:	5c18      	ldrbls	r0, [r3, r0]
}
 8010a44:	bd08      	pop	{r3, pc}
 8010a46:	bf00      	nop
 8010a48:	08016e78 	.word	0x08016e78

08010a4c <USBD_LL_ClearStallEP>:
{
 8010a4c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010a4e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010a52:	f7fb fd51 	bl	800c4f8 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8010a56:	2803      	cmp	r0, #3
 8010a58:	bf96      	itet	ls
 8010a5a:	4b02      	ldrls	r3, [pc, #8]	; (8010a64 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010a5c:	2003      	movhi	r0, #3
 8010a5e:	5c18      	ldrbls	r0, [r3, r0]
}
 8010a60:	bd08      	pop	{r3, pc}
 8010a62:	bf00      	nop
 8010a64:	08016e78 	.word	0x08016e78

08010a68 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8010a68:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010a6a:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8010a6e:	d406      	bmi.n	8010a7e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a70:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010a74:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010a78:	f893 016e 	ldrb.w	r0, [r3, #366]	; 0x16e
}
 8010a7c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a7e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8010a82:	3101      	adds	r1, #1
 8010a84:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010a88:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010a8c:	7998      	ldrb	r0, [r3, #6]
 8010a8e:	4770      	bx	lr

08010a90 <USBD_LL_SetUSBAddress>:
{
 8010a90:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a92:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010a96:	f7fb fc1f 	bl	800c2d8 <HAL_PCD_SetAddress>
  switch (hal_status) {
 8010a9a:	2803      	cmp	r0, #3
 8010a9c:	bf96      	itet	ls
 8010a9e:	4b02      	ldrls	r3, [pc, #8]	; (8010aa8 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010aa0:	2003      	movhi	r0, #3
 8010aa2:	5c18      	ldrbls	r0, [r3, r0]
}
 8010aa4:	bd08      	pop	{r3, pc}
 8010aa6:	bf00      	nop
 8010aa8:	08016e78 	.word	0x08016e78

08010aac <USBD_LL_Transmit>:
{
 8010aac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010aae:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010ab2:	f7fb fcbd 	bl	800c430 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 8010ab6:	2803      	cmp	r0, #3
 8010ab8:	bf96      	itet	ls
 8010aba:	4b02      	ldrls	r3, [pc, #8]	; (8010ac4 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010abc:	2003      	movhi	r0, #3
 8010abe:	5c18      	ldrbls	r0, [r3, r0]
}
 8010ac0:	bd08      	pop	{r3, pc}
 8010ac2:	bf00      	nop
 8010ac4:	08016e78 	.word	0x08016e78

08010ac8 <USBD_LL_PrepareReceive>:
{
 8010ac8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010aca:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010ace:	f7fb fc8b 	bl	800c3e8 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8010ad2:	2803      	cmp	r0, #3
 8010ad4:	bf96      	itet	ls
 8010ad6:	4b02      	ldrls	r3, [pc, #8]	; (8010ae0 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010ad8:	2003      	movhi	r0, #3
 8010ada:	5c18      	ldrbls	r0, [r3, r0]
}
 8010adc:	bd08      	pop	{r3, pc}
 8010ade:	bf00      	nop
 8010ae0:	08016e78 	.word	0x08016e78

08010ae4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010ae4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8010ae8:	f7fb bc98 	b.w	800c41c <HAL_PCD_EP_GetRxCount>

08010aec <HAL_PCDEx_LPM_Callback>:
{
 8010aec:	b510      	push	{r4, lr}
 8010aee:	4604      	mov	r4, r0
  switch (msg)
 8010af0:	b169      	cbz	r1, 8010b0e <HAL_PCDEx_LPM_Callback+0x22>
 8010af2:	2901      	cmp	r1, #1
 8010af4:	d10a      	bne.n	8010b0c <HAL_PCDEx_LPM_Callback+0x20>
    USBD_LL_Suspend(hpcd->pData);
 8010af6:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8010afa:	f7ff f9b9 	bl	800fe70 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010afe:	69a3      	ldr	r3, [r4, #24]
 8010b00:	b123      	cbz	r3, 8010b0c <HAL_PCDEx_LPM_Callback+0x20>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b02:	4a0d      	ldr	r2, [pc, #52]	; (8010b38 <HAL_PCDEx_LPM_Callback+0x4c>)
 8010b04:	6913      	ldr	r3, [r2, #16]
 8010b06:	f043 0306 	orr.w	r3, r3, #6
 8010b0a:	6113      	str	r3, [r2, #16]
}
 8010b0c:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8010b0e:	6983      	ldr	r3, [r0, #24]
 8010b10:	b92b      	cbnz	r3, 8010b1e <HAL_PCDEx_LPM_Callback+0x32>
    USBD_LL_Resume(hpcd->pData);
 8010b12:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8010b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8010b1a:	f7ff b9b5 	b.w	800fe88 <USBD_LL_Resume>
  SystemClock_Config();
 8010b1e:	f7f8 f90f 	bl	8008d40 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b22:	4a05      	ldr	r2, [pc, #20]	; (8010b38 <HAL_PCDEx_LPM_Callback+0x4c>)
    USBD_LL_Resume(hpcd->pData);
 8010b24:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b28:	6913      	ldr	r3, [r2, #16]
 8010b2a:	f023 0306 	bic.w	r3, r3, #6
}
 8010b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b32:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010b34:	f7ff b9a8 	b.w	800fe88 <USBD_LL_Resume>
 8010b38:	e000ed00 	.word	0xe000ed00

08010b3c <USBD_static_CDC_malloc>:
}
 8010b3c:	4800      	ldr	r0, [pc, #0]	; (8010b40 <USBD_static_CDC_malloc+0x4>)
 8010b3e:	4770      	bx	lr
 8010b40:	20004d28 	.word	0x20004d28

08010b44 <USBD_static_HID_malloc>:
}
 8010b44:	4800      	ldr	r0, [pc, #0]	; (8010b48 <USBD_static_HID_malloc+0x4>)
 8010b46:	4770      	bx	lr
 8010b48:	20004d14 	.word	0x20004d14

08010b4c <USBD_static_free>:
}
 8010b4c:	4770      	bx	lr
 8010b4e:	bf00      	nop

08010b50 <atoi>:
 8010b50:	220a      	movs	r2, #10
 8010b52:	2100      	movs	r1, #0
 8010b54:	f000 bf66 	b.w	8011a24 <strtol>

08010b58 <exit>:
 8010b58:	b508      	push	{r3, lr}
 8010b5a:	4b06      	ldr	r3, [pc, #24]	; (8010b74 <exit+0x1c>)
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	b113      	cbz	r3, 8010b66 <exit+0xe>
 8010b60:	2100      	movs	r1, #0
 8010b62:	f3af 8000 	nop.w
 8010b66:	4b04      	ldr	r3, [pc, #16]	; (8010b78 <exit+0x20>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	b103      	cbz	r3, 8010b6e <exit+0x16>
 8010b6c:	4798      	blx	r3
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f7f8 fd1e 	bl	80095b0 <_exit>
 8010b74:	00000000 	.word	0x00000000
 8010b78:	20005088 	.word	0x20005088

08010b7c <malloc>:
 8010b7c:	4b02      	ldr	r3, [pc, #8]	; (8010b88 <malloc+0xc>)
 8010b7e:	4601      	mov	r1, r0
 8010b80:	6818      	ldr	r0, [r3, #0]
 8010b82:	f000 b82b 	b.w	8010bdc <_malloc_r>
 8010b86:	bf00      	nop
 8010b88:	20000554 	.word	0x20000554

08010b8c <free>:
 8010b8c:	4b02      	ldr	r3, [pc, #8]	; (8010b98 <free+0xc>)
 8010b8e:	4601      	mov	r1, r0
 8010b90:	6818      	ldr	r0, [r3, #0]
 8010b92:	f003 b8a3 	b.w	8013cdc <_free_r>
 8010b96:	bf00      	nop
 8010b98:	20000554 	.word	0x20000554

08010b9c <sbrk_aligned>:
 8010b9c:	b570      	push	{r4, r5, r6, lr}
 8010b9e:	4e0e      	ldr	r6, [pc, #56]	; (8010bd8 <sbrk_aligned+0x3c>)
 8010ba0:	460c      	mov	r4, r1
 8010ba2:	6831      	ldr	r1, [r6, #0]
 8010ba4:	4605      	mov	r5, r0
 8010ba6:	b911      	cbnz	r1, 8010bae <sbrk_aligned+0x12>
 8010ba8:	f002 f992 	bl	8012ed0 <_sbrk_r>
 8010bac:	6030      	str	r0, [r6, #0]
 8010bae:	4621      	mov	r1, r4
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	f002 f98d 	bl	8012ed0 <_sbrk_r>
 8010bb6:	1c43      	adds	r3, r0, #1
 8010bb8:	d00a      	beq.n	8010bd0 <sbrk_aligned+0x34>
 8010bba:	1cc4      	adds	r4, r0, #3
 8010bbc:	f024 0403 	bic.w	r4, r4, #3
 8010bc0:	42a0      	cmp	r0, r4
 8010bc2:	d007      	beq.n	8010bd4 <sbrk_aligned+0x38>
 8010bc4:	1a21      	subs	r1, r4, r0
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	f002 f982 	bl	8012ed0 <_sbrk_r>
 8010bcc:	3001      	adds	r0, #1
 8010bce:	d101      	bne.n	8010bd4 <sbrk_aligned+0x38>
 8010bd0:	f04f 34ff 	mov.w	r4, #4294967295
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	bd70      	pop	{r4, r5, r6, pc}
 8010bd8:	20004f4c 	.word	0x20004f4c

08010bdc <_malloc_r>:
 8010bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010be0:	1ccd      	adds	r5, r1, #3
 8010be2:	f025 0503 	bic.w	r5, r5, #3
 8010be6:	3508      	adds	r5, #8
 8010be8:	2d0c      	cmp	r5, #12
 8010bea:	bf38      	it	cc
 8010bec:	250c      	movcc	r5, #12
 8010bee:	2d00      	cmp	r5, #0
 8010bf0:	4607      	mov	r7, r0
 8010bf2:	db01      	blt.n	8010bf8 <_malloc_r+0x1c>
 8010bf4:	42a9      	cmp	r1, r5
 8010bf6:	d905      	bls.n	8010c04 <_malloc_r+0x28>
 8010bf8:	230c      	movs	r3, #12
 8010bfa:	603b      	str	r3, [r7, #0]
 8010bfc:	2600      	movs	r6, #0
 8010bfe:	4630      	mov	r0, r6
 8010c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010cd8 <_malloc_r+0xfc>
 8010c08:	f000 f868 	bl	8010cdc <__malloc_lock>
 8010c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8010c10:	461c      	mov	r4, r3
 8010c12:	bb5c      	cbnz	r4, 8010c6c <_malloc_r+0x90>
 8010c14:	4629      	mov	r1, r5
 8010c16:	4638      	mov	r0, r7
 8010c18:	f7ff ffc0 	bl	8010b9c <sbrk_aligned>
 8010c1c:	1c43      	adds	r3, r0, #1
 8010c1e:	4604      	mov	r4, r0
 8010c20:	d155      	bne.n	8010cce <_malloc_r+0xf2>
 8010c22:	f8d8 4000 	ldr.w	r4, [r8]
 8010c26:	4626      	mov	r6, r4
 8010c28:	2e00      	cmp	r6, #0
 8010c2a:	d145      	bne.n	8010cb8 <_malloc_r+0xdc>
 8010c2c:	2c00      	cmp	r4, #0
 8010c2e:	d048      	beq.n	8010cc2 <_malloc_r+0xe6>
 8010c30:	6823      	ldr	r3, [r4, #0]
 8010c32:	4631      	mov	r1, r6
 8010c34:	4638      	mov	r0, r7
 8010c36:	eb04 0903 	add.w	r9, r4, r3
 8010c3a:	f002 f949 	bl	8012ed0 <_sbrk_r>
 8010c3e:	4581      	cmp	r9, r0
 8010c40:	d13f      	bne.n	8010cc2 <_malloc_r+0xe6>
 8010c42:	6821      	ldr	r1, [r4, #0]
 8010c44:	1a6d      	subs	r5, r5, r1
 8010c46:	4629      	mov	r1, r5
 8010c48:	4638      	mov	r0, r7
 8010c4a:	f7ff ffa7 	bl	8010b9c <sbrk_aligned>
 8010c4e:	3001      	adds	r0, #1
 8010c50:	d037      	beq.n	8010cc2 <_malloc_r+0xe6>
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	442b      	add	r3, r5
 8010c56:	6023      	str	r3, [r4, #0]
 8010c58:	f8d8 3000 	ldr.w	r3, [r8]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d038      	beq.n	8010cd2 <_malloc_r+0xf6>
 8010c60:	685a      	ldr	r2, [r3, #4]
 8010c62:	42a2      	cmp	r2, r4
 8010c64:	d12b      	bne.n	8010cbe <_malloc_r+0xe2>
 8010c66:	2200      	movs	r2, #0
 8010c68:	605a      	str	r2, [r3, #4]
 8010c6a:	e00f      	b.n	8010c8c <_malloc_r+0xb0>
 8010c6c:	6822      	ldr	r2, [r4, #0]
 8010c6e:	1b52      	subs	r2, r2, r5
 8010c70:	d41f      	bmi.n	8010cb2 <_malloc_r+0xd6>
 8010c72:	2a0b      	cmp	r2, #11
 8010c74:	d917      	bls.n	8010ca6 <_malloc_r+0xca>
 8010c76:	1961      	adds	r1, r4, r5
 8010c78:	42a3      	cmp	r3, r4
 8010c7a:	6025      	str	r5, [r4, #0]
 8010c7c:	bf18      	it	ne
 8010c7e:	6059      	strne	r1, [r3, #4]
 8010c80:	6863      	ldr	r3, [r4, #4]
 8010c82:	bf08      	it	eq
 8010c84:	f8c8 1000 	streq.w	r1, [r8]
 8010c88:	5162      	str	r2, [r4, r5]
 8010c8a:	604b      	str	r3, [r1, #4]
 8010c8c:	4638      	mov	r0, r7
 8010c8e:	f104 060b 	add.w	r6, r4, #11
 8010c92:	f000 f829 	bl	8010ce8 <__malloc_unlock>
 8010c96:	f026 0607 	bic.w	r6, r6, #7
 8010c9a:	1d23      	adds	r3, r4, #4
 8010c9c:	1af2      	subs	r2, r6, r3
 8010c9e:	d0ae      	beq.n	8010bfe <_malloc_r+0x22>
 8010ca0:	1b9b      	subs	r3, r3, r6
 8010ca2:	50a3      	str	r3, [r4, r2]
 8010ca4:	e7ab      	b.n	8010bfe <_malloc_r+0x22>
 8010ca6:	42a3      	cmp	r3, r4
 8010ca8:	6862      	ldr	r2, [r4, #4]
 8010caa:	d1dd      	bne.n	8010c68 <_malloc_r+0x8c>
 8010cac:	f8c8 2000 	str.w	r2, [r8]
 8010cb0:	e7ec      	b.n	8010c8c <_malloc_r+0xb0>
 8010cb2:	4623      	mov	r3, r4
 8010cb4:	6864      	ldr	r4, [r4, #4]
 8010cb6:	e7ac      	b.n	8010c12 <_malloc_r+0x36>
 8010cb8:	4634      	mov	r4, r6
 8010cba:	6876      	ldr	r6, [r6, #4]
 8010cbc:	e7b4      	b.n	8010c28 <_malloc_r+0x4c>
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	e7cc      	b.n	8010c5c <_malloc_r+0x80>
 8010cc2:	230c      	movs	r3, #12
 8010cc4:	603b      	str	r3, [r7, #0]
 8010cc6:	4638      	mov	r0, r7
 8010cc8:	f000 f80e 	bl	8010ce8 <__malloc_unlock>
 8010ccc:	e797      	b.n	8010bfe <_malloc_r+0x22>
 8010cce:	6025      	str	r5, [r4, #0]
 8010cd0:	e7dc      	b.n	8010c8c <_malloc_r+0xb0>
 8010cd2:	605b      	str	r3, [r3, #4]
 8010cd4:	deff      	udf	#255	; 0xff
 8010cd6:	bf00      	nop
 8010cd8:	20004f48 	.word	0x20004f48

08010cdc <__malloc_lock>:
 8010cdc:	4801      	ldr	r0, [pc, #4]	; (8010ce4 <__malloc_lock+0x8>)
 8010cde:	f002 b944 	b.w	8012f6a <__retarget_lock_acquire_recursive>
 8010ce2:	bf00      	nop
 8010ce4:	20005090 	.word	0x20005090

08010ce8 <__malloc_unlock>:
 8010ce8:	4801      	ldr	r0, [pc, #4]	; (8010cf0 <__malloc_unlock+0x8>)
 8010cea:	f002 b93f 	b.w	8012f6c <__retarget_lock_release_recursive>
 8010cee:	bf00      	nop
 8010cf0:	20005090 	.word	0x20005090

08010cf4 <sulp>:
 8010cf4:	b570      	push	{r4, r5, r6, lr}
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	460d      	mov	r5, r1
 8010cfa:	ec45 4b10 	vmov	d0, r4, r5
 8010cfe:	4616      	mov	r6, r2
 8010d00:	f003 ff0e 	bl	8014b20 <__ulp>
 8010d04:	ec51 0b10 	vmov	r0, r1, d0
 8010d08:	b17e      	cbz	r6, 8010d2a <sulp+0x36>
 8010d0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010d0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	dd09      	ble.n	8010d2a <sulp+0x36>
 8010d16:	051b      	lsls	r3, r3, #20
 8010d18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010d1c:	2400      	movs	r4, #0
 8010d1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010d22:	4622      	mov	r2, r4
 8010d24:	462b      	mov	r3, r5
 8010d26:	f7ef fc67 	bl	80005f8 <__aeabi_dmul>
 8010d2a:	bd70      	pop	{r4, r5, r6, pc}
 8010d2c:	0000      	movs	r0, r0
	...

08010d30 <_strtod_l>:
 8010d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d34:	ed2d 8b02 	vpush	{d8}
 8010d38:	b09b      	sub	sp, #108	; 0x6c
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	9213      	str	r2, [sp, #76]	; 0x4c
 8010d3e:	2200      	movs	r2, #0
 8010d40:	9216      	str	r2, [sp, #88]	; 0x58
 8010d42:	460d      	mov	r5, r1
 8010d44:	f04f 0800 	mov.w	r8, #0
 8010d48:	f04f 0900 	mov.w	r9, #0
 8010d4c:	460a      	mov	r2, r1
 8010d4e:	9215      	str	r2, [sp, #84]	; 0x54
 8010d50:	7811      	ldrb	r1, [r2, #0]
 8010d52:	292b      	cmp	r1, #43	; 0x2b
 8010d54:	d04c      	beq.n	8010df0 <_strtod_l+0xc0>
 8010d56:	d83a      	bhi.n	8010dce <_strtod_l+0x9e>
 8010d58:	290d      	cmp	r1, #13
 8010d5a:	d834      	bhi.n	8010dc6 <_strtod_l+0x96>
 8010d5c:	2908      	cmp	r1, #8
 8010d5e:	d834      	bhi.n	8010dca <_strtod_l+0x9a>
 8010d60:	2900      	cmp	r1, #0
 8010d62:	d03d      	beq.n	8010de0 <_strtod_l+0xb0>
 8010d64:	2200      	movs	r2, #0
 8010d66:	920a      	str	r2, [sp, #40]	; 0x28
 8010d68:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8010d6a:	7832      	ldrb	r2, [r6, #0]
 8010d6c:	2a30      	cmp	r2, #48	; 0x30
 8010d6e:	f040 80b4 	bne.w	8010eda <_strtod_l+0x1aa>
 8010d72:	7872      	ldrb	r2, [r6, #1]
 8010d74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010d78:	2a58      	cmp	r2, #88	; 0x58
 8010d7a:	d170      	bne.n	8010e5e <_strtod_l+0x12e>
 8010d7c:	9302      	str	r3, [sp, #8]
 8010d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d80:	9301      	str	r3, [sp, #4]
 8010d82:	ab16      	add	r3, sp, #88	; 0x58
 8010d84:	9300      	str	r3, [sp, #0]
 8010d86:	4a8e      	ldr	r2, [pc, #568]	; (8010fc0 <_strtod_l+0x290>)
 8010d88:	ab17      	add	r3, sp, #92	; 0x5c
 8010d8a:	a915      	add	r1, sp, #84	; 0x54
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	f003 f859 	bl	8013e44 <__gethex>
 8010d92:	f010 070f 	ands.w	r7, r0, #15
 8010d96:	4605      	mov	r5, r0
 8010d98:	d005      	beq.n	8010da6 <_strtod_l+0x76>
 8010d9a:	2f06      	cmp	r7, #6
 8010d9c:	d12a      	bne.n	8010df4 <_strtod_l+0xc4>
 8010d9e:	3601      	adds	r6, #1
 8010da0:	2300      	movs	r3, #0
 8010da2:	9615      	str	r6, [sp, #84]	; 0x54
 8010da4:	930a      	str	r3, [sp, #40]	; 0x28
 8010da6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f040 857f 	bne.w	80118ac <_strtod_l+0xb7c>
 8010dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010db0:	b1db      	cbz	r3, 8010dea <_strtod_l+0xba>
 8010db2:	4642      	mov	r2, r8
 8010db4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010db8:	ec43 2b10 	vmov	d0, r2, r3
 8010dbc:	b01b      	add	sp, #108	; 0x6c
 8010dbe:	ecbd 8b02 	vpop	{d8}
 8010dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc6:	2920      	cmp	r1, #32
 8010dc8:	d1cc      	bne.n	8010d64 <_strtod_l+0x34>
 8010dca:	3201      	adds	r2, #1
 8010dcc:	e7bf      	b.n	8010d4e <_strtod_l+0x1e>
 8010dce:	292d      	cmp	r1, #45	; 0x2d
 8010dd0:	d1c8      	bne.n	8010d64 <_strtod_l+0x34>
 8010dd2:	2101      	movs	r1, #1
 8010dd4:	910a      	str	r1, [sp, #40]	; 0x28
 8010dd6:	1c51      	adds	r1, r2, #1
 8010dd8:	9115      	str	r1, [sp, #84]	; 0x54
 8010dda:	7852      	ldrb	r2, [r2, #1]
 8010ddc:	2a00      	cmp	r2, #0
 8010dde:	d1c3      	bne.n	8010d68 <_strtod_l+0x38>
 8010de0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010de2:	9515      	str	r5, [sp, #84]	; 0x54
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	f040 855f 	bne.w	80118a8 <_strtod_l+0xb78>
 8010dea:	4642      	mov	r2, r8
 8010dec:	464b      	mov	r3, r9
 8010dee:	e7e3      	b.n	8010db8 <_strtod_l+0x88>
 8010df0:	2100      	movs	r1, #0
 8010df2:	e7ef      	b.n	8010dd4 <_strtod_l+0xa4>
 8010df4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010df6:	b13a      	cbz	r2, 8010e08 <_strtod_l+0xd8>
 8010df8:	2135      	movs	r1, #53	; 0x35
 8010dfa:	a818      	add	r0, sp, #96	; 0x60
 8010dfc:	f003 ff8d 	bl	8014d1a <__copybits>
 8010e00:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010e02:	4620      	mov	r0, r4
 8010e04:	f003 fb60 	bl	80144c8 <_Bfree>
 8010e08:	3f01      	subs	r7, #1
 8010e0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e0c:	2f04      	cmp	r7, #4
 8010e0e:	d806      	bhi.n	8010e1e <_strtod_l+0xee>
 8010e10:	e8df f007 	tbb	[pc, r7]
 8010e14:	201d0314 	.word	0x201d0314
 8010e18:	14          	.byte	0x14
 8010e19:	00          	.byte	0x00
 8010e1a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8010e1e:	05e9      	lsls	r1, r5, #23
 8010e20:	bf48      	it	mi
 8010e22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010e26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e2a:	0d1b      	lsrs	r3, r3, #20
 8010e2c:	051b      	lsls	r3, r3, #20
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1b9      	bne.n	8010da6 <_strtod_l+0x76>
 8010e32:	f002 f86f 	bl	8012f14 <__errno>
 8010e36:	2322      	movs	r3, #34	; 0x22
 8010e38:	6003      	str	r3, [r0, #0]
 8010e3a:	e7b4      	b.n	8010da6 <_strtod_l+0x76>
 8010e3c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010e40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010e44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010e48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010e4c:	e7e7      	b.n	8010e1e <_strtod_l+0xee>
 8010e4e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010fc8 <_strtod_l+0x298>
 8010e52:	e7e4      	b.n	8010e1e <_strtod_l+0xee>
 8010e54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010e58:	f04f 38ff 	mov.w	r8, #4294967295
 8010e5c:	e7df      	b.n	8010e1e <_strtod_l+0xee>
 8010e5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e60:	1c5a      	adds	r2, r3, #1
 8010e62:	9215      	str	r2, [sp, #84]	; 0x54
 8010e64:	785b      	ldrb	r3, [r3, #1]
 8010e66:	2b30      	cmp	r3, #48	; 0x30
 8010e68:	d0f9      	beq.n	8010e5e <_strtod_l+0x12e>
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d09b      	beq.n	8010da6 <_strtod_l+0x76>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	f04f 0a00 	mov.w	sl, #0
 8010e74:	9304      	str	r3, [sp, #16]
 8010e76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e7a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010e7e:	46d3      	mov	fp, sl
 8010e80:	220a      	movs	r2, #10
 8010e82:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010e84:	7806      	ldrb	r6, [r0, #0]
 8010e86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010e8a:	b2d9      	uxtb	r1, r3
 8010e8c:	2909      	cmp	r1, #9
 8010e8e:	d926      	bls.n	8010ede <_strtod_l+0x1ae>
 8010e90:	494c      	ldr	r1, [pc, #304]	; (8010fc4 <_strtod_l+0x294>)
 8010e92:	2201      	movs	r2, #1
 8010e94:	f001 ff76 	bl	8012d84 <strncmp>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	d030      	beq.n	8010efe <_strtod_l+0x1ce>
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	4632      	mov	r2, r6
 8010ea0:	9005      	str	r0, [sp, #20]
 8010ea2:	465e      	mov	r6, fp
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2a65      	cmp	r2, #101	; 0x65
 8010ea8:	d001      	beq.n	8010eae <_strtod_l+0x17e>
 8010eaa:	2a45      	cmp	r2, #69	; 0x45
 8010eac:	d113      	bne.n	8010ed6 <_strtod_l+0x1a6>
 8010eae:	b91e      	cbnz	r6, 8010eb8 <_strtod_l+0x188>
 8010eb0:	9a04      	ldr	r2, [sp, #16]
 8010eb2:	4302      	orrs	r2, r0
 8010eb4:	d094      	beq.n	8010de0 <_strtod_l+0xb0>
 8010eb6:	2600      	movs	r6, #0
 8010eb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8010eba:	1c6a      	adds	r2, r5, #1
 8010ebc:	9215      	str	r2, [sp, #84]	; 0x54
 8010ebe:	786a      	ldrb	r2, [r5, #1]
 8010ec0:	2a2b      	cmp	r2, #43	; 0x2b
 8010ec2:	d074      	beq.n	8010fae <_strtod_l+0x27e>
 8010ec4:	2a2d      	cmp	r2, #45	; 0x2d
 8010ec6:	d078      	beq.n	8010fba <_strtod_l+0x28a>
 8010ec8:	f04f 0c00 	mov.w	ip, #0
 8010ecc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010ed0:	2909      	cmp	r1, #9
 8010ed2:	d97f      	bls.n	8010fd4 <_strtod_l+0x2a4>
 8010ed4:	9515      	str	r5, [sp, #84]	; 0x54
 8010ed6:	2700      	movs	r7, #0
 8010ed8:	e09e      	b.n	8011018 <_strtod_l+0x2e8>
 8010eda:	2300      	movs	r3, #0
 8010edc:	e7c8      	b.n	8010e70 <_strtod_l+0x140>
 8010ede:	f1bb 0f08 	cmp.w	fp, #8
 8010ee2:	bfd8      	it	le
 8010ee4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010ee6:	f100 0001 	add.w	r0, r0, #1
 8010eea:	bfda      	itte	le
 8010eec:	fb02 3301 	mlale	r3, r2, r1, r3
 8010ef0:	9309      	strle	r3, [sp, #36]	; 0x24
 8010ef2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010ef6:	f10b 0b01 	add.w	fp, fp, #1
 8010efa:	9015      	str	r0, [sp, #84]	; 0x54
 8010efc:	e7c1      	b.n	8010e82 <_strtod_l+0x152>
 8010efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f00:	1c5a      	adds	r2, r3, #1
 8010f02:	9215      	str	r2, [sp, #84]	; 0x54
 8010f04:	785a      	ldrb	r2, [r3, #1]
 8010f06:	f1bb 0f00 	cmp.w	fp, #0
 8010f0a:	d037      	beq.n	8010f7c <_strtod_l+0x24c>
 8010f0c:	9005      	str	r0, [sp, #20]
 8010f0e:	465e      	mov	r6, fp
 8010f10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010f14:	2b09      	cmp	r3, #9
 8010f16:	d912      	bls.n	8010f3e <_strtod_l+0x20e>
 8010f18:	2301      	movs	r3, #1
 8010f1a:	e7c4      	b.n	8010ea6 <_strtod_l+0x176>
 8010f1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f1e:	1c5a      	adds	r2, r3, #1
 8010f20:	9215      	str	r2, [sp, #84]	; 0x54
 8010f22:	785a      	ldrb	r2, [r3, #1]
 8010f24:	3001      	adds	r0, #1
 8010f26:	2a30      	cmp	r2, #48	; 0x30
 8010f28:	d0f8      	beq.n	8010f1c <_strtod_l+0x1ec>
 8010f2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010f2e:	2b08      	cmp	r3, #8
 8010f30:	f200 84c1 	bhi.w	80118b6 <_strtod_l+0xb86>
 8010f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f36:	9005      	str	r0, [sp, #20]
 8010f38:	2000      	movs	r0, #0
 8010f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	3a30      	subs	r2, #48	; 0x30
 8010f40:	f100 0301 	add.w	r3, r0, #1
 8010f44:	d014      	beq.n	8010f70 <_strtod_l+0x240>
 8010f46:	9905      	ldr	r1, [sp, #20]
 8010f48:	4419      	add	r1, r3
 8010f4a:	9105      	str	r1, [sp, #20]
 8010f4c:	4633      	mov	r3, r6
 8010f4e:	eb00 0c06 	add.w	ip, r0, r6
 8010f52:	210a      	movs	r1, #10
 8010f54:	4563      	cmp	r3, ip
 8010f56:	d113      	bne.n	8010f80 <_strtod_l+0x250>
 8010f58:	1833      	adds	r3, r6, r0
 8010f5a:	2b08      	cmp	r3, #8
 8010f5c:	f106 0601 	add.w	r6, r6, #1
 8010f60:	4406      	add	r6, r0
 8010f62:	dc1a      	bgt.n	8010f9a <_strtod_l+0x26a>
 8010f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f66:	230a      	movs	r3, #10
 8010f68:	fb03 2301 	mla	r3, r3, r1, r2
 8010f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8010f6e:	2300      	movs	r3, #0
 8010f70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f72:	1c51      	adds	r1, r2, #1
 8010f74:	9115      	str	r1, [sp, #84]	; 0x54
 8010f76:	7852      	ldrb	r2, [r2, #1]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	e7c9      	b.n	8010f10 <_strtod_l+0x1e0>
 8010f7c:	4658      	mov	r0, fp
 8010f7e:	e7d2      	b.n	8010f26 <_strtod_l+0x1f6>
 8010f80:	2b08      	cmp	r3, #8
 8010f82:	f103 0301 	add.w	r3, r3, #1
 8010f86:	dc03      	bgt.n	8010f90 <_strtod_l+0x260>
 8010f88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010f8a:	434f      	muls	r7, r1
 8010f8c:	9709      	str	r7, [sp, #36]	; 0x24
 8010f8e:	e7e1      	b.n	8010f54 <_strtod_l+0x224>
 8010f90:	2b10      	cmp	r3, #16
 8010f92:	bfd8      	it	le
 8010f94:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010f98:	e7dc      	b.n	8010f54 <_strtod_l+0x224>
 8010f9a:	2e10      	cmp	r6, #16
 8010f9c:	bfdc      	itt	le
 8010f9e:	230a      	movle	r3, #10
 8010fa0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010fa4:	e7e3      	b.n	8010f6e <_strtod_l+0x23e>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	9305      	str	r3, [sp, #20]
 8010faa:	2301      	movs	r3, #1
 8010fac:	e780      	b.n	8010eb0 <_strtod_l+0x180>
 8010fae:	f04f 0c00 	mov.w	ip, #0
 8010fb2:	1caa      	adds	r2, r5, #2
 8010fb4:	9215      	str	r2, [sp, #84]	; 0x54
 8010fb6:	78aa      	ldrb	r2, [r5, #2]
 8010fb8:	e788      	b.n	8010ecc <_strtod_l+0x19c>
 8010fba:	f04f 0c01 	mov.w	ip, #1
 8010fbe:	e7f8      	b.n	8010fb2 <_strtod_l+0x282>
 8010fc0:	08016e80 	.word	0x08016e80
 8010fc4:	08016e7c 	.word	0x08016e7c
 8010fc8:	7ff00000 	.word	0x7ff00000
 8010fcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010fce:	1c51      	adds	r1, r2, #1
 8010fd0:	9115      	str	r1, [sp, #84]	; 0x54
 8010fd2:	7852      	ldrb	r2, [r2, #1]
 8010fd4:	2a30      	cmp	r2, #48	; 0x30
 8010fd6:	d0f9      	beq.n	8010fcc <_strtod_l+0x29c>
 8010fd8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010fdc:	2908      	cmp	r1, #8
 8010fde:	f63f af7a 	bhi.w	8010ed6 <_strtod_l+0x1a6>
 8010fe2:	3a30      	subs	r2, #48	; 0x30
 8010fe4:	9208      	str	r2, [sp, #32]
 8010fe6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010fe8:	920c      	str	r2, [sp, #48]	; 0x30
 8010fea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010fec:	1c57      	adds	r7, r2, #1
 8010fee:	9715      	str	r7, [sp, #84]	; 0x54
 8010ff0:	7852      	ldrb	r2, [r2, #1]
 8010ff2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010ff6:	f1be 0f09 	cmp.w	lr, #9
 8010ffa:	d938      	bls.n	801106e <_strtod_l+0x33e>
 8010ffc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010ffe:	1a7f      	subs	r7, r7, r1
 8011000:	2f08      	cmp	r7, #8
 8011002:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011006:	dc03      	bgt.n	8011010 <_strtod_l+0x2e0>
 8011008:	9908      	ldr	r1, [sp, #32]
 801100a:	428f      	cmp	r7, r1
 801100c:	bfa8      	it	ge
 801100e:	460f      	movge	r7, r1
 8011010:	f1bc 0f00 	cmp.w	ip, #0
 8011014:	d000      	beq.n	8011018 <_strtod_l+0x2e8>
 8011016:	427f      	negs	r7, r7
 8011018:	2e00      	cmp	r6, #0
 801101a:	d14f      	bne.n	80110bc <_strtod_l+0x38c>
 801101c:	9904      	ldr	r1, [sp, #16]
 801101e:	4301      	orrs	r1, r0
 8011020:	f47f aec1 	bne.w	8010da6 <_strtod_l+0x76>
 8011024:	2b00      	cmp	r3, #0
 8011026:	f47f aedb 	bne.w	8010de0 <_strtod_l+0xb0>
 801102a:	2a69      	cmp	r2, #105	; 0x69
 801102c:	d029      	beq.n	8011082 <_strtod_l+0x352>
 801102e:	dc26      	bgt.n	801107e <_strtod_l+0x34e>
 8011030:	2a49      	cmp	r2, #73	; 0x49
 8011032:	d026      	beq.n	8011082 <_strtod_l+0x352>
 8011034:	2a4e      	cmp	r2, #78	; 0x4e
 8011036:	f47f aed3 	bne.w	8010de0 <_strtod_l+0xb0>
 801103a:	499b      	ldr	r1, [pc, #620]	; (80112a8 <_strtod_l+0x578>)
 801103c:	a815      	add	r0, sp, #84	; 0x54
 801103e:	f003 f941 	bl	80142c4 <__match>
 8011042:	2800      	cmp	r0, #0
 8011044:	f43f aecc 	beq.w	8010de0 <_strtod_l+0xb0>
 8011048:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	2b28      	cmp	r3, #40	; 0x28
 801104e:	d12f      	bne.n	80110b0 <_strtod_l+0x380>
 8011050:	4996      	ldr	r1, [pc, #600]	; (80112ac <_strtod_l+0x57c>)
 8011052:	aa18      	add	r2, sp, #96	; 0x60
 8011054:	a815      	add	r0, sp, #84	; 0x54
 8011056:	f003 f949 	bl	80142ec <__hexnan>
 801105a:	2805      	cmp	r0, #5
 801105c:	d128      	bne.n	80110b0 <_strtod_l+0x380>
 801105e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011060:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011064:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011068:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801106c:	e69b      	b.n	8010da6 <_strtod_l+0x76>
 801106e:	9f08      	ldr	r7, [sp, #32]
 8011070:	210a      	movs	r1, #10
 8011072:	fb01 2107 	mla	r1, r1, r7, r2
 8011076:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801107a:	9208      	str	r2, [sp, #32]
 801107c:	e7b5      	b.n	8010fea <_strtod_l+0x2ba>
 801107e:	2a6e      	cmp	r2, #110	; 0x6e
 8011080:	e7d9      	b.n	8011036 <_strtod_l+0x306>
 8011082:	498b      	ldr	r1, [pc, #556]	; (80112b0 <_strtod_l+0x580>)
 8011084:	a815      	add	r0, sp, #84	; 0x54
 8011086:	f003 f91d 	bl	80142c4 <__match>
 801108a:	2800      	cmp	r0, #0
 801108c:	f43f aea8 	beq.w	8010de0 <_strtod_l+0xb0>
 8011090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011092:	4988      	ldr	r1, [pc, #544]	; (80112b4 <_strtod_l+0x584>)
 8011094:	3b01      	subs	r3, #1
 8011096:	a815      	add	r0, sp, #84	; 0x54
 8011098:	9315      	str	r3, [sp, #84]	; 0x54
 801109a:	f003 f913 	bl	80142c4 <__match>
 801109e:	b910      	cbnz	r0, 80110a6 <_strtod_l+0x376>
 80110a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110a2:	3301      	adds	r3, #1
 80110a4:	9315      	str	r3, [sp, #84]	; 0x54
 80110a6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80112c4 <_strtod_l+0x594>
 80110aa:	f04f 0800 	mov.w	r8, #0
 80110ae:	e67a      	b.n	8010da6 <_strtod_l+0x76>
 80110b0:	4881      	ldr	r0, [pc, #516]	; (80112b8 <_strtod_l+0x588>)
 80110b2:	f001 ff6d 	bl	8012f90 <nan>
 80110b6:	ec59 8b10 	vmov	r8, r9, d0
 80110ba:	e674      	b.n	8010da6 <_strtod_l+0x76>
 80110bc:	9b05      	ldr	r3, [sp, #20]
 80110be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110c0:	1afb      	subs	r3, r7, r3
 80110c2:	f1bb 0f00 	cmp.w	fp, #0
 80110c6:	bf08      	it	eq
 80110c8:	46b3      	moveq	fp, r6
 80110ca:	2e10      	cmp	r6, #16
 80110cc:	9308      	str	r3, [sp, #32]
 80110ce:	4635      	mov	r5, r6
 80110d0:	bfa8      	it	ge
 80110d2:	2510      	movge	r5, #16
 80110d4:	f7ef fa16 	bl	8000504 <__aeabi_ui2d>
 80110d8:	2e09      	cmp	r6, #9
 80110da:	4680      	mov	r8, r0
 80110dc:	4689      	mov	r9, r1
 80110de:	dd13      	ble.n	8011108 <_strtod_l+0x3d8>
 80110e0:	4b76      	ldr	r3, [pc, #472]	; (80112bc <_strtod_l+0x58c>)
 80110e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80110e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80110ea:	f7ef fa85 	bl	80005f8 <__aeabi_dmul>
 80110ee:	4680      	mov	r8, r0
 80110f0:	4650      	mov	r0, sl
 80110f2:	4689      	mov	r9, r1
 80110f4:	f7ef fa06 	bl	8000504 <__aeabi_ui2d>
 80110f8:	4602      	mov	r2, r0
 80110fa:	460b      	mov	r3, r1
 80110fc:	4640      	mov	r0, r8
 80110fe:	4649      	mov	r1, r9
 8011100:	f7ef f8c4 	bl	800028c <__adddf3>
 8011104:	4680      	mov	r8, r0
 8011106:	4689      	mov	r9, r1
 8011108:	2e0f      	cmp	r6, #15
 801110a:	dc38      	bgt.n	801117e <_strtod_l+0x44e>
 801110c:	9b08      	ldr	r3, [sp, #32]
 801110e:	2b00      	cmp	r3, #0
 8011110:	f43f ae49 	beq.w	8010da6 <_strtod_l+0x76>
 8011114:	dd24      	ble.n	8011160 <_strtod_l+0x430>
 8011116:	2b16      	cmp	r3, #22
 8011118:	dc0b      	bgt.n	8011132 <_strtod_l+0x402>
 801111a:	4968      	ldr	r1, [pc, #416]	; (80112bc <_strtod_l+0x58c>)
 801111c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011124:	4642      	mov	r2, r8
 8011126:	464b      	mov	r3, r9
 8011128:	f7ef fa66 	bl	80005f8 <__aeabi_dmul>
 801112c:	4680      	mov	r8, r0
 801112e:	4689      	mov	r9, r1
 8011130:	e639      	b.n	8010da6 <_strtod_l+0x76>
 8011132:	9a08      	ldr	r2, [sp, #32]
 8011134:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8011138:	4293      	cmp	r3, r2
 801113a:	db20      	blt.n	801117e <_strtod_l+0x44e>
 801113c:	4c5f      	ldr	r4, [pc, #380]	; (80112bc <_strtod_l+0x58c>)
 801113e:	f1c6 060f 	rsb	r6, r6, #15
 8011142:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8011146:	4642      	mov	r2, r8
 8011148:	464b      	mov	r3, r9
 801114a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801114e:	f7ef fa53 	bl	80005f8 <__aeabi_dmul>
 8011152:	9b08      	ldr	r3, [sp, #32]
 8011154:	1b9e      	subs	r6, r3, r6
 8011156:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801115a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801115e:	e7e3      	b.n	8011128 <_strtod_l+0x3f8>
 8011160:	9b08      	ldr	r3, [sp, #32]
 8011162:	3316      	adds	r3, #22
 8011164:	db0b      	blt.n	801117e <_strtod_l+0x44e>
 8011166:	9b05      	ldr	r3, [sp, #20]
 8011168:	1bdf      	subs	r7, r3, r7
 801116a:	4b54      	ldr	r3, [pc, #336]	; (80112bc <_strtod_l+0x58c>)
 801116c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011174:	4640      	mov	r0, r8
 8011176:	4649      	mov	r1, r9
 8011178:	f7ef fb68 	bl	800084c <__aeabi_ddiv>
 801117c:	e7d6      	b.n	801112c <_strtod_l+0x3fc>
 801117e:	9b08      	ldr	r3, [sp, #32]
 8011180:	1b75      	subs	r5, r6, r5
 8011182:	441d      	add	r5, r3
 8011184:	2d00      	cmp	r5, #0
 8011186:	dd70      	ble.n	801126a <_strtod_l+0x53a>
 8011188:	f015 030f 	ands.w	r3, r5, #15
 801118c:	d00a      	beq.n	80111a4 <_strtod_l+0x474>
 801118e:	494b      	ldr	r1, [pc, #300]	; (80112bc <_strtod_l+0x58c>)
 8011190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011194:	4642      	mov	r2, r8
 8011196:	464b      	mov	r3, r9
 8011198:	e9d1 0100 	ldrd	r0, r1, [r1]
 801119c:	f7ef fa2c 	bl	80005f8 <__aeabi_dmul>
 80111a0:	4680      	mov	r8, r0
 80111a2:	4689      	mov	r9, r1
 80111a4:	f035 050f 	bics.w	r5, r5, #15
 80111a8:	d04d      	beq.n	8011246 <_strtod_l+0x516>
 80111aa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80111ae:	dd22      	ble.n	80111f6 <_strtod_l+0x4c6>
 80111b0:	2500      	movs	r5, #0
 80111b2:	46ab      	mov	fp, r5
 80111b4:	9509      	str	r5, [sp, #36]	; 0x24
 80111b6:	9505      	str	r5, [sp, #20]
 80111b8:	2322      	movs	r3, #34	; 0x22
 80111ba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80112c4 <_strtod_l+0x594>
 80111be:	6023      	str	r3, [r4, #0]
 80111c0:	f04f 0800 	mov.w	r8, #0
 80111c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f43f aded 	beq.w	8010da6 <_strtod_l+0x76>
 80111cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80111ce:	4620      	mov	r0, r4
 80111d0:	f003 f97a 	bl	80144c8 <_Bfree>
 80111d4:	9905      	ldr	r1, [sp, #20]
 80111d6:	4620      	mov	r0, r4
 80111d8:	f003 f976 	bl	80144c8 <_Bfree>
 80111dc:	4659      	mov	r1, fp
 80111de:	4620      	mov	r0, r4
 80111e0:	f003 f972 	bl	80144c8 <_Bfree>
 80111e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111e6:	4620      	mov	r0, r4
 80111e8:	f003 f96e 	bl	80144c8 <_Bfree>
 80111ec:	4629      	mov	r1, r5
 80111ee:	4620      	mov	r0, r4
 80111f0:	f003 f96a 	bl	80144c8 <_Bfree>
 80111f4:	e5d7      	b.n	8010da6 <_strtod_l+0x76>
 80111f6:	4b32      	ldr	r3, [pc, #200]	; (80112c0 <_strtod_l+0x590>)
 80111f8:	9304      	str	r3, [sp, #16]
 80111fa:	2300      	movs	r3, #0
 80111fc:	112d      	asrs	r5, r5, #4
 80111fe:	4640      	mov	r0, r8
 8011200:	4649      	mov	r1, r9
 8011202:	469a      	mov	sl, r3
 8011204:	2d01      	cmp	r5, #1
 8011206:	dc21      	bgt.n	801124c <_strtod_l+0x51c>
 8011208:	b10b      	cbz	r3, 801120e <_strtod_l+0x4de>
 801120a:	4680      	mov	r8, r0
 801120c:	4689      	mov	r9, r1
 801120e:	492c      	ldr	r1, [pc, #176]	; (80112c0 <_strtod_l+0x590>)
 8011210:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011214:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011218:	4642      	mov	r2, r8
 801121a:	464b      	mov	r3, r9
 801121c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011220:	f7ef f9ea 	bl	80005f8 <__aeabi_dmul>
 8011224:	4b27      	ldr	r3, [pc, #156]	; (80112c4 <_strtod_l+0x594>)
 8011226:	460a      	mov	r2, r1
 8011228:	400b      	ands	r3, r1
 801122a:	4927      	ldr	r1, [pc, #156]	; (80112c8 <_strtod_l+0x598>)
 801122c:	428b      	cmp	r3, r1
 801122e:	4680      	mov	r8, r0
 8011230:	d8be      	bhi.n	80111b0 <_strtod_l+0x480>
 8011232:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011236:	428b      	cmp	r3, r1
 8011238:	bf86      	itte	hi
 801123a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80112cc <_strtod_l+0x59c>
 801123e:	f04f 38ff 	movhi.w	r8, #4294967295
 8011242:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8011246:	2300      	movs	r3, #0
 8011248:	9304      	str	r3, [sp, #16]
 801124a:	e07b      	b.n	8011344 <_strtod_l+0x614>
 801124c:	07ea      	lsls	r2, r5, #31
 801124e:	d505      	bpl.n	801125c <_strtod_l+0x52c>
 8011250:	9b04      	ldr	r3, [sp, #16]
 8011252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011256:	f7ef f9cf 	bl	80005f8 <__aeabi_dmul>
 801125a:	2301      	movs	r3, #1
 801125c:	9a04      	ldr	r2, [sp, #16]
 801125e:	3208      	adds	r2, #8
 8011260:	f10a 0a01 	add.w	sl, sl, #1
 8011264:	106d      	asrs	r5, r5, #1
 8011266:	9204      	str	r2, [sp, #16]
 8011268:	e7cc      	b.n	8011204 <_strtod_l+0x4d4>
 801126a:	d0ec      	beq.n	8011246 <_strtod_l+0x516>
 801126c:	426d      	negs	r5, r5
 801126e:	f015 020f 	ands.w	r2, r5, #15
 8011272:	d00a      	beq.n	801128a <_strtod_l+0x55a>
 8011274:	4b11      	ldr	r3, [pc, #68]	; (80112bc <_strtod_l+0x58c>)
 8011276:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801127a:	4640      	mov	r0, r8
 801127c:	4649      	mov	r1, r9
 801127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011282:	f7ef fae3 	bl	800084c <__aeabi_ddiv>
 8011286:	4680      	mov	r8, r0
 8011288:	4689      	mov	r9, r1
 801128a:	112d      	asrs	r5, r5, #4
 801128c:	d0db      	beq.n	8011246 <_strtod_l+0x516>
 801128e:	2d1f      	cmp	r5, #31
 8011290:	dd1e      	ble.n	80112d0 <_strtod_l+0x5a0>
 8011292:	2500      	movs	r5, #0
 8011294:	46ab      	mov	fp, r5
 8011296:	9509      	str	r5, [sp, #36]	; 0x24
 8011298:	9505      	str	r5, [sp, #20]
 801129a:	2322      	movs	r3, #34	; 0x22
 801129c:	f04f 0800 	mov.w	r8, #0
 80112a0:	f04f 0900 	mov.w	r9, #0
 80112a4:	6023      	str	r3, [r4, #0]
 80112a6:	e78d      	b.n	80111c4 <_strtod_l+0x494>
 80112a8:	08016fde 	.word	0x08016fde
 80112ac:	08016e94 	.word	0x08016e94
 80112b0:	08016fd6 	.word	0x08016fd6
 80112b4:	080170c0 	.word	0x080170c0
 80112b8:	080170bc 	.word	0x080170bc
 80112bc:	08017218 	.word	0x08017218
 80112c0:	080171f0 	.word	0x080171f0
 80112c4:	7ff00000 	.word	0x7ff00000
 80112c8:	7ca00000 	.word	0x7ca00000
 80112cc:	7fefffff 	.word	0x7fefffff
 80112d0:	f015 0310 	ands.w	r3, r5, #16
 80112d4:	bf18      	it	ne
 80112d6:	236a      	movne	r3, #106	; 0x6a
 80112d8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801167c <_strtod_l+0x94c>
 80112dc:	9304      	str	r3, [sp, #16]
 80112de:	4640      	mov	r0, r8
 80112e0:	4649      	mov	r1, r9
 80112e2:	2300      	movs	r3, #0
 80112e4:	07ea      	lsls	r2, r5, #31
 80112e6:	d504      	bpl.n	80112f2 <_strtod_l+0x5c2>
 80112e8:	e9da 2300 	ldrd	r2, r3, [sl]
 80112ec:	f7ef f984 	bl	80005f8 <__aeabi_dmul>
 80112f0:	2301      	movs	r3, #1
 80112f2:	106d      	asrs	r5, r5, #1
 80112f4:	f10a 0a08 	add.w	sl, sl, #8
 80112f8:	d1f4      	bne.n	80112e4 <_strtod_l+0x5b4>
 80112fa:	b10b      	cbz	r3, 8011300 <_strtod_l+0x5d0>
 80112fc:	4680      	mov	r8, r0
 80112fe:	4689      	mov	r9, r1
 8011300:	9b04      	ldr	r3, [sp, #16]
 8011302:	b1bb      	cbz	r3, 8011334 <_strtod_l+0x604>
 8011304:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011308:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801130c:	2b00      	cmp	r3, #0
 801130e:	4649      	mov	r1, r9
 8011310:	dd10      	ble.n	8011334 <_strtod_l+0x604>
 8011312:	2b1f      	cmp	r3, #31
 8011314:	f340 811e 	ble.w	8011554 <_strtod_l+0x824>
 8011318:	2b34      	cmp	r3, #52	; 0x34
 801131a:	bfde      	ittt	le
 801131c:	f04f 33ff 	movle.w	r3, #4294967295
 8011320:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011324:	4093      	lslle	r3, r2
 8011326:	f04f 0800 	mov.w	r8, #0
 801132a:	bfcc      	ite	gt
 801132c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011330:	ea03 0901 	andle.w	r9, r3, r1
 8011334:	2200      	movs	r2, #0
 8011336:	2300      	movs	r3, #0
 8011338:	4640      	mov	r0, r8
 801133a:	4649      	mov	r1, r9
 801133c:	f7ef fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8011340:	2800      	cmp	r0, #0
 8011342:	d1a6      	bne.n	8011292 <_strtod_l+0x562>
 8011344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011346:	9300      	str	r3, [sp, #0]
 8011348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801134a:	4633      	mov	r3, r6
 801134c:	465a      	mov	r2, fp
 801134e:	4620      	mov	r0, r4
 8011350:	f003 f922 	bl	8014598 <__s2b>
 8011354:	9009      	str	r0, [sp, #36]	; 0x24
 8011356:	2800      	cmp	r0, #0
 8011358:	f43f af2a 	beq.w	80111b0 <_strtod_l+0x480>
 801135c:	9a08      	ldr	r2, [sp, #32]
 801135e:	9b05      	ldr	r3, [sp, #20]
 8011360:	2a00      	cmp	r2, #0
 8011362:	eba3 0307 	sub.w	r3, r3, r7
 8011366:	bfa8      	it	ge
 8011368:	2300      	movge	r3, #0
 801136a:	930c      	str	r3, [sp, #48]	; 0x30
 801136c:	2500      	movs	r5, #0
 801136e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011372:	9312      	str	r3, [sp, #72]	; 0x48
 8011374:	46ab      	mov	fp, r5
 8011376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011378:	4620      	mov	r0, r4
 801137a:	6859      	ldr	r1, [r3, #4]
 801137c:	f003 f864 	bl	8014448 <_Balloc>
 8011380:	9005      	str	r0, [sp, #20]
 8011382:	2800      	cmp	r0, #0
 8011384:	f43f af18 	beq.w	80111b8 <_strtod_l+0x488>
 8011388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801138a:	691a      	ldr	r2, [r3, #16]
 801138c:	3202      	adds	r2, #2
 801138e:	f103 010c 	add.w	r1, r3, #12
 8011392:	0092      	lsls	r2, r2, #2
 8011394:	300c      	adds	r0, #12
 8011396:	f001 fdea 	bl	8012f6e <memcpy>
 801139a:	ec49 8b10 	vmov	d0, r8, r9
 801139e:	aa18      	add	r2, sp, #96	; 0x60
 80113a0:	a917      	add	r1, sp, #92	; 0x5c
 80113a2:	4620      	mov	r0, r4
 80113a4:	f003 fc2c 	bl	8014c00 <__d2b>
 80113a8:	ec49 8b18 	vmov	d8, r8, r9
 80113ac:	9016      	str	r0, [sp, #88]	; 0x58
 80113ae:	2800      	cmp	r0, #0
 80113b0:	f43f af02 	beq.w	80111b8 <_strtod_l+0x488>
 80113b4:	2101      	movs	r1, #1
 80113b6:	4620      	mov	r0, r4
 80113b8:	f003 f986 	bl	80146c8 <__i2b>
 80113bc:	4683      	mov	fp, r0
 80113be:	2800      	cmp	r0, #0
 80113c0:	f43f aefa 	beq.w	80111b8 <_strtod_l+0x488>
 80113c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80113c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80113c8:	2e00      	cmp	r6, #0
 80113ca:	bfab      	itete	ge
 80113cc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80113ce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80113d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80113d2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80113d6:	bfac      	ite	ge
 80113d8:	eb06 0a03 	addge.w	sl, r6, r3
 80113dc:	1b9f      	sublt	r7, r3, r6
 80113de:	9b04      	ldr	r3, [sp, #16]
 80113e0:	1af6      	subs	r6, r6, r3
 80113e2:	4416      	add	r6, r2
 80113e4:	4ba0      	ldr	r3, [pc, #640]	; (8011668 <_strtod_l+0x938>)
 80113e6:	3e01      	subs	r6, #1
 80113e8:	429e      	cmp	r6, r3
 80113ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80113ee:	f280 80c4 	bge.w	801157a <_strtod_l+0x84a>
 80113f2:	1b9b      	subs	r3, r3, r6
 80113f4:	2b1f      	cmp	r3, #31
 80113f6:	eba2 0203 	sub.w	r2, r2, r3
 80113fa:	f04f 0101 	mov.w	r1, #1
 80113fe:	f300 80b0 	bgt.w	8011562 <_strtod_l+0x832>
 8011402:	fa01 f303 	lsl.w	r3, r1, r3
 8011406:	930e      	str	r3, [sp, #56]	; 0x38
 8011408:	2300      	movs	r3, #0
 801140a:	930d      	str	r3, [sp, #52]	; 0x34
 801140c:	eb0a 0602 	add.w	r6, sl, r2
 8011410:	9b04      	ldr	r3, [sp, #16]
 8011412:	45b2      	cmp	sl, r6
 8011414:	4417      	add	r7, r2
 8011416:	441f      	add	r7, r3
 8011418:	4653      	mov	r3, sl
 801141a:	bfa8      	it	ge
 801141c:	4633      	movge	r3, r6
 801141e:	42bb      	cmp	r3, r7
 8011420:	bfa8      	it	ge
 8011422:	463b      	movge	r3, r7
 8011424:	2b00      	cmp	r3, #0
 8011426:	bfc2      	ittt	gt
 8011428:	1af6      	subgt	r6, r6, r3
 801142a:	1aff      	subgt	r7, r7, r3
 801142c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8011430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011432:	2b00      	cmp	r3, #0
 8011434:	dd17      	ble.n	8011466 <_strtod_l+0x736>
 8011436:	4659      	mov	r1, fp
 8011438:	461a      	mov	r2, r3
 801143a:	4620      	mov	r0, r4
 801143c:	f003 fa04 	bl	8014848 <__pow5mult>
 8011440:	4683      	mov	fp, r0
 8011442:	2800      	cmp	r0, #0
 8011444:	f43f aeb8 	beq.w	80111b8 <_strtod_l+0x488>
 8011448:	4601      	mov	r1, r0
 801144a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801144c:	4620      	mov	r0, r4
 801144e:	f003 f951 	bl	80146f4 <__multiply>
 8011452:	900b      	str	r0, [sp, #44]	; 0x2c
 8011454:	2800      	cmp	r0, #0
 8011456:	f43f aeaf 	beq.w	80111b8 <_strtod_l+0x488>
 801145a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801145c:	4620      	mov	r0, r4
 801145e:	f003 f833 	bl	80144c8 <_Bfree>
 8011462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011464:	9316      	str	r3, [sp, #88]	; 0x58
 8011466:	2e00      	cmp	r6, #0
 8011468:	f300 808c 	bgt.w	8011584 <_strtod_l+0x854>
 801146c:	9b08      	ldr	r3, [sp, #32]
 801146e:	2b00      	cmp	r3, #0
 8011470:	dd08      	ble.n	8011484 <_strtod_l+0x754>
 8011472:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011474:	9905      	ldr	r1, [sp, #20]
 8011476:	4620      	mov	r0, r4
 8011478:	f003 f9e6 	bl	8014848 <__pow5mult>
 801147c:	9005      	str	r0, [sp, #20]
 801147e:	2800      	cmp	r0, #0
 8011480:	f43f ae9a 	beq.w	80111b8 <_strtod_l+0x488>
 8011484:	2f00      	cmp	r7, #0
 8011486:	dd08      	ble.n	801149a <_strtod_l+0x76a>
 8011488:	9905      	ldr	r1, [sp, #20]
 801148a:	463a      	mov	r2, r7
 801148c:	4620      	mov	r0, r4
 801148e:	f003 fa35 	bl	80148fc <__lshift>
 8011492:	9005      	str	r0, [sp, #20]
 8011494:	2800      	cmp	r0, #0
 8011496:	f43f ae8f 	beq.w	80111b8 <_strtod_l+0x488>
 801149a:	f1ba 0f00 	cmp.w	sl, #0
 801149e:	dd08      	ble.n	80114b2 <_strtod_l+0x782>
 80114a0:	4659      	mov	r1, fp
 80114a2:	4652      	mov	r2, sl
 80114a4:	4620      	mov	r0, r4
 80114a6:	f003 fa29 	bl	80148fc <__lshift>
 80114aa:	4683      	mov	fp, r0
 80114ac:	2800      	cmp	r0, #0
 80114ae:	f43f ae83 	beq.w	80111b8 <_strtod_l+0x488>
 80114b2:	9a05      	ldr	r2, [sp, #20]
 80114b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80114b6:	4620      	mov	r0, r4
 80114b8:	f003 faa8 	bl	8014a0c <__mdiff>
 80114bc:	4605      	mov	r5, r0
 80114be:	2800      	cmp	r0, #0
 80114c0:	f43f ae7a 	beq.w	80111b8 <_strtod_l+0x488>
 80114c4:	68c3      	ldr	r3, [r0, #12]
 80114c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80114c8:	2300      	movs	r3, #0
 80114ca:	60c3      	str	r3, [r0, #12]
 80114cc:	4659      	mov	r1, fp
 80114ce:	f003 fa81 	bl	80149d4 <__mcmp>
 80114d2:	2800      	cmp	r0, #0
 80114d4:	da60      	bge.n	8011598 <_strtod_l+0x868>
 80114d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114d8:	ea53 0308 	orrs.w	r3, r3, r8
 80114dc:	f040 8084 	bne.w	80115e8 <_strtod_l+0x8b8>
 80114e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d17f      	bne.n	80115e8 <_strtod_l+0x8b8>
 80114e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80114ec:	0d1b      	lsrs	r3, r3, #20
 80114ee:	051b      	lsls	r3, r3, #20
 80114f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80114f4:	d978      	bls.n	80115e8 <_strtod_l+0x8b8>
 80114f6:	696b      	ldr	r3, [r5, #20]
 80114f8:	b913      	cbnz	r3, 8011500 <_strtod_l+0x7d0>
 80114fa:	692b      	ldr	r3, [r5, #16]
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	dd73      	ble.n	80115e8 <_strtod_l+0x8b8>
 8011500:	4629      	mov	r1, r5
 8011502:	2201      	movs	r2, #1
 8011504:	4620      	mov	r0, r4
 8011506:	f003 f9f9 	bl	80148fc <__lshift>
 801150a:	4659      	mov	r1, fp
 801150c:	4605      	mov	r5, r0
 801150e:	f003 fa61 	bl	80149d4 <__mcmp>
 8011512:	2800      	cmp	r0, #0
 8011514:	dd68      	ble.n	80115e8 <_strtod_l+0x8b8>
 8011516:	9904      	ldr	r1, [sp, #16]
 8011518:	4a54      	ldr	r2, [pc, #336]	; (801166c <_strtod_l+0x93c>)
 801151a:	464b      	mov	r3, r9
 801151c:	2900      	cmp	r1, #0
 801151e:	f000 8084 	beq.w	801162a <_strtod_l+0x8fa>
 8011522:	ea02 0109 	and.w	r1, r2, r9
 8011526:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801152a:	dc7e      	bgt.n	801162a <_strtod_l+0x8fa>
 801152c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011530:	f77f aeb3 	ble.w	801129a <_strtod_l+0x56a>
 8011534:	4b4e      	ldr	r3, [pc, #312]	; (8011670 <_strtod_l+0x940>)
 8011536:	4640      	mov	r0, r8
 8011538:	4649      	mov	r1, r9
 801153a:	2200      	movs	r2, #0
 801153c:	f7ef f85c 	bl	80005f8 <__aeabi_dmul>
 8011540:	4b4a      	ldr	r3, [pc, #296]	; (801166c <_strtod_l+0x93c>)
 8011542:	400b      	ands	r3, r1
 8011544:	4680      	mov	r8, r0
 8011546:	4689      	mov	r9, r1
 8011548:	2b00      	cmp	r3, #0
 801154a:	f47f ae3f 	bne.w	80111cc <_strtod_l+0x49c>
 801154e:	2322      	movs	r3, #34	; 0x22
 8011550:	6023      	str	r3, [r4, #0]
 8011552:	e63b      	b.n	80111cc <_strtod_l+0x49c>
 8011554:	f04f 32ff 	mov.w	r2, #4294967295
 8011558:	fa02 f303 	lsl.w	r3, r2, r3
 801155c:	ea03 0808 	and.w	r8, r3, r8
 8011560:	e6e8      	b.n	8011334 <_strtod_l+0x604>
 8011562:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011566:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801156a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801156e:	36e2      	adds	r6, #226	; 0xe2
 8011570:	fa01 f306 	lsl.w	r3, r1, r6
 8011574:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8011578:	e748      	b.n	801140c <_strtod_l+0x6dc>
 801157a:	2100      	movs	r1, #0
 801157c:	2301      	movs	r3, #1
 801157e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8011582:	e743      	b.n	801140c <_strtod_l+0x6dc>
 8011584:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011586:	4632      	mov	r2, r6
 8011588:	4620      	mov	r0, r4
 801158a:	f003 f9b7 	bl	80148fc <__lshift>
 801158e:	9016      	str	r0, [sp, #88]	; 0x58
 8011590:	2800      	cmp	r0, #0
 8011592:	f47f af6b 	bne.w	801146c <_strtod_l+0x73c>
 8011596:	e60f      	b.n	80111b8 <_strtod_l+0x488>
 8011598:	46ca      	mov	sl, r9
 801159a:	d171      	bne.n	8011680 <_strtod_l+0x950>
 801159c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801159e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115a2:	b352      	cbz	r2, 80115fa <_strtod_l+0x8ca>
 80115a4:	4a33      	ldr	r2, [pc, #204]	; (8011674 <_strtod_l+0x944>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d12a      	bne.n	8011600 <_strtod_l+0x8d0>
 80115aa:	9b04      	ldr	r3, [sp, #16]
 80115ac:	4641      	mov	r1, r8
 80115ae:	b1fb      	cbz	r3, 80115f0 <_strtod_l+0x8c0>
 80115b0:	4b2e      	ldr	r3, [pc, #184]	; (801166c <_strtod_l+0x93c>)
 80115b2:	ea09 0303 	and.w	r3, r9, r3
 80115b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80115ba:	f04f 32ff 	mov.w	r2, #4294967295
 80115be:	d81a      	bhi.n	80115f6 <_strtod_l+0x8c6>
 80115c0:	0d1b      	lsrs	r3, r3, #20
 80115c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80115c6:	fa02 f303 	lsl.w	r3, r2, r3
 80115ca:	4299      	cmp	r1, r3
 80115cc:	d118      	bne.n	8011600 <_strtod_l+0x8d0>
 80115ce:	4b2a      	ldr	r3, [pc, #168]	; (8011678 <_strtod_l+0x948>)
 80115d0:	459a      	cmp	sl, r3
 80115d2:	d102      	bne.n	80115da <_strtod_l+0x8aa>
 80115d4:	3101      	adds	r1, #1
 80115d6:	f43f adef 	beq.w	80111b8 <_strtod_l+0x488>
 80115da:	4b24      	ldr	r3, [pc, #144]	; (801166c <_strtod_l+0x93c>)
 80115dc:	ea0a 0303 	and.w	r3, sl, r3
 80115e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80115e4:	f04f 0800 	mov.w	r8, #0
 80115e8:	9b04      	ldr	r3, [sp, #16]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1a2      	bne.n	8011534 <_strtod_l+0x804>
 80115ee:	e5ed      	b.n	80111cc <_strtod_l+0x49c>
 80115f0:	f04f 33ff 	mov.w	r3, #4294967295
 80115f4:	e7e9      	b.n	80115ca <_strtod_l+0x89a>
 80115f6:	4613      	mov	r3, r2
 80115f8:	e7e7      	b.n	80115ca <_strtod_l+0x89a>
 80115fa:	ea53 0308 	orrs.w	r3, r3, r8
 80115fe:	d08a      	beq.n	8011516 <_strtod_l+0x7e6>
 8011600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011602:	b1e3      	cbz	r3, 801163e <_strtod_l+0x90e>
 8011604:	ea13 0f0a 	tst.w	r3, sl
 8011608:	d0ee      	beq.n	80115e8 <_strtod_l+0x8b8>
 801160a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801160c:	9a04      	ldr	r2, [sp, #16]
 801160e:	4640      	mov	r0, r8
 8011610:	4649      	mov	r1, r9
 8011612:	b1c3      	cbz	r3, 8011646 <_strtod_l+0x916>
 8011614:	f7ff fb6e 	bl	8010cf4 <sulp>
 8011618:	4602      	mov	r2, r0
 801161a:	460b      	mov	r3, r1
 801161c:	ec51 0b18 	vmov	r0, r1, d8
 8011620:	f7ee fe34 	bl	800028c <__adddf3>
 8011624:	4680      	mov	r8, r0
 8011626:	4689      	mov	r9, r1
 8011628:	e7de      	b.n	80115e8 <_strtod_l+0x8b8>
 801162a:	4013      	ands	r3, r2
 801162c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011630:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011634:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011638:	f04f 38ff 	mov.w	r8, #4294967295
 801163c:	e7d4      	b.n	80115e8 <_strtod_l+0x8b8>
 801163e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011640:	ea13 0f08 	tst.w	r3, r8
 8011644:	e7e0      	b.n	8011608 <_strtod_l+0x8d8>
 8011646:	f7ff fb55 	bl	8010cf4 <sulp>
 801164a:	4602      	mov	r2, r0
 801164c:	460b      	mov	r3, r1
 801164e:	ec51 0b18 	vmov	r0, r1, d8
 8011652:	f7ee fe19 	bl	8000288 <__aeabi_dsub>
 8011656:	2200      	movs	r2, #0
 8011658:	2300      	movs	r3, #0
 801165a:	4680      	mov	r8, r0
 801165c:	4689      	mov	r9, r1
 801165e:	f7ef fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 8011662:	2800      	cmp	r0, #0
 8011664:	d0c0      	beq.n	80115e8 <_strtod_l+0x8b8>
 8011666:	e618      	b.n	801129a <_strtod_l+0x56a>
 8011668:	fffffc02 	.word	0xfffffc02
 801166c:	7ff00000 	.word	0x7ff00000
 8011670:	39500000 	.word	0x39500000
 8011674:	000fffff 	.word	0x000fffff
 8011678:	7fefffff 	.word	0x7fefffff
 801167c:	08016ea8 	.word	0x08016ea8
 8011680:	4659      	mov	r1, fp
 8011682:	4628      	mov	r0, r5
 8011684:	f003 fb16 	bl	8014cb4 <__ratio>
 8011688:	ec57 6b10 	vmov	r6, r7, d0
 801168c:	ee10 0a10 	vmov	r0, s0
 8011690:	2200      	movs	r2, #0
 8011692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011696:	4639      	mov	r1, r7
 8011698:	f7ef fa2a 	bl	8000af0 <__aeabi_dcmple>
 801169c:	2800      	cmp	r0, #0
 801169e:	d071      	beq.n	8011784 <_strtod_l+0xa54>
 80116a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d17c      	bne.n	80117a0 <_strtod_l+0xa70>
 80116a6:	f1b8 0f00 	cmp.w	r8, #0
 80116aa:	d15a      	bne.n	8011762 <_strtod_l+0xa32>
 80116ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d15d      	bne.n	8011770 <_strtod_l+0xa40>
 80116b4:	4b90      	ldr	r3, [pc, #576]	; (80118f8 <_strtod_l+0xbc8>)
 80116b6:	2200      	movs	r2, #0
 80116b8:	4630      	mov	r0, r6
 80116ba:	4639      	mov	r1, r7
 80116bc:	f7ef fa0e 	bl	8000adc <__aeabi_dcmplt>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	d15c      	bne.n	801177e <_strtod_l+0xa4e>
 80116c4:	4630      	mov	r0, r6
 80116c6:	4639      	mov	r1, r7
 80116c8:	4b8c      	ldr	r3, [pc, #560]	; (80118fc <_strtod_l+0xbcc>)
 80116ca:	2200      	movs	r2, #0
 80116cc:	f7ee ff94 	bl	80005f8 <__aeabi_dmul>
 80116d0:	4606      	mov	r6, r0
 80116d2:	460f      	mov	r7, r1
 80116d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80116d8:	9606      	str	r6, [sp, #24]
 80116da:	9307      	str	r3, [sp, #28]
 80116dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80116e4:	4b86      	ldr	r3, [pc, #536]	; (8011900 <_strtod_l+0xbd0>)
 80116e6:	ea0a 0303 	and.w	r3, sl, r3
 80116ea:	930d      	str	r3, [sp, #52]	; 0x34
 80116ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80116ee:	4b85      	ldr	r3, [pc, #532]	; (8011904 <_strtod_l+0xbd4>)
 80116f0:	429a      	cmp	r2, r3
 80116f2:	f040 8090 	bne.w	8011816 <_strtod_l+0xae6>
 80116f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80116fa:	ec49 8b10 	vmov	d0, r8, r9
 80116fe:	f003 fa0f 	bl	8014b20 <__ulp>
 8011702:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011706:	ec51 0b10 	vmov	r0, r1, d0
 801170a:	f7ee ff75 	bl	80005f8 <__aeabi_dmul>
 801170e:	4642      	mov	r2, r8
 8011710:	464b      	mov	r3, r9
 8011712:	f7ee fdbb 	bl	800028c <__adddf3>
 8011716:	460b      	mov	r3, r1
 8011718:	4979      	ldr	r1, [pc, #484]	; (8011900 <_strtod_l+0xbd0>)
 801171a:	4a7b      	ldr	r2, [pc, #492]	; (8011908 <_strtod_l+0xbd8>)
 801171c:	4019      	ands	r1, r3
 801171e:	4291      	cmp	r1, r2
 8011720:	4680      	mov	r8, r0
 8011722:	d944      	bls.n	80117ae <_strtod_l+0xa7e>
 8011724:	ee18 2a90 	vmov	r2, s17
 8011728:	4b78      	ldr	r3, [pc, #480]	; (801190c <_strtod_l+0xbdc>)
 801172a:	429a      	cmp	r2, r3
 801172c:	d104      	bne.n	8011738 <_strtod_l+0xa08>
 801172e:	ee18 3a10 	vmov	r3, s16
 8011732:	3301      	adds	r3, #1
 8011734:	f43f ad40 	beq.w	80111b8 <_strtod_l+0x488>
 8011738:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801190c <_strtod_l+0xbdc>
 801173c:	f04f 38ff 	mov.w	r8, #4294967295
 8011740:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011742:	4620      	mov	r0, r4
 8011744:	f002 fec0 	bl	80144c8 <_Bfree>
 8011748:	9905      	ldr	r1, [sp, #20]
 801174a:	4620      	mov	r0, r4
 801174c:	f002 febc 	bl	80144c8 <_Bfree>
 8011750:	4659      	mov	r1, fp
 8011752:	4620      	mov	r0, r4
 8011754:	f002 feb8 	bl	80144c8 <_Bfree>
 8011758:	4629      	mov	r1, r5
 801175a:	4620      	mov	r0, r4
 801175c:	f002 feb4 	bl	80144c8 <_Bfree>
 8011760:	e609      	b.n	8011376 <_strtod_l+0x646>
 8011762:	f1b8 0f01 	cmp.w	r8, #1
 8011766:	d103      	bne.n	8011770 <_strtod_l+0xa40>
 8011768:	f1b9 0f00 	cmp.w	r9, #0
 801176c:	f43f ad95 	beq.w	801129a <_strtod_l+0x56a>
 8011770:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80118c8 <_strtod_l+0xb98>
 8011774:	4f60      	ldr	r7, [pc, #384]	; (80118f8 <_strtod_l+0xbc8>)
 8011776:	ed8d 7b06 	vstr	d7, [sp, #24]
 801177a:	2600      	movs	r6, #0
 801177c:	e7ae      	b.n	80116dc <_strtod_l+0x9ac>
 801177e:	4f5f      	ldr	r7, [pc, #380]	; (80118fc <_strtod_l+0xbcc>)
 8011780:	2600      	movs	r6, #0
 8011782:	e7a7      	b.n	80116d4 <_strtod_l+0x9a4>
 8011784:	4b5d      	ldr	r3, [pc, #372]	; (80118fc <_strtod_l+0xbcc>)
 8011786:	4630      	mov	r0, r6
 8011788:	4639      	mov	r1, r7
 801178a:	2200      	movs	r2, #0
 801178c:	f7ee ff34 	bl	80005f8 <__aeabi_dmul>
 8011790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011792:	4606      	mov	r6, r0
 8011794:	460f      	mov	r7, r1
 8011796:	2b00      	cmp	r3, #0
 8011798:	d09c      	beq.n	80116d4 <_strtod_l+0x9a4>
 801179a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801179e:	e79d      	b.n	80116dc <_strtod_l+0x9ac>
 80117a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80118d0 <_strtod_l+0xba0>
 80117a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80117a8:	ec57 6b17 	vmov	r6, r7, d7
 80117ac:	e796      	b.n	80116dc <_strtod_l+0x9ac>
 80117ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80117b2:	9b04      	ldr	r3, [sp, #16]
 80117b4:	46ca      	mov	sl, r9
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d1c2      	bne.n	8011740 <_strtod_l+0xa10>
 80117ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80117be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117c0:	0d1b      	lsrs	r3, r3, #20
 80117c2:	051b      	lsls	r3, r3, #20
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d1bb      	bne.n	8011740 <_strtod_l+0xa10>
 80117c8:	4630      	mov	r0, r6
 80117ca:	4639      	mov	r1, r7
 80117cc:	f7ef fa74 	bl	8000cb8 <__aeabi_d2lz>
 80117d0:	f7ee fee4 	bl	800059c <__aeabi_l2d>
 80117d4:	4602      	mov	r2, r0
 80117d6:	460b      	mov	r3, r1
 80117d8:	4630      	mov	r0, r6
 80117da:	4639      	mov	r1, r7
 80117dc:	f7ee fd54 	bl	8000288 <__aeabi_dsub>
 80117e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80117e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117e6:	ea43 0308 	orr.w	r3, r3, r8
 80117ea:	4313      	orrs	r3, r2
 80117ec:	4606      	mov	r6, r0
 80117ee:	460f      	mov	r7, r1
 80117f0:	d054      	beq.n	801189c <_strtod_l+0xb6c>
 80117f2:	a339      	add	r3, pc, #228	; (adr r3, 80118d8 <_strtod_l+0xba8>)
 80117f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f8:	f7ef f970 	bl	8000adc <__aeabi_dcmplt>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	f47f ace5 	bne.w	80111cc <_strtod_l+0x49c>
 8011802:	a337      	add	r3, pc, #220	; (adr r3, 80118e0 <_strtod_l+0xbb0>)
 8011804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011808:	4630      	mov	r0, r6
 801180a:	4639      	mov	r1, r7
 801180c:	f7ef f984 	bl	8000b18 <__aeabi_dcmpgt>
 8011810:	2800      	cmp	r0, #0
 8011812:	d095      	beq.n	8011740 <_strtod_l+0xa10>
 8011814:	e4da      	b.n	80111cc <_strtod_l+0x49c>
 8011816:	9b04      	ldr	r3, [sp, #16]
 8011818:	b333      	cbz	r3, 8011868 <_strtod_l+0xb38>
 801181a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801181c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011820:	d822      	bhi.n	8011868 <_strtod_l+0xb38>
 8011822:	a331      	add	r3, pc, #196	; (adr r3, 80118e8 <_strtod_l+0xbb8>)
 8011824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011828:	4630      	mov	r0, r6
 801182a:	4639      	mov	r1, r7
 801182c:	f7ef f960 	bl	8000af0 <__aeabi_dcmple>
 8011830:	b1a0      	cbz	r0, 801185c <_strtod_l+0xb2c>
 8011832:	4639      	mov	r1, r7
 8011834:	4630      	mov	r0, r6
 8011836:	f7ef f9b7 	bl	8000ba8 <__aeabi_d2uiz>
 801183a:	2801      	cmp	r0, #1
 801183c:	bf38      	it	cc
 801183e:	2001      	movcc	r0, #1
 8011840:	f7ee fe60 	bl	8000504 <__aeabi_ui2d>
 8011844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011846:	4606      	mov	r6, r0
 8011848:	460f      	mov	r7, r1
 801184a:	bb23      	cbnz	r3, 8011896 <_strtod_l+0xb66>
 801184c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011850:	9010      	str	r0, [sp, #64]	; 0x40
 8011852:	9311      	str	r3, [sp, #68]	; 0x44
 8011854:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011858:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801185c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801185e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011860:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011864:	1a9b      	subs	r3, r3, r2
 8011866:	930f      	str	r3, [sp, #60]	; 0x3c
 8011868:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801186c:	eeb0 0a48 	vmov.f32	s0, s16
 8011870:	eef0 0a68 	vmov.f32	s1, s17
 8011874:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011878:	f003 f952 	bl	8014b20 <__ulp>
 801187c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011880:	ec53 2b10 	vmov	r2, r3, d0
 8011884:	f7ee feb8 	bl	80005f8 <__aeabi_dmul>
 8011888:	ec53 2b18 	vmov	r2, r3, d8
 801188c:	f7ee fcfe 	bl	800028c <__adddf3>
 8011890:	4680      	mov	r8, r0
 8011892:	4689      	mov	r9, r1
 8011894:	e78d      	b.n	80117b2 <_strtod_l+0xa82>
 8011896:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801189a:	e7db      	b.n	8011854 <_strtod_l+0xb24>
 801189c:	a314      	add	r3, pc, #80	; (adr r3, 80118f0 <_strtod_l+0xbc0>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	f7ef f91b 	bl	8000adc <__aeabi_dcmplt>
 80118a6:	e7b3      	b.n	8011810 <_strtod_l+0xae0>
 80118a8:	2300      	movs	r3, #0
 80118aa:	930a      	str	r3, [sp, #40]	; 0x28
 80118ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80118ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118b0:	6013      	str	r3, [r2, #0]
 80118b2:	f7ff ba7c 	b.w	8010dae <_strtod_l+0x7e>
 80118b6:	2a65      	cmp	r2, #101	; 0x65
 80118b8:	f43f ab75 	beq.w	8010fa6 <_strtod_l+0x276>
 80118bc:	2a45      	cmp	r2, #69	; 0x45
 80118be:	f43f ab72 	beq.w	8010fa6 <_strtod_l+0x276>
 80118c2:	2301      	movs	r3, #1
 80118c4:	f7ff bbaa 	b.w	801101c <_strtod_l+0x2ec>
 80118c8:	00000000 	.word	0x00000000
 80118cc:	bff00000 	.word	0xbff00000
 80118d0:	00000000 	.word	0x00000000
 80118d4:	3ff00000 	.word	0x3ff00000
 80118d8:	94a03595 	.word	0x94a03595
 80118dc:	3fdfffff 	.word	0x3fdfffff
 80118e0:	35afe535 	.word	0x35afe535
 80118e4:	3fe00000 	.word	0x3fe00000
 80118e8:	ffc00000 	.word	0xffc00000
 80118ec:	41dfffff 	.word	0x41dfffff
 80118f0:	94a03595 	.word	0x94a03595
 80118f4:	3fcfffff 	.word	0x3fcfffff
 80118f8:	3ff00000 	.word	0x3ff00000
 80118fc:	3fe00000 	.word	0x3fe00000
 8011900:	7ff00000 	.word	0x7ff00000
 8011904:	7fe00000 	.word	0x7fe00000
 8011908:	7c9fffff 	.word	0x7c9fffff
 801190c:	7fefffff 	.word	0x7fefffff

08011910 <_strtod_r>:
 8011910:	4b01      	ldr	r3, [pc, #4]	; (8011918 <_strtod_r+0x8>)
 8011912:	f7ff ba0d 	b.w	8010d30 <_strtod_l>
 8011916:	bf00      	nop
 8011918:	2000039c 	.word	0x2000039c

0801191c <_strtol_l.constprop.0>:
 801191c:	2b01      	cmp	r3, #1
 801191e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011922:	d001      	beq.n	8011928 <_strtol_l.constprop.0+0xc>
 8011924:	2b24      	cmp	r3, #36	; 0x24
 8011926:	d906      	bls.n	8011936 <_strtol_l.constprop.0+0x1a>
 8011928:	f001 faf4 	bl	8012f14 <__errno>
 801192c:	2316      	movs	r3, #22
 801192e:	6003      	str	r3, [r0, #0]
 8011930:	2000      	movs	r0, #0
 8011932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011936:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011a1c <_strtol_l.constprop.0+0x100>
 801193a:	460d      	mov	r5, r1
 801193c:	462e      	mov	r6, r5
 801193e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011942:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011946:	f017 0708 	ands.w	r7, r7, #8
 801194a:	d1f7      	bne.n	801193c <_strtol_l.constprop.0+0x20>
 801194c:	2c2d      	cmp	r4, #45	; 0x2d
 801194e:	d132      	bne.n	80119b6 <_strtol_l.constprop.0+0x9a>
 8011950:	782c      	ldrb	r4, [r5, #0]
 8011952:	2701      	movs	r7, #1
 8011954:	1cb5      	adds	r5, r6, #2
 8011956:	2b00      	cmp	r3, #0
 8011958:	d05b      	beq.n	8011a12 <_strtol_l.constprop.0+0xf6>
 801195a:	2b10      	cmp	r3, #16
 801195c:	d109      	bne.n	8011972 <_strtol_l.constprop.0+0x56>
 801195e:	2c30      	cmp	r4, #48	; 0x30
 8011960:	d107      	bne.n	8011972 <_strtol_l.constprop.0+0x56>
 8011962:	782c      	ldrb	r4, [r5, #0]
 8011964:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011968:	2c58      	cmp	r4, #88	; 0x58
 801196a:	d14d      	bne.n	8011a08 <_strtol_l.constprop.0+0xec>
 801196c:	786c      	ldrb	r4, [r5, #1]
 801196e:	2310      	movs	r3, #16
 8011970:	3502      	adds	r5, #2
 8011972:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011976:	f108 38ff 	add.w	r8, r8, #4294967295
 801197a:	f04f 0e00 	mov.w	lr, #0
 801197e:	fbb8 f9f3 	udiv	r9, r8, r3
 8011982:	4676      	mov	r6, lr
 8011984:	fb03 8a19 	mls	sl, r3, r9, r8
 8011988:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801198c:	f1bc 0f09 	cmp.w	ip, #9
 8011990:	d816      	bhi.n	80119c0 <_strtol_l.constprop.0+0xa4>
 8011992:	4664      	mov	r4, ip
 8011994:	42a3      	cmp	r3, r4
 8011996:	dd24      	ble.n	80119e2 <_strtol_l.constprop.0+0xc6>
 8011998:	f1be 3fff 	cmp.w	lr, #4294967295
 801199c:	d008      	beq.n	80119b0 <_strtol_l.constprop.0+0x94>
 801199e:	45b1      	cmp	r9, r6
 80119a0:	d31c      	bcc.n	80119dc <_strtol_l.constprop.0+0xc0>
 80119a2:	d101      	bne.n	80119a8 <_strtol_l.constprop.0+0x8c>
 80119a4:	45a2      	cmp	sl, r4
 80119a6:	db19      	blt.n	80119dc <_strtol_l.constprop.0+0xc0>
 80119a8:	fb06 4603 	mla	r6, r6, r3, r4
 80119ac:	f04f 0e01 	mov.w	lr, #1
 80119b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119b4:	e7e8      	b.n	8011988 <_strtol_l.constprop.0+0x6c>
 80119b6:	2c2b      	cmp	r4, #43	; 0x2b
 80119b8:	bf04      	itt	eq
 80119ba:	782c      	ldrbeq	r4, [r5, #0]
 80119bc:	1cb5      	addeq	r5, r6, #2
 80119be:	e7ca      	b.n	8011956 <_strtol_l.constprop.0+0x3a>
 80119c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80119c4:	f1bc 0f19 	cmp.w	ip, #25
 80119c8:	d801      	bhi.n	80119ce <_strtol_l.constprop.0+0xb2>
 80119ca:	3c37      	subs	r4, #55	; 0x37
 80119cc:	e7e2      	b.n	8011994 <_strtol_l.constprop.0+0x78>
 80119ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80119d2:	f1bc 0f19 	cmp.w	ip, #25
 80119d6:	d804      	bhi.n	80119e2 <_strtol_l.constprop.0+0xc6>
 80119d8:	3c57      	subs	r4, #87	; 0x57
 80119da:	e7db      	b.n	8011994 <_strtol_l.constprop.0+0x78>
 80119dc:	f04f 3eff 	mov.w	lr, #4294967295
 80119e0:	e7e6      	b.n	80119b0 <_strtol_l.constprop.0+0x94>
 80119e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80119e6:	d105      	bne.n	80119f4 <_strtol_l.constprop.0+0xd8>
 80119e8:	2322      	movs	r3, #34	; 0x22
 80119ea:	6003      	str	r3, [r0, #0]
 80119ec:	4646      	mov	r6, r8
 80119ee:	b942      	cbnz	r2, 8011a02 <_strtol_l.constprop.0+0xe6>
 80119f0:	4630      	mov	r0, r6
 80119f2:	e79e      	b.n	8011932 <_strtol_l.constprop.0+0x16>
 80119f4:	b107      	cbz	r7, 80119f8 <_strtol_l.constprop.0+0xdc>
 80119f6:	4276      	negs	r6, r6
 80119f8:	2a00      	cmp	r2, #0
 80119fa:	d0f9      	beq.n	80119f0 <_strtol_l.constprop.0+0xd4>
 80119fc:	f1be 0f00 	cmp.w	lr, #0
 8011a00:	d000      	beq.n	8011a04 <_strtol_l.constprop.0+0xe8>
 8011a02:	1e69      	subs	r1, r5, #1
 8011a04:	6011      	str	r1, [r2, #0]
 8011a06:	e7f3      	b.n	80119f0 <_strtol_l.constprop.0+0xd4>
 8011a08:	2430      	movs	r4, #48	; 0x30
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d1b1      	bne.n	8011972 <_strtol_l.constprop.0+0x56>
 8011a0e:	2308      	movs	r3, #8
 8011a10:	e7af      	b.n	8011972 <_strtol_l.constprop.0+0x56>
 8011a12:	2c30      	cmp	r4, #48	; 0x30
 8011a14:	d0a5      	beq.n	8011962 <_strtol_l.constprop.0+0x46>
 8011a16:	230a      	movs	r3, #10
 8011a18:	e7ab      	b.n	8011972 <_strtol_l.constprop.0+0x56>
 8011a1a:	bf00      	nop
 8011a1c:	08016ed1 	.word	0x08016ed1

08011a20 <_strtol_r>:
 8011a20:	f7ff bf7c 	b.w	801191c <_strtol_l.constprop.0>

08011a24 <strtol>:
 8011a24:	4613      	mov	r3, r2
 8011a26:	460a      	mov	r2, r1
 8011a28:	4601      	mov	r1, r0
 8011a2a:	4802      	ldr	r0, [pc, #8]	; (8011a34 <strtol+0x10>)
 8011a2c:	6800      	ldr	r0, [r0, #0]
 8011a2e:	f7ff bf75 	b.w	801191c <_strtol_l.constprop.0>
 8011a32:	bf00      	nop
 8011a34:	20000554 	.word	0x20000554

08011a38 <toupper>:
 8011a38:	4b03      	ldr	r3, [pc, #12]	; (8011a48 <toupper+0x10>)
 8011a3a:	5c1b      	ldrb	r3, [r3, r0]
 8011a3c:	f003 0303 	and.w	r3, r3, #3
 8011a40:	2b02      	cmp	r3, #2
 8011a42:	bf08      	it	eq
 8011a44:	3820      	subeq	r0, #32
 8011a46:	4770      	bx	lr
 8011a48:	08016ed1 	.word	0x08016ed1

08011a4c <__cvt>:
 8011a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a50:	ec55 4b10 	vmov	r4, r5, d0
 8011a54:	2d00      	cmp	r5, #0
 8011a56:	460e      	mov	r6, r1
 8011a58:	4619      	mov	r1, r3
 8011a5a:	462b      	mov	r3, r5
 8011a5c:	bfbb      	ittet	lt
 8011a5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011a62:	461d      	movlt	r5, r3
 8011a64:	2300      	movge	r3, #0
 8011a66:	232d      	movlt	r3, #45	; 0x2d
 8011a68:	700b      	strb	r3, [r1, #0]
 8011a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011a70:	4691      	mov	r9, r2
 8011a72:	f023 0820 	bic.w	r8, r3, #32
 8011a76:	bfbc      	itt	lt
 8011a78:	4622      	movlt	r2, r4
 8011a7a:	4614      	movlt	r4, r2
 8011a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011a80:	d005      	beq.n	8011a8e <__cvt+0x42>
 8011a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011a86:	d100      	bne.n	8011a8a <__cvt+0x3e>
 8011a88:	3601      	adds	r6, #1
 8011a8a:	2102      	movs	r1, #2
 8011a8c:	e000      	b.n	8011a90 <__cvt+0x44>
 8011a8e:	2103      	movs	r1, #3
 8011a90:	ab03      	add	r3, sp, #12
 8011a92:	9301      	str	r3, [sp, #4]
 8011a94:	ab02      	add	r3, sp, #8
 8011a96:	9300      	str	r3, [sp, #0]
 8011a98:	ec45 4b10 	vmov	d0, r4, r5
 8011a9c:	4653      	mov	r3, sl
 8011a9e:	4632      	mov	r2, r6
 8011aa0:	f001 fb2a 	bl	80130f8 <_dtoa_r>
 8011aa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011aa8:	4607      	mov	r7, r0
 8011aaa:	d102      	bne.n	8011ab2 <__cvt+0x66>
 8011aac:	f019 0f01 	tst.w	r9, #1
 8011ab0:	d022      	beq.n	8011af8 <__cvt+0xac>
 8011ab2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011ab6:	eb07 0906 	add.w	r9, r7, r6
 8011aba:	d110      	bne.n	8011ade <__cvt+0x92>
 8011abc:	783b      	ldrb	r3, [r7, #0]
 8011abe:	2b30      	cmp	r3, #48	; 0x30
 8011ac0:	d10a      	bne.n	8011ad8 <__cvt+0x8c>
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	4629      	mov	r1, r5
 8011aca:	f7ee fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ace:	b918      	cbnz	r0, 8011ad8 <__cvt+0x8c>
 8011ad0:	f1c6 0601 	rsb	r6, r6, #1
 8011ad4:	f8ca 6000 	str.w	r6, [sl]
 8011ad8:	f8da 3000 	ldr.w	r3, [sl]
 8011adc:	4499      	add	r9, r3
 8011ade:	2200      	movs	r2, #0
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	f7ee ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8011aea:	b108      	cbz	r0, 8011af0 <__cvt+0xa4>
 8011aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8011af0:	2230      	movs	r2, #48	; 0x30
 8011af2:	9b03      	ldr	r3, [sp, #12]
 8011af4:	454b      	cmp	r3, r9
 8011af6:	d307      	bcc.n	8011b08 <__cvt+0xbc>
 8011af8:	9b03      	ldr	r3, [sp, #12]
 8011afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011afc:	1bdb      	subs	r3, r3, r7
 8011afe:	4638      	mov	r0, r7
 8011b00:	6013      	str	r3, [r2, #0]
 8011b02:	b004      	add	sp, #16
 8011b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b08:	1c59      	adds	r1, r3, #1
 8011b0a:	9103      	str	r1, [sp, #12]
 8011b0c:	701a      	strb	r2, [r3, #0]
 8011b0e:	e7f0      	b.n	8011af2 <__cvt+0xa6>

08011b10 <__exponent>:
 8011b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b12:	4603      	mov	r3, r0
 8011b14:	2900      	cmp	r1, #0
 8011b16:	bfb8      	it	lt
 8011b18:	4249      	neglt	r1, r1
 8011b1a:	f803 2b02 	strb.w	r2, [r3], #2
 8011b1e:	bfb4      	ite	lt
 8011b20:	222d      	movlt	r2, #45	; 0x2d
 8011b22:	222b      	movge	r2, #43	; 0x2b
 8011b24:	2909      	cmp	r1, #9
 8011b26:	7042      	strb	r2, [r0, #1]
 8011b28:	dd2a      	ble.n	8011b80 <__exponent+0x70>
 8011b2a:	f10d 0207 	add.w	r2, sp, #7
 8011b2e:	4617      	mov	r7, r2
 8011b30:	260a      	movs	r6, #10
 8011b32:	4694      	mov	ip, r2
 8011b34:	fb91 f5f6 	sdiv	r5, r1, r6
 8011b38:	fb06 1415 	mls	r4, r6, r5, r1
 8011b3c:	3430      	adds	r4, #48	; 0x30
 8011b3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011b42:	460c      	mov	r4, r1
 8011b44:	2c63      	cmp	r4, #99	; 0x63
 8011b46:	f102 32ff 	add.w	r2, r2, #4294967295
 8011b4a:	4629      	mov	r1, r5
 8011b4c:	dcf1      	bgt.n	8011b32 <__exponent+0x22>
 8011b4e:	3130      	adds	r1, #48	; 0x30
 8011b50:	f1ac 0402 	sub.w	r4, ip, #2
 8011b54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011b58:	1c41      	adds	r1, r0, #1
 8011b5a:	4622      	mov	r2, r4
 8011b5c:	42ba      	cmp	r2, r7
 8011b5e:	d30a      	bcc.n	8011b76 <__exponent+0x66>
 8011b60:	f10d 0209 	add.w	r2, sp, #9
 8011b64:	eba2 020c 	sub.w	r2, r2, ip
 8011b68:	42bc      	cmp	r4, r7
 8011b6a:	bf88      	it	hi
 8011b6c:	2200      	movhi	r2, #0
 8011b6e:	4413      	add	r3, r2
 8011b70:	1a18      	subs	r0, r3, r0
 8011b72:	b003      	add	sp, #12
 8011b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b76:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011b7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011b7e:	e7ed      	b.n	8011b5c <__exponent+0x4c>
 8011b80:	2330      	movs	r3, #48	; 0x30
 8011b82:	3130      	adds	r1, #48	; 0x30
 8011b84:	7083      	strb	r3, [r0, #2]
 8011b86:	70c1      	strb	r1, [r0, #3]
 8011b88:	1d03      	adds	r3, r0, #4
 8011b8a:	e7f1      	b.n	8011b70 <__exponent+0x60>

08011b8c <_printf_float>:
 8011b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b90:	ed2d 8b02 	vpush	{d8}
 8011b94:	b08d      	sub	sp, #52	; 0x34
 8011b96:	460c      	mov	r4, r1
 8011b98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011b9c:	4616      	mov	r6, r2
 8011b9e:	461f      	mov	r7, r3
 8011ba0:	4605      	mov	r5, r0
 8011ba2:	f001 f95d 	bl	8012e60 <_localeconv_r>
 8011ba6:	f8d0 a000 	ldr.w	sl, [r0]
 8011baa:	4650      	mov	r0, sl
 8011bac:	f7ee fb60 	bl	8000270 <strlen>
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8011bb4:	6823      	ldr	r3, [r4, #0]
 8011bb6:	9305      	str	r3, [sp, #20]
 8011bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8011bbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011bc0:	3307      	adds	r3, #7
 8011bc2:	f023 0307 	bic.w	r3, r3, #7
 8011bc6:	f103 0208 	add.w	r2, r3, #8
 8011bca:	f8c8 2000 	str.w	r2, [r8]
 8011bce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011bd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011bd6:	9307      	str	r3, [sp, #28]
 8011bd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8011bdc:	ee08 0a10 	vmov	s16, r0
 8011be0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011be4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011be8:	4b9e      	ldr	r3, [pc, #632]	; (8011e64 <_printf_float+0x2d8>)
 8011bea:	f04f 32ff 	mov.w	r2, #4294967295
 8011bee:	f7ee ff9d 	bl	8000b2c <__aeabi_dcmpun>
 8011bf2:	bb88      	cbnz	r0, 8011c58 <_printf_float+0xcc>
 8011bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bf8:	4b9a      	ldr	r3, [pc, #616]	; (8011e64 <_printf_float+0x2d8>)
 8011bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8011bfe:	f7ee ff77 	bl	8000af0 <__aeabi_dcmple>
 8011c02:	bb48      	cbnz	r0, 8011c58 <_printf_float+0xcc>
 8011c04:	2200      	movs	r2, #0
 8011c06:	2300      	movs	r3, #0
 8011c08:	4640      	mov	r0, r8
 8011c0a:	4649      	mov	r1, r9
 8011c0c:	f7ee ff66 	bl	8000adc <__aeabi_dcmplt>
 8011c10:	b110      	cbz	r0, 8011c18 <_printf_float+0x8c>
 8011c12:	232d      	movs	r3, #45	; 0x2d
 8011c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c18:	4a93      	ldr	r2, [pc, #588]	; (8011e68 <_printf_float+0x2dc>)
 8011c1a:	4b94      	ldr	r3, [pc, #592]	; (8011e6c <_printf_float+0x2e0>)
 8011c1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011c20:	bf94      	ite	ls
 8011c22:	4690      	movls	r8, r2
 8011c24:	4698      	movhi	r8, r3
 8011c26:	2303      	movs	r3, #3
 8011c28:	6123      	str	r3, [r4, #16]
 8011c2a:	9b05      	ldr	r3, [sp, #20]
 8011c2c:	f023 0304 	bic.w	r3, r3, #4
 8011c30:	6023      	str	r3, [r4, #0]
 8011c32:	f04f 0900 	mov.w	r9, #0
 8011c36:	9700      	str	r7, [sp, #0]
 8011c38:	4633      	mov	r3, r6
 8011c3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f000 f9da 	bl	8011ff8 <_printf_common>
 8011c44:	3001      	adds	r0, #1
 8011c46:	f040 8090 	bne.w	8011d6a <_printf_float+0x1de>
 8011c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c4e:	b00d      	add	sp, #52	; 0x34
 8011c50:	ecbd 8b02 	vpop	{d8}
 8011c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c58:	4642      	mov	r2, r8
 8011c5a:	464b      	mov	r3, r9
 8011c5c:	4640      	mov	r0, r8
 8011c5e:	4649      	mov	r1, r9
 8011c60:	f7ee ff64 	bl	8000b2c <__aeabi_dcmpun>
 8011c64:	b140      	cbz	r0, 8011c78 <_printf_float+0xec>
 8011c66:	464b      	mov	r3, r9
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	bfbc      	itt	lt
 8011c6c:	232d      	movlt	r3, #45	; 0x2d
 8011c6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011c72:	4a7f      	ldr	r2, [pc, #508]	; (8011e70 <_printf_float+0x2e4>)
 8011c74:	4b7f      	ldr	r3, [pc, #508]	; (8011e74 <_printf_float+0x2e8>)
 8011c76:	e7d1      	b.n	8011c1c <_printf_float+0x90>
 8011c78:	6863      	ldr	r3, [r4, #4]
 8011c7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011c7e:	9206      	str	r2, [sp, #24]
 8011c80:	1c5a      	adds	r2, r3, #1
 8011c82:	d13f      	bne.n	8011d04 <_printf_float+0x178>
 8011c84:	2306      	movs	r3, #6
 8011c86:	6063      	str	r3, [r4, #4]
 8011c88:	9b05      	ldr	r3, [sp, #20]
 8011c8a:	6861      	ldr	r1, [r4, #4]
 8011c8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011c90:	2300      	movs	r3, #0
 8011c92:	9303      	str	r3, [sp, #12]
 8011c94:	ab0a      	add	r3, sp, #40	; 0x28
 8011c96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011c9a:	ab09      	add	r3, sp, #36	; 0x24
 8011c9c:	ec49 8b10 	vmov	d0, r8, r9
 8011ca0:	9300      	str	r3, [sp, #0]
 8011ca2:	6022      	str	r2, [r4, #0]
 8011ca4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011ca8:	4628      	mov	r0, r5
 8011caa:	f7ff fecf 	bl	8011a4c <__cvt>
 8011cae:	9b06      	ldr	r3, [sp, #24]
 8011cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011cb2:	2b47      	cmp	r3, #71	; 0x47
 8011cb4:	4680      	mov	r8, r0
 8011cb6:	d108      	bne.n	8011cca <_printf_float+0x13e>
 8011cb8:	1cc8      	adds	r0, r1, #3
 8011cba:	db02      	blt.n	8011cc2 <_printf_float+0x136>
 8011cbc:	6863      	ldr	r3, [r4, #4]
 8011cbe:	4299      	cmp	r1, r3
 8011cc0:	dd41      	ble.n	8011d46 <_printf_float+0x1ba>
 8011cc2:	f1ab 0302 	sub.w	r3, fp, #2
 8011cc6:	fa5f fb83 	uxtb.w	fp, r3
 8011cca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011cce:	d820      	bhi.n	8011d12 <_printf_float+0x186>
 8011cd0:	3901      	subs	r1, #1
 8011cd2:	465a      	mov	r2, fp
 8011cd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011cd8:	9109      	str	r1, [sp, #36]	; 0x24
 8011cda:	f7ff ff19 	bl	8011b10 <__exponent>
 8011cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ce0:	1813      	adds	r3, r2, r0
 8011ce2:	2a01      	cmp	r2, #1
 8011ce4:	4681      	mov	r9, r0
 8011ce6:	6123      	str	r3, [r4, #16]
 8011ce8:	dc02      	bgt.n	8011cf0 <_printf_float+0x164>
 8011cea:	6822      	ldr	r2, [r4, #0]
 8011cec:	07d2      	lsls	r2, r2, #31
 8011cee:	d501      	bpl.n	8011cf4 <_printf_float+0x168>
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	6123      	str	r3, [r4, #16]
 8011cf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d09c      	beq.n	8011c36 <_printf_float+0xaa>
 8011cfc:	232d      	movs	r3, #45	; 0x2d
 8011cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d02:	e798      	b.n	8011c36 <_printf_float+0xaa>
 8011d04:	9a06      	ldr	r2, [sp, #24]
 8011d06:	2a47      	cmp	r2, #71	; 0x47
 8011d08:	d1be      	bne.n	8011c88 <_printf_float+0xfc>
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d1bc      	bne.n	8011c88 <_printf_float+0xfc>
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e7b9      	b.n	8011c86 <_printf_float+0xfa>
 8011d12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011d16:	d118      	bne.n	8011d4a <_printf_float+0x1be>
 8011d18:	2900      	cmp	r1, #0
 8011d1a:	6863      	ldr	r3, [r4, #4]
 8011d1c:	dd0b      	ble.n	8011d36 <_printf_float+0x1aa>
 8011d1e:	6121      	str	r1, [r4, #16]
 8011d20:	b913      	cbnz	r3, 8011d28 <_printf_float+0x19c>
 8011d22:	6822      	ldr	r2, [r4, #0]
 8011d24:	07d0      	lsls	r0, r2, #31
 8011d26:	d502      	bpl.n	8011d2e <_printf_float+0x1a2>
 8011d28:	3301      	adds	r3, #1
 8011d2a:	440b      	add	r3, r1
 8011d2c:	6123      	str	r3, [r4, #16]
 8011d2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011d30:	f04f 0900 	mov.w	r9, #0
 8011d34:	e7de      	b.n	8011cf4 <_printf_float+0x168>
 8011d36:	b913      	cbnz	r3, 8011d3e <_printf_float+0x1b2>
 8011d38:	6822      	ldr	r2, [r4, #0]
 8011d3a:	07d2      	lsls	r2, r2, #31
 8011d3c:	d501      	bpl.n	8011d42 <_printf_float+0x1b6>
 8011d3e:	3302      	adds	r3, #2
 8011d40:	e7f4      	b.n	8011d2c <_printf_float+0x1a0>
 8011d42:	2301      	movs	r3, #1
 8011d44:	e7f2      	b.n	8011d2c <_printf_float+0x1a0>
 8011d46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d4c:	4299      	cmp	r1, r3
 8011d4e:	db05      	blt.n	8011d5c <_printf_float+0x1d0>
 8011d50:	6823      	ldr	r3, [r4, #0]
 8011d52:	6121      	str	r1, [r4, #16]
 8011d54:	07d8      	lsls	r0, r3, #31
 8011d56:	d5ea      	bpl.n	8011d2e <_printf_float+0x1a2>
 8011d58:	1c4b      	adds	r3, r1, #1
 8011d5a:	e7e7      	b.n	8011d2c <_printf_float+0x1a0>
 8011d5c:	2900      	cmp	r1, #0
 8011d5e:	bfd4      	ite	le
 8011d60:	f1c1 0202 	rsble	r2, r1, #2
 8011d64:	2201      	movgt	r2, #1
 8011d66:	4413      	add	r3, r2
 8011d68:	e7e0      	b.n	8011d2c <_printf_float+0x1a0>
 8011d6a:	6823      	ldr	r3, [r4, #0]
 8011d6c:	055a      	lsls	r2, r3, #21
 8011d6e:	d407      	bmi.n	8011d80 <_printf_float+0x1f4>
 8011d70:	6923      	ldr	r3, [r4, #16]
 8011d72:	4642      	mov	r2, r8
 8011d74:	4631      	mov	r1, r6
 8011d76:	4628      	mov	r0, r5
 8011d78:	47b8      	blx	r7
 8011d7a:	3001      	adds	r0, #1
 8011d7c:	d12c      	bne.n	8011dd8 <_printf_float+0x24c>
 8011d7e:	e764      	b.n	8011c4a <_printf_float+0xbe>
 8011d80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011d84:	f240 80e0 	bls.w	8011f48 <_printf_float+0x3bc>
 8011d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f7ee fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d94:	2800      	cmp	r0, #0
 8011d96:	d034      	beq.n	8011e02 <_printf_float+0x276>
 8011d98:	4a37      	ldr	r2, [pc, #220]	; (8011e78 <_printf_float+0x2ec>)
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	4631      	mov	r1, r6
 8011d9e:	4628      	mov	r0, r5
 8011da0:	47b8      	blx	r7
 8011da2:	3001      	adds	r0, #1
 8011da4:	f43f af51 	beq.w	8011c4a <_printf_float+0xbe>
 8011da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dac:	429a      	cmp	r2, r3
 8011dae:	db02      	blt.n	8011db6 <_printf_float+0x22a>
 8011db0:	6823      	ldr	r3, [r4, #0]
 8011db2:	07d8      	lsls	r0, r3, #31
 8011db4:	d510      	bpl.n	8011dd8 <_printf_float+0x24c>
 8011db6:	ee18 3a10 	vmov	r3, s16
 8011dba:	4652      	mov	r2, sl
 8011dbc:	4631      	mov	r1, r6
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	47b8      	blx	r7
 8011dc2:	3001      	adds	r0, #1
 8011dc4:	f43f af41 	beq.w	8011c4a <_printf_float+0xbe>
 8011dc8:	f04f 0800 	mov.w	r8, #0
 8011dcc:	f104 091a 	add.w	r9, r4, #26
 8011dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dd2:	3b01      	subs	r3, #1
 8011dd4:	4543      	cmp	r3, r8
 8011dd6:	dc09      	bgt.n	8011dec <_printf_float+0x260>
 8011dd8:	6823      	ldr	r3, [r4, #0]
 8011dda:	079b      	lsls	r3, r3, #30
 8011ddc:	f100 8107 	bmi.w	8011fee <_printf_float+0x462>
 8011de0:	68e0      	ldr	r0, [r4, #12]
 8011de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011de4:	4298      	cmp	r0, r3
 8011de6:	bfb8      	it	lt
 8011de8:	4618      	movlt	r0, r3
 8011dea:	e730      	b.n	8011c4e <_printf_float+0xc2>
 8011dec:	2301      	movs	r3, #1
 8011dee:	464a      	mov	r2, r9
 8011df0:	4631      	mov	r1, r6
 8011df2:	4628      	mov	r0, r5
 8011df4:	47b8      	blx	r7
 8011df6:	3001      	adds	r0, #1
 8011df8:	f43f af27 	beq.w	8011c4a <_printf_float+0xbe>
 8011dfc:	f108 0801 	add.w	r8, r8, #1
 8011e00:	e7e6      	b.n	8011dd0 <_printf_float+0x244>
 8011e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	dc39      	bgt.n	8011e7c <_printf_float+0x2f0>
 8011e08:	4a1b      	ldr	r2, [pc, #108]	; (8011e78 <_printf_float+0x2ec>)
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	4631      	mov	r1, r6
 8011e0e:	4628      	mov	r0, r5
 8011e10:	47b8      	blx	r7
 8011e12:	3001      	adds	r0, #1
 8011e14:	f43f af19 	beq.w	8011c4a <_printf_float+0xbe>
 8011e18:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011e1c:	4313      	orrs	r3, r2
 8011e1e:	d102      	bne.n	8011e26 <_printf_float+0x29a>
 8011e20:	6823      	ldr	r3, [r4, #0]
 8011e22:	07d9      	lsls	r1, r3, #31
 8011e24:	d5d8      	bpl.n	8011dd8 <_printf_float+0x24c>
 8011e26:	ee18 3a10 	vmov	r3, s16
 8011e2a:	4652      	mov	r2, sl
 8011e2c:	4631      	mov	r1, r6
 8011e2e:	4628      	mov	r0, r5
 8011e30:	47b8      	blx	r7
 8011e32:	3001      	adds	r0, #1
 8011e34:	f43f af09 	beq.w	8011c4a <_printf_float+0xbe>
 8011e38:	f04f 0900 	mov.w	r9, #0
 8011e3c:	f104 0a1a 	add.w	sl, r4, #26
 8011e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e42:	425b      	negs	r3, r3
 8011e44:	454b      	cmp	r3, r9
 8011e46:	dc01      	bgt.n	8011e4c <_printf_float+0x2c0>
 8011e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e4a:	e792      	b.n	8011d72 <_printf_float+0x1e6>
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	4652      	mov	r2, sl
 8011e50:	4631      	mov	r1, r6
 8011e52:	4628      	mov	r0, r5
 8011e54:	47b8      	blx	r7
 8011e56:	3001      	adds	r0, #1
 8011e58:	f43f aef7 	beq.w	8011c4a <_printf_float+0xbe>
 8011e5c:	f109 0901 	add.w	r9, r9, #1
 8011e60:	e7ee      	b.n	8011e40 <_printf_float+0x2b4>
 8011e62:	bf00      	nop
 8011e64:	7fefffff 	.word	0x7fefffff
 8011e68:	08016fd1 	.word	0x08016fd1
 8011e6c:	08016fd5 	.word	0x08016fd5
 8011e70:	08016fd9 	.word	0x08016fd9
 8011e74:	08016fdd 	.word	0x08016fdd
 8011e78:	08017313 	.word	0x08017313
 8011e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e80:	429a      	cmp	r2, r3
 8011e82:	bfa8      	it	ge
 8011e84:	461a      	movge	r2, r3
 8011e86:	2a00      	cmp	r2, #0
 8011e88:	4691      	mov	r9, r2
 8011e8a:	dc37      	bgt.n	8011efc <_printf_float+0x370>
 8011e8c:	f04f 0b00 	mov.w	fp, #0
 8011e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e94:	f104 021a 	add.w	r2, r4, #26
 8011e98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e9a:	9305      	str	r3, [sp, #20]
 8011e9c:	eba3 0309 	sub.w	r3, r3, r9
 8011ea0:	455b      	cmp	r3, fp
 8011ea2:	dc33      	bgt.n	8011f0c <_printf_float+0x380>
 8011ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	db3b      	blt.n	8011f24 <_printf_float+0x398>
 8011eac:	6823      	ldr	r3, [r4, #0]
 8011eae:	07da      	lsls	r2, r3, #31
 8011eb0:	d438      	bmi.n	8011f24 <_printf_float+0x398>
 8011eb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011eb6:	eba2 0903 	sub.w	r9, r2, r3
 8011eba:	9b05      	ldr	r3, [sp, #20]
 8011ebc:	1ad2      	subs	r2, r2, r3
 8011ebe:	4591      	cmp	r9, r2
 8011ec0:	bfa8      	it	ge
 8011ec2:	4691      	movge	r9, r2
 8011ec4:	f1b9 0f00 	cmp.w	r9, #0
 8011ec8:	dc35      	bgt.n	8011f36 <_printf_float+0x3aa>
 8011eca:	f04f 0800 	mov.w	r8, #0
 8011ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ed2:	f104 0a1a 	add.w	sl, r4, #26
 8011ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011eda:	1a9b      	subs	r3, r3, r2
 8011edc:	eba3 0309 	sub.w	r3, r3, r9
 8011ee0:	4543      	cmp	r3, r8
 8011ee2:	f77f af79 	ble.w	8011dd8 <_printf_float+0x24c>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	4652      	mov	r2, sl
 8011eea:	4631      	mov	r1, r6
 8011eec:	4628      	mov	r0, r5
 8011eee:	47b8      	blx	r7
 8011ef0:	3001      	adds	r0, #1
 8011ef2:	f43f aeaa 	beq.w	8011c4a <_printf_float+0xbe>
 8011ef6:	f108 0801 	add.w	r8, r8, #1
 8011efa:	e7ec      	b.n	8011ed6 <_printf_float+0x34a>
 8011efc:	4613      	mov	r3, r2
 8011efe:	4631      	mov	r1, r6
 8011f00:	4642      	mov	r2, r8
 8011f02:	4628      	mov	r0, r5
 8011f04:	47b8      	blx	r7
 8011f06:	3001      	adds	r0, #1
 8011f08:	d1c0      	bne.n	8011e8c <_printf_float+0x300>
 8011f0a:	e69e      	b.n	8011c4a <_printf_float+0xbe>
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	4631      	mov	r1, r6
 8011f10:	4628      	mov	r0, r5
 8011f12:	9205      	str	r2, [sp, #20]
 8011f14:	47b8      	blx	r7
 8011f16:	3001      	adds	r0, #1
 8011f18:	f43f ae97 	beq.w	8011c4a <_printf_float+0xbe>
 8011f1c:	9a05      	ldr	r2, [sp, #20]
 8011f1e:	f10b 0b01 	add.w	fp, fp, #1
 8011f22:	e7b9      	b.n	8011e98 <_printf_float+0x30c>
 8011f24:	ee18 3a10 	vmov	r3, s16
 8011f28:	4652      	mov	r2, sl
 8011f2a:	4631      	mov	r1, r6
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	47b8      	blx	r7
 8011f30:	3001      	adds	r0, #1
 8011f32:	d1be      	bne.n	8011eb2 <_printf_float+0x326>
 8011f34:	e689      	b.n	8011c4a <_printf_float+0xbe>
 8011f36:	9a05      	ldr	r2, [sp, #20]
 8011f38:	464b      	mov	r3, r9
 8011f3a:	4442      	add	r2, r8
 8011f3c:	4631      	mov	r1, r6
 8011f3e:	4628      	mov	r0, r5
 8011f40:	47b8      	blx	r7
 8011f42:	3001      	adds	r0, #1
 8011f44:	d1c1      	bne.n	8011eca <_printf_float+0x33e>
 8011f46:	e680      	b.n	8011c4a <_printf_float+0xbe>
 8011f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f4a:	2a01      	cmp	r2, #1
 8011f4c:	dc01      	bgt.n	8011f52 <_printf_float+0x3c6>
 8011f4e:	07db      	lsls	r3, r3, #31
 8011f50:	d53a      	bpl.n	8011fc8 <_printf_float+0x43c>
 8011f52:	2301      	movs	r3, #1
 8011f54:	4642      	mov	r2, r8
 8011f56:	4631      	mov	r1, r6
 8011f58:	4628      	mov	r0, r5
 8011f5a:	47b8      	blx	r7
 8011f5c:	3001      	adds	r0, #1
 8011f5e:	f43f ae74 	beq.w	8011c4a <_printf_float+0xbe>
 8011f62:	ee18 3a10 	vmov	r3, s16
 8011f66:	4652      	mov	r2, sl
 8011f68:	4631      	mov	r1, r6
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	47b8      	blx	r7
 8011f6e:	3001      	adds	r0, #1
 8011f70:	f43f ae6b 	beq.w	8011c4a <_printf_float+0xbe>
 8011f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011f78:	2200      	movs	r2, #0
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011f80:	f7ee fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f84:	b9d8      	cbnz	r0, 8011fbe <_printf_float+0x432>
 8011f86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011f8a:	f108 0201 	add.w	r2, r8, #1
 8011f8e:	4631      	mov	r1, r6
 8011f90:	4628      	mov	r0, r5
 8011f92:	47b8      	blx	r7
 8011f94:	3001      	adds	r0, #1
 8011f96:	d10e      	bne.n	8011fb6 <_printf_float+0x42a>
 8011f98:	e657      	b.n	8011c4a <_printf_float+0xbe>
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	4652      	mov	r2, sl
 8011f9e:	4631      	mov	r1, r6
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	47b8      	blx	r7
 8011fa4:	3001      	adds	r0, #1
 8011fa6:	f43f ae50 	beq.w	8011c4a <_printf_float+0xbe>
 8011faa:	f108 0801 	add.w	r8, r8, #1
 8011fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fb0:	3b01      	subs	r3, #1
 8011fb2:	4543      	cmp	r3, r8
 8011fb4:	dcf1      	bgt.n	8011f9a <_printf_float+0x40e>
 8011fb6:	464b      	mov	r3, r9
 8011fb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011fbc:	e6da      	b.n	8011d74 <_printf_float+0x1e8>
 8011fbe:	f04f 0800 	mov.w	r8, #0
 8011fc2:	f104 0a1a 	add.w	sl, r4, #26
 8011fc6:	e7f2      	b.n	8011fae <_printf_float+0x422>
 8011fc8:	2301      	movs	r3, #1
 8011fca:	4642      	mov	r2, r8
 8011fcc:	e7df      	b.n	8011f8e <_printf_float+0x402>
 8011fce:	2301      	movs	r3, #1
 8011fd0:	464a      	mov	r2, r9
 8011fd2:	4631      	mov	r1, r6
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	47b8      	blx	r7
 8011fd8:	3001      	adds	r0, #1
 8011fda:	f43f ae36 	beq.w	8011c4a <_printf_float+0xbe>
 8011fde:	f108 0801 	add.w	r8, r8, #1
 8011fe2:	68e3      	ldr	r3, [r4, #12]
 8011fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011fe6:	1a5b      	subs	r3, r3, r1
 8011fe8:	4543      	cmp	r3, r8
 8011fea:	dcf0      	bgt.n	8011fce <_printf_float+0x442>
 8011fec:	e6f8      	b.n	8011de0 <_printf_float+0x254>
 8011fee:	f04f 0800 	mov.w	r8, #0
 8011ff2:	f104 0919 	add.w	r9, r4, #25
 8011ff6:	e7f4      	b.n	8011fe2 <_printf_float+0x456>

08011ff8 <_printf_common>:
 8011ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ffc:	4616      	mov	r6, r2
 8011ffe:	4699      	mov	r9, r3
 8012000:	688a      	ldr	r2, [r1, #8]
 8012002:	690b      	ldr	r3, [r1, #16]
 8012004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012008:	4293      	cmp	r3, r2
 801200a:	bfb8      	it	lt
 801200c:	4613      	movlt	r3, r2
 801200e:	6033      	str	r3, [r6, #0]
 8012010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012014:	4607      	mov	r7, r0
 8012016:	460c      	mov	r4, r1
 8012018:	b10a      	cbz	r2, 801201e <_printf_common+0x26>
 801201a:	3301      	adds	r3, #1
 801201c:	6033      	str	r3, [r6, #0]
 801201e:	6823      	ldr	r3, [r4, #0]
 8012020:	0699      	lsls	r1, r3, #26
 8012022:	bf42      	ittt	mi
 8012024:	6833      	ldrmi	r3, [r6, #0]
 8012026:	3302      	addmi	r3, #2
 8012028:	6033      	strmi	r3, [r6, #0]
 801202a:	6825      	ldr	r5, [r4, #0]
 801202c:	f015 0506 	ands.w	r5, r5, #6
 8012030:	d106      	bne.n	8012040 <_printf_common+0x48>
 8012032:	f104 0a19 	add.w	sl, r4, #25
 8012036:	68e3      	ldr	r3, [r4, #12]
 8012038:	6832      	ldr	r2, [r6, #0]
 801203a:	1a9b      	subs	r3, r3, r2
 801203c:	42ab      	cmp	r3, r5
 801203e:	dc26      	bgt.n	801208e <_printf_common+0x96>
 8012040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012044:	1e13      	subs	r3, r2, #0
 8012046:	6822      	ldr	r2, [r4, #0]
 8012048:	bf18      	it	ne
 801204a:	2301      	movne	r3, #1
 801204c:	0692      	lsls	r2, r2, #26
 801204e:	d42b      	bmi.n	80120a8 <_printf_common+0xb0>
 8012050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012054:	4649      	mov	r1, r9
 8012056:	4638      	mov	r0, r7
 8012058:	47c0      	blx	r8
 801205a:	3001      	adds	r0, #1
 801205c:	d01e      	beq.n	801209c <_printf_common+0xa4>
 801205e:	6823      	ldr	r3, [r4, #0]
 8012060:	6922      	ldr	r2, [r4, #16]
 8012062:	f003 0306 	and.w	r3, r3, #6
 8012066:	2b04      	cmp	r3, #4
 8012068:	bf02      	ittt	eq
 801206a:	68e5      	ldreq	r5, [r4, #12]
 801206c:	6833      	ldreq	r3, [r6, #0]
 801206e:	1aed      	subeq	r5, r5, r3
 8012070:	68a3      	ldr	r3, [r4, #8]
 8012072:	bf0c      	ite	eq
 8012074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012078:	2500      	movne	r5, #0
 801207a:	4293      	cmp	r3, r2
 801207c:	bfc4      	itt	gt
 801207e:	1a9b      	subgt	r3, r3, r2
 8012080:	18ed      	addgt	r5, r5, r3
 8012082:	2600      	movs	r6, #0
 8012084:	341a      	adds	r4, #26
 8012086:	42b5      	cmp	r5, r6
 8012088:	d11a      	bne.n	80120c0 <_printf_common+0xc8>
 801208a:	2000      	movs	r0, #0
 801208c:	e008      	b.n	80120a0 <_printf_common+0xa8>
 801208e:	2301      	movs	r3, #1
 8012090:	4652      	mov	r2, sl
 8012092:	4649      	mov	r1, r9
 8012094:	4638      	mov	r0, r7
 8012096:	47c0      	blx	r8
 8012098:	3001      	adds	r0, #1
 801209a:	d103      	bne.n	80120a4 <_printf_common+0xac>
 801209c:	f04f 30ff 	mov.w	r0, #4294967295
 80120a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120a4:	3501      	adds	r5, #1
 80120a6:	e7c6      	b.n	8012036 <_printf_common+0x3e>
 80120a8:	18e1      	adds	r1, r4, r3
 80120aa:	1c5a      	adds	r2, r3, #1
 80120ac:	2030      	movs	r0, #48	; 0x30
 80120ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80120b2:	4422      	add	r2, r4
 80120b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80120b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80120bc:	3302      	adds	r3, #2
 80120be:	e7c7      	b.n	8012050 <_printf_common+0x58>
 80120c0:	2301      	movs	r3, #1
 80120c2:	4622      	mov	r2, r4
 80120c4:	4649      	mov	r1, r9
 80120c6:	4638      	mov	r0, r7
 80120c8:	47c0      	blx	r8
 80120ca:	3001      	adds	r0, #1
 80120cc:	d0e6      	beq.n	801209c <_printf_common+0xa4>
 80120ce:	3601      	adds	r6, #1
 80120d0:	e7d9      	b.n	8012086 <_printf_common+0x8e>
	...

080120d4 <_printf_i>:
 80120d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120d8:	7e0f      	ldrb	r7, [r1, #24]
 80120da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80120dc:	2f78      	cmp	r7, #120	; 0x78
 80120de:	4691      	mov	r9, r2
 80120e0:	4680      	mov	r8, r0
 80120e2:	460c      	mov	r4, r1
 80120e4:	469a      	mov	sl, r3
 80120e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80120ea:	d807      	bhi.n	80120fc <_printf_i+0x28>
 80120ec:	2f62      	cmp	r7, #98	; 0x62
 80120ee:	d80a      	bhi.n	8012106 <_printf_i+0x32>
 80120f0:	2f00      	cmp	r7, #0
 80120f2:	f000 80d4 	beq.w	801229e <_printf_i+0x1ca>
 80120f6:	2f58      	cmp	r7, #88	; 0x58
 80120f8:	f000 80c0 	beq.w	801227c <_printf_i+0x1a8>
 80120fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012104:	e03a      	b.n	801217c <_printf_i+0xa8>
 8012106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801210a:	2b15      	cmp	r3, #21
 801210c:	d8f6      	bhi.n	80120fc <_printf_i+0x28>
 801210e:	a101      	add	r1, pc, #4	; (adr r1, 8012114 <_printf_i+0x40>)
 8012110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012114:	0801216d 	.word	0x0801216d
 8012118:	08012181 	.word	0x08012181
 801211c:	080120fd 	.word	0x080120fd
 8012120:	080120fd 	.word	0x080120fd
 8012124:	080120fd 	.word	0x080120fd
 8012128:	080120fd 	.word	0x080120fd
 801212c:	08012181 	.word	0x08012181
 8012130:	080120fd 	.word	0x080120fd
 8012134:	080120fd 	.word	0x080120fd
 8012138:	080120fd 	.word	0x080120fd
 801213c:	080120fd 	.word	0x080120fd
 8012140:	08012285 	.word	0x08012285
 8012144:	080121ad 	.word	0x080121ad
 8012148:	0801223f 	.word	0x0801223f
 801214c:	080120fd 	.word	0x080120fd
 8012150:	080120fd 	.word	0x080120fd
 8012154:	080122a7 	.word	0x080122a7
 8012158:	080120fd 	.word	0x080120fd
 801215c:	080121ad 	.word	0x080121ad
 8012160:	080120fd 	.word	0x080120fd
 8012164:	080120fd 	.word	0x080120fd
 8012168:	08012247 	.word	0x08012247
 801216c:	682b      	ldr	r3, [r5, #0]
 801216e:	1d1a      	adds	r2, r3, #4
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	602a      	str	r2, [r5, #0]
 8012174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801217c:	2301      	movs	r3, #1
 801217e:	e09f      	b.n	80122c0 <_printf_i+0x1ec>
 8012180:	6820      	ldr	r0, [r4, #0]
 8012182:	682b      	ldr	r3, [r5, #0]
 8012184:	0607      	lsls	r7, r0, #24
 8012186:	f103 0104 	add.w	r1, r3, #4
 801218a:	6029      	str	r1, [r5, #0]
 801218c:	d501      	bpl.n	8012192 <_printf_i+0xbe>
 801218e:	681e      	ldr	r6, [r3, #0]
 8012190:	e003      	b.n	801219a <_printf_i+0xc6>
 8012192:	0646      	lsls	r6, r0, #25
 8012194:	d5fb      	bpl.n	801218e <_printf_i+0xba>
 8012196:	f9b3 6000 	ldrsh.w	r6, [r3]
 801219a:	2e00      	cmp	r6, #0
 801219c:	da03      	bge.n	80121a6 <_printf_i+0xd2>
 801219e:	232d      	movs	r3, #45	; 0x2d
 80121a0:	4276      	negs	r6, r6
 80121a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121a6:	485a      	ldr	r0, [pc, #360]	; (8012310 <_printf_i+0x23c>)
 80121a8:	230a      	movs	r3, #10
 80121aa:	e012      	b.n	80121d2 <_printf_i+0xfe>
 80121ac:	682b      	ldr	r3, [r5, #0]
 80121ae:	6820      	ldr	r0, [r4, #0]
 80121b0:	1d19      	adds	r1, r3, #4
 80121b2:	6029      	str	r1, [r5, #0]
 80121b4:	0605      	lsls	r5, r0, #24
 80121b6:	d501      	bpl.n	80121bc <_printf_i+0xe8>
 80121b8:	681e      	ldr	r6, [r3, #0]
 80121ba:	e002      	b.n	80121c2 <_printf_i+0xee>
 80121bc:	0641      	lsls	r1, r0, #25
 80121be:	d5fb      	bpl.n	80121b8 <_printf_i+0xe4>
 80121c0:	881e      	ldrh	r6, [r3, #0]
 80121c2:	4853      	ldr	r0, [pc, #332]	; (8012310 <_printf_i+0x23c>)
 80121c4:	2f6f      	cmp	r7, #111	; 0x6f
 80121c6:	bf0c      	ite	eq
 80121c8:	2308      	moveq	r3, #8
 80121ca:	230a      	movne	r3, #10
 80121cc:	2100      	movs	r1, #0
 80121ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80121d2:	6865      	ldr	r5, [r4, #4]
 80121d4:	60a5      	str	r5, [r4, #8]
 80121d6:	2d00      	cmp	r5, #0
 80121d8:	bfa2      	ittt	ge
 80121da:	6821      	ldrge	r1, [r4, #0]
 80121dc:	f021 0104 	bicge.w	r1, r1, #4
 80121e0:	6021      	strge	r1, [r4, #0]
 80121e2:	b90e      	cbnz	r6, 80121e8 <_printf_i+0x114>
 80121e4:	2d00      	cmp	r5, #0
 80121e6:	d04b      	beq.n	8012280 <_printf_i+0x1ac>
 80121e8:	4615      	mov	r5, r2
 80121ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80121ee:	fb03 6711 	mls	r7, r3, r1, r6
 80121f2:	5dc7      	ldrb	r7, [r0, r7]
 80121f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80121f8:	4637      	mov	r7, r6
 80121fa:	42bb      	cmp	r3, r7
 80121fc:	460e      	mov	r6, r1
 80121fe:	d9f4      	bls.n	80121ea <_printf_i+0x116>
 8012200:	2b08      	cmp	r3, #8
 8012202:	d10b      	bne.n	801221c <_printf_i+0x148>
 8012204:	6823      	ldr	r3, [r4, #0]
 8012206:	07de      	lsls	r6, r3, #31
 8012208:	d508      	bpl.n	801221c <_printf_i+0x148>
 801220a:	6923      	ldr	r3, [r4, #16]
 801220c:	6861      	ldr	r1, [r4, #4]
 801220e:	4299      	cmp	r1, r3
 8012210:	bfde      	ittt	le
 8012212:	2330      	movle	r3, #48	; 0x30
 8012214:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012218:	f105 35ff 	addle.w	r5, r5, #4294967295
 801221c:	1b52      	subs	r2, r2, r5
 801221e:	6122      	str	r2, [r4, #16]
 8012220:	f8cd a000 	str.w	sl, [sp]
 8012224:	464b      	mov	r3, r9
 8012226:	aa03      	add	r2, sp, #12
 8012228:	4621      	mov	r1, r4
 801222a:	4640      	mov	r0, r8
 801222c:	f7ff fee4 	bl	8011ff8 <_printf_common>
 8012230:	3001      	adds	r0, #1
 8012232:	d14a      	bne.n	80122ca <_printf_i+0x1f6>
 8012234:	f04f 30ff 	mov.w	r0, #4294967295
 8012238:	b004      	add	sp, #16
 801223a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801223e:	6823      	ldr	r3, [r4, #0]
 8012240:	f043 0320 	orr.w	r3, r3, #32
 8012244:	6023      	str	r3, [r4, #0]
 8012246:	4833      	ldr	r0, [pc, #204]	; (8012314 <_printf_i+0x240>)
 8012248:	2778      	movs	r7, #120	; 0x78
 801224a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801224e:	6823      	ldr	r3, [r4, #0]
 8012250:	6829      	ldr	r1, [r5, #0]
 8012252:	061f      	lsls	r7, r3, #24
 8012254:	f851 6b04 	ldr.w	r6, [r1], #4
 8012258:	d402      	bmi.n	8012260 <_printf_i+0x18c>
 801225a:	065f      	lsls	r7, r3, #25
 801225c:	bf48      	it	mi
 801225e:	b2b6      	uxthmi	r6, r6
 8012260:	07df      	lsls	r7, r3, #31
 8012262:	bf48      	it	mi
 8012264:	f043 0320 	orrmi.w	r3, r3, #32
 8012268:	6029      	str	r1, [r5, #0]
 801226a:	bf48      	it	mi
 801226c:	6023      	strmi	r3, [r4, #0]
 801226e:	b91e      	cbnz	r6, 8012278 <_printf_i+0x1a4>
 8012270:	6823      	ldr	r3, [r4, #0]
 8012272:	f023 0320 	bic.w	r3, r3, #32
 8012276:	6023      	str	r3, [r4, #0]
 8012278:	2310      	movs	r3, #16
 801227a:	e7a7      	b.n	80121cc <_printf_i+0xf8>
 801227c:	4824      	ldr	r0, [pc, #144]	; (8012310 <_printf_i+0x23c>)
 801227e:	e7e4      	b.n	801224a <_printf_i+0x176>
 8012280:	4615      	mov	r5, r2
 8012282:	e7bd      	b.n	8012200 <_printf_i+0x12c>
 8012284:	682b      	ldr	r3, [r5, #0]
 8012286:	6826      	ldr	r6, [r4, #0]
 8012288:	6961      	ldr	r1, [r4, #20]
 801228a:	1d18      	adds	r0, r3, #4
 801228c:	6028      	str	r0, [r5, #0]
 801228e:	0635      	lsls	r5, r6, #24
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	d501      	bpl.n	8012298 <_printf_i+0x1c4>
 8012294:	6019      	str	r1, [r3, #0]
 8012296:	e002      	b.n	801229e <_printf_i+0x1ca>
 8012298:	0670      	lsls	r0, r6, #25
 801229a:	d5fb      	bpl.n	8012294 <_printf_i+0x1c0>
 801229c:	8019      	strh	r1, [r3, #0]
 801229e:	2300      	movs	r3, #0
 80122a0:	6123      	str	r3, [r4, #16]
 80122a2:	4615      	mov	r5, r2
 80122a4:	e7bc      	b.n	8012220 <_printf_i+0x14c>
 80122a6:	682b      	ldr	r3, [r5, #0]
 80122a8:	1d1a      	adds	r2, r3, #4
 80122aa:	602a      	str	r2, [r5, #0]
 80122ac:	681d      	ldr	r5, [r3, #0]
 80122ae:	6862      	ldr	r2, [r4, #4]
 80122b0:	2100      	movs	r1, #0
 80122b2:	4628      	mov	r0, r5
 80122b4:	f7ed ff8c 	bl	80001d0 <memchr>
 80122b8:	b108      	cbz	r0, 80122be <_printf_i+0x1ea>
 80122ba:	1b40      	subs	r0, r0, r5
 80122bc:	6060      	str	r0, [r4, #4]
 80122be:	6863      	ldr	r3, [r4, #4]
 80122c0:	6123      	str	r3, [r4, #16]
 80122c2:	2300      	movs	r3, #0
 80122c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122c8:	e7aa      	b.n	8012220 <_printf_i+0x14c>
 80122ca:	6923      	ldr	r3, [r4, #16]
 80122cc:	462a      	mov	r2, r5
 80122ce:	4649      	mov	r1, r9
 80122d0:	4640      	mov	r0, r8
 80122d2:	47d0      	blx	sl
 80122d4:	3001      	adds	r0, #1
 80122d6:	d0ad      	beq.n	8012234 <_printf_i+0x160>
 80122d8:	6823      	ldr	r3, [r4, #0]
 80122da:	079b      	lsls	r3, r3, #30
 80122dc:	d413      	bmi.n	8012306 <_printf_i+0x232>
 80122de:	68e0      	ldr	r0, [r4, #12]
 80122e0:	9b03      	ldr	r3, [sp, #12]
 80122e2:	4298      	cmp	r0, r3
 80122e4:	bfb8      	it	lt
 80122e6:	4618      	movlt	r0, r3
 80122e8:	e7a6      	b.n	8012238 <_printf_i+0x164>
 80122ea:	2301      	movs	r3, #1
 80122ec:	4632      	mov	r2, r6
 80122ee:	4649      	mov	r1, r9
 80122f0:	4640      	mov	r0, r8
 80122f2:	47d0      	blx	sl
 80122f4:	3001      	adds	r0, #1
 80122f6:	d09d      	beq.n	8012234 <_printf_i+0x160>
 80122f8:	3501      	adds	r5, #1
 80122fa:	68e3      	ldr	r3, [r4, #12]
 80122fc:	9903      	ldr	r1, [sp, #12]
 80122fe:	1a5b      	subs	r3, r3, r1
 8012300:	42ab      	cmp	r3, r5
 8012302:	dcf2      	bgt.n	80122ea <_printf_i+0x216>
 8012304:	e7eb      	b.n	80122de <_printf_i+0x20a>
 8012306:	2500      	movs	r5, #0
 8012308:	f104 0619 	add.w	r6, r4, #25
 801230c:	e7f5      	b.n	80122fa <_printf_i+0x226>
 801230e:	bf00      	nop
 8012310:	08016fe1 	.word	0x08016fe1
 8012314:	08016ff2 	.word	0x08016ff2

08012318 <_scanf_float>:
 8012318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801231c:	b087      	sub	sp, #28
 801231e:	4617      	mov	r7, r2
 8012320:	9303      	str	r3, [sp, #12]
 8012322:	688b      	ldr	r3, [r1, #8]
 8012324:	1e5a      	subs	r2, r3, #1
 8012326:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801232a:	bf83      	ittte	hi
 801232c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012330:	195b      	addhi	r3, r3, r5
 8012332:	9302      	strhi	r3, [sp, #8]
 8012334:	2300      	movls	r3, #0
 8012336:	bf86      	itte	hi
 8012338:	f240 135d 	movwhi	r3, #349	; 0x15d
 801233c:	608b      	strhi	r3, [r1, #8]
 801233e:	9302      	strls	r3, [sp, #8]
 8012340:	680b      	ldr	r3, [r1, #0]
 8012342:	468b      	mov	fp, r1
 8012344:	2500      	movs	r5, #0
 8012346:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801234a:	f84b 3b1c 	str.w	r3, [fp], #28
 801234e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012352:	4680      	mov	r8, r0
 8012354:	460c      	mov	r4, r1
 8012356:	465e      	mov	r6, fp
 8012358:	46aa      	mov	sl, r5
 801235a:	46a9      	mov	r9, r5
 801235c:	9501      	str	r5, [sp, #4]
 801235e:	68a2      	ldr	r2, [r4, #8]
 8012360:	b152      	cbz	r2, 8012378 <_scanf_float+0x60>
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	2b4e      	cmp	r3, #78	; 0x4e
 8012368:	d864      	bhi.n	8012434 <_scanf_float+0x11c>
 801236a:	2b40      	cmp	r3, #64	; 0x40
 801236c:	d83c      	bhi.n	80123e8 <_scanf_float+0xd0>
 801236e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012372:	b2c8      	uxtb	r0, r1
 8012374:	280e      	cmp	r0, #14
 8012376:	d93a      	bls.n	80123ee <_scanf_float+0xd6>
 8012378:	f1b9 0f00 	cmp.w	r9, #0
 801237c:	d003      	beq.n	8012386 <_scanf_float+0x6e>
 801237e:	6823      	ldr	r3, [r4, #0]
 8012380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012384:	6023      	str	r3, [r4, #0]
 8012386:	f10a 3aff 	add.w	sl, sl, #4294967295
 801238a:	f1ba 0f01 	cmp.w	sl, #1
 801238e:	f200 8113 	bhi.w	80125b8 <_scanf_float+0x2a0>
 8012392:	455e      	cmp	r6, fp
 8012394:	f200 8105 	bhi.w	80125a2 <_scanf_float+0x28a>
 8012398:	2501      	movs	r5, #1
 801239a:	4628      	mov	r0, r5
 801239c:	b007      	add	sp, #28
 801239e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80123a6:	2a0d      	cmp	r2, #13
 80123a8:	d8e6      	bhi.n	8012378 <_scanf_float+0x60>
 80123aa:	a101      	add	r1, pc, #4	; (adr r1, 80123b0 <_scanf_float+0x98>)
 80123ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80123b0:	080124ef 	.word	0x080124ef
 80123b4:	08012379 	.word	0x08012379
 80123b8:	08012379 	.word	0x08012379
 80123bc:	08012379 	.word	0x08012379
 80123c0:	0801254f 	.word	0x0801254f
 80123c4:	08012527 	.word	0x08012527
 80123c8:	08012379 	.word	0x08012379
 80123cc:	08012379 	.word	0x08012379
 80123d0:	080124fd 	.word	0x080124fd
 80123d4:	08012379 	.word	0x08012379
 80123d8:	08012379 	.word	0x08012379
 80123dc:	08012379 	.word	0x08012379
 80123e0:	08012379 	.word	0x08012379
 80123e4:	080124b5 	.word	0x080124b5
 80123e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80123ec:	e7db      	b.n	80123a6 <_scanf_float+0x8e>
 80123ee:	290e      	cmp	r1, #14
 80123f0:	d8c2      	bhi.n	8012378 <_scanf_float+0x60>
 80123f2:	a001      	add	r0, pc, #4	; (adr r0, 80123f8 <_scanf_float+0xe0>)
 80123f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80123f8:	080124a7 	.word	0x080124a7
 80123fc:	08012379 	.word	0x08012379
 8012400:	080124a7 	.word	0x080124a7
 8012404:	0801253b 	.word	0x0801253b
 8012408:	08012379 	.word	0x08012379
 801240c:	08012455 	.word	0x08012455
 8012410:	08012491 	.word	0x08012491
 8012414:	08012491 	.word	0x08012491
 8012418:	08012491 	.word	0x08012491
 801241c:	08012491 	.word	0x08012491
 8012420:	08012491 	.word	0x08012491
 8012424:	08012491 	.word	0x08012491
 8012428:	08012491 	.word	0x08012491
 801242c:	08012491 	.word	0x08012491
 8012430:	08012491 	.word	0x08012491
 8012434:	2b6e      	cmp	r3, #110	; 0x6e
 8012436:	d809      	bhi.n	801244c <_scanf_float+0x134>
 8012438:	2b60      	cmp	r3, #96	; 0x60
 801243a:	d8b2      	bhi.n	80123a2 <_scanf_float+0x8a>
 801243c:	2b54      	cmp	r3, #84	; 0x54
 801243e:	d077      	beq.n	8012530 <_scanf_float+0x218>
 8012440:	2b59      	cmp	r3, #89	; 0x59
 8012442:	d199      	bne.n	8012378 <_scanf_float+0x60>
 8012444:	2d07      	cmp	r5, #7
 8012446:	d197      	bne.n	8012378 <_scanf_float+0x60>
 8012448:	2508      	movs	r5, #8
 801244a:	e029      	b.n	80124a0 <_scanf_float+0x188>
 801244c:	2b74      	cmp	r3, #116	; 0x74
 801244e:	d06f      	beq.n	8012530 <_scanf_float+0x218>
 8012450:	2b79      	cmp	r3, #121	; 0x79
 8012452:	e7f6      	b.n	8012442 <_scanf_float+0x12a>
 8012454:	6821      	ldr	r1, [r4, #0]
 8012456:	05c8      	lsls	r0, r1, #23
 8012458:	d51a      	bpl.n	8012490 <_scanf_float+0x178>
 801245a:	9b02      	ldr	r3, [sp, #8]
 801245c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012460:	6021      	str	r1, [r4, #0]
 8012462:	f109 0901 	add.w	r9, r9, #1
 8012466:	b11b      	cbz	r3, 8012470 <_scanf_float+0x158>
 8012468:	3b01      	subs	r3, #1
 801246a:	3201      	adds	r2, #1
 801246c:	9302      	str	r3, [sp, #8]
 801246e:	60a2      	str	r2, [r4, #8]
 8012470:	68a3      	ldr	r3, [r4, #8]
 8012472:	3b01      	subs	r3, #1
 8012474:	60a3      	str	r3, [r4, #8]
 8012476:	6923      	ldr	r3, [r4, #16]
 8012478:	3301      	adds	r3, #1
 801247a:	6123      	str	r3, [r4, #16]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	3b01      	subs	r3, #1
 8012480:	2b00      	cmp	r3, #0
 8012482:	607b      	str	r3, [r7, #4]
 8012484:	f340 8084 	ble.w	8012590 <_scanf_float+0x278>
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	3301      	adds	r3, #1
 801248c:	603b      	str	r3, [r7, #0]
 801248e:	e766      	b.n	801235e <_scanf_float+0x46>
 8012490:	eb1a 0f05 	cmn.w	sl, r5
 8012494:	f47f af70 	bne.w	8012378 <_scanf_float+0x60>
 8012498:	6822      	ldr	r2, [r4, #0]
 801249a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801249e:	6022      	str	r2, [r4, #0]
 80124a0:	f806 3b01 	strb.w	r3, [r6], #1
 80124a4:	e7e4      	b.n	8012470 <_scanf_float+0x158>
 80124a6:	6822      	ldr	r2, [r4, #0]
 80124a8:	0610      	lsls	r0, r2, #24
 80124aa:	f57f af65 	bpl.w	8012378 <_scanf_float+0x60>
 80124ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80124b2:	e7f4      	b.n	801249e <_scanf_float+0x186>
 80124b4:	f1ba 0f00 	cmp.w	sl, #0
 80124b8:	d10e      	bne.n	80124d8 <_scanf_float+0x1c0>
 80124ba:	f1b9 0f00 	cmp.w	r9, #0
 80124be:	d10e      	bne.n	80124de <_scanf_float+0x1c6>
 80124c0:	6822      	ldr	r2, [r4, #0]
 80124c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80124c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80124ca:	d108      	bne.n	80124de <_scanf_float+0x1c6>
 80124cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80124d0:	6022      	str	r2, [r4, #0]
 80124d2:	f04f 0a01 	mov.w	sl, #1
 80124d6:	e7e3      	b.n	80124a0 <_scanf_float+0x188>
 80124d8:	f1ba 0f02 	cmp.w	sl, #2
 80124dc:	d055      	beq.n	801258a <_scanf_float+0x272>
 80124de:	2d01      	cmp	r5, #1
 80124e0:	d002      	beq.n	80124e8 <_scanf_float+0x1d0>
 80124e2:	2d04      	cmp	r5, #4
 80124e4:	f47f af48 	bne.w	8012378 <_scanf_float+0x60>
 80124e8:	3501      	adds	r5, #1
 80124ea:	b2ed      	uxtb	r5, r5
 80124ec:	e7d8      	b.n	80124a0 <_scanf_float+0x188>
 80124ee:	f1ba 0f01 	cmp.w	sl, #1
 80124f2:	f47f af41 	bne.w	8012378 <_scanf_float+0x60>
 80124f6:	f04f 0a02 	mov.w	sl, #2
 80124fa:	e7d1      	b.n	80124a0 <_scanf_float+0x188>
 80124fc:	b97d      	cbnz	r5, 801251e <_scanf_float+0x206>
 80124fe:	f1b9 0f00 	cmp.w	r9, #0
 8012502:	f47f af3c 	bne.w	801237e <_scanf_float+0x66>
 8012506:	6822      	ldr	r2, [r4, #0]
 8012508:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801250c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012510:	f47f af39 	bne.w	8012386 <_scanf_float+0x6e>
 8012514:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012518:	6022      	str	r2, [r4, #0]
 801251a:	2501      	movs	r5, #1
 801251c:	e7c0      	b.n	80124a0 <_scanf_float+0x188>
 801251e:	2d03      	cmp	r5, #3
 8012520:	d0e2      	beq.n	80124e8 <_scanf_float+0x1d0>
 8012522:	2d05      	cmp	r5, #5
 8012524:	e7de      	b.n	80124e4 <_scanf_float+0x1cc>
 8012526:	2d02      	cmp	r5, #2
 8012528:	f47f af26 	bne.w	8012378 <_scanf_float+0x60>
 801252c:	2503      	movs	r5, #3
 801252e:	e7b7      	b.n	80124a0 <_scanf_float+0x188>
 8012530:	2d06      	cmp	r5, #6
 8012532:	f47f af21 	bne.w	8012378 <_scanf_float+0x60>
 8012536:	2507      	movs	r5, #7
 8012538:	e7b2      	b.n	80124a0 <_scanf_float+0x188>
 801253a:	6822      	ldr	r2, [r4, #0]
 801253c:	0591      	lsls	r1, r2, #22
 801253e:	f57f af1b 	bpl.w	8012378 <_scanf_float+0x60>
 8012542:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012546:	6022      	str	r2, [r4, #0]
 8012548:	f8cd 9004 	str.w	r9, [sp, #4]
 801254c:	e7a8      	b.n	80124a0 <_scanf_float+0x188>
 801254e:	6822      	ldr	r2, [r4, #0]
 8012550:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012554:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012558:	d006      	beq.n	8012568 <_scanf_float+0x250>
 801255a:	0550      	lsls	r0, r2, #21
 801255c:	f57f af0c 	bpl.w	8012378 <_scanf_float+0x60>
 8012560:	f1b9 0f00 	cmp.w	r9, #0
 8012564:	f43f af0f 	beq.w	8012386 <_scanf_float+0x6e>
 8012568:	0591      	lsls	r1, r2, #22
 801256a:	bf58      	it	pl
 801256c:	9901      	ldrpl	r1, [sp, #4]
 801256e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012572:	bf58      	it	pl
 8012574:	eba9 0101 	subpl.w	r1, r9, r1
 8012578:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801257c:	bf58      	it	pl
 801257e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012582:	6022      	str	r2, [r4, #0]
 8012584:	f04f 0900 	mov.w	r9, #0
 8012588:	e78a      	b.n	80124a0 <_scanf_float+0x188>
 801258a:	f04f 0a03 	mov.w	sl, #3
 801258e:	e787      	b.n	80124a0 <_scanf_float+0x188>
 8012590:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012594:	4639      	mov	r1, r7
 8012596:	4640      	mov	r0, r8
 8012598:	4798      	blx	r3
 801259a:	2800      	cmp	r0, #0
 801259c:	f43f aedf 	beq.w	801235e <_scanf_float+0x46>
 80125a0:	e6ea      	b.n	8012378 <_scanf_float+0x60>
 80125a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125aa:	463a      	mov	r2, r7
 80125ac:	4640      	mov	r0, r8
 80125ae:	4798      	blx	r3
 80125b0:	6923      	ldr	r3, [r4, #16]
 80125b2:	3b01      	subs	r3, #1
 80125b4:	6123      	str	r3, [r4, #16]
 80125b6:	e6ec      	b.n	8012392 <_scanf_float+0x7a>
 80125b8:	1e6b      	subs	r3, r5, #1
 80125ba:	2b06      	cmp	r3, #6
 80125bc:	d825      	bhi.n	801260a <_scanf_float+0x2f2>
 80125be:	2d02      	cmp	r5, #2
 80125c0:	d836      	bhi.n	8012630 <_scanf_float+0x318>
 80125c2:	455e      	cmp	r6, fp
 80125c4:	f67f aee8 	bls.w	8012398 <_scanf_float+0x80>
 80125c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125d0:	463a      	mov	r2, r7
 80125d2:	4640      	mov	r0, r8
 80125d4:	4798      	blx	r3
 80125d6:	6923      	ldr	r3, [r4, #16]
 80125d8:	3b01      	subs	r3, #1
 80125da:	6123      	str	r3, [r4, #16]
 80125dc:	e7f1      	b.n	80125c2 <_scanf_float+0x2aa>
 80125de:	9802      	ldr	r0, [sp, #8]
 80125e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80125e8:	9002      	str	r0, [sp, #8]
 80125ea:	463a      	mov	r2, r7
 80125ec:	4640      	mov	r0, r8
 80125ee:	4798      	blx	r3
 80125f0:	6923      	ldr	r3, [r4, #16]
 80125f2:	3b01      	subs	r3, #1
 80125f4:	6123      	str	r3, [r4, #16]
 80125f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80125fa:	fa5f fa8a 	uxtb.w	sl, sl
 80125fe:	f1ba 0f02 	cmp.w	sl, #2
 8012602:	d1ec      	bne.n	80125de <_scanf_float+0x2c6>
 8012604:	3d03      	subs	r5, #3
 8012606:	b2ed      	uxtb	r5, r5
 8012608:	1b76      	subs	r6, r6, r5
 801260a:	6823      	ldr	r3, [r4, #0]
 801260c:	05da      	lsls	r2, r3, #23
 801260e:	d52f      	bpl.n	8012670 <_scanf_float+0x358>
 8012610:	055b      	lsls	r3, r3, #21
 8012612:	d510      	bpl.n	8012636 <_scanf_float+0x31e>
 8012614:	455e      	cmp	r6, fp
 8012616:	f67f aebf 	bls.w	8012398 <_scanf_float+0x80>
 801261a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801261e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012622:	463a      	mov	r2, r7
 8012624:	4640      	mov	r0, r8
 8012626:	4798      	blx	r3
 8012628:	6923      	ldr	r3, [r4, #16]
 801262a:	3b01      	subs	r3, #1
 801262c:	6123      	str	r3, [r4, #16]
 801262e:	e7f1      	b.n	8012614 <_scanf_float+0x2fc>
 8012630:	46aa      	mov	sl, r5
 8012632:	9602      	str	r6, [sp, #8]
 8012634:	e7df      	b.n	80125f6 <_scanf_float+0x2de>
 8012636:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801263a:	6923      	ldr	r3, [r4, #16]
 801263c:	2965      	cmp	r1, #101	; 0x65
 801263e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012642:	f106 35ff 	add.w	r5, r6, #4294967295
 8012646:	6123      	str	r3, [r4, #16]
 8012648:	d00c      	beq.n	8012664 <_scanf_float+0x34c>
 801264a:	2945      	cmp	r1, #69	; 0x45
 801264c:	d00a      	beq.n	8012664 <_scanf_float+0x34c>
 801264e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012652:	463a      	mov	r2, r7
 8012654:	4640      	mov	r0, r8
 8012656:	4798      	blx	r3
 8012658:	6923      	ldr	r3, [r4, #16]
 801265a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801265e:	3b01      	subs	r3, #1
 8012660:	1eb5      	subs	r5, r6, #2
 8012662:	6123      	str	r3, [r4, #16]
 8012664:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012668:	463a      	mov	r2, r7
 801266a:	4640      	mov	r0, r8
 801266c:	4798      	blx	r3
 801266e:	462e      	mov	r6, r5
 8012670:	6825      	ldr	r5, [r4, #0]
 8012672:	f015 0510 	ands.w	r5, r5, #16
 8012676:	d158      	bne.n	801272a <_scanf_float+0x412>
 8012678:	7035      	strb	r5, [r6, #0]
 801267a:	6823      	ldr	r3, [r4, #0]
 801267c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012684:	d11c      	bne.n	80126c0 <_scanf_float+0x3a8>
 8012686:	9b01      	ldr	r3, [sp, #4]
 8012688:	454b      	cmp	r3, r9
 801268a:	eba3 0209 	sub.w	r2, r3, r9
 801268e:	d124      	bne.n	80126da <_scanf_float+0x3c2>
 8012690:	2200      	movs	r2, #0
 8012692:	4659      	mov	r1, fp
 8012694:	4640      	mov	r0, r8
 8012696:	f7ff f93b 	bl	8011910 <_strtod_r>
 801269a:	9b03      	ldr	r3, [sp, #12]
 801269c:	6821      	ldr	r1, [r4, #0]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f011 0f02 	tst.w	r1, #2
 80126a4:	ec57 6b10 	vmov	r6, r7, d0
 80126a8:	f103 0204 	add.w	r2, r3, #4
 80126ac:	d020      	beq.n	80126f0 <_scanf_float+0x3d8>
 80126ae:	9903      	ldr	r1, [sp, #12]
 80126b0:	600a      	str	r2, [r1, #0]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	e9c3 6700 	strd	r6, r7, [r3]
 80126b8:	68e3      	ldr	r3, [r4, #12]
 80126ba:	3301      	adds	r3, #1
 80126bc:	60e3      	str	r3, [r4, #12]
 80126be:	e66c      	b.n	801239a <_scanf_float+0x82>
 80126c0:	9b04      	ldr	r3, [sp, #16]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d0e4      	beq.n	8012690 <_scanf_float+0x378>
 80126c6:	9905      	ldr	r1, [sp, #20]
 80126c8:	230a      	movs	r3, #10
 80126ca:	462a      	mov	r2, r5
 80126cc:	3101      	adds	r1, #1
 80126ce:	4640      	mov	r0, r8
 80126d0:	f7ff f9a6 	bl	8011a20 <_strtol_r>
 80126d4:	9b04      	ldr	r3, [sp, #16]
 80126d6:	9e05      	ldr	r6, [sp, #20]
 80126d8:	1ac2      	subs	r2, r0, r3
 80126da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80126de:	429e      	cmp	r6, r3
 80126e0:	bf28      	it	cs
 80126e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80126e6:	4912      	ldr	r1, [pc, #72]	; (8012730 <_scanf_float+0x418>)
 80126e8:	4630      	mov	r0, r6
 80126ea:	f000 fa1d 	bl	8012b28 <siprintf>
 80126ee:	e7cf      	b.n	8012690 <_scanf_float+0x378>
 80126f0:	f011 0f04 	tst.w	r1, #4
 80126f4:	9903      	ldr	r1, [sp, #12]
 80126f6:	600a      	str	r2, [r1, #0]
 80126f8:	d1db      	bne.n	80126b2 <_scanf_float+0x39a>
 80126fa:	f8d3 8000 	ldr.w	r8, [r3]
 80126fe:	ee10 2a10 	vmov	r2, s0
 8012702:	ee10 0a10 	vmov	r0, s0
 8012706:	463b      	mov	r3, r7
 8012708:	4639      	mov	r1, r7
 801270a:	f7ee fa0f 	bl	8000b2c <__aeabi_dcmpun>
 801270e:	b128      	cbz	r0, 801271c <_scanf_float+0x404>
 8012710:	4808      	ldr	r0, [pc, #32]	; (8012734 <_scanf_float+0x41c>)
 8012712:	f000 fc45 	bl	8012fa0 <nanf>
 8012716:	ed88 0a00 	vstr	s0, [r8]
 801271a:	e7cd      	b.n	80126b8 <_scanf_float+0x3a0>
 801271c:	4630      	mov	r0, r6
 801271e:	4639      	mov	r1, r7
 8012720:	f7ee fa62 	bl	8000be8 <__aeabi_d2f>
 8012724:	f8c8 0000 	str.w	r0, [r8]
 8012728:	e7c6      	b.n	80126b8 <_scanf_float+0x3a0>
 801272a:	2500      	movs	r5, #0
 801272c:	e635      	b.n	801239a <_scanf_float+0x82>
 801272e:	bf00      	nop
 8012730:	08017003 	.word	0x08017003
 8012734:	080170bc 	.word	0x080170bc

08012738 <__sflush_r>:
 8012738:	898a      	ldrh	r2, [r1, #12]
 801273a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801273e:	4605      	mov	r5, r0
 8012740:	0710      	lsls	r0, r2, #28
 8012742:	460c      	mov	r4, r1
 8012744:	d458      	bmi.n	80127f8 <__sflush_r+0xc0>
 8012746:	684b      	ldr	r3, [r1, #4]
 8012748:	2b00      	cmp	r3, #0
 801274a:	dc05      	bgt.n	8012758 <__sflush_r+0x20>
 801274c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801274e:	2b00      	cmp	r3, #0
 8012750:	dc02      	bgt.n	8012758 <__sflush_r+0x20>
 8012752:	2000      	movs	r0, #0
 8012754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801275a:	2e00      	cmp	r6, #0
 801275c:	d0f9      	beq.n	8012752 <__sflush_r+0x1a>
 801275e:	2300      	movs	r3, #0
 8012760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012764:	682f      	ldr	r7, [r5, #0]
 8012766:	6a21      	ldr	r1, [r4, #32]
 8012768:	602b      	str	r3, [r5, #0]
 801276a:	d032      	beq.n	80127d2 <__sflush_r+0x9a>
 801276c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801276e:	89a3      	ldrh	r3, [r4, #12]
 8012770:	075a      	lsls	r2, r3, #29
 8012772:	d505      	bpl.n	8012780 <__sflush_r+0x48>
 8012774:	6863      	ldr	r3, [r4, #4]
 8012776:	1ac0      	subs	r0, r0, r3
 8012778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801277a:	b10b      	cbz	r3, 8012780 <__sflush_r+0x48>
 801277c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801277e:	1ac0      	subs	r0, r0, r3
 8012780:	2300      	movs	r3, #0
 8012782:	4602      	mov	r2, r0
 8012784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012786:	6a21      	ldr	r1, [r4, #32]
 8012788:	4628      	mov	r0, r5
 801278a:	47b0      	blx	r6
 801278c:	1c43      	adds	r3, r0, #1
 801278e:	89a3      	ldrh	r3, [r4, #12]
 8012790:	d106      	bne.n	80127a0 <__sflush_r+0x68>
 8012792:	6829      	ldr	r1, [r5, #0]
 8012794:	291d      	cmp	r1, #29
 8012796:	d82b      	bhi.n	80127f0 <__sflush_r+0xb8>
 8012798:	4a29      	ldr	r2, [pc, #164]	; (8012840 <__sflush_r+0x108>)
 801279a:	410a      	asrs	r2, r1
 801279c:	07d6      	lsls	r6, r2, #31
 801279e:	d427      	bmi.n	80127f0 <__sflush_r+0xb8>
 80127a0:	2200      	movs	r2, #0
 80127a2:	6062      	str	r2, [r4, #4]
 80127a4:	04d9      	lsls	r1, r3, #19
 80127a6:	6922      	ldr	r2, [r4, #16]
 80127a8:	6022      	str	r2, [r4, #0]
 80127aa:	d504      	bpl.n	80127b6 <__sflush_r+0x7e>
 80127ac:	1c42      	adds	r2, r0, #1
 80127ae:	d101      	bne.n	80127b4 <__sflush_r+0x7c>
 80127b0:	682b      	ldr	r3, [r5, #0]
 80127b2:	b903      	cbnz	r3, 80127b6 <__sflush_r+0x7e>
 80127b4:	6560      	str	r0, [r4, #84]	; 0x54
 80127b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127b8:	602f      	str	r7, [r5, #0]
 80127ba:	2900      	cmp	r1, #0
 80127bc:	d0c9      	beq.n	8012752 <__sflush_r+0x1a>
 80127be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127c2:	4299      	cmp	r1, r3
 80127c4:	d002      	beq.n	80127cc <__sflush_r+0x94>
 80127c6:	4628      	mov	r0, r5
 80127c8:	f001 fa88 	bl	8013cdc <_free_r>
 80127cc:	2000      	movs	r0, #0
 80127ce:	6360      	str	r0, [r4, #52]	; 0x34
 80127d0:	e7c0      	b.n	8012754 <__sflush_r+0x1c>
 80127d2:	2301      	movs	r3, #1
 80127d4:	4628      	mov	r0, r5
 80127d6:	47b0      	blx	r6
 80127d8:	1c41      	adds	r1, r0, #1
 80127da:	d1c8      	bne.n	801276e <__sflush_r+0x36>
 80127dc:	682b      	ldr	r3, [r5, #0]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d0c5      	beq.n	801276e <__sflush_r+0x36>
 80127e2:	2b1d      	cmp	r3, #29
 80127e4:	d001      	beq.n	80127ea <__sflush_r+0xb2>
 80127e6:	2b16      	cmp	r3, #22
 80127e8:	d101      	bne.n	80127ee <__sflush_r+0xb6>
 80127ea:	602f      	str	r7, [r5, #0]
 80127ec:	e7b1      	b.n	8012752 <__sflush_r+0x1a>
 80127ee:	89a3      	ldrh	r3, [r4, #12]
 80127f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127f4:	81a3      	strh	r3, [r4, #12]
 80127f6:	e7ad      	b.n	8012754 <__sflush_r+0x1c>
 80127f8:	690f      	ldr	r7, [r1, #16]
 80127fa:	2f00      	cmp	r7, #0
 80127fc:	d0a9      	beq.n	8012752 <__sflush_r+0x1a>
 80127fe:	0793      	lsls	r3, r2, #30
 8012800:	680e      	ldr	r6, [r1, #0]
 8012802:	bf08      	it	eq
 8012804:	694b      	ldreq	r3, [r1, #20]
 8012806:	600f      	str	r7, [r1, #0]
 8012808:	bf18      	it	ne
 801280a:	2300      	movne	r3, #0
 801280c:	eba6 0807 	sub.w	r8, r6, r7
 8012810:	608b      	str	r3, [r1, #8]
 8012812:	f1b8 0f00 	cmp.w	r8, #0
 8012816:	dd9c      	ble.n	8012752 <__sflush_r+0x1a>
 8012818:	6a21      	ldr	r1, [r4, #32]
 801281a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801281c:	4643      	mov	r3, r8
 801281e:	463a      	mov	r2, r7
 8012820:	4628      	mov	r0, r5
 8012822:	47b0      	blx	r6
 8012824:	2800      	cmp	r0, #0
 8012826:	dc06      	bgt.n	8012836 <__sflush_r+0xfe>
 8012828:	89a3      	ldrh	r3, [r4, #12]
 801282a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801282e:	81a3      	strh	r3, [r4, #12]
 8012830:	f04f 30ff 	mov.w	r0, #4294967295
 8012834:	e78e      	b.n	8012754 <__sflush_r+0x1c>
 8012836:	4407      	add	r7, r0
 8012838:	eba8 0800 	sub.w	r8, r8, r0
 801283c:	e7e9      	b.n	8012812 <__sflush_r+0xda>
 801283e:	bf00      	nop
 8012840:	dfbffffe 	.word	0xdfbffffe

08012844 <_fflush_r>:
 8012844:	b538      	push	{r3, r4, r5, lr}
 8012846:	690b      	ldr	r3, [r1, #16]
 8012848:	4605      	mov	r5, r0
 801284a:	460c      	mov	r4, r1
 801284c:	b913      	cbnz	r3, 8012854 <_fflush_r+0x10>
 801284e:	2500      	movs	r5, #0
 8012850:	4628      	mov	r0, r5
 8012852:	bd38      	pop	{r3, r4, r5, pc}
 8012854:	b118      	cbz	r0, 801285e <_fflush_r+0x1a>
 8012856:	6a03      	ldr	r3, [r0, #32]
 8012858:	b90b      	cbnz	r3, 801285e <_fflush_r+0x1a>
 801285a:	f000 f8a7 	bl	80129ac <__sinit>
 801285e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d0f3      	beq.n	801284e <_fflush_r+0xa>
 8012866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012868:	07d0      	lsls	r0, r2, #31
 801286a:	d404      	bmi.n	8012876 <_fflush_r+0x32>
 801286c:	0599      	lsls	r1, r3, #22
 801286e:	d402      	bmi.n	8012876 <_fflush_r+0x32>
 8012870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012872:	f000 fb7a 	bl	8012f6a <__retarget_lock_acquire_recursive>
 8012876:	4628      	mov	r0, r5
 8012878:	4621      	mov	r1, r4
 801287a:	f7ff ff5d 	bl	8012738 <__sflush_r>
 801287e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012880:	07da      	lsls	r2, r3, #31
 8012882:	4605      	mov	r5, r0
 8012884:	d4e4      	bmi.n	8012850 <_fflush_r+0xc>
 8012886:	89a3      	ldrh	r3, [r4, #12]
 8012888:	059b      	lsls	r3, r3, #22
 801288a:	d4e1      	bmi.n	8012850 <_fflush_r+0xc>
 801288c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801288e:	f000 fb6d 	bl	8012f6c <__retarget_lock_release_recursive>
 8012892:	e7dd      	b.n	8012850 <_fflush_r+0xc>

08012894 <std>:
 8012894:	2300      	movs	r3, #0
 8012896:	b510      	push	{r4, lr}
 8012898:	4604      	mov	r4, r0
 801289a:	e9c0 3300 	strd	r3, r3, [r0]
 801289e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80128a2:	6083      	str	r3, [r0, #8]
 80128a4:	8181      	strh	r1, [r0, #12]
 80128a6:	6643      	str	r3, [r0, #100]	; 0x64
 80128a8:	81c2      	strh	r2, [r0, #14]
 80128aa:	6183      	str	r3, [r0, #24]
 80128ac:	4619      	mov	r1, r3
 80128ae:	2208      	movs	r2, #8
 80128b0:	305c      	adds	r0, #92	; 0x5c
 80128b2:	f000 fa5f 	bl	8012d74 <memset>
 80128b6:	4b0d      	ldr	r3, [pc, #52]	; (80128ec <std+0x58>)
 80128b8:	6263      	str	r3, [r4, #36]	; 0x24
 80128ba:	4b0d      	ldr	r3, [pc, #52]	; (80128f0 <std+0x5c>)
 80128bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80128be:	4b0d      	ldr	r3, [pc, #52]	; (80128f4 <std+0x60>)
 80128c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80128c2:	4b0d      	ldr	r3, [pc, #52]	; (80128f8 <std+0x64>)
 80128c4:	6323      	str	r3, [r4, #48]	; 0x30
 80128c6:	4b0d      	ldr	r3, [pc, #52]	; (80128fc <std+0x68>)
 80128c8:	6224      	str	r4, [r4, #32]
 80128ca:	429c      	cmp	r4, r3
 80128cc:	d006      	beq.n	80128dc <std+0x48>
 80128ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80128d2:	4294      	cmp	r4, r2
 80128d4:	d002      	beq.n	80128dc <std+0x48>
 80128d6:	33d0      	adds	r3, #208	; 0xd0
 80128d8:	429c      	cmp	r4, r3
 80128da:	d105      	bne.n	80128e8 <std+0x54>
 80128dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80128e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128e4:	f000 bb40 	b.w	8012f68 <__retarget_lock_init_recursive>
 80128e8:	bd10      	pop	{r4, pc}
 80128ea:	bf00      	nop
 80128ec:	08012bc1 	.word	0x08012bc1
 80128f0:	08012be7 	.word	0x08012be7
 80128f4:	08012c1f 	.word	0x08012c1f
 80128f8:	08012c43 	.word	0x08012c43
 80128fc:	20004f50 	.word	0x20004f50

08012900 <stdio_exit_handler>:
 8012900:	4a02      	ldr	r2, [pc, #8]	; (801290c <stdio_exit_handler+0xc>)
 8012902:	4903      	ldr	r1, [pc, #12]	; (8012910 <stdio_exit_handler+0x10>)
 8012904:	4803      	ldr	r0, [pc, #12]	; (8012914 <stdio_exit_handler+0x14>)
 8012906:	f000 b87b 	b.w	8012a00 <_fwalk_sglue>
 801290a:	bf00      	nop
 801290c:	20000390 	.word	0x20000390
 8012910:	08012845 	.word	0x08012845
 8012914:	20000508 	.word	0x20000508

08012918 <cleanup_stdio>:
 8012918:	6841      	ldr	r1, [r0, #4]
 801291a:	4b0c      	ldr	r3, [pc, #48]	; (801294c <cleanup_stdio+0x34>)
 801291c:	4299      	cmp	r1, r3
 801291e:	b510      	push	{r4, lr}
 8012920:	4604      	mov	r4, r0
 8012922:	d001      	beq.n	8012928 <cleanup_stdio+0x10>
 8012924:	f7ff ff8e 	bl	8012844 <_fflush_r>
 8012928:	68a1      	ldr	r1, [r4, #8]
 801292a:	4b09      	ldr	r3, [pc, #36]	; (8012950 <cleanup_stdio+0x38>)
 801292c:	4299      	cmp	r1, r3
 801292e:	d002      	beq.n	8012936 <cleanup_stdio+0x1e>
 8012930:	4620      	mov	r0, r4
 8012932:	f7ff ff87 	bl	8012844 <_fflush_r>
 8012936:	68e1      	ldr	r1, [r4, #12]
 8012938:	4b06      	ldr	r3, [pc, #24]	; (8012954 <cleanup_stdio+0x3c>)
 801293a:	4299      	cmp	r1, r3
 801293c:	d004      	beq.n	8012948 <cleanup_stdio+0x30>
 801293e:	4620      	mov	r0, r4
 8012940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012944:	f7ff bf7e 	b.w	8012844 <_fflush_r>
 8012948:	bd10      	pop	{r4, pc}
 801294a:	bf00      	nop
 801294c:	20004f50 	.word	0x20004f50
 8012950:	20004fb8 	.word	0x20004fb8
 8012954:	20005020 	.word	0x20005020

08012958 <global_stdio_init.part.0>:
 8012958:	b510      	push	{r4, lr}
 801295a:	4b0b      	ldr	r3, [pc, #44]	; (8012988 <global_stdio_init.part.0+0x30>)
 801295c:	4c0b      	ldr	r4, [pc, #44]	; (801298c <global_stdio_init.part.0+0x34>)
 801295e:	4a0c      	ldr	r2, [pc, #48]	; (8012990 <global_stdio_init.part.0+0x38>)
 8012960:	601a      	str	r2, [r3, #0]
 8012962:	4620      	mov	r0, r4
 8012964:	2200      	movs	r2, #0
 8012966:	2104      	movs	r1, #4
 8012968:	f7ff ff94 	bl	8012894 <std>
 801296c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012970:	2201      	movs	r2, #1
 8012972:	2109      	movs	r1, #9
 8012974:	f7ff ff8e 	bl	8012894 <std>
 8012978:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801297c:	2202      	movs	r2, #2
 801297e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012982:	2112      	movs	r1, #18
 8012984:	f7ff bf86 	b.w	8012894 <std>
 8012988:	20005088 	.word	0x20005088
 801298c:	20004f50 	.word	0x20004f50
 8012990:	08012901 	.word	0x08012901

08012994 <__sfp_lock_acquire>:
 8012994:	4801      	ldr	r0, [pc, #4]	; (801299c <__sfp_lock_acquire+0x8>)
 8012996:	f000 bae8 	b.w	8012f6a <__retarget_lock_acquire_recursive>
 801299a:	bf00      	nop
 801299c:	20005091 	.word	0x20005091

080129a0 <__sfp_lock_release>:
 80129a0:	4801      	ldr	r0, [pc, #4]	; (80129a8 <__sfp_lock_release+0x8>)
 80129a2:	f000 bae3 	b.w	8012f6c <__retarget_lock_release_recursive>
 80129a6:	bf00      	nop
 80129a8:	20005091 	.word	0x20005091

080129ac <__sinit>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	4604      	mov	r4, r0
 80129b0:	f7ff fff0 	bl	8012994 <__sfp_lock_acquire>
 80129b4:	6a23      	ldr	r3, [r4, #32]
 80129b6:	b11b      	cbz	r3, 80129c0 <__sinit+0x14>
 80129b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129bc:	f7ff bff0 	b.w	80129a0 <__sfp_lock_release>
 80129c0:	4b04      	ldr	r3, [pc, #16]	; (80129d4 <__sinit+0x28>)
 80129c2:	6223      	str	r3, [r4, #32]
 80129c4:	4b04      	ldr	r3, [pc, #16]	; (80129d8 <__sinit+0x2c>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d1f5      	bne.n	80129b8 <__sinit+0xc>
 80129cc:	f7ff ffc4 	bl	8012958 <global_stdio_init.part.0>
 80129d0:	e7f2      	b.n	80129b8 <__sinit+0xc>
 80129d2:	bf00      	nop
 80129d4:	08012919 	.word	0x08012919
 80129d8:	20005088 	.word	0x20005088

080129dc <fiprintf>:
 80129dc:	b40e      	push	{r1, r2, r3}
 80129de:	b503      	push	{r0, r1, lr}
 80129e0:	4601      	mov	r1, r0
 80129e2:	ab03      	add	r3, sp, #12
 80129e4:	4805      	ldr	r0, [pc, #20]	; (80129fc <fiprintf+0x20>)
 80129e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80129ea:	6800      	ldr	r0, [r0, #0]
 80129ec:	9301      	str	r3, [sp, #4]
 80129ee:	f002 fdaf 	bl	8015550 <_vfiprintf_r>
 80129f2:	b002      	add	sp, #8
 80129f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80129f8:	b003      	add	sp, #12
 80129fa:	4770      	bx	lr
 80129fc:	20000554 	.word	0x20000554

08012a00 <_fwalk_sglue>:
 8012a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a04:	4607      	mov	r7, r0
 8012a06:	4688      	mov	r8, r1
 8012a08:	4614      	mov	r4, r2
 8012a0a:	2600      	movs	r6, #0
 8012a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a10:	f1b9 0901 	subs.w	r9, r9, #1
 8012a14:	d505      	bpl.n	8012a22 <_fwalk_sglue+0x22>
 8012a16:	6824      	ldr	r4, [r4, #0]
 8012a18:	2c00      	cmp	r4, #0
 8012a1a:	d1f7      	bne.n	8012a0c <_fwalk_sglue+0xc>
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a22:	89ab      	ldrh	r3, [r5, #12]
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	d907      	bls.n	8012a38 <_fwalk_sglue+0x38>
 8012a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	d003      	beq.n	8012a38 <_fwalk_sglue+0x38>
 8012a30:	4629      	mov	r1, r5
 8012a32:	4638      	mov	r0, r7
 8012a34:	47c0      	blx	r8
 8012a36:	4306      	orrs	r6, r0
 8012a38:	3568      	adds	r5, #104	; 0x68
 8012a3a:	e7e9      	b.n	8012a10 <_fwalk_sglue+0x10>

08012a3c <iprintf>:
 8012a3c:	b40f      	push	{r0, r1, r2, r3}
 8012a3e:	b507      	push	{r0, r1, r2, lr}
 8012a40:	4906      	ldr	r1, [pc, #24]	; (8012a5c <iprintf+0x20>)
 8012a42:	ab04      	add	r3, sp, #16
 8012a44:	6808      	ldr	r0, [r1, #0]
 8012a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a4a:	6881      	ldr	r1, [r0, #8]
 8012a4c:	9301      	str	r3, [sp, #4]
 8012a4e:	f002 fd7f 	bl	8015550 <_vfiprintf_r>
 8012a52:	b003      	add	sp, #12
 8012a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a58:	b004      	add	sp, #16
 8012a5a:	4770      	bx	lr
 8012a5c:	20000554 	.word	0x20000554

08012a60 <putchar>:
 8012a60:	4b02      	ldr	r3, [pc, #8]	; (8012a6c <putchar+0xc>)
 8012a62:	4601      	mov	r1, r0
 8012a64:	6818      	ldr	r0, [r3, #0]
 8012a66:	6882      	ldr	r2, [r0, #8]
 8012a68:	f003 b83c 	b.w	8015ae4 <_putc_r>
 8012a6c:	20000554 	.word	0x20000554

08012a70 <_puts_r>:
 8012a70:	6a03      	ldr	r3, [r0, #32]
 8012a72:	b570      	push	{r4, r5, r6, lr}
 8012a74:	6884      	ldr	r4, [r0, #8]
 8012a76:	4605      	mov	r5, r0
 8012a78:	460e      	mov	r6, r1
 8012a7a:	b90b      	cbnz	r3, 8012a80 <_puts_r+0x10>
 8012a7c:	f7ff ff96 	bl	80129ac <__sinit>
 8012a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a82:	07db      	lsls	r3, r3, #31
 8012a84:	d405      	bmi.n	8012a92 <_puts_r+0x22>
 8012a86:	89a3      	ldrh	r3, [r4, #12]
 8012a88:	0598      	lsls	r0, r3, #22
 8012a8a:	d402      	bmi.n	8012a92 <_puts_r+0x22>
 8012a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a8e:	f000 fa6c 	bl	8012f6a <__retarget_lock_acquire_recursive>
 8012a92:	89a3      	ldrh	r3, [r4, #12]
 8012a94:	0719      	lsls	r1, r3, #28
 8012a96:	d513      	bpl.n	8012ac0 <_puts_r+0x50>
 8012a98:	6923      	ldr	r3, [r4, #16]
 8012a9a:	b18b      	cbz	r3, 8012ac0 <_puts_r+0x50>
 8012a9c:	3e01      	subs	r6, #1
 8012a9e:	68a3      	ldr	r3, [r4, #8]
 8012aa0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012aa4:	3b01      	subs	r3, #1
 8012aa6:	60a3      	str	r3, [r4, #8]
 8012aa8:	b9e9      	cbnz	r1, 8012ae6 <_puts_r+0x76>
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	da2e      	bge.n	8012b0c <_puts_r+0x9c>
 8012aae:	4622      	mov	r2, r4
 8012ab0:	210a      	movs	r1, #10
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	f000 f8c9 	bl	8012c4a <__swbuf_r>
 8012ab8:	3001      	adds	r0, #1
 8012aba:	d007      	beq.n	8012acc <_puts_r+0x5c>
 8012abc:	250a      	movs	r5, #10
 8012abe:	e007      	b.n	8012ad0 <_puts_r+0x60>
 8012ac0:	4621      	mov	r1, r4
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	f000 f8fe 	bl	8012cc4 <__swsetup_r>
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	d0e7      	beq.n	8012a9c <_puts_r+0x2c>
 8012acc:	f04f 35ff 	mov.w	r5, #4294967295
 8012ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ad2:	07da      	lsls	r2, r3, #31
 8012ad4:	d405      	bmi.n	8012ae2 <_puts_r+0x72>
 8012ad6:	89a3      	ldrh	r3, [r4, #12]
 8012ad8:	059b      	lsls	r3, r3, #22
 8012ada:	d402      	bmi.n	8012ae2 <_puts_r+0x72>
 8012adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ade:	f000 fa45 	bl	8012f6c <__retarget_lock_release_recursive>
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	bd70      	pop	{r4, r5, r6, pc}
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	da04      	bge.n	8012af4 <_puts_r+0x84>
 8012aea:	69a2      	ldr	r2, [r4, #24]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	dc06      	bgt.n	8012afe <_puts_r+0x8e>
 8012af0:	290a      	cmp	r1, #10
 8012af2:	d004      	beq.n	8012afe <_puts_r+0x8e>
 8012af4:	6823      	ldr	r3, [r4, #0]
 8012af6:	1c5a      	adds	r2, r3, #1
 8012af8:	6022      	str	r2, [r4, #0]
 8012afa:	7019      	strb	r1, [r3, #0]
 8012afc:	e7cf      	b.n	8012a9e <_puts_r+0x2e>
 8012afe:	4622      	mov	r2, r4
 8012b00:	4628      	mov	r0, r5
 8012b02:	f000 f8a2 	bl	8012c4a <__swbuf_r>
 8012b06:	3001      	adds	r0, #1
 8012b08:	d1c9      	bne.n	8012a9e <_puts_r+0x2e>
 8012b0a:	e7df      	b.n	8012acc <_puts_r+0x5c>
 8012b0c:	6823      	ldr	r3, [r4, #0]
 8012b0e:	250a      	movs	r5, #10
 8012b10:	1c5a      	adds	r2, r3, #1
 8012b12:	6022      	str	r2, [r4, #0]
 8012b14:	701d      	strb	r5, [r3, #0]
 8012b16:	e7db      	b.n	8012ad0 <_puts_r+0x60>

08012b18 <puts>:
 8012b18:	4b02      	ldr	r3, [pc, #8]	; (8012b24 <puts+0xc>)
 8012b1a:	4601      	mov	r1, r0
 8012b1c:	6818      	ldr	r0, [r3, #0]
 8012b1e:	f7ff bfa7 	b.w	8012a70 <_puts_r>
 8012b22:	bf00      	nop
 8012b24:	20000554 	.word	0x20000554

08012b28 <siprintf>:
 8012b28:	b40e      	push	{r1, r2, r3}
 8012b2a:	b500      	push	{lr}
 8012b2c:	b09c      	sub	sp, #112	; 0x70
 8012b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8012b30:	9002      	str	r0, [sp, #8]
 8012b32:	9006      	str	r0, [sp, #24]
 8012b34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b38:	4809      	ldr	r0, [pc, #36]	; (8012b60 <siprintf+0x38>)
 8012b3a:	9107      	str	r1, [sp, #28]
 8012b3c:	9104      	str	r1, [sp, #16]
 8012b3e:	4909      	ldr	r1, [pc, #36]	; (8012b64 <siprintf+0x3c>)
 8012b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b44:	9105      	str	r1, [sp, #20]
 8012b46:	6800      	ldr	r0, [r0, #0]
 8012b48:	9301      	str	r3, [sp, #4]
 8012b4a:	a902      	add	r1, sp, #8
 8012b4c:	f002 fa06 	bl	8014f5c <_svfiprintf_r>
 8012b50:	9b02      	ldr	r3, [sp, #8]
 8012b52:	2200      	movs	r2, #0
 8012b54:	701a      	strb	r2, [r3, #0]
 8012b56:	b01c      	add	sp, #112	; 0x70
 8012b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b5c:	b003      	add	sp, #12
 8012b5e:	4770      	bx	lr
 8012b60:	20000554 	.word	0x20000554
 8012b64:	ffff0208 	.word	0xffff0208

08012b68 <siscanf>:
 8012b68:	b40e      	push	{r1, r2, r3}
 8012b6a:	b510      	push	{r4, lr}
 8012b6c:	b09f      	sub	sp, #124	; 0x7c
 8012b6e:	ac21      	add	r4, sp, #132	; 0x84
 8012b70:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012b74:	f854 2b04 	ldr.w	r2, [r4], #4
 8012b78:	9201      	str	r2, [sp, #4]
 8012b7a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012b7e:	9004      	str	r0, [sp, #16]
 8012b80:	9008      	str	r0, [sp, #32]
 8012b82:	f7ed fb75 	bl	8000270 <strlen>
 8012b86:	4b0c      	ldr	r3, [pc, #48]	; (8012bb8 <siscanf+0x50>)
 8012b88:	9005      	str	r0, [sp, #20]
 8012b8a:	9009      	str	r0, [sp, #36]	; 0x24
 8012b8c:	930d      	str	r3, [sp, #52]	; 0x34
 8012b8e:	480b      	ldr	r0, [pc, #44]	; (8012bbc <siscanf+0x54>)
 8012b90:	9a01      	ldr	r2, [sp, #4]
 8012b92:	6800      	ldr	r0, [r0, #0]
 8012b94:	9403      	str	r4, [sp, #12]
 8012b96:	2300      	movs	r3, #0
 8012b98:	9311      	str	r3, [sp, #68]	; 0x44
 8012b9a:	9316      	str	r3, [sp, #88]	; 0x58
 8012b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ba0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012ba4:	a904      	add	r1, sp, #16
 8012ba6:	4623      	mov	r3, r4
 8012ba8:	f002 fb30 	bl	801520c <__ssvfiscanf_r>
 8012bac:	b01f      	add	sp, #124	; 0x7c
 8012bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bb2:	b003      	add	sp, #12
 8012bb4:	4770      	bx	lr
 8012bb6:	bf00      	nop
 8012bb8:	08012be3 	.word	0x08012be3
 8012bbc:	20000554 	.word	0x20000554

08012bc0 <__sread>:
 8012bc0:	b510      	push	{r4, lr}
 8012bc2:	460c      	mov	r4, r1
 8012bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bc8:	f000 f970 	bl	8012eac <_read_r>
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	bfab      	itete	ge
 8012bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8012bd4:	181b      	addge	r3, r3, r0
 8012bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012bda:	bfac      	ite	ge
 8012bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8012bde:	81a3      	strhlt	r3, [r4, #12]
 8012be0:	bd10      	pop	{r4, pc}

08012be2 <__seofread>:
 8012be2:	2000      	movs	r0, #0
 8012be4:	4770      	bx	lr

08012be6 <__swrite>:
 8012be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bea:	461f      	mov	r7, r3
 8012bec:	898b      	ldrh	r3, [r1, #12]
 8012bee:	05db      	lsls	r3, r3, #23
 8012bf0:	4605      	mov	r5, r0
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	4616      	mov	r6, r2
 8012bf6:	d505      	bpl.n	8012c04 <__swrite+0x1e>
 8012bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bfc:	2302      	movs	r3, #2
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f000 f942 	bl	8012e88 <_lseek_r>
 8012c04:	89a3      	ldrh	r3, [r4, #12]
 8012c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c0e:	81a3      	strh	r3, [r4, #12]
 8012c10:	4632      	mov	r2, r6
 8012c12:	463b      	mov	r3, r7
 8012c14:	4628      	mov	r0, r5
 8012c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c1a:	f000 b969 	b.w	8012ef0 <_write_r>

08012c1e <__sseek>:
 8012c1e:	b510      	push	{r4, lr}
 8012c20:	460c      	mov	r4, r1
 8012c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c26:	f000 f92f 	bl	8012e88 <_lseek_r>
 8012c2a:	1c43      	adds	r3, r0, #1
 8012c2c:	89a3      	ldrh	r3, [r4, #12]
 8012c2e:	bf15      	itete	ne
 8012c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8012c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c3a:	81a3      	strheq	r3, [r4, #12]
 8012c3c:	bf18      	it	ne
 8012c3e:	81a3      	strhne	r3, [r4, #12]
 8012c40:	bd10      	pop	{r4, pc}

08012c42 <__sclose>:
 8012c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c46:	f000 b90f 	b.w	8012e68 <_close_r>

08012c4a <__swbuf_r>:
 8012c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4c:	460e      	mov	r6, r1
 8012c4e:	4614      	mov	r4, r2
 8012c50:	4605      	mov	r5, r0
 8012c52:	b118      	cbz	r0, 8012c5c <__swbuf_r+0x12>
 8012c54:	6a03      	ldr	r3, [r0, #32]
 8012c56:	b90b      	cbnz	r3, 8012c5c <__swbuf_r+0x12>
 8012c58:	f7ff fea8 	bl	80129ac <__sinit>
 8012c5c:	69a3      	ldr	r3, [r4, #24]
 8012c5e:	60a3      	str	r3, [r4, #8]
 8012c60:	89a3      	ldrh	r3, [r4, #12]
 8012c62:	071a      	lsls	r2, r3, #28
 8012c64:	d525      	bpl.n	8012cb2 <__swbuf_r+0x68>
 8012c66:	6923      	ldr	r3, [r4, #16]
 8012c68:	b31b      	cbz	r3, 8012cb2 <__swbuf_r+0x68>
 8012c6a:	6823      	ldr	r3, [r4, #0]
 8012c6c:	6922      	ldr	r2, [r4, #16]
 8012c6e:	1a98      	subs	r0, r3, r2
 8012c70:	6963      	ldr	r3, [r4, #20]
 8012c72:	b2f6      	uxtb	r6, r6
 8012c74:	4283      	cmp	r3, r0
 8012c76:	4637      	mov	r7, r6
 8012c78:	dc04      	bgt.n	8012c84 <__swbuf_r+0x3a>
 8012c7a:	4621      	mov	r1, r4
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	f7ff fde1 	bl	8012844 <_fflush_r>
 8012c82:	b9e0      	cbnz	r0, 8012cbe <__swbuf_r+0x74>
 8012c84:	68a3      	ldr	r3, [r4, #8]
 8012c86:	3b01      	subs	r3, #1
 8012c88:	60a3      	str	r3, [r4, #8]
 8012c8a:	6823      	ldr	r3, [r4, #0]
 8012c8c:	1c5a      	adds	r2, r3, #1
 8012c8e:	6022      	str	r2, [r4, #0]
 8012c90:	701e      	strb	r6, [r3, #0]
 8012c92:	6962      	ldr	r2, [r4, #20]
 8012c94:	1c43      	adds	r3, r0, #1
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d004      	beq.n	8012ca4 <__swbuf_r+0x5a>
 8012c9a:	89a3      	ldrh	r3, [r4, #12]
 8012c9c:	07db      	lsls	r3, r3, #31
 8012c9e:	d506      	bpl.n	8012cae <__swbuf_r+0x64>
 8012ca0:	2e0a      	cmp	r6, #10
 8012ca2:	d104      	bne.n	8012cae <__swbuf_r+0x64>
 8012ca4:	4621      	mov	r1, r4
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	f7ff fdcc 	bl	8012844 <_fflush_r>
 8012cac:	b938      	cbnz	r0, 8012cbe <__swbuf_r+0x74>
 8012cae:	4638      	mov	r0, r7
 8012cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cb2:	4621      	mov	r1, r4
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	f000 f805 	bl	8012cc4 <__swsetup_r>
 8012cba:	2800      	cmp	r0, #0
 8012cbc:	d0d5      	beq.n	8012c6a <__swbuf_r+0x20>
 8012cbe:	f04f 37ff 	mov.w	r7, #4294967295
 8012cc2:	e7f4      	b.n	8012cae <__swbuf_r+0x64>

08012cc4 <__swsetup_r>:
 8012cc4:	b538      	push	{r3, r4, r5, lr}
 8012cc6:	4b2a      	ldr	r3, [pc, #168]	; (8012d70 <__swsetup_r+0xac>)
 8012cc8:	4605      	mov	r5, r0
 8012cca:	6818      	ldr	r0, [r3, #0]
 8012ccc:	460c      	mov	r4, r1
 8012cce:	b118      	cbz	r0, 8012cd8 <__swsetup_r+0x14>
 8012cd0:	6a03      	ldr	r3, [r0, #32]
 8012cd2:	b90b      	cbnz	r3, 8012cd8 <__swsetup_r+0x14>
 8012cd4:	f7ff fe6a 	bl	80129ac <__sinit>
 8012cd8:	89a3      	ldrh	r3, [r4, #12]
 8012cda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012cde:	0718      	lsls	r0, r3, #28
 8012ce0:	d422      	bmi.n	8012d28 <__swsetup_r+0x64>
 8012ce2:	06d9      	lsls	r1, r3, #27
 8012ce4:	d407      	bmi.n	8012cf6 <__swsetup_r+0x32>
 8012ce6:	2309      	movs	r3, #9
 8012ce8:	602b      	str	r3, [r5, #0]
 8012cea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012cee:	81a3      	strh	r3, [r4, #12]
 8012cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf4:	e034      	b.n	8012d60 <__swsetup_r+0x9c>
 8012cf6:	0758      	lsls	r0, r3, #29
 8012cf8:	d512      	bpl.n	8012d20 <__swsetup_r+0x5c>
 8012cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cfc:	b141      	cbz	r1, 8012d10 <__swsetup_r+0x4c>
 8012cfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d02:	4299      	cmp	r1, r3
 8012d04:	d002      	beq.n	8012d0c <__swsetup_r+0x48>
 8012d06:	4628      	mov	r0, r5
 8012d08:	f000 ffe8 	bl	8013cdc <_free_r>
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	6363      	str	r3, [r4, #52]	; 0x34
 8012d10:	89a3      	ldrh	r3, [r4, #12]
 8012d12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d16:	81a3      	strh	r3, [r4, #12]
 8012d18:	2300      	movs	r3, #0
 8012d1a:	6063      	str	r3, [r4, #4]
 8012d1c:	6923      	ldr	r3, [r4, #16]
 8012d1e:	6023      	str	r3, [r4, #0]
 8012d20:	89a3      	ldrh	r3, [r4, #12]
 8012d22:	f043 0308 	orr.w	r3, r3, #8
 8012d26:	81a3      	strh	r3, [r4, #12]
 8012d28:	6923      	ldr	r3, [r4, #16]
 8012d2a:	b94b      	cbnz	r3, 8012d40 <__swsetup_r+0x7c>
 8012d2c:	89a3      	ldrh	r3, [r4, #12]
 8012d2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d36:	d003      	beq.n	8012d40 <__swsetup_r+0x7c>
 8012d38:	4621      	mov	r1, r4
 8012d3a:	4628      	mov	r0, r5
 8012d3c:	f002 fe96 	bl	8015a6c <__smakebuf_r>
 8012d40:	89a0      	ldrh	r0, [r4, #12]
 8012d42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d46:	f010 0301 	ands.w	r3, r0, #1
 8012d4a:	d00a      	beq.n	8012d62 <__swsetup_r+0x9e>
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	60a3      	str	r3, [r4, #8]
 8012d50:	6963      	ldr	r3, [r4, #20]
 8012d52:	425b      	negs	r3, r3
 8012d54:	61a3      	str	r3, [r4, #24]
 8012d56:	6923      	ldr	r3, [r4, #16]
 8012d58:	b943      	cbnz	r3, 8012d6c <__swsetup_r+0xa8>
 8012d5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012d5e:	d1c4      	bne.n	8012cea <__swsetup_r+0x26>
 8012d60:	bd38      	pop	{r3, r4, r5, pc}
 8012d62:	0781      	lsls	r1, r0, #30
 8012d64:	bf58      	it	pl
 8012d66:	6963      	ldrpl	r3, [r4, #20]
 8012d68:	60a3      	str	r3, [r4, #8]
 8012d6a:	e7f4      	b.n	8012d56 <__swsetup_r+0x92>
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	e7f7      	b.n	8012d60 <__swsetup_r+0x9c>
 8012d70:	20000554 	.word	0x20000554

08012d74 <memset>:
 8012d74:	4402      	add	r2, r0
 8012d76:	4603      	mov	r3, r0
 8012d78:	4293      	cmp	r3, r2
 8012d7a:	d100      	bne.n	8012d7e <memset+0xa>
 8012d7c:	4770      	bx	lr
 8012d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8012d82:	e7f9      	b.n	8012d78 <memset+0x4>

08012d84 <strncmp>:
 8012d84:	b510      	push	{r4, lr}
 8012d86:	b16a      	cbz	r2, 8012da4 <strncmp+0x20>
 8012d88:	3901      	subs	r1, #1
 8012d8a:	1884      	adds	r4, r0, r2
 8012d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d103      	bne.n	8012da0 <strncmp+0x1c>
 8012d98:	42a0      	cmp	r0, r4
 8012d9a:	d001      	beq.n	8012da0 <strncmp+0x1c>
 8012d9c:	2a00      	cmp	r2, #0
 8012d9e:	d1f5      	bne.n	8012d8c <strncmp+0x8>
 8012da0:	1ad0      	subs	r0, r2, r3
 8012da2:	bd10      	pop	{r4, pc}
 8012da4:	4610      	mov	r0, r2
 8012da6:	e7fc      	b.n	8012da2 <strncmp+0x1e>

08012da8 <strtok>:
 8012da8:	4b16      	ldr	r3, [pc, #88]	; (8012e04 <strtok+0x5c>)
 8012daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012dac:	681e      	ldr	r6, [r3, #0]
 8012dae:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8012db0:	4605      	mov	r5, r0
 8012db2:	b9fc      	cbnz	r4, 8012df4 <strtok+0x4c>
 8012db4:	2050      	movs	r0, #80	; 0x50
 8012db6:	9101      	str	r1, [sp, #4]
 8012db8:	f7fd fee0 	bl	8010b7c <malloc>
 8012dbc:	9901      	ldr	r1, [sp, #4]
 8012dbe:	6470      	str	r0, [r6, #68]	; 0x44
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	b920      	cbnz	r0, 8012dce <strtok+0x26>
 8012dc4:	4b10      	ldr	r3, [pc, #64]	; (8012e08 <strtok+0x60>)
 8012dc6:	4811      	ldr	r0, [pc, #68]	; (8012e0c <strtok+0x64>)
 8012dc8:	215b      	movs	r1, #91	; 0x5b
 8012dca:	f000 f8ef 	bl	8012fac <__assert_func>
 8012dce:	e9c0 4400 	strd	r4, r4, [r0]
 8012dd2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012dd6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012dda:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012dde:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012de2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012de6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012dea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012dee:	6184      	str	r4, [r0, #24]
 8012df0:	7704      	strb	r4, [r0, #28]
 8012df2:	6244      	str	r4, [r0, #36]	; 0x24
 8012df4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8012df6:	2301      	movs	r3, #1
 8012df8:	4628      	mov	r0, r5
 8012dfa:	b002      	add	sp, #8
 8012dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e00:	f000 b806 	b.w	8012e10 <__strtok_r>
 8012e04:	20000554 	.word	0x20000554
 8012e08:	08017008 	.word	0x08017008
 8012e0c:	0801701f 	.word	0x0801701f

08012e10 <__strtok_r>:
 8012e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e12:	b908      	cbnz	r0, 8012e18 <__strtok_r+0x8>
 8012e14:	6810      	ldr	r0, [r2, #0]
 8012e16:	b188      	cbz	r0, 8012e3c <__strtok_r+0x2c>
 8012e18:	4604      	mov	r4, r0
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012e20:	460f      	mov	r7, r1
 8012e22:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012e26:	b91e      	cbnz	r6, 8012e30 <__strtok_r+0x20>
 8012e28:	b965      	cbnz	r5, 8012e44 <__strtok_r+0x34>
 8012e2a:	6015      	str	r5, [r2, #0]
 8012e2c:	4628      	mov	r0, r5
 8012e2e:	e005      	b.n	8012e3c <__strtok_r+0x2c>
 8012e30:	42b5      	cmp	r5, r6
 8012e32:	d1f6      	bne.n	8012e22 <__strtok_r+0x12>
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d1f0      	bne.n	8012e1a <__strtok_r+0xa>
 8012e38:	6014      	str	r4, [r2, #0]
 8012e3a:	7003      	strb	r3, [r0, #0]
 8012e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e3e:	461c      	mov	r4, r3
 8012e40:	e00c      	b.n	8012e5c <__strtok_r+0x4c>
 8012e42:	b915      	cbnz	r5, 8012e4a <__strtok_r+0x3a>
 8012e44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e48:	460e      	mov	r6, r1
 8012e4a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012e4e:	42ab      	cmp	r3, r5
 8012e50:	d1f7      	bne.n	8012e42 <__strtok_r+0x32>
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d0f3      	beq.n	8012e3e <__strtok_r+0x2e>
 8012e56:	2300      	movs	r3, #0
 8012e58:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012e5c:	6014      	str	r4, [r2, #0]
 8012e5e:	e7ed      	b.n	8012e3c <__strtok_r+0x2c>

08012e60 <_localeconv_r>:
 8012e60:	4800      	ldr	r0, [pc, #0]	; (8012e64 <_localeconv_r+0x4>)
 8012e62:	4770      	bx	lr
 8012e64:	2000048c 	.word	0x2000048c

08012e68 <_close_r>:
 8012e68:	b538      	push	{r3, r4, r5, lr}
 8012e6a:	4d06      	ldr	r5, [pc, #24]	; (8012e84 <_close_r+0x1c>)
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	4604      	mov	r4, r0
 8012e70:	4608      	mov	r0, r1
 8012e72:	602b      	str	r3, [r5, #0]
 8012e74:	f7f6 fbbe 	bl	80095f4 <_close>
 8012e78:	1c43      	adds	r3, r0, #1
 8012e7a:	d102      	bne.n	8012e82 <_close_r+0x1a>
 8012e7c:	682b      	ldr	r3, [r5, #0]
 8012e7e:	b103      	cbz	r3, 8012e82 <_close_r+0x1a>
 8012e80:	6023      	str	r3, [r4, #0]
 8012e82:	bd38      	pop	{r3, r4, r5, pc}
 8012e84:	2000508c 	.word	0x2000508c

08012e88 <_lseek_r>:
 8012e88:	b538      	push	{r3, r4, r5, lr}
 8012e8a:	4d07      	ldr	r5, [pc, #28]	; (8012ea8 <_lseek_r+0x20>)
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	4608      	mov	r0, r1
 8012e90:	4611      	mov	r1, r2
 8012e92:	2200      	movs	r2, #0
 8012e94:	602a      	str	r2, [r5, #0]
 8012e96:	461a      	mov	r2, r3
 8012e98:	f7f6 fbb8 	bl	800960c <_lseek>
 8012e9c:	1c43      	adds	r3, r0, #1
 8012e9e:	d102      	bne.n	8012ea6 <_lseek_r+0x1e>
 8012ea0:	682b      	ldr	r3, [r5, #0]
 8012ea2:	b103      	cbz	r3, 8012ea6 <_lseek_r+0x1e>
 8012ea4:	6023      	str	r3, [r4, #0]
 8012ea6:	bd38      	pop	{r3, r4, r5, pc}
 8012ea8:	2000508c 	.word	0x2000508c

08012eac <_read_r>:
 8012eac:	b538      	push	{r3, r4, r5, lr}
 8012eae:	4d07      	ldr	r5, [pc, #28]	; (8012ecc <_read_r+0x20>)
 8012eb0:	4604      	mov	r4, r0
 8012eb2:	4608      	mov	r0, r1
 8012eb4:	4611      	mov	r1, r2
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	602a      	str	r2, [r5, #0]
 8012eba:	461a      	mov	r2, r3
 8012ebc:	f7f6 fb7e 	bl	80095bc <_read>
 8012ec0:	1c43      	adds	r3, r0, #1
 8012ec2:	d102      	bne.n	8012eca <_read_r+0x1e>
 8012ec4:	682b      	ldr	r3, [r5, #0]
 8012ec6:	b103      	cbz	r3, 8012eca <_read_r+0x1e>
 8012ec8:	6023      	str	r3, [r4, #0]
 8012eca:	bd38      	pop	{r3, r4, r5, pc}
 8012ecc:	2000508c 	.word	0x2000508c

08012ed0 <_sbrk_r>:
 8012ed0:	b538      	push	{r3, r4, r5, lr}
 8012ed2:	4d06      	ldr	r5, [pc, #24]	; (8012eec <_sbrk_r+0x1c>)
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	4608      	mov	r0, r1
 8012eda:	602b      	str	r3, [r5, #0]
 8012edc:	f7f6 fb98 	bl	8009610 <_sbrk>
 8012ee0:	1c43      	adds	r3, r0, #1
 8012ee2:	d102      	bne.n	8012eea <_sbrk_r+0x1a>
 8012ee4:	682b      	ldr	r3, [r5, #0]
 8012ee6:	b103      	cbz	r3, 8012eea <_sbrk_r+0x1a>
 8012ee8:	6023      	str	r3, [r4, #0]
 8012eea:	bd38      	pop	{r3, r4, r5, pc}
 8012eec:	2000508c 	.word	0x2000508c

08012ef0 <_write_r>:
 8012ef0:	b538      	push	{r3, r4, r5, lr}
 8012ef2:	4d07      	ldr	r5, [pc, #28]	; (8012f10 <_write_r+0x20>)
 8012ef4:	4604      	mov	r4, r0
 8012ef6:	4608      	mov	r0, r1
 8012ef8:	4611      	mov	r1, r2
 8012efa:	2200      	movs	r2, #0
 8012efc:	602a      	str	r2, [r5, #0]
 8012efe:	461a      	mov	r2, r3
 8012f00:	f7f6 fb6a 	bl	80095d8 <_write>
 8012f04:	1c43      	adds	r3, r0, #1
 8012f06:	d102      	bne.n	8012f0e <_write_r+0x1e>
 8012f08:	682b      	ldr	r3, [r5, #0]
 8012f0a:	b103      	cbz	r3, 8012f0e <_write_r+0x1e>
 8012f0c:	6023      	str	r3, [r4, #0]
 8012f0e:	bd38      	pop	{r3, r4, r5, pc}
 8012f10:	2000508c 	.word	0x2000508c

08012f14 <__errno>:
 8012f14:	4b01      	ldr	r3, [pc, #4]	; (8012f1c <__errno+0x8>)
 8012f16:	6818      	ldr	r0, [r3, #0]
 8012f18:	4770      	bx	lr
 8012f1a:	bf00      	nop
 8012f1c:	20000554 	.word	0x20000554

08012f20 <__libc_init_array>:
 8012f20:	b570      	push	{r4, r5, r6, lr}
 8012f22:	4d0d      	ldr	r5, [pc, #52]	; (8012f58 <__libc_init_array+0x38>)
 8012f24:	4c0d      	ldr	r4, [pc, #52]	; (8012f5c <__libc_init_array+0x3c>)
 8012f26:	1b64      	subs	r4, r4, r5
 8012f28:	10a4      	asrs	r4, r4, #2
 8012f2a:	2600      	movs	r6, #0
 8012f2c:	42a6      	cmp	r6, r4
 8012f2e:	d109      	bne.n	8012f44 <__libc_init_array+0x24>
 8012f30:	4d0b      	ldr	r5, [pc, #44]	; (8012f60 <__libc_init_array+0x40>)
 8012f32:	4c0c      	ldr	r4, [pc, #48]	; (8012f64 <__libc_init_array+0x44>)
 8012f34:	f003 fa04 	bl	8016340 <_init>
 8012f38:	1b64      	subs	r4, r4, r5
 8012f3a:	10a4      	asrs	r4, r4, #2
 8012f3c:	2600      	movs	r6, #0
 8012f3e:	42a6      	cmp	r6, r4
 8012f40:	d105      	bne.n	8012f4e <__libc_init_array+0x2e>
 8012f42:	bd70      	pop	{r4, r5, r6, pc}
 8012f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f48:	4798      	blx	r3
 8012f4a:	3601      	adds	r6, #1
 8012f4c:	e7ee      	b.n	8012f2c <__libc_init_array+0xc>
 8012f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f52:	4798      	blx	r3
 8012f54:	3601      	adds	r6, #1
 8012f56:	e7f2      	b.n	8012f3e <__libc_init_array+0x1e>
 8012f58:	08017360 	.word	0x08017360
 8012f5c:	08017360 	.word	0x08017360
 8012f60:	08017360 	.word	0x08017360
 8012f64:	08017364 	.word	0x08017364

08012f68 <__retarget_lock_init_recursive>:
 8012f68:	4770      	bx	lr

08012f6a <__retarget_lock_acquire_recursive>:
 8012f6a:	4770      	bx	lr

08012f6c <__retarget_lock_release_recursive>:
 8012f6c:	4770      	bx	lr

08012f6e <memcpy>:
 8012f6e:	440a      	add	r2, r1
 8012f70:	4291      	cmp	r1, r2
 8012f72:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f76:	d100      	bne.n	8012f7a <memcpy+0xc>
 8012f78:	4770      	bx	lr
 8012f7a:	b510      	push	{r4, lr}
 8012f7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f84:	4291      	cmp	r1, r2
 8012f86:	d1f9      	bne.n	8012f7c <memcpy+0xe>
 8012f88:	bd10      	pop	{r4, pc}
 8012f8a:	0000      	movs	r0, r0
 8012f8c:	0000      	movs	r0, r0
	...

08012f90 <nan>:
 8012f90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012f98 <nan+0x8>
 8012f94:	4770      	bx	lr
 8012f96:	bf00      	nop
 8012f98:	00000000 	.word	0x00000000
 8012f9c:	7ff80000 	.word	0x7ff80000

08012fa0 <nanf>:
 8012fa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012fa8 <nanf+0x8>
 8012fa4:	4770      	bx	lr
 8012fa6:	bf00      	nop
 8012fa8:	7fc00000 	.word	0x7fc00000

08012fac <__assert_func>:
 8012fac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fae:	4614      	mov	r4, r2
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	4b09      	ldr	r3, [pc, #36]	; (8012fd8 <__assert_func+0x2c>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	4605      	mov	r5, r0
 8012fb8:	68d8      	ldr	r0, [r3, #12]
 8012fba:	b14c      	cbz	r4, 8012fd0 <__assert_func+0x24>
 8012fbc:	4b07      	ldr	r3, [pc, #28]	; (8012fdc <__assert_func+0x30>)
 8012fbe:	9100      	str	r1, [sp, #0]
 8012fc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fc4:	4906      	ldr	r1, [pc, #24]	; (8012fe0 <__assert_func+0x34>)
 8012fc6:	462b      	mov	r3, r5
 8012fc8:	f7ff fd08 	bl	80129dc <fiprintf>
 8012fcc:	f002 fe6e 	bl	8015cac <abort>
 8012fd0:	4b04      	ldr	r3, [pc, #16]	; (8012fe4 <__assert_func+0x38>)
 8012fd2:	461c      	mov	r4, r3
 8012fd4:	e7f3      	b.n	8012fbe <__assert_func+0x12>
 8012fd6:	bf00      	nop
 8012fd8:	20000554 	.word	0x20000554
 8012fdc:	08017081 	.word	0x08017081
 8012fe0:	0801708e 	.word	0x0801708e
 8012fe4:	080170bc 	.word	0x080170bc

08012fe8 <quorem>:
 8012fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fec:	6903      	ldr	r3, [r0, #16]
 8012fee:	690c      	ldr	r4, [r1, #16]
 8012ff0:	42a3      	cmp	r3, r4
 8012ff2:	4607      	mov	r7, r0
 8012ff4:	db7e      	blt.n	80130f4 <quorem+0x10c>
 8012ff6:	3c01      	subs	r4, #1
 8012ff8:	f101 0814 	add.w	r8, r1, #20
 8012ffc:	f100 0514 	add.w	r5, r0, #20
 8013000:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013004:	9301      	str	r3, [sp, #4]
 8013006:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801300a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801300e:	3301      	adds	r3, #1
 8013010:	429a      	cmp	r2, r3
 8013012:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013016:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801301a:	fbb2 f6f3 	udiv	r6, r2, r3
 801301e:	d331      	bcc.n	8013084 <quorem+0x9c>
 8013020:	f04f 0e00 	mov.w	lr, #0
 8013024:	4640      	mov	r0, r8
 8013026:	46ac      	mov	ip, r5
 8013028:	46f2      	mov	sl, lr
 801302a:	f850 2b04 	ldr.w	r2, [r0], #4
 801302e:	b293      	uxth	r3, r2
 8013030:	fb06 e303 	mla	r3, r6, r3, lr
 8013034:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013038:	0c1a      	lsrs	r2, r3, #16
 801303a:	b29b      	uxth	r3, r3
 801303c:	ebaa 0303 	sub.w	r3, sl, r3
 8013040:	f8dc a000 	ldr.w	sl, [ip]
 8013044:	fa13 f38a 	uxtah	r3, r3, sl
 8013048:	fb06 220e 	mla	r2, r6, lr, r2
 801304c:	9300      	str	r3, [sp, #0]
 801304e:	9b00      	ldr	r3, [sp, #0]
 8013050:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013054:	b292      	uxth	r2, r2
 8013056:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801305a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801305e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013062:	4581      	cmp	r9, r0
 8013064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013068:	f84c 3b04 	str.w	r3, [ip], #4
 801306c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013070:	d2db      	bcs.n	801302a <quorem+0x42>
 8013072:	f855 300b 	ldr.w	r3, [r5, fp]
 8013076:	b92b      	cbnz	r3, 8013084 <quorem+0x9c>
 8013078:	9b01      	ldr	r3, [sp, #4]
 801307a:	3b04      	subs	r3, #4
 801307c:	429d      	cmp	r5, r3
 801307e:	461a      	mov	r2, r3
 8013080:	d32c      	bcc.n	80130dc <quorem+0xf4>
 8013082:	613c      	str	r4, [r7, #16]
 8013084:	4638      	mov	r0, r7
 8013086:	f001 fca5 	bl	80149d4 <__mcmp>
 801308a:	2800      	cmp	r0, #0
 801308c:	db22      	blt.n	80130d4 <quorem+0xec>
 801308e:	3601      	adds	r6, #1
 8013090:	4629      	mov	r1, r5
 8013092:	2000      	movs	r0, #0
 8013094:	f858 2b04 	ldr.w	r2, [r8], #4
 8013098:	f8d1 c000 	ldr.w	ip, [r1]
 801309c:	b293      	uxth	r3, r2
 801309e:	1ac3      	subs	r3, r0, r3
 80130a0:	0c12      	lsrs	r2, r2, #16
 80130a2:	fa13 f38c 	uxtah	r3, r3, ip
 80130a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80130aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80130b4:	45c1      	cmp	r9, r8
 80130b6:	f841 3b04 	str.w	r3, [r1], #4
 80130ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80130be:	d2e9      	bcs.n	8013094 <quorem+0xac>
 80130c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80130c8:	b922      	cbnz	r2, 80130d4 <quorem+0xec>
 80130ca:	3b04      	subs	r3, #4
 80130cc:	429d      	cmp	r5, r3
 80130ce:	461a      	mov	r2, r3
 80130d0:	d30a      	bcc.n	80130e8 <quorem+0x100>
 80130d2:	613c      	str	r4, [r7, #16]
 80130d4:	4630      	mov	r0, r6
 80130d6:	b003      	add	sp, #12
 80130d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130dc:	6812      	ldr	r2, [r2, #0]
 80130de:	3b04      	subs	r3, #4
 80130e0:	2a00      	cmp	r2, #0
 80130e2:	d1ce      	bne.n	8013082 <quorem+0x9a>
 80130e4:	3c01      	subs	r4, #1
 80130e6:	e7c9      	b.n	801307c <quorem+0x94>
 80130e8:	6812      	ldr	r2, [r2, #0]
 80130ea:	3b04      	subs	r3, #4
 80130ec:	2a00      	cmp	r2, #0
 80130ee:	d1f0      	bne.n	80130d2 <quorem+0xea>
 80130f0:	3c01      	subs	r4, #1
 80130f2:	e7eb      	b.n	80130cc <quorem+0xe4>
 80130f4:	2000      	movs	r0, #0
 80130f6:	e7ee      	b.n	80130d6 <quorem+0xee>

080130f8 <_dtoa_r>:
 80130f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130fc:	ed2d 8b04 	vpush	{d8-d9}
 8013100:	69c5      	ldr	r5, [r0, #28]
 8013102:	b093      	sub	sp, #76	; 0x4c
 8013104:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013108:	ec57 6b10 	vmov	r6, r7, d0
 801310c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013110:	9107      	str	r1, [sp, #28]
 8013112:	4604      	mov	r4, r0
 8013114:	920a      	str	r2, [sp, #40]	; 0x28
 8013116:	930d      	str	r3, [sp, #52]	; 0x34
 8013118:	b975      	cbnz	r5, 8013138 <_dtoa_r+0x40>
 801311a:	2010      	movs	r0, #16
 801311c:	f7fd fd2e 	bl	8010b7c <malloc>
 8013120:	4602      	mov	r2, r0
 8013122:	61e0      	str	r0, [r4, #28]
 8013124:	b920      	cbnz	r0, 8013130 <_dtoa_r+0x38>
 8013126:	4bae      	ldr	r3, [pc, #696]	; (80133e0 <_dtoa_r+0x2e8>)
 8013128:	21ef      	movs	r1, #239	; 0xef
 801312a:	48ae      	ldr	r0, [pc, #696]	; (80133e4 <_dtoa_r+0x2ec>)
 801312c:	f7ff ff3e 	bl	8012fac <__assert_func>
 8013130:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013134:	6005      	str	r5, [r0, #0]
 8013136:	60c5      	str	r5, [r0, #12]
 8013138:	69e3      	ldr	r3, [r4, #28]
 801313a:	6819      	ldr	r1, [r3, #0]
 801313c:	b151      	cbz	r1, 8013154 <_dtoa_r+0x5c>
 801313e:	685a      	ldr	r2, [r3, #4]
 8013140:	604a      	str	r2, [r1, #4]
 8013142:	2301      	movs	r3, #1
 8013144:	4093      	lsls	r3, r2
 8013146:	608b      	str	r3, [r1, #8]
 8013148:	4620      	mov	r0, r4
 801314a:	f001 f9bd 	bl	80144c8 <_Bfree>
 801314e:	69e3      	ldr	r3, [r4, #28]
 8013150:	2200      	movs	r2, #0
 8013152:	601a      	str	r2, [r3, #0]
 8013154:	1e3b      	subs	r3, r7, #0
 8013156:	bfbb      	ittet	lt
 8013158:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801315c:	9303      	strlt	r3, [sp, #12]
 801315e:	2300      	movge	r3, #0
 8013160:	2201      	movlt	r2, #1
 8013162:	bfac      	ite	ge
 8013164:	f8c8 3000 	strge.w	r3, [r8]
 8013168:	f8c8 2000 	strlt.w	r2, [r8]
 801316c:	4b9e      	ldr	r3, [pc, #632]	; (80133e8 <_dtoa_r+0x2f0>)
 801316e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013172:	ea33 0308 	bics.w	r3, r3, r8
 8013176:	d11b      	bne.n	80131b0 <_dtoa_r+0xb8>
 8013178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801317a:	f242 730f 	movw	r3, #9999	; 0x270f
 801317e:	6013      	str	r3, [r2, #0]
 8013180:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8013184:	4333      	orrs	r3, r6
 8013186:	f000 8593 	beq.w	8013cb0 <_dtoa_r+0xbb8>
 801318a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801318c:	b963      	cbnz	r3, 80131a8 <_dtoa_r+0xb0>
 801318e:	4b97      	ldr	r3, [pc, #604]	; (80133ec <_dtoa_r+0x2f4>)
 8013190:	e027      	b.n	80131e2 <_dtoa_r+0xea>
 8013192:	4b97      	ldr	r3, [pc, #604]	; (80133f0 <_dtoa_r+0x2f8>)
 8013194:	9300      	str	r3, [sp, #0]
 8013196:	3308      	adds	r3, #8
 8013198:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801319a:	6013      	str	r3, [r2, #0]
 801319c:	9800      	ldr	r0, [sp, #0]
 801319e:	b013      	add	sp, #76	; 0x4c
 80131a0:	ecbd 8b04 	vpop	{d8-d9}
 80131a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a8:	4b90      	ldr	r3, [pc, #576]	; (80133ec <_dtoa_r+0x2f4>)
 80131aa:	9300      	str	r3, [sp, #0]
 80131ac:	3303      	adds	r3, #3
 80131ae:	e7f3      	b.n	8013198 <_dtoa_r+0xa0>
 80131b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131b4:	2200      	movs	r2, #0
 80131b6:	ec51 0b17 	vmov	r0, r1, d7
 80131ba:	eeb0 8a47 	vmov.f32	s16, s14
 80131be:	eef0 8a67 	vmov.f32	s17, s15
 80131c2:	2300      	movs	r3, #0
 80131c4:	f7ed fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 80131c8:	4681      	mov	r9, r0
 80131ca:	b160      	cbz	r0, 80131e6 <_dtoa_r+0xee>
 80131cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80131ce:	2301      	movs	r3, #1
 80131d0:	6013      	str	r3, [r2, #0]
 80131d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	f000 8568 	beq.w	8013caa <_dtoa_r+0xbb2>
 80131da:	4b86      	ldr	r3, [pc, #536]	; (80133f4 <_dtoa_r+0x2fc>)
 80131dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80131de:	6013      	str	r3, [r2, #0]
 80131e0:	3b01      	subs	r3, #1
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	e7da      	b.n	801319c <_dtoa_r+0xa4>
 80131e6:	aa10      	add	r2, sp, #64	; 0x40
 80131e8:	a911      	add	r1, sp, #68	; 0x44
 80131ea:	4620      	mov	r0, r4
 80131ec:	eeb0 0a48 	vmov.f32	s0, s16
 80131f0:	eef0 0a68 	vmov.f32	s1, s17
 80131f4:	f001 fd04 	bl	8014c00 <__d2b>
 80131f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80131fc:	4682      	mov	sl, r0
 80131fe:	2d00      	cmp	r5, #0
 8013200:	d07f      	beq.n	8013302 <_dtoa_r+0x20a>
 8013202:	ee18 3a90 	vmov	r3, s17
 8013206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801320a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801320e:	ec51 0b18 	vmov	r0, r1, d8
 8013212:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801321a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801321e:	4619      	mov	r1, r3
 8013220:	2200      	movs	r2, #0
 8013222:	4b75      	ldr	r3, [pc, #468]	; (80133f8 <_dtoa_r+0x300>)
 8013224:	f7ed f830 	bl	8000288 <__aeabi_dsub>
 8013228:	a367      	add	r3, pc, #412	; (adr r3, 80133c8 <_dtoa_r+0x2d0>)
 801322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322e:	f7ed f9e3 	bl	80005f8 <__aeabi_dmul>
 8013232:	a367      	add	r3, pc, #412	; (adr r3, 80133d0 <_dtoa_r+0x2d8>)
 8013234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013238:	f7ed f828 	bl	800028c <__adddf3>
 801323c:	4606      	mov	r6, r0
 801323e:	4628      	mov	r0, r5
 8013240:	460f      	mov	r7, r1
 8013242:	f7ed f96f 	bl	8000524 <__aeabi_i2d>
 8013246:	a364      	add	r3, pc, #400	; (adr r3, 80133d8 <_dtoa_r+0x2e0>)
 8013248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801324c:	f7ed f9d4 	bl	80005f8 <__aeabi_dmul>
 8013250:	4602      	mov	r2, r0
 8013252:	460b      	mov	r3, r1
 8013254:	4630      	mov	r0, r6
 8013256:	4639      	mov	r1, r7
 8013258:	f7ed f818 	bl	800028c <__adddf3>
 801325c:	4606      	mov	r6, r0
 801325e:	460f      	mov	r7, r1
 8013260:	f7ed fc7a 	bl	8000b58 <__aeabi_d2iz>
 8013264:	2200      	movs	r2, #0
 8013266:	4683      	mov	fp, r0
 8013268:	2300      	movs	r3, #0
 801326a:	4630      	mov	r0, r6
 801326c:	4639      	mov	r1, r7
 801326e:	f7ed fc35 	bl	8000adc <__aeabi_dcmplt>
 8013272:	b148      	cbz	r0, 8013288 <_dtoa_r+0x190>
 8013274:	4658      	mov	r0, fp
 8013276:	f7ed f955 	bl	8000524 <__aeabi_i2d>
 801327a:	4632      	mov	r2, r6
 801327c:	463b      	mov	r3, r7
 801327e:	f7ed fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8013282:	b908      	cbnz	r0, 8013288 <_dtoa_r+0x190>
 8013284:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013288:	f1bb 0f16 	cmp.w	fp, #22
 801328c:	d857      	bhi.n	801333e <_dtoa_r+0x246>
 801328e:	4b5b      	ldr	r3, [pc, #364]	; (80133fc <_dtoa_r+0x304>)
 8013290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	ec51 0b18 	vmov	r0, r1, d8
 801329c:	f7ed fc1e 	bl	8000adc <__aeabi_dcmplt>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	d04e      	beq.n	8013342 <_dtoa_r+0x24a>
 80132a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80132a8:	2300      	movs	r3, #0
 80132aa:	930c      	str	r3, [sp, #48]	; 0x30
 80132ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132ae:	1b5b      	subs	r3, r3, r5
 80132b0:	1e5a      	subs	r2, r3, #1
 80132b2:	bf45      	ittet	mi
 80132b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80132b8:	9305      	strmi	r3, [sp, #20]
 80132ba:	2300      	movpl	r3, #0
 80132bc:	2300      	movmi	r3, #0
 80132be:	9206      	str	r2, [sp, #24]
 80132c0:	bf54      	ite	pl
 80132c2:	9305      	strpl	r3, [sp, #20]
 80132c4:	9306      	strmi	r3, [sp, #24]
 80132c6:	f1bb 0f00 	cmp.w	fp, #0
 80132ca:	db3c      	blt.n	8013346 <_dtoa_r+0x24e>
 80132cc:	9b06      	ldr	r3, [sp, #24]
 80132ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80132d2:	445b      	add	r3, fp
 80132d4:	9306      	str	r3, [sp, #24]
 80132d6:	2300      	movs	r3, #0
 80132d8:	9308      	str	r3, [sp, #32]
 80132da:	9b07      	ldr	r3, [sp, #28]
 80132dc:	2b09      	cmp	r3, #9
 80132de:	d868      	bhi.n	80133b2 <_dtoa_r+0x2ba>
 80132e0:	2b05      	cmp	r3, #5
 80132e2:	bfc4      	itt	gt
 80132e4:	3b04      	subgt	r3, #4
 80132e6:	9307      	strgt	r3, [sp, #28]
 80132e8:	9b07      	ldr	r3, [sp, #28]
 80132ea:	f1a3 0302 	sub.w	r3, r3, #2
 80132ee:	bfcc      	ite	gt
 80132f0:	2500      	movgt	r5, #0
 80132f2:	2501      	movle	r5, #1
 80132f4:	2b03      	cmp	r3, #3
 80132f6:	f200 8085 	bhi.w	8013404 <_dtoa_r+0x30c>
 80132fa:	e8df f003 	tbb	[pc, r3]
 80132fe:	3b2e      	.short	0x3b2e
 8013300:	5839      	.short	0x5839
 8013302:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013306:	441d      	add	r5, r3
 8013308:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801330c:	2b20      	cmp	r3, #32
 801330e:	bfc1      	itttt	gt
 8013310:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013314:	fa08 f803 	lslgt.w	r8, r8, r3
 8013318:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801331c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013320:	bfd6      	itet	le
 8013322:	f1c3 0320 	rsble	r3, r3, #32
 8013326:	ea48 0003 	orrgt.w	r0, r8, r3
 801332a:	fa06 f003 	lslle.w	r0, r6, r3
 801332e:	f7ed f8e9 	bl	8000504 <__aeabi_ui2d>
 8013332:	2201      	movs	r2, #1
 8013334:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013338:	3d01      	subs	r5, #1
 801333a:	920e      	str	r2, [sp, #56]	; 0x38
 801333c:	e76f      	b.n	801321e <_dtoa_r+0x126>
 801333e:	2301      	movs	r3, #1
 8013340:	e7b3      	b.n	80132aa <_dtoa_r+0x1b2>
 8013342:	900c      	str	r0, [sp, #48]	; 0x30
 8013344:	e7b2      	b.n	80132ac <_dtoa_r+0x1b4>
 8013346:	9b05      	ldr	r3, [sp, #20]
 8013348:	eba3 030b 	sub.w	r3, r3, fp
 801334c:	9305      	str	r3, [sp, #20]
 801334e:	f1cb 0300 	rsb	r3, fp, #0
 8013352:	9308      	str	r3, [sp, #32]
 8013354:	2300      	movs	r3, #0
 8013356:	930b      	str	r3, [sp, #44]	; 0x2c
 8013358:	e7bf      	b.n	80132da <_dtoa_r+0x1e2>
 801335a:	2300      	movs	r3, #0
 801335c:	9309      	str	r3, [sp, #36]	; 0x24
 801335e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013360:	2b00      	cmp	r3, #0
 8013362:	dc52      	bgt.n	801340a <_dtoa_r+0x312>
 8013364:	2301      	movs	r3, #1
 8013366:	9301      	str	r3, [sp, #4]
 8013368:	9304      	str	r3, [sp, #16]
 801336a:	461a      	mov	r2, r3
 801336c:	920a      	str	r2, [sp, #40]	; 0x28
 801336e:	e00b      	b.n	8013388 <_dtoa_r+0x290>
 8013370:	2301      	movs	r3, #1
 8013372:	e7f3      	b.n	801335c <_dtoa_r+0x264>
 8013374:	2300      	movs	r3, #0
 8013376:	9309      	str	r3, [sp, #36]	; 0x24
 8013378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801337a:	445b      	add	r3, fp
 801337c:	9301      	str	r3, [sp, #4]
 801337e:	3301      	adds	r3, #1
 8013380:	2b01      	cmp	r3, #1
 8013382:	9304      	str	r3, [sp, #16]
 8013384:	bfb8      	it	lt
 8013386:	2301      	movlt	r3, #1
 8013388:	69e0      	ldr	r0, [r4, #28]
 801338a:	2100      	movs	r1, #0
 801338c:	2204      	movs	r2, #4
 801338e:	f102 0614 	add.w	r6, r2, #20
 8013392:	429e      	cmp	r6, r3
 8013394:	d93d      	bls.n	8013412 <_dtoa_r+0x31a>
 8013396:	6041      	str	r1, [r0, #4]
 8013398:	4620      	mov	r0, r4
 801339a:	f001 f855 	bl	8014448 <_Balloc>
 801339e:	9000      	str	r0, [sp, #0]
 80133a0:	2800      	cmp	r0, #0
 80133a2:	d139      	bne.n	8013418 <_dtoa_r+0x320>
 80133a4:	4b16      	ldr	r3, [pc, #88]	; (8013400 <_dtoa_r+0x308>)
 80133a6:	4602      	mov	r2, r0
 80133a8:	f240 11af 	movw	r1, #431	; 0x1af
 80133ac:	e6bd      	b.n	801312a <_dtoa_r+0x32>
 80133ae:	2301      	movs	r3, #1
 80133b0:	e7e1      	b.n	8013376 <_dtoa_r+0x27e>
 80133b2:	2501      	movs	r5, #1
 80133b4:	2300      	movs	r3, #0
 80133b6:	9307      	str	r3, [sp, #28]
 80133b8:	9509      	str	r5, [sp, #36]	; 0x24
 80133ba:	f04f 33ff 	mov.w	r3, #4294967295
 80133be:	9301      	str	r3, [sp, #4]
 80133c0:	9304      	str	r3, [sp, #16]
 80133c2:	2200      	movs	r2, #0
 80133c4:	2312      	movs	r3, #18
 80133c6:	e7d1      	b.n	801336c <_dtoa_r+0x274>
 80133c8:	636f4361 	.word	0x636f4361
 80133cc:	3fd287a7 	.word	0x3fd287a7
 80133d0:	8b60c8b3 	.word	0x8b60c8b3
 80133d4:	3fc68a28 	.word	0x3fc68a28
 80133d8:	509f79fb 	.word	0x509f79fb
 80133dc:	3fd34413 	.word	0x3fd34413
 80133e0:	08017008 	.word	0x08017008
 80133e4:	080170ca 	.word	0x080170ca
 80133e8:	7ff00000 	.word	0x7ff00000
 80133ec:	080170c6 	.word	0x080170c6
 80133f0:	080170bd 	.word	0x080170bd
 80133f4:	08017314 	.word	0x08017314
 80133f8:	3ff80000 	.word	0x3ff80000
 80133fc:	08017218 	.word	0x08017218
 8013400:	08017122 	.word	0x08017122
 8013404:	2301      	movs	r3, #1
 8013406:	9309      	str	r3, [sp, #36]	; 0x24
 8013408:	e7d7      	b.n	80133ba <_dtoa_r+0x2c2>
 801340a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801340c:	9301      	str	r3, [sp, #4]
 801340e:	9304      	str	r3, [sp, #16]
 8013410:	e7ba      	b.n	8013388 <_dtoa_r+0x290>
 8013412:	3101      	adds	r1, #1
 8013414:	0052      	lsls	r2, r2, #1
 8013416:	e7ba      	b.n	801338e <_dtoa_r+0x296>
 8013418:	69e3      	ldr	r3, [r4, #28]
 801341a:	9a00      	ldr	r2, [sp, #0]
 801341c:	601a      	str	r2, [r3, #0]
 801341e:	9b04      	ldr	r3, [sp, #16]
 8013420:	2b0e      	cmp	r3, #14
 8013422:	f200 80a8 	bhi.w	8013576 <_dtoa_r+0x47e>
 8013426:	2d00      	cmp	r5, #0
 8013428:	f000 80a5 	beq.w	8013576 <_dtoa_r+0x47e>
 801342c:	f1bb 0f00 	cmp.w	fp, #0
 8013430:	dd38      	ble.n	80134a4 <_dtoa_r+0x3ac>
 8013432:	4bc0      	ldr	r3, [pc, #768]	; (8013734 <_dtoa_r+0x63c>)
 8013434:	f00b 020f 	and.w	r2, fp, #15
 8013438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801343c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013440:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013444:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013448:	d019      	beq.n	801347e <_dtoa_r+0x386>
 801344a:	4bbb      	ldr	r3, [pc, #748]	; (8013738 <_dtoa_r+0x640>)
 801344c:	ec51 0b18 	vmov	r0, r1, d8
 8013450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013454:	f7ed f9fa 	bl	800084c <__aeabi_ddiv>
 8013458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801345c:	f008 080f 	and.w	r8, r8, #15
 8013460:	2503      	movs	r5, #3
 8013462:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013738 <_dtoa_r+0x640>
 8013466:	f1b8 0f00 	cmp.w	r8, #0
 801346a:	d10a      	bne.n	8013482 <_dtoa_r+0x38a>
 801346c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013470:	4632      	mov	r2, r6
 8013472:	463b      	mov	r3, r7
 8013474:	f7ed f9ea 	bl	800084c <__aeabi_ddiv>
 8013478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801347c:	e02b      	b.n	80134d6 <_dtoa_r+0x3de>
 801347e:	2502      	movs	r5, #2
 8013480:	e7ef      	b.n	8013462 <_dtoa_r+0x36a>
 8013482:	f018 0f01 	tst.w	r8, #1
 8013486:	d008      	beq.n	801349a <_dtoa_r+0x3a2>
 8013488:	4630      	mov	r0, r6
 801348a:	4639      	mov	r1, r7
 801348c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013490:	f7ed f8b2 	bl	80005f8 <__aeabi_dmul>
 8013494:	3501      	adds	r5, #1
 8013496:	4606      	mov	r6, r0
 8013498:	460f      	mov	r7, r1
 801349a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801349e:	f109 0908 	add.w	r9, r9, #8
 80134a2:	e7e0      	b.n	8013466 <_dtoa_r+0x36e>
 80134a4:	f000 809f 	beq.w	80135e6 <_dtoa_r+0x4ee>
 80134a8:	f1cb 0600 	rsb	r6, fp, #0
 80134ac:	4ba1      	ldr	r3, [pc, #644]	; (8013734 <_dtoa_r+0x63c>)
 80134ae:	4fa2      	ldr	r7, [pc, #648]	; (8013738 <_dtoa_r+0x640>)
 80134b0:	f006 020f 	and.w	r2, r6, #15
 80134b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134bc:	ec51 0b18 	vmov	r0, r1, d8
 80134c0:	f7ed f89a 	bl	80005f8 <__aeabi_dmul>
 80134c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134c8:	1136      	asrs	r6, r6, #4
 80134ca:	2300      	movs	r3, #0
 80134cc:	2502      	movs	r5, #2
 80134ce:	2e00      	cmp	r6, #0
 80134d0:	d17e      	bne.n	80135d0 <_dtoa_r+0x4d8>
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d1d0      	bne.n	8013478 <_dtoa_r+0x380>
 80134d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	f000 8084 	beq.w	80135ea <_dtoa_r+0x4f2>
 80134e2:	4b96      	ldr	r3, [pc, #600]	; (801373c <_dtoa_r+0x644>)
 80134e4:	2200      	movs	r2, #0
 80134e6:	4640      	mov	r0, r8
 80134e8:	4649      	mov	r1, r9
 80134ea:	f7ed faf7 	bl	8000adc <__aeabi_dcmplt>
 80134ee:	2800      	cmp	r0, #0
 80134f0:	d07b      	beq.n	80135ea <_dtoa_r+0x4f2>
 80134f2:	9b04      	ldr	r3, [sp, #16]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d078      	beq.n	80135ea <_dtoa_r+0x4f2>
 80134f8:	9b01      	ldr	r3, [sp, #4]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	dd39      	ble.n	8013572 <_dtoa_r+0x47a>
 80134fe:	4b90      	ldr	r3, [pc, #576]	; (8013740 <_dtoa_r+0x648>)
 8013500:	2200      	movs	r2, #0
 8013502:	4640      	mov	r0, r8
 8013504:	4649      	mov	r1, r9
 8013506:	f7ed f877 	bl	80005f8 <__aeabi_dmul>
 801350a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801350e:	9e01      	ldr	r6, [sp, #4]
 8013510:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013514:	3501      	adds	r5, #1
 8013516:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801351a:	4628      	mov	r0, r5
 801351c:	f7ed f802 	bl	8000524 <__aeabi_i2d>
 8013520:	4642      	mov	r2, r8
 8013522:	464b      	mov	r3, r9
 8013524:	f7ed f868 	bl	80005f8 <__aeabi_dmul>
 8013528:	4b86      	ldr	r3, [pc, #536]	; (8013744 <_dtoa_r+0x64c>)
 801352a:	2200      	movs	r2, #0
 801352c:	f7ec feae 	bl	800028c <__adddf3>
 8013530:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013538:	9303      	str	r3, [sp, #12]
 801353a:	2e00      	cmp	r6, #0
 801353c:	d158      	bne.n	80135f0 <_dtoa_r+0x4f8>
 801353e:	4b82      	ldr	r3, [pc, #520]	; (8013748 <_dtoa_r+0x650>)
 8013540:	2200      	movs	r2, #0
 8013542:	4640      	mov	r0, r8
 8013544:	4649      	mov	r1, r9
 8013546:	f7ec fe9f 	bl	8000288 <__aeabi_dsub>
 801354a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801354e:	4680      	mov	r8, r0
 8013550:	4689      	mov	r9, r1
 8013552:	f7ed fae1 	bl	8000b18 <__aeabi_dcmpgt>
 8013556:	2800      	cmp	r0, #0
 8013558:	f040 8296 	bne.w	8013a88 <_dtoa_r+0x990>
 801355c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013560:	4640      	mov	r0, r8
 8013562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013566:	4649      	mov	r1, r9
 8013568:	f7ed fab8 	bl	8000adc <__aeabi_dcmplt>
 801356c:	2800      	cmp	r0, #0
 801356e:	f040 8289 	bne.w	8013a84 <_dtoa_r+0x98c>
 8013572:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013578:	2b00      	cmp	r3, #0
 801357a:	f2c0 814e 	blt.w	801381a <_dtoa_r+0x722>
 801357e:	f1bb 0f0e 	cmp.w	fp, #14
 8013582:	f300 814a 	bgt.w	801381a <_dtoa_r+0x722>
 8013586:	4b6b      	ldr	r3, [pc, #428]	; (8013734 <_dtoa_r+0x63c>)
 8013588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801358c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013592:	2b00      	cmp	r3, #0
 8013594:	f280 80dc 	bge.w	8013750 <_dtoa_r+0x658>
 8013598:	9b04      	ldr	r3, [sp, #16]
 801359a:	2b00      	cmp	r3, #0
 801359c:	f300 80d8 	bgt.w	8013750 <_dtoa_r+0x658>
 80135a0:	f040 826f 	bne.w	8013a82 <_dtoa_r+0x98a>
 80135a4:	4b68      	ldr	r3, [pc, #416]	; (8013748 <_dtoa_r+0x650>)
 80135a6:	2200      	movs	r2, #0
 80135a8:	4640      	mov	r0, r8
 80135aa:	4649      	mov	r1, r9
 80135ac:	f7ed f824 	bl	80005f8 <__aeabi_dmul>
 80135b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80135b4:	f7ed faa6 	bl	8000b04 <__aeabi_dcmpge>
 80135b8:	9e04      	ldr	r6, [sp, #16]
 80135ba:	4637      	mov	r7, r6
 80135bc:	2800      	cmp	r0, #0
 80135be:	f040 8245 	bne.w	8013a4c <_dtoa_r+0x954>
 80135c2:	9d00      	ldr	r5, [sp, #0]
 80135c4:	2331      	movs	r3, #49	; 0x31
 80135c6:	f805 3b01 	strb.w	r3, [r5], #1
 80135ca:	f10b 0b01 	add.w	fp, fp, #1
 80135ce:	e241      	b.n	8013a54 <_dtoa_r+0x95c>
 80135d0:	07f2      	lsls	r2, r6, #31
 80135d2:	d505      	bpl.n	80135e0 <_dtoa_r+0x4e8>
 80135d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135d8:	f7ed f80e 	bl	80005f8 <__aeabi_dmul>
 80135dc:	3501      	adds	r5, #1
 80135de:	2301      	movs	r3, #1
 80135e0:	1076      	asrs	r6, r6, #1
 80135e2:	3708      	adds	r7, #8
 80135e4:	e773      	b.n	80134ce <_dtoa_r+0x3d6>
 80135e6:	2502      	movs	r5, #2
 80135e8:	e775      	b.n	80134d6 <_dtoa_r+0x3de>
 80135ea:	9e04      	ldr	r6, [sp, #16]
 80135ec:	465f      	mov	r7, fp
 80135ee:	e792      	b.n	8013516 <_dtoa_r+0x41e>
 80135f0:	9900      	ldr	r1, [sp, #0]
 80135f2:	4b50      	ldr	r3, [pc, #320]	; (8013734 <_dtoa_r+0x63c>)
 80135f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80135f8:	4431      	add	r1, r6
 80135fa:	9102      	str	r1, [sp, #8]
 80135fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135fe:	eeb0 9a47 	vmov.f32	s18, s14
 8013602:	eef0 9a67 	vmov.f32	s19, s15
 8013606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801360a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801360e:	2900      	cmp	r1, #0
 8013610:	d044      	beq.n	801369c <_dtoa_r+0x5a4>
 8013612:	494e      	ldr	r1, [pc, #312]	; (801374c <_dtoa_r+0x654>)
 8013614:	2000      	movs	r0, #0
 8013616:	f7ed f919 	bl	800084c <__aeabi_ddiv>
 801361a:	ec53 2b19 	vmov	r2, r3, d9
 801361e:	f7ec fe33 	bl	8000288 <__aeabi_dsub>
 8013622:	9d00      	ldr	r5, [sp, #0]
 8013624:	ec41 0b19 	vmov	d9, r0, r1
 8013628:	4649      	mov	r1, r9
 801362a:	4640      	mov	r0, r8
 801362c:	f7ed fa94 	bl	8000b58 <__aeabi_d2iz>
 8013630:	4606      	mov	r6, r0
 8013632:	f7ec ff77 	bl	8000524 <__aeabi_i2d>
 8013636:	4602      	mov	r2, r0
 8013638:	460b      	mov	r3, r1
 801363a:	4640      	mov	r0, r8
 801363c:	4649      	mov	r1, r9
 801363e:	f7ec fe23 	bl	8000288 <__aeabi_dsub>
 8013642:	3630      	adds	r6, #48	; 0x30
 8013644:	f805 6b01 	strb.w	r6, [r5], #1
 8013648:	ec53 2b19 	vmov	r2, r3, d9
 801364c:	4680      	mov	r8, r0
 801364e:	4689      	mov	r9, r1
 8013650:	f7ed fa44 	bl	8000adc <__aeabi_dcmplt>
 8013654:	2800      	cmp	r0, #0
 8013656:	d164      	bne.n	8013722 <_dtoa_r+0x62a>
 8013658:	4642      	mov	r2, r8
 801365a:	464b      	mov	r3, r9
 801365c:	4937      	ldr	r1, [pc, #220]	; (801373c <_dtoa_r+0x644>)
 801365e:	2000      	movs	r0, #0
 8013660:	f7ec fe12 	bl	8000288 <__aeabi_dsub>
 8013664:	ec53 2b19 	vmov	r2, r3, d9
 8013668:	f7ed fa38 	bl	8000adc <__aeabi_dcmplt>
 801366c:	2800      	cmp	r0, #0
 801366e:	f040 80b6 	bne.w	80137de <_dtoa_r+0x6e6>
 8013672:	9b02      	ldr	r3, [sp, #8]
 8013674:	429d      	cmp	r5, r3
 8013676:	f43f af7c 	beq.w	8013572 <_dtoa_r+0x47a>
 801367a:	4b31      	ldr	r3, [pc, #196]	; (8013740 <_dtoa_r+0x648>)
 801367c:	ec51 0b19 	vmov	r0, r1, d9
 8013680:	2200      	movs	r2, #0
 8013682:	f7ec ffb9 	bl	80005f8 <__aeabi_dmul>
 8013686:	4b2e      	ldr	r3, [pc, #184]	; (8013740 <_dtoa_r+0x648>)
 8013688:	ec41 0b19 	vmov	d9, r0, r1
 801368c:	2200      	movs	r2, #0
 801368e:	4640      	mov	r0, r8
 8013690:	4649      	mov	r1, r9
 8013692:	f7ec ffb1 	bl	80005f8 <__aeabi_dmul>
 8013696:	4680      	mov	r8, r0
 8013698:	4689      	mov	r9, r1
 801369a:	e7c5      	b.n	8013628 <_dtoa_r+0x530>
 801369c:	ec51 0b17 	vmov	r0, r1, d7
 80136a0:	f7ec ffaa 	bl	80005f8 <__aeabi_dmul>
 80136a4:	9b02      	ldr	r3, [sp, #8]
 80136a6:	9d00      	ldr	r5, [sp, #0]
 80136a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80136aa:	ec41 0b19 	vmov	d9, r0, r1
 80136ae:	4649      	mov	r1, r9
 80136b0:	4640      	mov	r0, r8
 80136b2:	f7ed fa51 	bl	8000b58 <__aeabi_d2iz>
 80136b6:	4606      	mov	r6, r0
 80136b8:	f7ec ff34 	bl	8000524 <__aeabi_i2d>
 80136bc:	3630      	adds	r6, #48	; 0x30
 80136be:	4602      	mov	r2, r0
 80136c0:	460b      	mov	r3, r1
 80136c2:	4640      	mov	r0, r8
 80136c4:	4649      	mov	r1, r9
 80136c6:	f7ec fddf 	bl	8000288 <__aeabi_dsub>
 80136ca:	f805 6b01 	strb.w	r6, [r5], #1
 80136ce:	9b02      	ldr	r3, [sp, #8]
 80136d0:	429d      	cmp	r5, r3
 80136d2:	4680      	mov	r8, r0
 80136d4:	4689      	mov	r9, r1
 80136d6:	f04f 0200 	mov.w	r2, #0
 80136da:	d124      	bne.n	8013726 <_dtoa_r+0x62e>
 80136dc:	4b1b      	ldr	r3, [pc, #108]	; (801374c <_dtoa_r+0x654>)
 80136de:	ec51 0b19 	vmov	r0, r1, d9
 80136e2:	f7ec fdd3 	bl	800028c <__adddf3>
 80136e6:	4602      	mov	r2, r0
 80136e8:	460b      	mov	r3, r1
 80136ea:	4640      	mov	r0, r8
 80136ec:	4649      	mov	r1, r9
 80136ee:	f7ed fa13 	bl	8000b18 <__aeabi_dcmpgt>
 80136f2:	2800      	cmp	r0, #0
 80136f4:	d173      	bne.n	80137de <_dtoa_r+0x6e6>
 80136f6:	ec53 2b19 	vmov	r2, r3, d9
 80136fa:	4914      	ldr	r1, [pc, #80]	; (801374c <_dtoa_r+0x654>)
 80136fc:	2000      	movs	r0, #0
 80136fe:	f7ec fdc3 	bl	8000288 <__aeabi_dsub>
 8013702:	4602      	mov	r2, r0
 8013704:	460b      	mov	r3, r1
 8013706:	4640      	mov	r0, r8
 8013708:	4649      	mov	r1, r9
 801370a:	f7ed f9e7 	bl	8000adc <__aeabi_dcmplt>
 801370e:	2800      	cmp	r0, #0
 8013710:	f43f af2f 	beq.w	8013572 <_dtoa_r+0x47a>
 8013714:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013716:	1e6b      	subs	r3, r5, #1
 8013718:	930f      	str	r3, [sp, #60]	; 0x3c
 801371a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801371e:	2b30      	cmp	r3, #48	; 0x30
 8013720:	d0f8      	beq.n	8013714 <_dtoa_r+0x61c>
 8013722:	46bb      	mov	fp, r7
 8013724:	e04a      	b.n	80137bc <_dtoa_r+0x6c4>
 8013726:	4b06      	ldr	r3, [pc, #24]	; (8013740 <_dtoa_r+0x648>)
 8013728:	f7ec ff66 	bl	80005f8 <__aeabi_dmul>
 801372c:	4680      	mov	r8, r0
 801372e:	4689      	mov	r9, r1
 8013730:	e7bd      	b.n	80136ae <_dtoa_r+0x5b6>
 8013732:	bf00      	nop
 8013734:	08017218 	.word	0x08017218
 8013738:	080171f0 	.word	0x080171f0
 801373c:	3ff00000 	.word	0x3ff00000
 8013740:	40240000 	.word	0x40240000
 8013744:	401c0000 	.word	0x401c0000
 8013748:	40140000 	.word	0x40140000
 801374c:	3fe00000 	.word	0x3fe00000
 8013750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013754:	9d00      	ldr	r5, [sp, #0]
 8013756:	4642      	mov	r2, r8
 8013758:	464b      	mov	r3, r9
 801375a:	4630      	mov	r0, r6
 801375c:	4639      	mov	r1, r7
 801375e:	f7ed f875 	bl	800084c <__aeabi_ddiv>
 8013762:	f7ed f9f9 	bl	8000b58 <__aeabi_d2iz>
 8013766:	9001      	str	r0, [sp, #4]
 8013768:	f7ec fedc 	bl	8000524 <__aeabi_i2d>
 801376c:	4642      	mov	r2, r8
 801376e:	464b      	mov	r3, r9
 8013770:	f7ec ff42 	bl	80005f8 <__aeabi_dmul>
 8013774:	4602      	mov	r2, r0
 8013776:	460b      	mov	r3, r1
 8013778:	4630      	mov	r0, r6
 801377a:	4639      	mov	r1, r7
 801377c:	f7ec fd84 	bl	8000288 <__aeabi_dsub>
 8013780:	9e01      	ldr	r6, [sp, #4]
 8013782:	9f04      	ldr	r7, [sp, #16]
 8013784:	3630      	adds	r6, #48	; 0x30
 8013786:	f805 6b01 	strb.w	r6, [r5], #1
 801378a:	9e00      	ldr	r6, [sp, #0]
 801378c:	1bae      	subs	r6, r5, r6
 801378e:	42b7      	cmp	r7, r6
 8013790:	4602      	mov	r2, r0
 8013792:	460b      	mov	r3, r1
 8013794:	d134      	bne.n	8013800 <_dtoa_r+0x708>
 8013796:	f7ec fd79 	bl	800028c <__adddf3>
 801379a:	4642      	mov	r2, r8
 801379c:	464b      	mov	r3, r9
 801379e:	4606      	mov	r6, r0
 80137a0:	460f      	mov	r7, r1
 80137a2:	f7ed f9b9 	bl	8000b18 <__aeabi_dcmpgt>
 80137a6:	b9c8      	cbnz	r0, 80137dc <_dtoa_r+0x6e4>
 80137a8:	4642      	mov	r2, r8
 80137aa:	464b      	mov	r3, r9
 80137ac:	4630      	mov	r0, r6
 80137ae:	4639      	mov	r1, r7
 80137b0:	f7ed f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80137b4:	b110      	cbz	r0, 80137bc <_dtoa_r+0x6c4>
 80137b6:	9b01      	ldr	r3, [sp, #4]
 80137b8:	07db      	lsls	r3, r3, #31
 80137ba:	d40f      	bmi.n	80137dc <_dtoa_r+0x6e4>
 80137bc:	4651      	mov	r1, sl
 80137be:	4620      	mov	r0, r4
 80137c0:	f000 fe82 	bl	80144c8 <_Bfree>
 80137c4:	2300      	movs	r3, #0
 80137c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80137c8:	702b      	strb	r3, [r5, #0]
 80137ca:	f10b 0301 	add.w	r3, fp, #1
 80137ce:	6013      	str	r3, [r2, #0]
 80137d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	f43f ace2 	beq.w	801319c <_dtoa_r+0xa4>
 80137d8:	601d      	str	r5, [r3, #0]
 80137da:	e4df      	b.n	801319c <_dtoa_r+0xa4>
 80137dc:	465f      	mov	r7, fp
 80137de:	462b      	mov	r3, r5
 80137e0:	461d      	mov	r5, r3
 80137e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137e6:	2a39      	cmp	r2, #57	; 0x39
 80137e8:	d106      	bne.n	80137f8 <_dtoa_r+0x700>
 80137ea:	9a00      	ldr	r2, [sp, #0]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d1f7      	bne.n	80137e0 <_dtoa_r+0x6e8>
 80137f0:	9900      	ldr	r1, [sp, #0]
 80137f2:	2230      	movs	r2, #48	; 0x30
 80137f4:	3701      	adds	r7, #1
 80137f6:	700a      	strb	r2, [r1, #0]
 80137f8:	781a      	ldrb	r2, [r3, #0]
 80137fa:	3201      	adds	r2, #1
 80137fc:	701a      	strb	r2, [r3, #0]
 80137fe:	e790      	b.n	8013722 <_dtoa_r+0x62a>
 8013800:	4ba3      	ldr	r3, [pc, #652]	; (8013a90 <_dtoa_r+0x998>)
 8013802:	2200      	movs	r2, #0
 8013804:	f7ec fef8 	bl	80005f8 <__aeabi_dmul>
 8013808:	2200      	movs	r2, #0
 801380a:	2300      	movs	r3, #0
 801380c:	4606      	mov	r6, r0
 801380e:	460f      	mov	r7, r1
 8013810:	f7ed f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013814:	2800      	cmp	r0, #0
 8013816:	d09e      	beq.n	8013756 <_dtoa_r+0x65e>
 8013818:	e7d0      	b.n	80137bc <_dtoa_r+0x6c4>
 801381a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801381c:	2a00      	cmp	r2, #0
 801381e:	f000 80ca 	beq.w	80139b6 <_dtoa_r+0x8be>
 8013822:	9a07      	ldr	r2, [sp, #28]
 8013824:	2a01      	cmp	r2, #1
 8013826:	f300 80ad 	bgt.w	8013984 <_dtoa_r+0x88c>
 801382a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801382c:	2a00      	cmp	r2, #0
 801382e:	f000 80a5 	beq.w	801397c <_dtoa_r+0x884>
 8013832:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013836:	9e08      	ldr	r6, [sp, #32]
 8013838:	9d05      	ldr	r5, [sp, #20]
 801383a:	9a05      	ldr	r2, [sp, #20]
 801383c:	441a      	add	r2, r3
 801383e:	9205      	str	r2, [sp, #20]
 8013840:	9a06      	ldr	r2, [sp, #24]
 8013842:	2101      	movs	r1, #1
 8013844:	441a      	add	r2, r3
 8013846:	4620      	mov	r0, r4
 8013848:	9206      	str	r2, [sp, #24]
 801384a:	f000 ff3d 	bl	80146c8 <__i2b>
 801384e:	4607      	mov	r7, r0
 8013850:	b165      	cbz	r5, 801386c <_dtoa_r+0x774>
 8013852:	9b06      	ldr	r3, [sp, #24]
 8013854:	2b00      	cmp	r3, #0
 8013856:	dd09      	ble.n	801386c <_dtoa_r+0x774>
 8013858:	42ab      	cmp	r3, r5
 801385a:	9a05      	ldr	r2, [sp, #20]
 801385c:	bfa8      	it	ge
 801385e:	462b      	movge	r3, r5
 8013860:	1ad2      	subs	r2, r2, r3
 8013862:	9205      	str	r2, [sp, #20]
 8013864:	9a06      	ldr	r2, [sp, #24]
 8013866:	1aed      	subs	r5, r5, r3
 8013868:	1ad3      	subs	r3, r2, r3
 801386a:	9306      	str	r3, [sp, #24]
 801386c:	9b08      	ldr	r3, [sp, #32]
 801386e:	b1f3      	cbz	r3, 80138ae <_dtoa_r+0x7b6>
 8013870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013872:	2b00      	cmp	r3, #0
 8013874:	f000 80a3 	beq.w	80139be <_dtoa_r+0x8c6>
 8013878:	2e00      	cmp	r6, #0
 801387a:	dd10      	ble.n	801389e <_dtoa_r+0x7a6>
 801387c:	4639      	mov	r1, r7
 801387e:	4632      	mov	r2, r6
 8013880:	4620      	mov	r0, r4
 8013882:	f000 ffe1 	bl	8014848 <__pow5mult>
 8013886:	4652      	mov	r2, sl
 8013888:	4601      	mov	r1, r0
 801388a:	4607      	mov	r7, r0
 801388c:	4620      	mov	r0, r4
 801388e:	f000 ff31 	bl	80146f4 <__multiply>
 8013892:	4651      	mov	r1, sl
 8013894:	4680      	mov	r8, r0
 8013896:	4620      	mov	r0, r4
 8013898:	f000 fe16 	bl	80144c8 <_Bfree>
 801389c:	46c2      	mov	sl, r8
 801389e:	9b08      	ldr	r3, [sp, #32]
 80138a0:	1b9a      	subs	r2, r3, r6
 80138a2:	d004      	beq.n	80138ae <_dtoa_r+0x7b6>
 80138a4:	4651      	mov	r1, sl
 80138a6:	4620      	mov	r0, r4
 80138a8:	f000 ffce 	bl	8014848 <__pow5mult>
 80138ac:	4682      	mov	sl, r0
 80138ae:	2101      	movs	r1, #1
 80138b0:	4620      	mov	r0, r4
 80138b2:	f000 ff09 	bl	80146c8 <__i2b>
 80138b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	4606      	mov	r6, r0
 80138bc:	f340 8081 	ble.w	80139c2 <_dtoa_r+0x8ca>
 80138c0:	461a      	mov	r2, r3
 80138c2:	4601      	mov	r1, r0
 80138c4:	4620      	mov	r0, r4
 80138c6:	f000 ffbf 	bl	8014848 <__pow5mult>
 80138ca:	9b07      	ldr	r3, [sp, #28]
 80138cc:	2b01      	cmp	r3, #1
 80138ce:	4606      	mov	r6, r0
 80138d0:	dd7a      	ble.n	80139c8 <_dtoa_r+0x8d0>
 80138d2:	f04f 0800 	mov.w	r8, #0
 80138d6:	6933      	ldr	r3, [r6, #16]
 80138d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80138dc:	6918      	ldr	r0, [r3, #16]
 80138de:	f000 fea5 	bl	801462c <__hi0bits>
 80138e2:	f1c0 0020 	rsb	r0, r0, #32
 80138e6:	9b06      	ldr	r3, [sp, #24]
 80138e8:	4418      	add	r0, r3
 80138ea:	f010 001f 	ands.w	r0, r0, #31
 80138ee:	f000 8094 	beq.w	8013a1a <_dtoa_r+0x922>
 80138f2:	f1c0 0320 	rsb	r3, r0, #32
 80138f6:	2b04      	cmp	r3, #4
 80138f8:	f340 8085 	ble.w	8013a06 <_dtoa_r+0x90e>
 80138fc:	9b05      	ldr	r3, [sp, #20]
 80138fe:	f1c0 001c 	rsb	r0, r0, #28
 8013902:	4403      	add	r3, r0
 8013904:	9305      	str	r3, [sp, #20]
 8013906:	9b06      	ldr	r3, [sp, #24]
 8013908:	4403      	add	r3, r0
 801390a:	4405      	add	r5, r0
 801390c:	9306      	str	r3, [sp, #24]
 801390e:	9b05      	ldr	r3, [sp, #20]
 8013910:	2b00      	cmp	r3, #0
 8013912:	dd05      	ble.n	8013920 <_dtoa_r+0x828>
 8013914:	4651      	mov	r1, sl
 8013916:	461a      	mov	r2, r3
 8013918:	4620      	mov	r0, r4
 801391a:	f000 ffef 	bl	80148fc <__lshift>
 801391e:	4682      	mov	sl, r0
 8013920:	9b06      	ldr	r3, [sp, #24]
 8013922:	2b00      	cmp	r3, #0
 8013924:	dd05      	ble.n	8013932 <_dtoa_r+0x83a>
 8013926:	4631      	mov	r1, r6
 8013928:	461a      	mov	r2, r3
 801392a:	4620      	mov	r0, r4
 801392c:	f000 ffe6 	bl	80148fc <__lshift>
 8013930:	4606      	mov	r6, r0
 8013932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013934:	2b00      	cmp	r3, #0
 8013936:	d072      	beq.n	8013a1e <_dtoa_r+0x926>
 8013938:	4631      	mov	r1, r6
 801393a:	4650      	mov	r0, sl
 801393c:	f001 f84a 	bl	80149d4 <__mcmp>
 8013940:	2800      	cmp	r0, #0
 8013942:	da6c      	bge.n	8013a1e <_dtoa_r+0x926>
 8013944:	2300      	movs	r3, #0
 8013946:	4651      	mov	r1, sl
 8013948:	220a      	movs	r2, #10
 801394a:	4620      	mov	r0, r4
 801394c:	f000 fdde 	bl	801450c <__multadd>
 8013950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013952:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013956:	4682      	mov	sl, r0
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 81b0 	beq.w	8013cbe <_dtoa_r+0xbc6>
 801395e:	2300      	movs	r3, #0
 8013960:	4639      	mov	r1, r7
 8013962:	220a      	movs	r2, #10
 8013964:	4620      	mov	r0, r4
 8013966:	f000 fdd1 	bl	801450c <__multadd>
 801396a:	9b01      	ldr	r3, [sp, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	4607      	mov	r7, r0
 8013970:	f300 8096 	bgt.w	8013aa0 <_dtoa_r+0x9a8>
 8013974:	9b07      	ldr	r3, [sp, #28]
 8013976:	2b02      	cmp	r3, #2
 8013978:	dc59      	bgt.n	8013a2e <_dtoa_r+0x936>
 801397a:	e091      	b.n	8013aa0 <_dtoa_r+0x9a8>
 801397c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801397e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013982:	e758      	b.n	8013836 <_dtoa_r+0x73e>
 8013984:	9b04      	ldr	r3, [sp, #16]
 8013986:	1e5e      	subs	r6, r3, #1
 8013988:	9b08      	ldr	r3, [sp, #32]
 801398a:	42b3      	cmp	r3, r6
 801398c:	bfbf      	itttt	lt
 801398e:	9b08      	ldrlt	r3, [sp, #32]
 8013990:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013992:	9608      	strlt	r6, [sp, #32]
 8013994:	1af3      	sublt	r3, r6, r3
 8013996:	bfb4      	ite	lt
 8013998:	18d2      	addlt	r2, r2, r3
 801399a:	1b9e      	subge	r6, r3, r6
 801399c:	9b04      	ldr	r3, [sp, #16]
 801399e:	bfbc      	itt	lt
 80139a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80139a2:	2600      	movlt	r6, #0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	bfb7      	itett	lt
 80139a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80139ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80139b0:	1a9d      	sublt	r5, r3, r2
 80139b2:	2300      	movlt	r3, #0
 80139b4:	e741      	b.n	801383a <_dtoa_r+0x742>
 80139b6:	9e08      	ldr	r6, [sp, #32]
 80139b8:	9d05      	ldr	r5, [sp, #20]
 80139ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80139bc:	e748      	b.n	8013850 <_dtoa_r+0x758>
 80139be:	9a08      	ldr	r2, [sp, #32]
 80139c0:	e770      	b.n	80138a4 <_dtoa_r+0x7ac>
 80139c2:	9b07      	ldr	r3, [sp, #28]
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	dc19      	bgt.n	80139fc <_dtoa_r+0x904>
 80139c8:	9b02      	ldr	r3, [sp, #8]
 80139ca:	b9bb      	cbnz	r3, 80139fc <_dtoa_r+0x904>
 80139cc:	9b03      	ldr	r3, [sp, #12]
 80139ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139d2:	b99b      	cbnz	r3, 80139fc <_dtoa_r+0x904>
 80139d4:	9b03      	ldr	r3, [sp, #12]
 80139d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80139da:	0d1b      	lsrs	r3, r3, #20
 80139dc:	051b      	lsls	r3, r3, #20
 80139de:	b183      	cbz	r3, 8013a02 <_dtoa_r+0x90a>
 80139e0:	9b05      	ldr	r3, [sp, #20]
 80139e2:	3301      	adds	r3, #1
 80139e4:	9305      	str	r3, [sp, #20]
 80139e6:	9b06      	ldr	r3, [sp, #24]
 80139e8:	3301      	adds	r3, #1
 80139ea:	9306      	str	r3, [sp, #24]
 80139ec:	f04f 0801 	mov.w	r8, #1
 80139f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	f47f af6f 	bne.w	80138d6 <_dtoa_r+0x7de>
 80139f8:	2001      	movs	r0, #1
 80139fa:	e774      	b.n	80138e6 <_dtoa_r+0x7ee>
 80139fc:	f04f 0800 	mov.w	r8, #0
 8013a00:	e7f6      	b.n	80139f0 <_dtoa_r+0x8f8>
 8013a02:	4698      	mov	r8, r3
 8013a04:	e7f4      	b.n	80139f0 <_dtoa_r+0x8f8>
 8013a06:	d082      	beq.n	801390e <_dtoa_r+0x816>
 8013a08:	9a05      	ldr	r2, [sp, #20]
 8013a0a:	331c      	adds	r3, #28
 8013a0c:	441a      	add	r2, r3
 8013a0e:	9205      	str	r2, [sp, #20]
 8013a10:	9a06      	ldr	r2, [sp, #24]
 8013a12:	441a      	add	r2, r3
 8013a14:	441d      	add	r5, r3
 8013a16:	9206      	str	r2, [sp, #24]
 8013a18:	e779      	b.n	801390e <_dtoa_r+0x816>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	e7f4      	b.n	8013a08 <_dtoa_r+0x910>
 8013a1e:	9b04      	ldr	r3, [sp, #16]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	dc37      	bgt.n	8013a94 <_dtoa_r+0x99c>
 8013a24:	9b07      	ldr	r3, [sp, #28]
 8013a26:	2b02      	cmp	r3, #2
 8013a28:	dd34      	ble.n	8013a94 <_dtoa_r+0x99c>
 8013a2a:	9b04      	ldr	r3, [sp, #16]
 8013a2c:	9301      	str	r3, [sp, #4]
 8013a2e:	9b01      	ldr	r3, [sp, #4]
 8013a30:	b963      	cbnz	r3, 8013a4c <_dtoa_r+0x954>
 8013a32:	4631      	mov	r1, r6
 8013a34:	2205      	movs	r2, #5
 8013a36:	4620      	mov	r0, r4
 8013a38:	f000 fd68 	bl	801450c <__multadd>
 8013a3c:	4601      	mov	r1, r0
 8013a3e:	4606      	mov	r6, r0
 8013a40:	4650      	mov	r0, sl
 8013a42:	f000 ffc7 	bl	80149d4 <__mcmp>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	f73f adbb 	bgt.w	80135c2 <_dtoa_r+0x4ca>
 8013a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a4e:	9d00      	ldr	r5, [sp, #0]
 8013a50:	ea6f 0b03 	mvn.w	fp, r3
 8013a54:	f04f 0800 	mov.w	r8, #0
 8013a58:	4631      	mov	r1, r6
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	f000 fd34 	bl	80144c8 <_Bfree>
 8013a60:	2f00      	cmp	r7, #0
 8013a62:	f43f aeab 	beq.w	80137bc <_dtoa_r+0x6c4>
 8013a66:	f1b8 0f00 	cmp.w	r8, #0
 8013a6a:	d005      	beq.n	8013a78 <_dtoa_r+0x980>
 8013a6c:	45b8      	cmp	r8, r7
 8013a6e:	d003      	beq.n	8013a78 <_dtoa_r+0x980>
 8013a70:	4641      	mov	r1, r8
 8013a72:	4620      	mov	r0, r4
 8013a74:	f000 fd28 	bl	80144c8 <_Bfree>
 8013a78:	4639      	mov	r1, r7
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f000 fd24 	bl	80144c8 <_Bfree>
 8013a80:	e69c      	b.n	80137bc <_dtoa_r+0x6c4>
 8013a82:	2600      	movs	r6, #0
 8013a84:	4637      	mov	r7, r6
 8013a86:	e7e1      	b.n	8013a4c <_dtoa_r+0x954>
 8013a88:	46bb      	mov	fp, r7
 8013a8a:	4637      	mov	r7, r6
 8013a8c:	e599      	b.n	80135c2 <_dtoa_r+0x4ca>
 8013a8e:	bf00      	nop
 8013a90:	40240000 	.word	0x40240000
 8013a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	f000 80c8 	beq.w	8013c2c <_dtoa_r+0xb34>
 8013a9c:	9b04      	ldr	r3, [sp, #16]
 8013a9e:	9301      	str	r3, [sp, #4]
 8013aa0:	2d00      	cmp	r5, #0
 8013aa2:	dd05      	ble.n	8013ab0 <_dtoa_r+0x9b8>
 8013aa4:	4639      	mov	r1, r7
 8013aa6:	462a      	mov	r2, r5
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	f000 ff27 	bl	80148fc <__lshift>
 8013aae:	4607      	mov	r7, r0
 8013ab0:	f1b8 0f00 	cmp.w	r8, #0
 8013ab4:	d05b      	beq.n	8013b6e <_dtoa_r+0xa76>
 8013ab6:	6879      	ldr	r1, [r7, #4]
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f000 fcc5 	bl	8014448 <_Balloc>
 8013abe:	4605      	mov	r5, r0
 8013ac0:	b928      	cbnz	r0, 8013ace <_dtoa_r+0x9d6>
 8013ac2:	4b83      	ldr	r3, [pc, #524]	; (8013cd0 <_dtoa_r+0xbd8>)
 8013ac4:	4602      	mov	r2, r0
 8013ac6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013aca:	f7ff bb2e 	b.w	801312a <_dtoa_r+0x32>
 8013ace:	693a      	ldr	r2, [r7, #16]
 8013ad0:	3202      	adds	r2, #2
 8013ad2:	0092      	lsls	r2, r2, #2
 8013ad4:	f107 010c 	add.w	r1, r7, #12
 8013ad8:	300c      	adds	r0, #12
 8013ada:	f7ff fa48 	bl	8012f6e <memcpy>
 8013ade:	2201      	movs	r2, #1
 8013ae0:	4629      	mov	r1, r5
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f000 ff0a 	bl	80148fc <__lshift>
 8013ae8:	9b00      	ldr	r3, [sp, #0]
 8013aea:	3301      	adds	r3, #1
 8013aec:	9304      	str	r3, [sp, #16]
 8013aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013af2:	4413      	add	r3, r2
 8013af4:	9308      	str	r3, [sp, #32]
 8013af6:	9b02      	ldr	r3, [sp, #8]
 8013af8:	f003 0301 	and.w	r3, r3, #1
 8013afc:	46b8      	mov	r8, r7
 8013afe:	9306      	str	r3, [sp, #24]
 8013b00:	4607      	mov	r7, r0
 8013b02:	9b04      	ldr	r3, [sp, #16]
 8013b04:	4631      	mov	r1, r6
 8013b06:	3b01      	subs	r3, #1
 8013b08:	4650      	mov	r0, sl
 8013b0a:	9301      	str	r3, [sp, #4]
 8013b0c:	f7ff fa6c 	bl	8012fe8 <quorem>
 8013b10:	4641      	mov	r1, r8
 8013b12:	9002      	str	r0, [sp, #8]
 8013b14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013b18:	4650      	mov	r0, sl
 8013b1a:	f000 ff5b 	bl	80149d4 <__mcmp>
 8013b1e:	463a      	mov	r2, r7
 8013b20:	9005      	str	r0, [sp, #20]
 8013b22:	4631      	mov	r1, r6
 8013b24:	4620      	mov	r0, r4
 8013b26:	f000 ff71 	bl	8014a0c <__mdiff>
 8013b2a:	68c2      	ldr	r2, [r0, #12]
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	bb02      	cbnz	r2, 8013b72 <_dtoa_r+0xa7a>
 8013b30:	4601      	mov	r1, r0
 8013b32:	4650      	mov	r0, sl
 8013b34:	f000 ff4e 	bl	80149d4 <__mcmp>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	4629      	mov	r1, r5
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8013b40:	f000 fcc2 	bl	80144c8 <_Bfree>
 8013b44:	9b07      	ldr	r3, [sp, #28]
 8013b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b48:	9d04      	ldr	r5, [sp, #16]
 8013b4a:	ea43 0102 	orr.w	r1, r3, r2
 8013b4e:	9b06      	ldr	r3, [sp, #24]
 8013b50:	4319      	orrs	r1, r3
 8013b52:	d110      	bne.n	8013b76 <_dtoa_r+0xa7e>
 8013b54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013b58:	d029      	beq.n	8013bae <_dtoa_r+0xab6>
 8013b5a:	9b05      	ldr	r3, [sp, #20]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	dd02      	ble.n	8013b66 <_dtoa_r+0xa6e>
 8013b60:	9b02      	ldr	r3, [sp, #8]
 8013b62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013b66:	9b01      	ldr	r3, [sp, #4]
 8013b68:	f883 9000 	strb.w	r9, [r3]
 8013b6c:	e774      	b.n	8013a58 <_dtoa_r+0x960>
 8013b6e:	4638      	mov	r0, r7
 8013b70:	e7ba      	b.n	8013ae8 <_dtoa_r+0x9f0>
 8013b72:	2201      	movs	r2, #1
 8013b74:	e7e1      	b.n	8013b3a <_dtoa_r+0xa42>
 8013b76:	9b05      	ldr	r3, [sp, #20]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	db04      	blt.n	8013b86 <_dtoa_r+0xa8e>
 8013b7c:	9907      	ldr	r1, [sp, #28]
 8013b7e:	430b      	orrs	r3, r1
 8013b80:	9906      	ldr	r1, [sp, #24]
 8013b82:	430b      	orrs	r3, r1
 8013b84:	d120      	bne.n	8013bc8 <_dtoa_r+0xad0>
 8013b86:	2a00      	cmp	r2, #0
 8013b88:	dded      	ble.n	8013b66 <_dtoa_r+0xa6e>
 8013b8a:	4651      	mov	r1, sl
 8013b8c:	2201      	movs	r2, #1
 8013b8e:	4620      	mov	r0, r4
 8013b90:	f000 feb4 	bl	80148fc <__lshift>
 8013b94:	4631      	mov	r1, r6
 8013b96:	4682      	mov	sl, r0
 8013b98:	f000 ff1c 	bl	80149d4 <__mcmp>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	dc03      	bgt.n	8013ba8 <_dtoa_r+0xab0>
 8013ba0:	d1e1      	bne.n	8013b66 <_dtoa_r+0xa6e>
 8013ba2:	f019 0f01 	tst.w	r9, #1
 8013ba6:	d0de      	beq.n	8013b66 <_dtoa_r+0xa6e>
 8013ba8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013bac:	d1d8      	bne.n	8013b60 <_dtoa_r+0xa68>
 8013bae:	9a01      	ldr	r2, [sp, #4]
 8013bb0:	2339      	movs	r3, #57	; 0x39
 8013bb2:	7013      	strb	r3, [r2, #0]
 8013bb4:	462b      	mov	r3, r5
 8013bb6:	461d      	mov	r5, r3
 8013bb8:	3b01      	subs	r3, #1
 8013bba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013bbe:	2a39      	cmp	r2, #57	; 0x39
 8013bc0:	d06c      	beq.n	8013c9c <_dtoa_r+0xba4>
 8013bc2:	3201      	adds	r2, #1
 8013bc4:	701a      	strb	r2, [r3, #0]
 8013bc6:	e747      	b.n	8013a58 <_dtoa_r+0x960>
 8013bc8:	2a00      	cmp	r2, #0
 8013bca:	dd07      	ble.n	8013bdc <_dtoa_r+0xae4>
 8013bcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013bd0:	d0ed      	beq.n	8013bae <_dtoa_r+0xab6>
 8013bd2:	9a01      	ldr	r2, [sp, #4]
 8013bd4:	f109 0301 	add.w	r3, r9, #1
 8013bd8:	7013      	strb	r3, [r2, #0]
 8013bda:	e73d      	b.n	8013a58 <_dtoa_r+0x960>
 8013bdc:	9b04      	ldr	r3, [sp, #16]
 8013bde:	9a08      	ldr	r2, [sp, #32]
 8013be0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d043      	beq.n	8013c70 <_dtoa_r+0xb78>
 8013be8:	4651      	mov	r1, sl
 8013bea:	2300      	movs	r3, #0
 8013bec:	220a      	movs	r2, #10
 8013bee:	4620      	mov	r0, r4
 8013bf0:	f000 fc8c 	bl	801450c <__multadd>
 8013bf4:	45b8      	cmp	r8, r7
 8013bf6:	4682      	mov	sl, r0
 8013bf8:	f04f 0300 	mov.w	r3, #0
 8013bfc:	f04f 020a 	mov.w	r2, #10
 8013c00:	4641      	mov	r1, r8
 8013c02:	4620      	mov	r0, r4
 8013c04:	d107      	bne.n	8013c16 <_dtoa_r+0xb1e>
 8013c06:	f000 fc81 	bl	801450c <__multadd>
 8013c0a:	4680      	mov	r8, r0
 8013c0c:	4607      	mov	r7, r0
 8013c0e:	9b04      	ldr	r3, [sp, #16]
 8013c10:	3301      	adds	r3, #1
 8013c12:	9304      	str	r3, [sp, #16]
 8013c14:	e775      	b.n	8013b02 <_dtoa_r+0xa0a>
 8013c16:	f000 fc79 	bl	801450c <__multadd>
 8013c1a:	4639      	mov	r1, r7
 8013c1c:	4680      	mov	r8, r0
 8013c1e:	2300      	movs	r3, #0
 8013c20:	220a      	movs	r2, #10
 8013c22:	4620      	mov	r0, r4
 8013c24:	f000 fc72 	bl	801450c <__multadd>
 8013c28:	4607      	mov	r7, r0
 8013c2a:	e7f0      	b.n	8013c0e <_dtoa_r+0xb16>
 8013c2c:	9b04      	ldr	r3, [sp, #16]
 8013c2e:	9301      	str	r3, [sp, #4]
 8013c30:	9d00      	ldr	r5, [sp, #0]
 8013c32:	4631      	mov	r1, r6
 8013c34:	4650      	mov	r0, sl
 8013c36:	f7ff f9d7 	bl	8012fe8 <quorem>
 8013c3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013c3e:	9b00      	ldr	r3, [sp, #0]
 8013c40:	f805 9b01 	strb.w	r9, [r5], #1
 8013c44:	1aea      	subs	r2, r5, r3
 8013c46:	9b01      	ldr	r3, [sp, #4]
 8013c48:	4293      	cmp	r3, r2
 8013c4a:	dd07      	ble.n	8013c5c <_dtoa_r+0xb64>
 8013c4c:	4651      	mov	r1, sl
 8013c4e:	2300      	movs	r3, #0
 8013c50:	220a      	movs	r2, #10
 8013c52:	4620      	mov	r0, r4
 8013c54:	f000 fc5a 	bl	801450c <__multadd>
 8013c58:	4682      	mov	sl, r0
 8013c5a:	e7ea      	b.n	8013c32 <_dtoa_r+0xb3a>
 8013c5c:	9b01      	ldr	r3, [sp, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	bfc8      	it	gt
 8013c62:	461d      	movgt	r5, r3
 8013c64:	9b00      	ldr	r3, [sp, #0]
 8013c66:	bfd8      	it	le
 8013c68:	2501      	movle	r5, #1
 8013c6a:	441d      	add	r5, r3
 8013c6c:	f04f 0800 	mov.w	r8, #0
 8013c70:	4651      	mov	r1, sl
 8013c72:	2201      	movs	r2, #1
 8013c74:	4620      	mov	r0, r4
 8013c76:	f000 fe41 	bl	80148fc <__lshift>
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	4682      	mov	sl, r0
 8013c7e:	f000 fea9 	bl	80149d4 <__mcmp>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	dc96      	bgt.n	8013bb4 <_dtoa_r+0xabc>
 8013c86:	d102      	bne.n	8013c8e <_dtoa_r+0xb96>
 8013c88:	f019 0f01 	tst.w	r9, #1
 8013c8c:	d192      	bne.n	8013bb4 <_dtoa_r+0xabc>
 8013c8e:	462b      	mov	r3, r5
 8013c90:	461d      	mov	r5, r3
 8013c92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c96:	2a30      	cmp	r2, #48	; 0x30
 8013c98:	d0fa      	beq.n	8013c90 <_dtoa_r+0xb98>
 8013c9a:	e6dd      	b.n	8013a58 <_dtoa_r+0x960>
 8013c9c:	9a00      	ldr	r2, [sp, #0]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d189      	bne.n	8013bb6 <_dtoa_r+0xabe>
 8013ca2:	f10b 0b01 	add.w	fp, fp, #1
 8013ca6:	2331      	movs	r3, #49	; 0x31
 8013ca8:	e796      	b.n	8013bd8 <_dtoa_r+0xae0>
 8013caa:	4b0a      	ldr	r3, [pc, #40]	; (8013cd4 <_dtoa_r+0xbdc>)
 8013cac:	f7ff ba99 	b.w	80131e2 <_dtoa_r+0xea>
 8013cb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	f47f aa6d 	bne.w	8013192 <_dtoa_r+0x9a>
 8013cb8:	4b07      	ldr	r3, [pc, #28]	; (8013cd8 <_dtoa_r+0xbe0>)
 8013cba:	f7ff ba92 	b.w	80131e2 <_dtoa_r+0xea>
 8013cbe:	9b01      	ldr	r3, [sp, #4]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	dcb5      	bgt.n	8013c30 <_dtoa_r+0xb38>
 8013cc4:	9b07      	ldr	r3, [sp, #28]
 8013cc6:	2b02      	cmp	r3, #2
 8013cc8:	f73f aeb1 	bgt.w	8013a2e <_dtoa_r+0x936>
 8013ccc:	e7b0      	b.n	8013c30 <_dtoa_r+0xb38>
 8013cce:	bf00      	nop
 8013cd0:	08017122 	.word	0x08017122
 8013cd4:	08017313 	.word	0x08017313
 8013cd8:	080170bd 	.word	0x080170bd

08013cdc <_free_r>:
 8013cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013cde:	2900      	cmp	r1, #0
 8013ce0:	d044      	beq.n	8013d6c <_free_r+0x90>
 8013ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ce6:	9001      	str	r0, [sp, #4]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	f1a1 0404 	sub.w	r4, r1, #4
 8013cee:	bfb8      	it	lt
 8013cf0:	18e4      	addlt	r4, r4, r3
 8013cf2:	f7fc fff3 	bl	8010cdc <__malloc_lock>
 8013cf6:	4a1e      	ldr	r2, [pc, #120]	; (8013d70 <_free_r+0x94>)
 8013cf8:	9801      	ldr	r0, [sp, #4]
 8013cfa:	6813      	ldr	r3, [r2, #0]
 8013cfc:	b933      	cbnz	r3, 8013d0c <_free_r+0x30>
 8013cfe:	6063      	str	r3, [r4, #4]
 8013d00:	6014      	str	r4, [r2, #0]
 8013d02:	b003      	add	sp, #12
 8013d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d08:	f7fc bfee 	b.w	8010ce8 <__malloc_unlock>
 8013d0c:	42a3      	cmp	r3, r4
 8013d0e:	d908      	bls.n	8013d22 <_free_r+0x46>
 8013d10:	6825      	ldr	r5, [r4, #0]
 8013d12:	1961      	adds	r1, r4, r5
 8013d14:	428b      	cmp	r3, r1
 8013d16:	bf01      	itttt	eq
 8013d18:	6819      	ldreq	r1, [r3, #0]
 8013d1a:	685b      	ldreq	r3, [r3, #4]
 8013d1c:	1949      	addeq	r1, r1, r5
 8013d1e:	6021      	streq	r1, [r4, #0]
 8013d20:	e7ed      	b.n	8013cfe <_free_r+0x22>
 8013d22:	461a      	mov	r2, r3
 8013d24:	685b      	ldr	r3, [r3, #4]
 8013d26:	b10b      	cbz	r3, 8013d2c <_free_r+0x50>
 8013d28:	42a3      	cmp	r3, r4
 8013d2a:	d9fa      	bls.n	8013d22 <_free_r+0x46>
 8013d2c:	6811      	ldr	r1, [r2, #0]
 8013d2e:	1855      	adds	r5, r2, r1
 8013d30:	42a5      	cmp	r5, r4
 8013d32:	d10b      	bne.n	8013d4c <_free_r+0x70>
 8013d34:	6824      	ldr	r4, [r4, #0]
 8013d36:	4421      	add	r1, r4
 8013d38:	1854      	adds	r4, r2, r1
 8013d3a:	42a3      	cmp	r3, r4
 8013d3c:	6011      	str	r1, [r2, #0]
 8013d3e:	d1e0      	bne.n	8013d02 <_free_r+0x26>
 8013d40:	681c      	ldr	r4, [r3, #0]
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	6053      	str	r3, [r2, #4]
 8013d46:	440c      	add	r4, r1
 8013d48:	6014      	str	r4, [r2, #0]
 8013d4a:	e7da      	b.n	8013d02 <_free_r+0x26>
 8013d4c:	d902      	bls.n	8013d54 <_free_r+0x78>
 8013d4e:	230c      	movs	r3, #12
 8013d50:	6003      	str	r3, [r0, #0]
 8013d52:	e7d6      	b.n	8013d02 <_free_r+0x26>
 8013d54:	6825      	ldr	r5, [r4, #0]
 8013d56:	1961      	adds	r1, r4, r5
 8013d58:	428b      	cmp	r3, r1
 8013d5a:	bf04      	itt	eq
 8013d5c:	6819      	ldreq	r1, [r3, #0]
 8013d5e:	685b      	ldreq	r3, [r3, #4]
 8013d60:	6063      	str	r3, [r4, #4]
 8013d62:	bf04      	itt	eq
 8013d64:	1949      	addeq	r1, r1, r5
 8013d66:	6021      	streq	r1, [r4, #0]
 8013d68:	6054      	str	r4, [r2, #4]
 8013d6a:	e7ca      	b.n	8013d02 <_free_r+0x26>
 8013d6c:	b003      	add	sp, #12
 8013d6e:	bd30      	pop	{r4, r5, pc}
 8013d70:	20004f48 	.word	0x20004f48

08013d74 <rshift>:
 8013d74:	6903      	ldr	r3, [r0, #16]
 8013d76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013d7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013d82:	f100 0414 	add.w	r4, r0, #20
 8013d86:	dd45      	ble.n	8013e14 <rshift+0xa0>
 8013d88:	f011 011f 	ands.w	r1, r1, #31
 8013d8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013d90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013d94:	d10c      	bne.n	8013db0 <rshift+0x3c>
 8013d96:	f100 0710 	add.w	r7, r0, #16
 8013d9a:	4629      	mov	r1, r5
 8013d9c:	42b1      	cmp	r1, r6
 8013d9e:	d334      	bcc.n	8013e0a <rshift+0x96>
 8013da0:	1a9b      	subs	r3, r3, r2
 8013da2:	009b      	lsls	r3, r3, #2
 8013da4:	1eea      	subs	r2, r5, #3
 8013da6:	4296      	cmp	r6, r2
 8013da8:	bf38      	it	cc
 8013daa:	2300      	movcc	r3, #0
 8013dac:	4423      	add	r3, r4
 8013dae:	e015      	b.n	8013ddc <rshift+0x68>
 8013db0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013db4:	f1c1 0820 	rsb	r8, r1, #32
 8013db8:	40cf      	lsrs	r7, r1
 8013dba:	f105 0e04 	add.w	lr, r5, #4
 8013dbe:	46a1      	mov	r9, r4
 8013dc0:	4576      	cmp	r6, lr
 8013dc2:	46f4      	mov	ip, lr
 8013dc4:	d815      	bhi.n	8013df2 <rshift+0x7e>
 8013dc6:	1a9a      	subs	r2, r3, r2
 8013dc8:	0092      	lsls	r2, r2, #2
 8013dca:	3a04      	subs	r2, #4
 8013dcc:	3501      	adds	r5, #1
 8013dce:	42ae      	cmp	r6, r5
 8013dd0:	bf38      	it	cc
 8013dd2:	2200      	movcc	r2, #0
 8013dd4:	18a3      	adds	r3, r4, r2
 8013dd6:	50a7      	str	r7, [r4, r2]
 8013dd8:	b107      	cbz	r7, 8013ddc <rshift+0x68>
 8013dda:	3304      	adds	r3, #4
 8013ddc:	1b1a      	subs	r2, r3, r4
 8013dde:	42a3      	cmp	r3, r4
 8013de0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013de4:	bf08      	it	eq
 8013de6:	2300      	moveq	r3, #0
 8013de8:	6102      	str	r2, [r0, #16]
 8013dea:	bf08      	it	eq
 8013dec:	6143      	streq	r3, [r0, #20]
 8013dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013df2:	f8dc c000 	ldr.w	ip, [ip]
 8013df6:	fa0c fc08 	lsl.w	ip, ip, r8
 8013dfa:	ea4c 0707 	orr.w	r7, ip, r7
 8013dfe:	f849 7b04 	str.w	r7, [r9], #4
 8013e02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013e06:	40cf      	lsrs	r7, r1
 8013e08:	e7da      	b.n	8013dc0 <rshift+0x4c>
 8013e0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8013e0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013e12:	e7c3      	b.n	8013d9c <rshift+0x28>
 8013e14:	4623      	mov	r3, r4
 8013e16:	e7e1      	b.n	8013ddc <rshift+0x68>

08013e18 <__hexdig_fun>:
 8013e18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013e1c:	2b09      	cmp	r3, #9
 8013e1e:	d802      	bhi.n	8013e26 <__hexdig_fun+0xe>
 8013e20:	3820      	subs	r0, #32
 8013e22:	b2c0      	uxtb	r0, r0
 8013e24:	4770      	bx	lr
 8013e26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013e2a:	2b05      	cmp	r3, #5
 8013e2c:	d801      	bhi.n	8013e32 <__hexdig_fun+0x1a>
 8013e2e:	3847      	subs	r0, #71	; 0x47
 8013e30:	e7f7      	b.n	8013e22 <__hexdig_fun+0xa>
 8013e32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013e36:	2b05      	cmp	r3, #5
 8013e38:	d801      	bhi.n	8013e3e <__hexdig_fun+0x26>
 8013e3a:	3827      	subs	r0, #39	; 0x27
 8013e3c:	e7f1      	b.n	8013e22 <__hexdig_fun+0xa>
 8013e3e:	2000      	movs	r0, #0
 8013e40:	4770      	bx	lr
	...

08013e44 <__gethex>:
 8013e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e48:	4617      	mov	r7, r2
 8013e4a:	680a      	ldr	r2, [r1, #0]
 8013e4c:	b085      	sub	sp, #20
 8013e4e:	f102 0b02 	add.w	fp, r2, #2
 8013e52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013e56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013e5a:	4681      	mov	r9, r0
 8013e5c:	468a      	mov	sl, r1
 8013e5e:	9302      	str	r3, [sp, #8]
 8013e60:	32fe      	adds	r2, #254	; 0xfe
 8013e62:	eb02 030b 	add.w	r3, r2, fp
 8013e66:	46d8      	mov	r8, fp
 8013e68:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013e6c:	9301      	str	r3, [sp, #4]
 8013e6e:	2830      	cmp	r0, #48	; 0x30
 8013e70:	d0f7      	beq.n	8013e62 <__gethex+0x1e>
 8013e72:	f7ff ffd1 	bl	8013e18 <__hexdig_fun>
 8013e76:	4604      	mov	r4, r0
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	d138      	bne.n	8013eee <__gethex+0xaa>
 8013e7c:	49a7      	ldr	r1, [pc, #668]	; (801411c <__gethex+0x2d8>)
 8013e7e:	2201      	movs	r2, #1
 8013e80:	4640      	mov	r0, r8
 8013e82:	f7fe ff7f 	bl	8012d84 <strncmp>
 8013e86:	4606      	mov	r6, r0
 8013e88:	2800      	cmp	r0, #0
 8013e8a:	d169      	bne.n	8013f60 <__gethex+0x11c>
 8013e8c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013e90:	465d      	mov	r5, fp
 8013e92:	f7ff ffc1 	bl	8013e18 <__hexdig_fun>
 8013e96:	2800      	cmp	r0, #0
 8013e98:	d064      	beq.n	8013f64 <__gethex+0x120>
 8013e9a:	465a      	mov	r2, fp
 8013e9c:	7810      	ldrb	r0, [r2, #0]
 8013e9e:	2830      	cmp	r0, #48	; 0x30
 8013ea0:	4690      	mov	r8, r2
 8013ea2:	f102 0201 	add.w	r2, r2, #1
 8013ea6:	d0f9      	beq.n	8013e9c <__gethex+0x58>
 8013ea8:	f7ff ffb6 	bl	8013e18 <__hexdig_fun>
 8013eac:	2301      	movs	r3, #1
 8013eae:	fab0 f480 	clz	r4, r0
 8013eb2:	0964      	lsrs	r4, r4, #5
 8013eb4:	465e      	mov	r6, fp
 8013eb6:	9301      	str	r3, [sp, #4]
 8013eb8:	4642      	mov	r2, r8
 8013eba:	4615      	mov	r5, r2
 8013ebc:	3201      	adds	r2, #1
 8013ebe:	7828      	ldrb	r0, [r5, #0]
 8013ec0:	f7ff ffaa 	bl	8013e18 <__hexdig_fun>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	d1f8      	bne.n	8013eba <__gethex+0x76>
 8013ec8:	4994      	ldr	r1, [pc, #592]	; (801411c <__gethex+0x2d8>)
 8013eca:	2201      	movs	r2, #1
 8013ecc:	4628      	mov	r0, r5
 8013ece:	f7fe ff59 	bl	8012d84 <strncmp>
 8013ed2:	b978      	cbnz	r0, 8013ef4 <__gethex+0xb0>
 8013ed4:	b946      	cbnz	r6, 8013ee8 <__gethex+0xa4>
 8013ed6:	1c6e      	adds	r6, r5, #1
 8013ed8:	4632      	mov	r2, r6
 8013eda:	4615      	mov	r5, r2
 8013edc:	3201      	adds	r2, #1
 8013ede:	7828      	ldrb	r0, [r5, #0]
 8013ee0:	f7ff ff9a 	bl	8013e18 <__hexdig_fun>
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	d1f8      	bne.n	8013eda <__gethex+0x96>
 8013ee8:	1b73      	subs	r3, r6, r5
 8013eea:	009e      	lsls	r6, r3, #2
 8013eec:	e004      	b.n	8013ef8 <__gethex+0xb4>
 8013eee:	2400      	movs	r4, #0
 8013ef0:	4626      	mov	r6, r4
 8013ef2:	e7e1      	b.n	8013eb8 <__gethex+0x74>
 8013ef4:	2e00      	cmp	r6, #0
 8013ef6:	d1f7      	bne.n	8013ee8 <__gethex+0xa4>
 8013ef8:	782b      	ldrb	r3, [r5, #0]
 8013efa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013efe:	2b50      	cmp	r3, #80	; 0x50
 8013f00:	d13d      	bne.n	8013f7e <__gethex+0x13a>
 8013f02:	786b      	ldrb	r3, [r5, #1]
 8013f04:	2b2b      	cmp	r3, #43	; 0x2b
 8013f06:	d02f      	beq.n	8013f68 <__gethex+0x124>
 8013f08:	2b2d      	cmp	r3, #45	; 0x2d
 8013f0a:	d031      	beq.n	8013f70 <__gethex+0x12c>
 8013f0c:	1c69      	adds	r1, r5, #1
 8013f0e:	f04f 0b00 	mov.w	fp, #0
 8013f12:	7808      	ldrb	r0, [r1, #0]
 8013f14:	f7ff ff80 	bl	8013e18 <__hexdig_fun>
 8013f18:	1e42      	subs	r2, r0, #1
 8013f1a:	b2d2      	uxtb	r2, r2
 8013f1c:	2a18      	cmp	r2, #24
 8013f1e:	d82e      	bhi.n	8013f7e <__gethex+0x13a>
 8013f20:	f1a0 0210 	sub.w	r2, r0, #16
 8013f24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013f28:	f7ff ff76 	bl	8013e18 <__hexdig_fun>
 8013f2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8013f30:	fa5f fc8c 	uxtb.w	ip, ip
 8013f34:	f1bc 0f18 	cmp.w	ip, #24
 8013f38:	d91d      	bls.n	8013f76 <__gethex+0x132>
 8013f3a:	f1bb 0f00 	cmp.w	fp, #0
 8013f3e:	d000      	beq.n	8013f42 <__gethex+0xfe>
 8013f40:	4252      	negs	r2, r2
 8013f42:	4416      	add	r6, r2
 8013f44:	f8ca 1000 	str.w	r1, [sl]
 8013f48:	b1dc      	cbz	r4, 8013f82 <__gethex+0x13e>
 8013f4a:	9b01      	ldr	r3, [sp, #4]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	bf14      	ite	ne
 8013f50:	f04f 0800 	movne.w	r8, #0
 8013f54:	f04f 0806 	moveq.w	r8, #6
 8013f58:	4640      	mov	r0, r8
 8013f5a:	b005      	add	sp, #20
 8013f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f60:	4645      	mov	r5, r8
 8013f62:	4626      	mov	r6, r4
 8013f64:	2401      	movs	r4, #1
 8013f66:	e7c7      	b.n	8013ef8 <__gethex+0xb4>
 8013f68:	f04f 0b00 	mov.w	fp, #0
 8013f6c:	1ca9      	adds	r1, r5, #2
 8013f6e:	e7d0      	b.n	8013f12 <__gethex+0xce>
 8013f70:	f04f 0b01 	mov.w	fp, #1
 8013f74:	e7fa      	b.n	8013f6c <__gethex+0x128>
 8013f76:	230a      	movs	r3, #10
 8013f78:	fb03 0002 	mla	r0, r3, r2, r0
 8013f7c:	e7d0      	b.n	8013f20 <__gethex+0xdc>
 8013f7e:	4629      	mov	r1, r5
 8013f80:	e7e0      	b.n	8013f44 <__gethex+0x100>
 8013f82:	eba5 0308 	sub.w	r3, r5, r8
 8013f86:	3b01      	subs	r3, #1
 8013f88:	4621      	mov	r1, r4
 8013f8a:	2b07      	cmp	r3, #7
 8013f8c:	dc0a      	bgt.n	8013fa4 <__gethex+0x160>
 8013f8e:	4648      	mov	r0, r9
 8013f90:	f000 fa5a 	bl	8014448 <_Balloc>
 8013f94:	4604      	mov	r4, r0
 8013f96:	b940      	cbnz	r0, 8013faa <__gethex+0x166>
 8013f98:	4b61      	ldr	r3, [pc, #388]	; (8014120 <__gethex+0x2dc>)
 8013f9a:	4602      	mov	r2, r0
 8013f9c:	21e4      	movs	r1, #228	; 0xe4
 8013f9e:	4861      	ldr	r0, [pc, #388]	; (8014124 <__gethex+0x2e0>)
 8013fa0:	f7ff f804 	bl	8012fac <__assert_func>
 8013fa4:	3101      	adds	r1, #1
 8013fa6:	105b      	asrs	r3, r3, #1
 8013fa8:	e7ef      	b.n	8013f8a <__gethex+0x146>
 8013faa:	f100 0a14 	add.w	sl, r0, #20
 8013fae:	2300      	movs	r3, #0
 8013fb0:	495a      	ldr	r1, [pc, #360]	; (801411c <__gethex+0x2d8>)
 8013fb2:	f8cd a004 	str.w	sl, [sp, #4]
 8013fb6:	469b      	mov	fp, r3
 8013fb8:	45a8      	cmp	r8, r5
 8013fba:	d342      	bcc.n	8014042 <__gethex+0x1fe>
 8013fbc:	9801      	ldr	r0, [sp, #4]
 8013fbe:	f840 bb04 	str.w	fp, [r0], #4
 8013fc2:	eba0 000a 	sub.w	r0, r0, sl
 8013fc6:	1080      	asrs	r0, r0, #2
 8013fc8:	6120      	str	r0, [r4, #16]
 8013fca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013fce:	4658      	mov	r0, fp
 8013fd0:	f000 fb2c 	bl	801462c <__hi0bits>
 8013fd4:	683d      	ldr	r5, [r7, #0]
 8013fd6:	eba8 0000 	sub.w	r0, r8, r0
 8013fda:	42a8      	cmp	r0, r5
 8013fdc:	dd59      	ble.n	8014092 <__gethex+0x24e>
 8013fde:	eba0 0805 	sub.w	r8, r0, r5
 8013fe2:	4641      	mov	r1, r8
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	f000 febb 	bl	8014d60 <__any_on>
 8013fea:	4683      	mov	fp, r0
 8013fec:	b1b8      	cbz	r0, 801401e <__gethex+0x1da>
 8013fee:	f108 33ff 	add.w	r3, r8, #4294967295
 8013ff2:	1159      	asrs	r1, r3, #5
 8013ff4:	f003 021f 	and.w	r2, r3, #31
 8013ff8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013ffc:	f04f 0b01 	mov.w	fp, #1
 8014000:	fa0b f202 	lsl.w	r2, fp, r2
 8014004:	420a      	tst	r2, r1
 8014006:	d00a      	beq.n	801401e <__gethex+0x1da>
 8014008:	455b      	cmp	r3, fp
 801400a:	dd06      	ble.n	801401a <__gethex+0x1d6>
 801400c:	f1a8 0102 	sub.w	r1, r8, #2
 8014010:	4620      	mov	r0, r4
 8014012:	f000 fea5 	bl	8014d60 <__any_on>
 8014016:	2800      	cmp	r0, #0
 8014018:	d138      	bne.n	801408c <__gethex+0x248>
 801401a:	f04f 0b02 	mov.w	fp, #2
 801401e:	4641      	mov	r1, r8
 8014020:	4620      	mov	r0, r4
 8014022:	f7ff fea7 	bl	8013d74 <rshift>
 8014026:	4446      	add	r6, r8
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	42b3      	cmp	r3, r6
 801402c:	da41      	bge.n	80140b2 <__gethex+0x26e>
 801402e:	4621      	mov	r1, r4
 8014030:	4648      	mov	r0, r9
 8014032:	f000 fa49 	bl	80144c8 <_Bfree>
 8014036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014038:	2300      	movs	r3, #0
 801403a:	6013      	str	r3, [r2, #0]
 801403c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014040:	e78a      	b.n	8013f58 <__gethex+0x114>
 8014042:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014046:	2a2e      	cmp	r2, #46	; 0x2e
 8014048:	d014      	beq.n	8014074 <__gethex+0x230>
 801404a:	2b20      	cmp	r3, #32
 801404c:	d106      	bne.n	801405c <__gethex+0x218>
 801404e:	9b01      	ldr	r3, [sp, #4]
 8014050:	f843 bb04 	str.w	fp, [r3], #4
 8014054:	f04f 0b00 	mov.w	fp, #0
 8014058:	9301      	str	r3, [sp, #4]
 801405a:	465b      	mov	r3, fp
 801405c:	7828      	ldrb	r0, [r5, #0]
 801405e:	9303      	str	r3, [sp, #12]
 8014060:	f7ff feda 	bl	8013e18 <__hexdig_fun>
 8014064:	9b03      	ldr	r3, [sp, #12]
 8014066:	f000 000f 	and.w	r0, r0, #15
 801406a:	4098      	lsls	r0, r3
 801406c:	ea4b 0b00 	orr.w	fp, fp, r0
 8014070:	3304      	adds	r3, #4
 8014072:	e7a1      	b.n	8013fb8 <__gethex+0x174>
 8014074:	45a8      	cmp	r8, r5
 8014076:	d8e8      	bhi.n	801404a <__gethex+0x206>
 8014078:	2201      	movs	r2, #1
 801407a:	4628      	mov	r0, r5
 801407c:	9303      	str	r3, [sp, #12]
 801407e:	f7fe fe81 	bl	8012d84 <strncmp>
 8014082:	4926      	ldr	r1, [pc, #152]	; (801411c <__gethex+0x2d8>)
 8014084:	9b03      	ldr	r3, [sp, #12]
 8014086:	2800      	cmp	r0, #0
 8014088:	d1df      	bne.n	801404a <__gethex+0x206>
 801408a:	e795      	b.n	8013fb8 <__gethex+0x174>
 801408c:	f04f 0b03 	mov.w	fp, #3
 8014090:	e7c5      	b.n	801401e <__gethex+0x1da>
 8014092:	da0b      	bge.n	80140ac <__gethex+0x268>
 8014094:	eba5 0800 	sub.w	r8, r5, r0
 8014098:	4621      	mov	r1, r4
 801409a:	4642      	mov	r2, r8
 801409c:	4648      	mov	r0, r9
 801409e:	f000 fc2d 	bl	80148fc <__lshift>
 80140a2:	eba6 0608 	sub.w	r6, r6, r8
 80140a6:	4604      	mov	r4, r0
 80140a8:	f100 0a14 	add.w	sl, r0, #20
 80140ac:	f04f 0b00 	mov.w	fp, #0
 80140b0:	e7ba      	b.n	8014028 <__gethex+0x1e4>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	42b3      	cmp	r3, r6
 80140b6:	dd73      	ble.n	80141a0 <__gethex+0x35c>
 80140b8:	1b9e      	subs	r6, r3, r6
 80140ba:	42b5      	cmp	r5, r6
 80140bc:	dc34      	bgt.n	8014128 <__gethex+0x2e4>
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	2b02      	cmp	r3, #2
 80140c2:	d023      	beq.n	801410c <__gethex+0x2c8>
 80140c4:	2b03      	cmp	r3, #3
 80140c6:	d025      	beq.n	8014114 <__gethex+0x2d0>
 80140c8:	2b01      	cmp	r3, #1
 80140ca:	d115      	bne.n	80140f8 <__gethex+0x2b4>
 80140cc:	42b5      	cmp	r5, r6
 80140ce:	d113      	bne.n	80140f8 <__gethex+0x2b4>
 80140d0:	2d01      	cmp	r5, #1
 80140d2:	d10b      	bne.n	80140ec <__gethex+0x2a8>
 80140d4:	9a02      	ldr	r2, [sp, #8]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6013      	str	r3, [r2, #0]
 80140da:	2301      	movs	r3, #1
 80140dc:	6123      	str	r3, [r4, #16]
 80140de:	f8ca 3000 	str.w	r3, [sl]
 80140e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140e4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80140e8:	601c      	str	r4, [r3, #0]
 80140ea:	e735      	b.n	8013f58 <__gethex+0x114>
 80140ec:	1e69      	subs	r1, r5, #1
 80140ee:	4620      	mov	r0, r4
 80140f0:	f000 fe36 	bl	8014d60 <__any_on>
 80140f4:	2800      	cmp	r0, #0
 80140f6:	d1ed      	bne.n	80140d4 <__gethex+0x290>
 80140f8:	4621      	mov	r1, r4
 80140fa:	4648      	mov	r0, r9
 80140fc:	f000 f9e4 	bl	80144c8 <_Bfree>
 8014100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014102:	2300      	movs	r3, #0
 8014104:	6013      	str	r3, [r2, #0]
 8014106:	f04f 0850 	mov.w	r8, #80	; 0x50
 801410a:	e725      	b.n	8013f58 <__gethex+0x114>
 801410c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801410e:	2b00      	cmp	r3, #0
 8014110:	d1f2      	bne.n	80140f8 <__gethex+0x2b4>
 8014112:	e7df      	b.n	80140d4 <__gethex+0x290>
 8014114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014116:	2b00      	cmp	r3, #0
 8014118:	d1dc      	bne.n	80140d4 <__gethex+0x290>
 801411a:	e7ed      	b.n	80140f8 <__gethex+0x2b4>
 801411c:	08016e7c 	.word	0x08016e7c
 8014120:	08017122 	.word	0x08017122
 8014124:	08017133 	.word	0x08017133
 8014128:	f106 38ff 	add.w	r8, r6, #4294967295
 801412c:	f1bb 0f00 	cmp.w	fp, #0
 8014130:	d133      	bne.n	801419a <__gethex+0x356>
 8014132:	f1b8 0f00 	cmp.w	r8, #0
 8014136:	d004      	beq.n	8014142 <__gethex+0x2fe>
 8014138:	4641      	mov	r1, r8
 801413a:	4620      	mov	r0, r4
 801413c:	f000 fe10 	bl	8014d60 <__any_on>
 8014140:	4683      	mov	fp, r0
 8014142:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014146:	2301      	movs	r3, #1
 8014148:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801414c:	f008 081f 	and.w	r8, r8, #31
 8014150:	fa03 f308 	lsl.w	r3, r3, r8
 8014154:	4213      	tst	r3, r2
 8014156:	4631      	mov	r1, r6
 8014158:	4620      	mov	r0, r4
 801415a:	bf18      	it	ne
 801415c:	f04b 0b02 	orrne.w	fp, fp, #2
 8014160:	1bad      	subs	r5, r5, r6
 8014162:	f7ff fe07 	bl	8013d74 <rshift>
 8014166:	687e      	ldr	r6, [r7, #4]
 8014168:	f04f 0802 	mov.w	r8, #2
 801416c:	f1bb 0f00 	cmp.w	fp, #0
 8014170:	d04a      	beq.n	8014208 <__gethex+0x3c4>
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	2b02      	cmp	r3, #2
 8014176:	d016      	beq.n	80141a6 <__gethex+0x362>
 8014178:	2b03      	cmp	r3, #3
 801417a:	d018      	beq.n	80141ae <__gethex+0x36a>
 801417c:	2b01      	cmp	r3, #1
 801417e:	d109      	bne.n	8014194 <__gethex+0x350>
 8014180:	f01b 0f02 	tst.w	fp, #2
 8014184:	d006      	beq.n	8014194 <__gethex+0x350>
 8014186:	f8da 3000 	ldr.w	r3, [sl]
 801418a:	ea4b 0b03 	orr.w	fp, fp, r3
 801418e:	f01b 0f01 	tst.w	fp, #1
 8014192:	d10f      	bne.n	80141b4 <__gethex+0x370>
 8014194:	f048 0810 	orr.w	r8, r8, #16
 8014198:	e036      	b.n	8014208 <__gethex+0x3c4>
 801419a:	f04f 0b01 	mov.w	fp, #1
 801419e:	e7d0      	b.n	8014142 <__gethex+0x2fe>
 80141a0:	f04f 0801 	mov.w	r8, #1
 80141a4:	e7e2      	b.n	801416c <__gethex+0x328>
 80141a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141a8:	f1c3 0301 	rsb	r3, r3, #1
 80141ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80141ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d0ef      	beq.n	8014194 <__gethex+0x350>
 80141b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80141b8:	f104 0214 	add.w	r2, r4, #20
 80141bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80141c0:	9301      	str	r3, [sp, #4]
 80141c2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80141c6:	2300      	movs	r3, #0
 80141c8:	4694      	mov	ip, r2
 80141ca:	f852 1b04 	ldr.w	r1, [r2], #4
 80141ce:	f1b1 3fff 	cmp.w	r1, #4294967295
 80141d2:	d01e      	beq.n	8014212 <__gethex+0x3ce>
 80141d4:	3101      	adds	r1, #1
 80141d6:	f8cc 1000 	str.w	r1, [ip]
 80141da:	f1b8 0f02 	cmp.w	r8, #2
 80141de:	f104 0214 	add.w	r2, r4, #20
 80141e2:	d13d      	bne.n	8014260 <__gethex+0x41c>
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	3b01      	subs	r3, #1
 80141e8:	42ab      	cmp	r3, r5
 80141ea:	d10b      	bne.n	8014204 <__gethex+0x3c0>
 80141ec:	1169      	asrs	r1, r5, #5
 80141ee:	2301      	movs	r3, #1
 80141f0:	f005 051f 	and.w	r5, r5, #31
 80141f4:	fa03 f505 	lsl.w	r5, r3, r5
 80141f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141fc:	421d      	tst	r5, r3
 80141fe:	bf18      	it	ne
 8014200:	f04f 0801 	movne.w	r8, #1
 8014204:	f048 0820 	orr.w	r8, r8, #32
 8014208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801420a:	601c      	str	r4, [r3, #0]
 801420c:	9b02      	ldr	r3, [sp, #8]
 801420e:	601e      	str	r6, [r3, #0]
 8014210:	e6a2      	b.n	8013f58 <__gethex+0x114>
 8014212:	4290      	cmp	r0, r2
 8014214:	f842 3c04 	str.w	r3, [r2, #-4]
 8014218:	d8d6      	bhi.n	80141c8 <__gethex+0x384>
 801421a:	68a2      	ldr	r2, [r4, #8]
 801421c:	4593      	cmp	fp, r2
 801421e:	db17      	blt.n	8014250 <__gethex+0x40c>
 8014220:	6861      	ldr	r1, [r4, #4]
 8014222:	4648      	mov	r0, r9
 8014224:	3101      	adds	r1, #1
 8014226:	f000 f90f 	bl	8014448 <_Balloc>
 801422a:	4682      	mov	sl, r0
 801422c:	b918      	cbnz	r0, 8014236 <__gethex+0x3f2>
 801422e:	4b1b      	ldr	r3, [pc, #108]	; (801429c <__gethex+0x458>)
 8014230:	4602      	mov	r2, r0
 8014232:	2184      	movs	r1, #132	; 0x84
 8014234:	e6b3      	b.n	8013f9e <__gethex+0x15a>
 8014236:	6922      	ldr	r2, [r4, #16]
 8014238:	3202      	adds	r2, #2
 801423a:	f104 010c 	add.w	r1, r4, #12
 801423e:	0092      	lsls	r2, r2, #2
 8014240:	300c      	adds	r0, #12
 8014242:	f7fe fe94 	bl	8012f6e <memcpy>
 8014246:	4621      	mov	r1, r4
 8014248:	4648      	mov	r0, r9
 801424a:	f000 f93d 	bl	80144c8 <_Bfree>
 801424e:	4654      	mov	r4, sl
 8014250:	6922      	ldr	r2, [r4, #16]
 8014252:	1c51      	adds	r1, r2, #1
 8014254:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014258:	6121      	str	r1, [r4, #16]
 801425a:	2101      	movs	r1, #1
 801425c:	6151      	str	r1, [r2, #20]
 801425e:	e7bc      	b.n	80141da <__gethex+0x396>
 8014260:	6921      	ldr	r1, [r4, #16]
 8014262:	4559      	cmp	r1, fp
 8014264:	dd0b      	ble.n	801427e <__gethex+0x43a>
 8014266:	2101      	movs	r1, #1
 8014268:	4620      	mov	r0, r4
 801426a:	f7ff fd83 	bl	8013d74 <rshift>
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	3601      	adds	r6, #1
 8014272:	42b3      	cmp	r3, r6
 8014274:	f6ff aedb 	blt.w	801402e <__gethex+0x1ea>
 8014278:	f04f 0801 	mov.w	r8, #1
 801427c:	e7c2      	b.n	8014204 <__gethex+0x3c0>
 801427e:	f015 051f 	ands.w	r5, r5, #31
 8014282:	d0f9      	beq.n	8014278 <__gethex+0x434>
 8014284:	9b01      	ldr	r3, [sp, #4]
 8014286:	441a      	add	r2, r3
 8014288:	f1c5 0520 	rsb	r5, r5, #32
 801428c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014290:	f000 f9cc 	bl	801462c <__hi0bits>
 8014294:	42a8      	cmp	r0, r5
 8014296:	dbe6      	blt.n	8014266 <__gethex+0x422>
 8014298:	e7ee      	b.n	8014278 <__gethex+0x434>
 801429a:	bf00      	nop
 801429c:	08017122 	.word	0x08017122

080142a0 <L_shift>:
 80142a0:	f1c2 0208 	rsb	r2, r2, #8
 80142a4:	0092      	lsls	r2, r2, #2
 80142a6:	b570      	push	{r4, r5, r6, lr}
 80142a8:	f1c2 0620 	rsb	r6, r2, #32
 80142ac:	6843      	ldr	r3, [r0, #4]
 80142ae:	6804      	ldr	r4, [r0, #0]
 80142b0:	fa03 f506 	lsl.w	r5, r3, r6
 80142b4:	432c      	orrs	r4, r5
 80142b6:	40d3      	lsrs	r3, r2
 80142b8:	6004      	str	r4, [r0, #0]
 80142ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80142be:	4288      	cmp	r0, r1
 80142c0:	d3f4      	bcc.n	80142ac <L_shift+0xc>
 80142c2:	bd70      	pop	{r4, r5, r6, pc}

080142c4 <__match>:
 80142c4:	b530      	push	{r4, r5, lr}
 80142c6:	6803      	ldr	r3, [r0, #0]
 80142c8:	3301      	adds	r3, #1
 80142ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142ce:	b914      	cbnz	r4, 80142d6 <__match+0x12>
 80142d0:	6003      	str	r3, [r0, #0]
 80142d2:	2001      	movs	r0, #1
 80142d4:	bd30      	pop	{r4, r5, pc}
 80142d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80142de:	2d19      	cmp	r5, #25
 80142e0:	bf98      	it	ls
 80142e2:	3220      	addls	r2, #32
 80142e4:	42a2      	cmp	r2, r4
 80142e6:	d0f0      	beq.n	80142ca <__match+0x6>
 80142e8:	2000      	movs	r0, #0
 80142ea:	e7f3      	b.n	80142d4 <__match+0x10>

080142ec <__hexnan>:
 80142ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f0:	680b      	ldr	r3, [r1, #0]
 80142f2:	6801      	ldr	r1, [r0, #0]
 80142f4:	115e      	asrs	r6, r3, #5
 80142f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80142fa:	f013 031f 	ands.w	r3, r3, #31
 80142fe:	b087      	sub	sp, #28
 8014300:	bf18      	it	ne
 8014302:	3604      	addne	r6, #4
 8014304:	2500      	movs	r5, #0
 8014306:	1f37      	subs	r7, r6, #4
 8014308:	4682      	mov	sl, r0
 801430a:	4690      	mov	r8, r2
 801430c:	9301      	str	r3, [sp, #4]
 801430e:	f846 5c04 	str.w	r5, [r6, #-4]
 8014312:	46b9      	mov	r9, r7
 8014314:	463c      	mov	r4, r7
 8014316:	9502      	str	r5, [sp, #8]
 8014318:	46ab      	mov	fp, r5
 801431a:	784a      	ldrb	r2, [r1, #1]
 801431c:	1c4b      	adds	r3, r1, #1
 801431e:	9303      	str	r3, [sp, #12]
 8014320:	b342      	cbz	r2, 8014374 <__hexnan+0x88>
 8014322:	4610      	mov	r0, r2
 8014324:	9105      	str	r1, [sp, #20]
 8014326:	9204      	str	r2, [sp, #16]
 8014328:	f7ff fd76 	bl	8013e18 <__hexdig_fun>
 801432c:	2800      	cmp	r0, #0
 801432e:	d14f      	bne.n	80143d0 <__hexnan+0xe4>
 8014330:	9a04      	ldr	r2, [sp, #16]
 8014332:	9905      	ldr	r1, [sp, #20]
 8014334:	2a20      	cmp	r2, #32
 8014336:	d818      	bhi.n	801436a <__hexnan+0x7e>
 8014338:	9b02      	ldr	r3, [sp, #8]
 801433a:	459b      	cmp	fp, r3
 801433c:	dd13      	ble.n	8014366 <__hexnan+0x7a>
 801433e:	454c      	cmp	r4, r9
 8014340:	d206      	bcs.n	8014350 <__hexnan+0x64>
 8014342:	2d07      	cmp	r5, #7
 8014344:	dc04      	bgt.n	8014350 <__hexnan+0x64>
 8014346:	462a      	mov	r2, r5
 8014348:	4649      	mov	r1, r9
 801434a:	4620      	mov	r0, r4
 801434c:	f7ff ffa8 	bl	80142a0 <L_shift>
 8014350:	4544      	cmp	r4, r8
 8014352:	d950      	bls.n	80143f6 <__hexnan+0x10a>
 8014354:	2300      	movs	r3, #0
 8014356:	f1a4 0904 	sub.w	r9, r4, #4
 801435a:	f844 3c04 	str.w	r3, [r4, #-4]
 801435e:	f8cd b008 	str.w	fp, [sp, #8]
 8014362:	464c      	mov	r4, r9
 8014364:	461d      	mov	r5, r3
 8014366:	9903      	ldr	r1, [sp, #12]
 8014368:	e7d7      	b.n	801431a <__hexnan+0x2e>
 801436a:	2a29      	cmp	r2, #41	; 0x29
 801436c:	d155      	bne.n	801441a <__hexnan+0x12e>
 801436e:	3102      	adds	r1, #2
 8014370:	f8ca 1000 	str.w	r1, [sl]
 8014374:	f1bb 0f00 	cmp.w	fp, #0
 8014378:	d04f      	beq.n	801441a <__hexnan+0x12e>
 801437a:	454c      	cmp	r4, r9
 801437c:	d206      	bcs.n	801438c <__hexnan+0xa0>
 801437e:	2d07      	cmp	r5, #7
 8014380:	dc04      	bgt.n	801438c <__hexnan+0xa0>
 8014382:	462a      	mov	r2, r5
 8014384:	4649      	mov	r1, r9
 8014386:	4620      	mov	r0, r4
 8014388:	f7ff ff8a 	bl	80142a0 <L_shift>
 801438c:	4544      	cmp	r4, r8
 801438e:	d934      	bls.n	80143fa <__hexnan+0x10e>
 8014390:	f1a8 0204 	sub.w	r2, r8, #4
 8014394:	4623      	mov	r3, r4
 8014396:	f853 1b04 	ldr.w	r1, [r3], #4
 801439a:	f842 1f04 	str.w	r1, [r2, #4]!
 801439e:	429f      	cmp	r7, r3
 80143a0:	d2f9      	bcs.n	8014396 <__hexnan+0xaa>
 80143a2:	1b3b      	subs	r3, r7, r4
 80143a4:	f023 0303 	bic.w	r3, r3, #3
 80143a8:	3304      	adds	r3, #4
 80143aa:	3e03      	subs	r6, #3
 80143ac:	3401      	adds	r4, #1
 80143ae:	42a6      	cmp	r6, r4
 80143b0:	bf38      	it	cc
 80143b2:	2304      	movcc	r3, #4
 80143b4:	4443      	add	r3, r8
 80143b6:	2200      	movs	r2, #0
 80143b8:	f843 2b04 	str.w	r2, [r3], #4
 80143bc:	429f      	cmp	r7, r3
 80143be:	d2fb      	bcs.n	80143b8 <__hexnan+0xcc>
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	b91b      	cbnz	r3, 80143cc <__hexnan+0xe0>
 80143c4:	4547      	cmp	r7, r8
 80143c6:	d126      	bne.n	8014416 <__hexnan+0x12a>
 80143c8:	2301      	movs	r3, #1
 80143ca:	603b      	str	r3, [r7, #0]
 80143cc:	2005      	movs	r0, #5
 80143ce:	e025      	b.n	801441c <__hexnan+0x130>
 80143d0:	3501      	adds	r5, #1
 80143d2:	2d08      	cmp	r5, #8
 80143d4:	f10b 0b01 	add.w	fp, fp, #1
 80143d8:	dd06      	ble.n	80143e8 <__hexnan+0xfc>
 80143da:	4544      	cmp	r4, r8
 80143dc:	d9c3      	bls.n	8014366 <__hexnan+0x7a>
 80143de:	2300      	movs	r3, #0
 80143e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80143e4:	2501      	movs	r5, #1
 80143e6:	3c04      	subs	r4, #4
 80143e8:	6822      	ldr	r2, [r4, #0]
 80143ea:	f000 000f 	and.w	r0, r0, #15
 80143ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80143f2:	6020      	str	r0, [r4, #0]
 80143f4:	e7b7      	b.n	8014366 <__hexnan+0x7a>
 80143f6:	2508      	movs	r5, #8
 80143f8:	e7b5      	b.n	8014366 <__hexnan+0x7a>
 80143fa:	9b01      	ldr	r3, [sp, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d0df      	beq.n	80143c0 <__hexnan+0xd4>
 8014400:	f1c3 0320 	rsb	r3, r3, #32
 8014404:	f04f 32ff 	mov.w	r2, #4294967295
 8014408:	40da      	lsrs	r2, r3
 801440a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801440e:	4013      	ands	r3, r2
 8014410:	f846 3c04 	str.w	r3, [r6, #-4]
 8014414:	e7d4      	b.n	80143c0 <__hexnan+0xd4>
 8014416:	3f04      	subs	r7, #4
 8014418:	e7d2      	b.n	80143c0 <__hexnan+0xd4>
 801441a:	2004      	movs	r0, #4
 801441c:	b007      	add	sp, #28
 801441e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014422 <__ascii_mbtowc>:
 8014422:	b082      	sub	sp, #8
 8014424:	b901      	cbnz	r1, 8014428 <__ascii_mbtowc+0x6>
 8014426:	a901      	add	r1, sp, #4
 8014428:	b142      	cbz	r2, 801443c <__ascii_mbtowc+0x1a>
 801442a:	b14b      	cbz	r3, 8014440 <__ascii_mbtowc+0x1e>
 801442c:	7813      	ldrb	r3, [r2, #0]
 801442e:	600b      	str	r3, [r1, #0]
 8014430:	7812      	ldrb	r2, [r2, #0]
 8014432:	1e10      	subs	r0, r2, #0
 8014434:	bf18      	it	ne
 8014436:	2001      	movne	r0, #1
 8014438:	b002      	add	sp, #8
 801443a:	4770      	bx	lr
 801443c:	4610      	mov	r0, r2
 801443e:	e7fb      	b.n	8014438 <__ascii_mbtowc+0x16>
 8014440:	f06f 0001 	mvn.w	r0, #1
 8014444:	e7f8      	b.n	8014438 <__ascii_mbtowc+0x16>
	...

08014448 <_Balloc>:
 8014448:	b570      	push	{r4, r5, r6, lr}
 801444a:	69c6      	ldr	r6, [r0, #28]
 801444c:	4604      	mov	r4, r0
 801444e:	460d      	mov	r5, r1
 8014450:	b976      	cbnz	r6, 8014470 <_Balloc+0x28>
 8014452:	2010      	movs	r0, #16
 8014454:	f7fc fb92 	bl	8010b7c <malloc>
 8014458:	4602      	mov	r2, r0
 801445a:	61e0      	str	r0, [r4, #28]
 801445c:	b920      	cbnz	r0, 8014468 <_Balloc+0x20>
 801445e:	4b18      	ldr	r3, [pc, #96]	; (80144c0 <_Balloc+0x78>)
 8014460:	4818      	ldr	r0, [pc, #96]	; (80144c4 <_Balloc+0x7c>)
 8014462:	216b      	movs	r1, #107	; 0x6b
 8014464:	f7fe fda2 	bl	8012fac <__assert_func>
 8014468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801446c:	6006      	str	r6, [r0, #0]
 801446e:	60c6      	str	r6, [r0, #12]
 8014470:	69e6      	ldr	r6, [r4, #28]
 8014472:	68f3      	ldr	r3, [r6, #12]
 8014474:	b183      	cbz	r3, 8014498 <_Balloc+0x50>
 8014476:	69e3      	ldr	r3, [r4, #28]
 8014478:	68db      	ldr	r3, [r3, #12]
 801447a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801447e:	b9b8      	cbnz	r0, 80144b0 <_Balloc+0x68>
 8014480:	2101      	movs	r1, #1
 8014482:	fa01 f605 	lsl.w	r6, r1, r5
 8014486:	1d72      	adds	r2, r6, #5
 8014488:	0092      	lsls	r2, r2, #2
 801448a:	4620      	mov	r0, r4
 801448c:	f001 fc15 	bl	8015cba <_calloc_r>
 8014490:	b160      	cbz	r0, 80144ac <_Balloc+0x64>
 8014492:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014496:	e00e      	b.n	80144b6 <_Balloc+0x6e>
 8014498:	2221      	movs	r2, #33	; 0x21
 801449a:	2104      	movs	r1, #4
 801449c:	4620      	mov	r0, r4
 801449e:	f001 fc0c 	bl	8015cba <_calloc_r>
 80144a2:	69e3      	ldr	r3, [r4, #28]
 80144a4:	60f0      	str	r0, [r6, #12]
 80144a6:	68db      	ldr	r3, [r3, #12]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d1e4      	bne.n	8014476 <_Balloc+0x2e>
 80144ac:	2000      	movs	r0, #0
 80144ae:	bd70      	pop	{r4, r5, r6, pc}
 80144b0:	6802      	ldr	r2, [r0, #0]
 80144b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80144b6:	2300      	movs	r3, #0
 80144b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80144bc:	e7f7      	b.n	80144ae <_Balloc+0x66>
 80144be:	bf00      	nop
 80144c0:	08017008 	.word	0x08017008
 80144c4:	08017193 	.word	0x08017193

080144c8 <_Bfree>:
 80144c8:	b570      	push	{r4, r5, r6, lr}
 80144ca:	69c6      	ldr	r6, [r0, #28]
 80144cc:	4605      	mov	r5, r0
 80144ce:	460c      	mov	r4, r1
 80144d0:	b976      	cbnz	r6, 80144f0 <_Bfree+0x28>
 80144d2:	2010      	movs	r0, #16
 80144d4:	f7fc fb52 	bl	8010b7c <malloc>
 80144d8:	4602      	mov	r2, r0
 80144da:	61e8      	str	r0, [r5, #28]
 80144dc:	b920      	cbnz	r0, 80144e8 <_Bfree+0x20>
 80144de:	4b09      	ldr	r3, [pc, #36]	; (8014504 <_Bfree+0x3c>)
 80144e0:	4809      	ldr	r0, [pc, #36]	; (8014508 <_Bfree+0x40>)
 80144e2:	218f      	movs	r1, #143	; 0x8f
 80144e4:	f7fe fd62 	bl	8012fac <__assert_func>
 80144e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80144ec:	6006      	str	r6, [r0, #0]
 80144ee:	60c6      	str	r6, [r0, #12]
 80144f0:	b13c      	cbz	r4, 8014502 <_Bfree+0x3a>
 80144f2:	69eb      	ldr	r3, [r5, #28]
 80144f4:	6862      	ldr	r2, [r4, #4]
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80144fc:	6021      	str	r1, [r4, #0]
 80144fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014502:	bd70      	pop	{r4, r5, r6, pc}
 8014504:	08017008 	.word	0x08017008
 8014508:	08017193 	.word	0x08017193

0801450c <__multadd>:
 801450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014510:	690d      	ldr	r5, [r1, #16]
 8014512:	4607      	mov	r7, r0
 8014514:	460c      	mov	r4, r1
 8014516:	461e      	mov	r6, r3
 8014518:	f101 0c14 	add.w	ip, r1, #20
 801451c:	2000      	movs	r0, #0
 801451e:	f8dc 3000 	ldr.w	r3, [ip]
 8014522:	b299      	uxth	r1, r3
 8014524:	fb02 6101 	mla	r1, r2, r1, r6
 8014528:	0c1e      	lsrs	r6, r3, #16
 801452a:	0c0b      	lsrs	r3, r1, #16
 801452c:	fb02 3306 	mla	r3, r2, r6, r3
 8014530:	b289      	uxth	r1, r1
 8014532:	3001      	adds	r0, #1
 8014534:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014538:	4285      	cmp	r5, r0
 801453a:	f84c 1b04 	str.w	r1, [ip], #4
 801453e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014542:	dcec      	bgt.n	801451e <__multadd+0x12>
 8014544:	b30e      	cbz	r6, 801458a <__multadd+0x7e>
 8014546:	68a3      	ldr	r3, [r4, #8]
 8014548:	42ab      	cmp	r3, r5
 801454a:	dc19      	bgt.n	8014580 <__multadd+0x74>
 801454c:	6861      	ldr	r1, [r4, #4]
 801454e:	4638      	mov	r0, r7
 8014550:	3101      	adds	r1, #1
 8014552:	f7ff ff79 	bl	8014448 <_Balloc>
 8014556:	4680      	mov	r8, r0
 8014558:	b928      	cbnz	r0, 8014566 <__multadd+0x5a>
 801455a:	4602      	mov	r2, r0
 801455c:	4b0c      	ldr	r3, [pc, #48]	; (8014590 <__multadd+0x84>)
 801455e:	480d      	ldr	r0, [pc, #52]	; (8014594 <__multadd+0x88>)
 8014560:	21ba      	movs	r1, #186	; 0xba
 8014562:	f7fe fd23 	bl	8012fac <__assert_func>
 8014566:	6922      	ldr	r2, [r4, #16]
 8014568:	3202      	adds	r2, #2
 801456a:	f104 010c 	add.w	r1, r4, #12
 801456e:	0092      	lsls	r2, r2, #2
 8014570:	300c      	adds	r0, #12
 8014572:	f7fe fcfc 	bl	8012f6e <memcpy>
 8014576:	4621      	mov	r1, r4
 8014578:	4638      	mov	r0, r7
 801457a:	f7ff ffa5 	bl	80144c8 <_Bfree>
 801457e:	4644      	mov	r4, r8
 8014580:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014584:	3501      	adds	r5, #1
 8014586:	615e      	str	r6, [r3, #20]
 8014588:	6125      	str	r5, [r4, #16]
 801458a:	4620      	mov	r0, r4
 801458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014590:	08017122 	.word	0x08017122
 8014594:	08017193 	.word	0x08017193

08014598 <__s2b>:
 8014598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801459c:	460c      	mov	r4, r1
 801459e:	4615      	mov	r5, r2
 80145a0:	461f      	mov	r7, r3
 80145a2:	2209      	movs	r2, #9
 80145a4:	3308      	adds	r3, #8
 80145a6:	4606      	mov	r6, r0
 80145a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80145ac:	2100      	movs	r1, #0
 80145ae:	2201      	movs	r2, #1
 80145b0:	429a      	cmp	r2, r3
 80145b2:	db09      	blt.n	80145c8 <__s2b+0x30>
 80145b4:	4630      	mov	r0, r6
 80145b6:	f7ff ff47 	bl	8014448 <_Balloc>
 80145ba:	b940      	cbnz	r0, 80145ce <__s2b+0x36>
 80145bc:	4602      	mov	r2, r0
 80145be:	4b19      	ldr	r3, [pc, #100]	; (8014624 <__s2b+0x8c>)
 80145c0:	4819      	ldr	r0, [pc, #100]	; (8014628 <__s2b+0x90>)
 80145c2:	21d3      	movs	r1, #211	; 0xd3
 80145c4:	f7fe fcf2 	bl	8012fac <__assert_func>
 80145c8:	0052      	lsls	r2, r2, #1
 80145ca:	3101      	adds	r1, #1
 80145cc:	e7f0      	b.n	80145b0 <__s2b+0x18>
 80145ce:	9b08      	ldr	r3, [sp, #32]
 80145d0:	6143      	str	r3, [r0, #20]
 80145d2:	2d09      	cmp	r5, #9
 80145d4:	f04f 0301 	mov.w	r3, #1
 80145d8:	6103      	str	r3, [r0, #16]
 80145da:	dd16      	ble.n	801460a <__s2b+0x72>
 80145dc:	f104 0909 	add.w	r9, r4, #9
 80145e0:	46c8      	mov	r8, r9
 80145e2:	442c      	add	r4, r5
 80145e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80145e8:	4601      	mov	r1, r0
 80145ea:	3b30      	subs	r3, #48	; 0x30
 80145ec:	220a      	movs	r2, #10
 80145ee:	4630      	mov	r0, r6
 80145f0:	f7ff ff8c 	bl	801450c <__multadd>
 80145f4:	45a0      	cmp	r8, r4
 80145f6:	d1f5      	bne.n	80145e4 <__s2b+0x4c>
 80145f8:	f1a5 0408 	sub.w	r4, r5, #8
 80145fc:	444c      	add	r4, r9
 80145fe:	1b2d      	subs	r5, r5, r4
 8014600:	1963      	adds	r3, r4, r5
 8014602:	42bb      	cmp	r3, r7
 8014604:	db04      	blt.n	8014610 <__s2b+0x78>
 8014606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801460a:	340a      	adds	r4, #10
 801460c:	2509      	movs	r5, #9
 801460e:	e7f6      	b.n	80145fe <__s2b+0x66>
 8014610:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014614:	4601      	mov	r1, r0
 8014616:	3b30      	subs	r3, #48	; 0x30
 8014618:	220a      	movs	r2, #10
 801461a:	4630      	mov	r0, r6
 801461c:	f7ff ff76 	bl	801450c <__multadd>
 8014620:	e7ee      	b.n	8014600 <__s2b+0x68>
 8014622:	bf00      	nop
 8014624:	08017122 	.word	0x08017122
 8014628:	08017193 	.word	0x08017193

0801462c <__hi0bits>:
 801462c:	0c03      	lsrs	r3, r0, #16
 801462e:	041b      	lsls	r3, r3, #16
 8014630:	b9d3      	cbnz	r3, 8014668 <__hi0bits+0x3c>
 8014632:	0400      	lsls	r0, r0, #16
 8014634:	2310      	movs	r3, #16
 8014636:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801463a:	bf04      	itt	eq
 801463c:	0200      	lsleq	r0, r0, #8
 801463e:	3308      	addeq	r3, #8
 8014640:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014644:	bf04      	itt	eq
 8014646:	0100      	lsleq	r0, r0, #4
 8014648:	3304      	addeq	r3, #4
 801464a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801464e:	bf04      	itt	eq
 8014650:	0080      	lsleq	r0, r0, #2
 8014652:	3302      	addeq	r3, #2
 8014654:	2800      	cmp	r0, #0
 8014656:	db05      	blt.n	8014664 <__hi0bits+0x38>
 8014658:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801465c:	f103 0301 	add.w	r3, r3, #1
 8014660:	bf08      	it	eq
 8014662:	2320      	moveq	r3, #32
 8014664:	4618      	mov	r0, r3
 8014666:	4770      	bx	lr
 8014668:	2300      	movs	r3, #0
 801466a:	e7e4      	b.n	8014636 <__hi0bits+0xa>

0801466c <__lo0bits>:
 801466c:	6803      	ldr	r3, [r0, #0]
 801466e:	f013 0207 	ands.w	r2, r3, #7
 8014672:	d00c      	beq.n	801468e <__lo0bits+0x22>
 8014674:	07d9      	lsls	r1, r3, #31
 8014676:	d422      	bmi.n	80146be <__lo0bits+0x52>
 8014678:	079a      	lsls	r2, r3, #30
 801467a:	bf49      	itett	mi
 801467c:	085b      	lsrmi	r3, r3, #1
 801467e:	089b      	lsrpl	r3, r3, #2
 8014680:	6003      	strmi	r3, [r0, #0]
 8014682:	2201      	movmi	r2, #1
 8014684:	bf5c      	itt	pl
 8014686:	6003      	strpl	r3, [r0, #0]
 8014688:	2202      	movpl	r2, #2
 801468a:	4610      	mov	r0, r2
 801468c:	4770      	bx	lr
 801468e:	b299      	uxth	r1, r3
 8014690:	b909      	cbnz	r1, 8014696 <__lo0bits+0x2a>
 8014692:	0c1b      	lsrs	r3, r3, #16
 8014694:	2210      	movs	r2, #16
 8014696:	b2d9      	uxtb	r1, r3
 8014698:	b909      	cbnz	r1, 801469e <__lo0bits+0x32>
 801469a:	3208      	adds	r2, #8
 801469c:	0a1b      	lsrs	r3, r3, #8
 801469e:	0719      	lsls	r1, r3, #28
 80146a0:	bf04      	itt	eq
 80146a2:	091b      	lsreq	r3, r3, #4
 80146a4:	3204      	addeq	r2, #4
 80146a6:	0799      	lsls	r1, r3, #30
 80146a8:	bf04      	itt	eq
 80146aa:	089b      	lsreq	r3, r3, #2
 80146ac:	3202      	addeq	r2, #2
 80146ae:	07d9      	lsls	r1, r3, #31
 80146b0:	d403      	bmi.n	80146ba <__lo0bits+0x4e>
 80146b2:	085b      	lsrs	r3, r3, #1
 80146b4:	f102 0201 	add.w	r2, r2, #1
 80146b8:	d003      	beq.n	80146c2 <__lo0bits+0x56>
 80146ba:	6003      	str	r3, [r0, #0]
 80146bc:	e7e5      	b.n	801468a <__lo0bits+0x1e>
 80146be:	2200      	movs	r2, #0
 80146c0:	e7e3      	b.n	801468a <__lo0bits+0x1e>
 80146c2:	2220      	movs	r2, #32
 80146c4:	e7e1      	b.n	801468a <__lo0bits+0x1e>
	...

080146c8 <__i2b>:
 80146c8:	b510      	push	{r4, lr}
 80146ca:	460c      	mov	r4, r1
 80146cc:	2101      	movs	r1, #1
 80146ce:	f7ff febb 	bl	8014448 <_Balloc>
 80146d2:	4602      	mov	r2, r0
 80146d4:	b928      	cbnz	r0, 80146e2 <__i2b+0x1a>
 80146d6:	4b05      	ldr	r3, [pc, #20]	; (80146ec <__i2b+0x24>)
 80146d8:	4805      	ldr	r0, [pc, #20]	; (80146f0 <__i2b+0x28>)
 80146da:	f240 1145 	movw	r1, #325	; 0x145
 80146de:	f7fe fc65 	bl	8012fac <__assert_func>
 80146e2:	2301      	movs	r3, #1
 80146e4:	6144      	str	r4, [r0, #20]
 80146e6:	6103      	str	r3, [r0, #16]
 80146e8:	bd10      	pop	{r4, pc}
 80146ea:	bf00      	nop
 80146ec:	08017122 	.word	0x08017122
 80146f0:	08017193 	.word	0x08017193

080146f4 <__multiply>:
 80146f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146f8:	4691      	mov	r9, r2
 80146fa:	690a      	ldr	r2, [r1, #16]
 80146fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014700:	429a      	cmp	r2, r3
 8014702:	bfb8      	it	lt
 8014704:	460b      	movlt	r3, r1
 8014706:	460c      	mov	r4, r1
 8014708:	bfbc      	itt	lt
 801470a:	464c      	movlt	r4, r9
 801470c:	4699      	movlt	r9, r3
 801470e:	6927      	ldr	r7, [r4, #16]
 8014710:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014714:	68a3      	ldr	r3, [r4, #8]
 8014716:	6861      	ldr	r1, [r4, #4]
 8014718:	eb07 060a 	add.w	r6, r7, sl
 801471c:	42b3      	cmp	r3, r6
 801471e:	b085      	sub	sp, #20
 8014720:	bfb8      	it	lt
 8014722:	3101      	addlt	r1, #1
 8014724:	f7ff fe90 	bl	8014448 <_Balloc>
 8014728:	b930      	cbnz	r0, 8014738 <__multiply+0x44>
 801472a:	4602      	mov	r2, r0
 801472c:	4b44      	ldr	r3, [pc, #272]	; (8014840 <__multiply+0x14c>)
 801472e:	4845      	ldr	r0, [pc, #276]	; (8014844 <__multiply+0x150>)
 8014730:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014734:	f7fe fc3a 	bl	8012fac <__assert_func>
 8014738:	f100 0514 	add.w	r5, r0, #20
 801473c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014740:	462b      	mov	r3, r5
 8014742:	2200      	movs	r2, #0
 8014744:	4543      	cmp	r3, r8
 8014746:	d321      	bcc.n	801478c <__multiply+0x98>
 8014748:	f104 0314 	add.w	r3, r4, #20
 801474c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014750:	f109 0314 	add.w	r3, r9, #20
 8014754:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014758:	9202      	str	r2, [sp, #8]
 801475a:	1b3a      	subs	r2, r7, r4
 801475c:	3a15      	subs	r2, #21
 801475e:	f022 0203 	bic.w	r2, r2, #3
 8014762:	3204      	adds	r2, #4
 8014764:	f104 0115 	add.w	r1, r4, #21
 8014768:	428f      	cmp	r7, r1
 801476a:	bf38      	it	cc
 801476c:	2204      	movcc	r2, #4
 801476e:	9201      	str	r2, [sp, #4]
 8014770:	9a02      	ldr	r2, [sp, #8]
 8014772:	9303      	str	r3, [sp, #12]
 8014774:	429a      	cmp	r2, r3
 8014776:	d80c      	bhi.n	8014792 <__multiply+0x9e>
 8014778:	2e00      	cmp	r6, #0
 801477a:	dd03      	ble.n	8014784 <__multiply+0x90>
 801477c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014780:	2b00      	cmp	r3, #0
 8014782:	d05b      	beq.n	801483c <__multiply+0x148>
 8014784:	6106      	str	r6, [r0, #16]
 8014786:	b005      	add	sp, #20
 8014788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801478c:	f843 2b04 	str.w	r2, [r3], #4
 8014790:	e7d8      	b.n	8014744 <__multiply+0x50>
 8014792:	f8b3 a000 	ldrh.w	sl, [r3]
 8014796:	f1ba 0f00 	cmp.w	sl, #0
 801479a:	d024      	beq.n	80147e6 <__multiply+0xf2>
 801479c:	f104 0e14 	add.w	lr, r4, #20
 80147a0:	46a9      	mov	r9, r5
 80147a2:	f04f 0c00 	mov.w	ip, #0
 80147a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80147aa:	f8d9 1000 	ldr.w	r1, [r9]
 80147ae:	fa1f fb82 	uxth.w	fp, r2
 80147b2:	b289      	uxth	r1, r1
 80147b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80147b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80147bc:	f8d9 2000 	ldr.w	r2, [r9]
 80147c0:	4461      	add	r1, ip
 80147c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80147c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80147ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80147ce:	b289      	uxth	r1, r1
 80147d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80147d4:	4577      	cmp	r7, lr
 80147d6:	f849 1b04 	str.w	r1, [r9], #4
 80147da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80147de:	d8e2      	bhi.n	80147a6 <__multiply+0xb2>
 80147e0:	9a01      	ldr	r2, [sp, #4]
 80147e2:	f845 c002 	str.w	ip, [r5, r2]
 80147e6:	9a03      	ldr	r2, [sp, #12]
 80147e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80147ec:	3304      	adds	r3, #4
 80147ee:	f1b9 0f00 	cmp.w	r9, #0
 80147f2:	d021      	beq.n	8014838 <__multiply+0x144>
 80147f4:	6829      	ldr	r1, [r5, #0]
 80147f6:	f104 0c14 	add.w	ip, r4, #20
 80147fa:	46ae      	mov	lr, r5
 80147fc:	f04f 0a00 	mov.w	sl, #0
 8014800:	f8bc b000 	ldrh.w	fp, [ip]
 8014804:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014808:	fb09 220b 	mla	r2, r9, fp, r2
 801480c:	4452      	add	r2, sl
 801480e:	b289      	uxth	r1, r1
 8014810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014814:	f84e 1b04 	str.w	r1, [lr], #4
 8014818:	f85c 1b04 	ldr.w	r1, [ip], #4
 801481c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014820:	f8be 1000 	ldrh.w	r1, [lr]
 8014824:	fb09 110a 	mla	r1, r9, sl, r1
 8014828:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801482c:	4567      	cmp	r7, ip
 801482e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014832:	d8e5      	bhi.n	8014800 <__multiply+0x10c>
 8014834:	9a01      	ldr	r2, [sp, #4]
 8014836:	50a9      	str	r1, [r5, r2]
 8014838:	3504      	adds	r5, #4
 801483a:	e799      	b.n	8014770 <__multiply+0x7c>
 801483c:	3e01      	subs	r6, #1
 801483e:	e79b      	b.n	8014778 <__multiply+0x84>
 8014840:	08017122 	.word	0x08017122
 8014844:	08017193 	.word	0x08017193

08014848 <__pow5mult>:
 8014848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801484c:	4615      	mov	r5, r2
 801484e:	f012 0203 	ands.w	r2, r2, #3
 8014852:	4606      	mov	r6, r0
 8014854:	460f      	mov	r7, r1
 8014856:	d007      	beq.n	8014868 <__pow5mult+0x20>
 8014858:	4c25      	ldr	r4, [pc, #148]	; (80148f0 <__pow5mult+0xa8>)
 801485a:	3a01      	subs	r2, #1
 801485c:	2300      	movs	r3, #0
 801485e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014862:	f7ff fe53 	bl	801450c <__multadd>
 8014866:	4607      	mov	r7, r0
 8014868:	10ad      	asrs	r5, r5, #2
 801486a:	d03d      	beq.n	80148e8 <__pow5mult+0xa0>
 801486c:	69f4      	ldr	r4, [r6, #28]
 801486e:	b97c      	cbnz	r4, 8014890 <__pow5mult+0x48>
 8014870:	2010      	movs	r0, #16
 8014872:	f7fc f983 	bl	8010b7c <malloc>
 8014876:	4602      	mov	r2, r0
 8014878:	61f0      	str	r0, [r6, #28]
 801487a:	b928      	cbnz	r0, 8014888 <__pow5mult+0x40>
 801487c:	4b1d      	ldr	r3, [pc, #116]	; (80148f4 <__pow5mult+0xac>)
 801487e:	481e      	ldr	r0, [pc, #120]	; (80148f8 <__pow5mult+0xb0>)
 8014880:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014884:	f7fe fb92 	bl	8012fac <__assert_func>
 8014888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801488c:	6004      	str	r4, [r0, #0]
 801488e:	60c4      	str	r4, [r0, #12]
 8014890:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014898:	b94c      	cbnz	r4, 80148ae <__pow5mult+0x66>
 801489a:	f240 2171 	movw	r1, #625	; 0x271
 801489e:	4630      	mov	r0, r6
 80148a0:	f7ff ff12 	bl	80146c8 <__i2b>
 80148a4:	2300      	movs	r3, #0
 80148a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80148aa:	4604      	mov	r4, r0
 80148ac:	6003      	str	r3, [r0, #0]
 80148ae:	f04f 0900 	mov.w	r9, #0
 80148b2:	07eb      	lsls	r3, r5, #31
 80148b4:	d50a      	bpl.n	80148cc <__pow5mult+0x84>
 80148b6:	4639      	mov	r1, r7
 80148b8:	4622      	mov	r2, r4
 80148ba:	4630      	mov	r0, r6
 80148bc:	f7ff ff1a 	bl	80146f4 <__multiply>
 80148c0:	4639      	mov	r1, r7
 80148c2:	4680      	mov	r8, r0
 80148c4:	4630      	mov	r0, r6
 80148c6:	f7ff fdff 	bl	80144c8 <_Bfree>
 80148ca:	4647      	mov	r7, r8
 80148cc:	106d      	asrs	r5, r5, #1
 80148ce:	d00b      	beq.n	80148e8 <__pow5mult+0xa0>
 80148d0:	6820      	ldr	r0, [r4, #0]
 80148d2:	b938      	cbnz	r0, 80148e4 <__pow5mult+0x9c>
 80148d4:	4622      	mov	r2, r4
 80148d6:	4621      	mov	r1, r4
 80148d8:	4630      	mov	r0, r6
 80148da:	f7ff ff0b 	bl	80146f4 <__multiply>
 80148de:	6020      	str	r0, [r4, #0]
 80148e0:	f8c0 9000 	str.w	r9, [r0]
 80148e4:	4604      	mov	r4, r0
 80148e6:	e7e4      	b.n	80148b2 <__pow5mult+0x6a>
 80148e8:	4638      	mov	r0, r7
 80148ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148ee:	bf00      	nop
 80148f0:	080172e0 	.word	0x080172e0
 80148f4:	08017008 	.word	0x08017008
 80148f8:	08017193 	.word	0x08017193

080148fc <__lshift>:
 80148fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014900:	460c      	mov	r4, r1
 8014902:	6849      	ldr	r1, [r1, #4]
 8014904:	6923      	ldr	r3, [r4, #16]
 8014906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801490a:	68a3      	ldr	r3, [r4, #8]
 801490c:	4607      	mov	r7, r0
 801490e:	4691      	mov	r9, r2
 8014910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014914:	f108 0601 	add.w	r6, r8, #1
 8014918:	42b3      	cmp	r3, r6
 801491a:	db0b      	blt.n	8014934 <__lshift+0x38>
 801491c:	4638      	mov	r0, r7
 801491e:	f7ff fd93 	bl	8014448 <_Balloc>
 8014922:	4605      	mov	r5, r0
 8014924:	b948      	cbnz	r0, 801493a <__lshift+0x3e>
 8014926:	4602      	mov	r2, r0
 8014928:	4b28      	ldr	r3, [pc, #160]	; (80149cc <__lshift+0xd0>)
 801492a:	4829      	ldr	r0, [pc, #164]	; (80149d0 <__lshift+0xd4>)
 801492c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014930:	f7fe fb3c 	bl	8012fac <__assert_func>
 8014934:	3101      	adds	r1, #1
 8014936:	005b      	lsls	r3, r3, #1
 8014938:	e7ee      	b.n	8014918 <__lshift+0x1c>
 801493a:	2300      	movs	r3, #0
 801493c:	f100 0114 	add.w	r1, r0, #20
 8014940:	f100 0210 	add.w	r2, r0, #16
 8014944:	4618      	mov	r0, r3
 8014946:	4553      	cmp	r3, sl
 8014948:	db33      	blt.n	80149b2 <__lshift+0xb6>
 801494a:	6920      	ldr	r0, [r4, #16]
 801494c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014950:	f104 0314 	add.w	r3, r4, #20
 8014954:	f019 091f 	ands.w	r9, r9, #31
 8014958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801495c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014960:	d02b      	beq.n	80149ba <__lshift+0xbe>
 8014962:	f1c9 0e20 	rsb	lr, r9, #32
 8014966:	468a      	mov	sl, r1
 8014968:	2200      	movs	r2, #0
 801496a:	6818      	ldr	r0, [r3, #0]
 801496c:	fa00 f009 	lsl.w	r0, r0, r9
 8014970:	4310      	orrs	r0, r2
 8014972:	f84a 0b04 	str.w	r0, [sl], #4
 8014976:	f853 2b04 	ldr.w	r2, [r3], #4
 801497a:	459c      	cmp	ip, r3
 801497c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014980:	d8f3      	bhi.n	801496a <__lshift+0x6e>
 8014982:	ebac 0304 	sub.w	r3, ip, r4
 8014986:	3b15      	subs	r3, #21
 8014988:	f023 0303 	bic.w	r3, r3, #3
 801498c:	3304      	adds	r3, #4
 801498e:	f104 0015 	add.w	r0, r4, #21
 8014992:	4584      	cmp	ip, r0
 8014994:	bf38      	it	cc
 8014996:	2304      	movcc	r3, #4
 8014998:	50ca      	str	r2, [r1, r3]
 801499a:	b10a      	cbz	r2, 80149a0 <__lshift+0xa4>
 801499c:	f108 0602 	add.w	r6, r8, #2
 80149a0:	3e01      	subs	r6, #1
 80149a2:	4638      	mov	r0, r7
 80149a4:	612e      	str	r6, [r5, #16]
 80149a6:	4621      	mov	r1, r4
 80149a8:	f7ff fd8e 	bl	80144c8 <_Bfree>
 80149ac:	4628      	mov	r0, r5
 80149ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80149b6:	3301      	adds	r3, #1
 80149b8:	e7c5      	b.n	8014946 <__lshift+0x4a>
 80149ba:	3904      	subs	r1, #4
 80149bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80149c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80149c4:	459c      	cmp	ip, r3
 80149c6:	d8f9      	bhi.n	80149bc <__lshift+0xc0>
 80149c8:	e7ea      	b.n	80149a0 <__lshift+0xa4>
 80149ca:	bf00      	nop
 80149cc:	08017122 	.word	0x08017122
 80149d0:	08017193 	.word	0x08017193

080149d4 <__mcmp>:
 80149d4:	b530      	push	{r4, r5, lr}
 80149d6:	6902      	ldr	r2, [r0, #16]
 80149d8:	690c      	ldr	r4, [r1, #16]
 80149da:	1b12      	subs	r2, r2, r4
 80149dc:	d10e      	bne.n	80149fc <__mcmp+0x28>
 80149de:	f100 0314 	add.w	r3, r0, #20
 80149e2:	3114      	adds	r1, #20
 80149e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80149e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80149ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80149f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80149f4:	42a5      	cmp	r5, r4
 80149f6:	d003      	beq.n	8014a00 <__mcmp+0x2c>
 80149f8:	d305      	bcc.n	8014a06 <__mcmp+0x32>
 80149fa:	2201      	movs	r2, #1
 80149fc:	4610      	mov	r0, r2
 80149fe:	bd30      	pop	{r4, r5, pc}
 8014a00:	4283      	cmp	r3, r0
 8014a02:	d3f3      	bcc.n	80149ec <__mcmp+0x18>
 8014a04:	e7fa      	b.n	80149fc <__mcmp+0x28>
 8014a06:	f04f 32ff 	mov.w	r2, #4294967295
 8014a0a:	e7f7      	b.n	80149fc <__mcmp+0x28>

08014a0c <__mdiff>:
 8014a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a10:	460c      	mov	r4, r1
 8014a12:	4606      	mov	r6, r0
 8014a14:	4611      	mov	r1, r2
 8014a16:	4620      	mov	r0, r4
 8014a18:	4690      	mov	r8, r2
 8014a1a:	f7ff ffdb 	bl	80149d4 <__mcmp>
 8014a1e:	1e05      	subs	r5, r0, #0
 8014a20:	d110      	bne.n	8014a44 <__mdiff+0x38>
 8014a22:	4629      	mov	r1, r5
 8014a24:	4630      	mov	r0, r6
 8014a26:	f7ff fd0f 	bl	8014448 <_Balloc>
 8014a2a:	b930      	cbnz	r0, 8014a3a <__mdiff+0x2e>
 8014a2c:	4b3a      	ldr	r3, [pc, #232]	; (8014b18 <__mdiff+0x10c>)
 8014a2e:	4602      	mov	r2, r0
 8014a30:	f240 2137 	movw	r1, #567	; 0x237
 8014a34:	4839      	ldr	r0, [pc, #228]	; (8014b1c <__mdiff+0x110>)
 8014a36:	f7fe fab9 	bl	8012fac <__assert_func>
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a44:	bfa4      	itt	ge
 8014a46:	4643      	movge	r3, r8
 8014a48:	46a0      	movge	r8, r4
 8014a4a:	4630      	mov	r0, r6
 8014a4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014a50:	bfa6      	itte	ge
 8014a52:	461c      	movge	r4, r3
 8014a54:	2500      	movge	r5, #0
 8014a56:	2501      	movlt	r5, #1
 8014a58:	f7ff fcf6 	bl	8014448 <_Balloc>
 8014a5c:	b920      	cbnz	r0, 8014a68 <__mdiff+0x5c>
 8014a5e:	4b2e      	ldr	r3, [pc, #184]	; (8014b18 <__mdiff+0x10c>)
 8014a60:	4602      	mov	r2, r0
 8014a62:	f240 2145 	movw	r1, #581	; 0x245
 8014a66:	e7e5      	b.n	8014a34 <__mdiff+0x28>
 8014a68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014a6c:	6926      	ldr	r6, [r4, #16]
 8014a6e:	60c5      	str	r5, [r0, #12]
 8014a70:	f104 0914 	add.w	r9, r4, #20
 8014a74:	f108 0514 	add.w	r5, r8, #20
 8014a78:	f100 0e14 	add.w	lr, r0, #20
 8014a7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014a80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014a84:	f108 0210 	add.w	r2, r8, #16
 8014a88:	46f2      	mov	sl, lr
 8014a8a:	2100      	movs	r1, #0
 8014a8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014a90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014a94:	fa11 f88b 	uxtah	r8, r1, fp
 8014a98:	b299      	uxth	r1, r3
 8014a9a:	0c1b      	lsrs	r3, r3, #16
 8014a9c:	eba8 0801 	sub.w	r8, r8, r1
 8014aa0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014aa4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014aa8:	fa1f f888 	uxth.w	r8, r8
 8014aac:	1419      	asrs	r1, r3, #16
 8014aae:	454e      	cmp	r6, r9
 8014ab0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014ab4:	f84a 3b04 	str.w	r3, [sl], #4
 8014ab8:	d8e8      	bhi.n	8014a8c <__mdiff+0x80>
 8014aba:	1b33      	subs	r3, r6, r4
 8014abc:	3b15      	subs	r3, #21
 8014abe:	f023 0303 	bic.w	r3, r3, #3
 8014ac2:	3304      	adds	r3, #4
 8014ac4:	3415      	adds	r4, #21
 8014ac6:	42a6      	cmp	r6, r4
 8014ac8:	bf38      	it	cc
 8014aca:	2304      	movcc	r3, #4
 8014acc:	441d      	add	r5, r3
 8014ace:	4473      	add	r3, lr
 8014ad0:	469e      	mov	lr, r3
 8014ad2:	462e      	mov	r6, r5
 8014ad4:	4566      	cmp	r6, ip
 8014ad6:	d30e      	bcc.n	8014af6 <__mdiff+0xea>
 8014ad8:	f10c 0203 	add.w	r2, ip, #3
 8014adc:	1b52      	subs	r2, r2, r5
 8014ade:	f022 0203 	bic.w	r2, r2, #3
 8014ae2:	3d03      	subs	r5, #3
 8014ae4:	45ac      	cmp	ip, r5
 8014ae6:	bf38      	it	cc
 8014ae8:	2200      	movcc	r2, #0
 8014aea:	4413      	add	r3, r2
 8014aec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014af0:	b17a      	cbz	r2, 8014b12 <__mdiff+0x106>
 8014af2:	6107      	str	r7, [r0, #16]
 8014af4:	e7a4      	b.n	8014a40 <__mdiff+0x34>
 8014af6:	f856 8b04 	ldr.w	r8, [r6], #4
 8014afa:	fa11 f288 	uxtah	r2, r1, r8
 8014afe:	1414      	asrs	r4, r2, #16
 8014b00:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014b04:	b292      	uxth	r2, r2
 8014b06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014b0a:	f84e 2b04 	str.w	r2, [lr], #4
 8014b0e:	1421      	asrs	r1, r4, #16
 8014b10:	e7e0      	b.n	8014ad4 <__mdiff+0xc8>
 8014b12:	3f01      	subs	r7, #1
 8014b14:	e7ea      	b.n	8014aec <__mdiff+0xe0>
 8014b16:	bf00      	nop
 8014b18:	08017122 	.word	0x08017122
 8014b1c:	08017193 	.word	0x08017193

08014b20 <__ulp>:
 8014b20:	b082      	sub	sp, #8
 8014b22:	ed8d 0b00 	vstr	d0, [sp]
 8014b26:	9a01      	ldr	r2, [sp, #4]
 8014b28:	4b0f      	ldr	r3, [pc, #60]	; (8014b68 <__ulp+0x48>)
 8014b2a:	4013      	ands	r3, r2
 8014b2c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	dc08      	bgt.n	8014b46 <__ulp+0x26>
 8014b34:	425b      	negs	r3, r3
 8014b36:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014b3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014b3e:	da04      	bge.n	8014b4a <__ulp+0x2a>
 8014b40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014b44:	4113      	asrs	r3, r2
 8014b46:	2200      	movs	r2, #0
 8014b48:	e008      	b.n	8014b5c <__ulp+0x3c>
 8014b4a:	f1a2 0314 	sub.w	r3, r2, #20
 8014b4e:	2b1e      	cmp	r3, #30
 8014b50:	bfda      	itte	le
 8014b52:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014b56:	40da      	lsrle	r2, r3
 8014b58:	2201      	movgt	r2, #1
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	4610      	mov	r0, r2
 8014b60:	ec41 0b10 	vmov	d0, r0, r1
 8014b64:	b002      	add	sp, #8
 8014b66:	4770      	bx	lr
 8014b68:	7ff00000 	.word	0x7ff00000

08014b6c <__b2d>:
 8014b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b70:	6906      	ldr	r6, [r0, #16]
 8014b72:	f100 0814 	add.w	r8, r0, #20
 8014b76:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014b7a:	1f37      	subs	r7, r6, #4
 8014b7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014b80:	4610      	mov	r0, r2
 8014b82:	f7ff fd53 	bl	801462c <__hi0bits>
 8014b86:	f1c0 0320 	rsb	r3, r0, #32
 8014b8a:	280a      	cmp	r0, #10
 8014b8c:	600b      	str	r3, [r1, #0]
 8014b8e:	491b      	ldr	r1, [pc, #108]	; (8014bfc <__b2d+0x90>)
 8014b90:	dc15      	bgt.n	8014bbe <__b2d+0x52>
 8014b92:	f1c0 0c0b 	rsb	ip, r0, #11
 8014b96:	fa22 f30c 	lsr.w	r3, r2, ip
 8014b9a:	45b8      	cmp	r8, r7
 8014b9c:	ea43 0501 	orr.w	r5, r3, r1
 8014ba0:	bf34      	ite	cc
 8014ba2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014ba6:	2300      	movcs	r3, #0
 8014ba8:	3015      	adds	r0, #21
 8014baa:	fa02 f000 	lsl.w	r0, r2, r0
 8014bae:	fa23 f30c 	lsr.w	r3, r3, ip
 8014bb2:	4303      	orrs	r3, r0
 8014bb4:	461c      	mov	r4, r3
 8014bb6:	ec45 4b10 	vmov	d0, r4, r5
 8014bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bbe:	45b8      	cmp	r8, r7
 8014bc0:	bf3a      	itte	cc
 8014bc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014bc6:	f1a6 0708 	subcc.w	r7, r6, #8
 8014bca:	2300      	movcs	r3, #0
 8014bcc:	380b      	subs	r0, #11
 8014bce:	d012      	beq.n	8014bf6 <__b2d+0x8a>
 8014bd0:	f1c0 0120 	rsb	r1, r0, #32
 8014bd4:	fa23 f401 	lsr.w	r4, r3, r1
 8014bd8:	4082      	lsls	r2, r0
 8014bda:	4322      	orrs	r2, r4
 8014bdc:	4547      	cmp	r7, r8
 8014bde:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014be2:	bf8c      	ite	hi
 8014be4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014be8:	2200      	movls	r2, #0
 8014bea:	4083      	lsls	r3, r0
 8014bec:	40ca      	lsrs	r2, r1
 8014bee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014bf2:	4313      	orrs	r3, r2
 8014bf4:	e7de      	b.n	8014bb4 <__b2d+0x48>
 8014bf6:	ea42 0501 	orr.w	r5, r2, r1
 8014bfa:	e7db      	b.n	8014bb4 <__b2d+0x48>
 8014bfc:	3ff00000 	.word	0x3ff00000

08014c00 <__d2b>:
 8014c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c04:	460f      	mov	r7, r1
 8014c06:	2101      	movs	r1, #1
 8014c08:	ec59 8b10 	vmov	r8, r9, d0
 8014c0c:	4616      	mov	r6, r2
 8014c0e:	f7ff fc1b 	bl	8014448 <_Balloc>
 8014c12:	4604      	mov	r4, r0
 8014c14:	b930      	cbnz	r0, 8014c24 <__d2b+0x24>
 8014c16:	4602      	mov	r2, r0
 8014c18:	4b24      	ldr	r3, [pc, #144]	; (8014cac <__d2b+0xac>)
 8014c1a:	4825      	ldr	r0, [pc, #148]	; (8014cb0 <__d2b+0xb0>)
 8014c1c:	f240 310f 	movw	r1, #783	; 0x30f
 8014c20:	f7fe f9c4 	bl	8012fac <__assert_func>
 8014c24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014c2c:	bb2d      	cbnz	r5, 8014c7a <__d2b+0x7a>
 8014c2e:	9301      	str	r3, [sp, #4]
 8014c30:	f1b8 0300 	subs.w	r3, r8, #0
 8014c34:	d026      	beq.n	8014c84 <__d2b+0x84>
 8014c36:	4668      	mov	r0, sp
 8014c38:	9300      	str	r3, [sp, #0]
 8014c3a:	f7ff fd17 	bl	801466c <__lo0bits>
 8014c3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014c42:	b1e8      	cbz	r0, 8014c80 <__d2b+0x80>
 8014c44:	f1c0 0320 	rsb	r3, r0, #32
 8014c48:	fa02 f303 	lsl.w	r3, r2, r3
 8014c4c:	430b      	orrs	r3, r1
 8014c4e:	40c2      	lsrs	r2, r0
 8014c50:	6163      	str	r3, [r4, #20]
 8014c52:	9201      	str	r2, [sp, #4]
 8014c54:	9b01      	ldr	r3, [sp, #4]
 8014c56:	61a3      	str	r3, [r4, #24]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	bf14      	ite	ne
 8014c5c:	2202      	movne	r2, #2
 8014c5e:	2201      	moveq	r2, #1
 8014c60:	6122      	str	r2, [r4, #16]
 8014c62:	b1bd      	cbz	r5, 8014c94 <__d2b+0x94>
 8014c64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014c68:	4405      	add	r5, r0
 8014c6a:	603d      	str	r5, [r7, #0]
 8014c6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014c70:	6030      	str	r0, [r6, #0]
 8014c72:	4620      	mov	r0, r4
 8014c74:	b003      	add	sp, #12
 8014c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014c7e:	e7d6      	b.n	8014c2e <__d2b+0x2e>
 8014c80:	6161      	str	r1, [r4, #20]
 8014c82:	e7e7      	b.n	8014c54 <__d2b+0x54>
 8014c84:	a801      	add	r0, sp, #4
 8014c86:	f7ff fcf1 	bl	801466c <__lo0bits>
 8014c8a:	9b01      	ldr	r3, [sp, #4]
 8014c8c:	6163      	str	r3, [r4, #20]
 8014c8e:	3020      	adds	r0, #32
 8014c90:	2201      	movs	r2, #1
 8014c92:	e7e5      	b.n	8014c60 <__d2b+0x60>
 8014c94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014c98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014c9c:	6038      	str	r0, [r7, #0]
 8014c9e:	6918      	ldr	r0, [r3, #16]
 8014ca0:	f7ff fcc4 	bl	801462c <__hi0bits>
 8014ca4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014ca8:	e7e2      	b.n	8014c70 <__d2b+0x70>
 8014caa:	bf00      	nop
 8014cac:	08017122 	.word	0x08017122
 8014cb0:	08017193 	.word	0x08017193

08014cb4 <__ratio>:
 8014cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb8:	4688      	mov	r8, r1
 8014cba:	4669      	mov	r1, sp
 8014cbc:	4681      	mov	r9, r0
 8014cbe:	f7ff ff55 	bl	8014b6c <__b2d>
 8014cc2:	a901      	add	r1, sp, #4
 8014cc4:	4640      	mov	r0, r8
 8014cc6:	ec55 4b10 	vmov	r4, r5, d0
 8014cca:	f7ff ff4f 	bl	8014b6c <__b2d>
 8014cce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014cd2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014cd6:	eba3 0c02 	sub.w	ip, r3, r2
 8014cda:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014cde:	1a9b      	subs	r3, r3, r2
 8014ce0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014ce4:	ec51 0b10 	vmov	r0, r1, d0
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	bfd6      	itet	le
 8014cec:	460a      	movle	r2, r1
 8014cee:	462a      	movgt	r2, r5
 8014cf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014cf4:	468b      	mov	fp, r1
 8014cf6:	462f      	mov	r7, r5
 8014cf8:	bfd4      	ite	le
 8014cfa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014cfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014d02:	4620      	mov	r0, r4
 8014d04:	ee10 2a10 	vmov	r2, s0
 8014d08:	465b      	mov	r3, fp
 8014d0a:	4639      	mov	r1, r7
 8014d0c:	f7eb fd9e 	bl	800084c <__aeabi_ddiv>
 8014d10:	ec41 0b10 	vmov	d0, r0, r1
 8014d14:	b003      	add	sp, #12
 8014d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d1a <__copybits>:
 8014d1a:	3901      	subs	r1, #1
 8014d1c:	b570      	push	{r4, r5, r6, lr}
 8014d1e:	1149      	asrs	r1, r1, #5
 8014d20:	6914      	ldr	r4, [r2, #16]
 8014d22:	3101      	adds	r1, #1
 8014d24:	f102 0314 	add.w	r3, r2, #20
 8014d28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014d2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014d30:	1f05      	subs	r5, r0, #4
 8014d32:	42a3      	cmp	r3, r4
 8014d34:	d30c      	bcc.n	8014d50 <__copybits+0x36>
 8014d36:	1aa3      	subs	r3, r4, r2
 8014d38:	3b11      	subs	r3, #17
 8014d3a:	f023 0303 	bic.w	r3, r3, #3
 8014d3e:	3211      	adds	r2, #17
 8014d40:	42a2      	cmp	r2, r4
 8014d42:	bf88      	it	hi
 8014d44:	2300      	movhi	r3, #0
 8014d46:	4418      	add	r0, r3
 8014d48:	2300      	movs	r3, #0
 8014d4a:	4288      	cmp	r0, r1
 8014d4c:	d305      	bcc.n	8014d5a <__copybits+0x40>
 8014d4e:	bd70      	pop	{r4, r5, r6, pc}
 8014d50:	f853 6b04 	ldr.w	r6, [r3], #4
 8014d54:	f845 6f04 	str.w	r6, [r5, #4]!
 8014d58:	e7eb      	b.n	8014d32 <__copybits+0x18>
 8014d5a:	f840 3b04 	str.w	r3, [r0], #4
 8014d5e:	e7f4      	b.n	8014d4a <__copybits+0x30>

08014d60 <__any_on>:
 8014d60:	f100 0214 	add.w	r2, r0, #20
 8014d64:	6900      	ldr	r0, [r0, #16]
 8014d66:	114b      	asrs	r3, r1, #5
 8014d68:	4298      	cmp	r0, r3
 8014d6a:	b510      	push	{r4, lr}
 8014d6c:	db11      	blt.n	8014d92 <__any_on+0x32>
 8014d6e:	dd0a      	ble.n	8014d86 <__any_on+0x26>
 8014d70:	f011 011f 	ands.w	r1, r1, #31
 8014d74:	d007      	beq.n	8014d86 <__any_on+0x26>
 8014d76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014d7a:	fa24 f001 	lsr.w	r0, r4, r1
 8014d7e:	fa00 f101 	lsl.w	r1, r0, r1
 8014d82:	428c      	cmp	r4, r1
 8014d84:	d10b      	bne.n	8014d9e <__any_on+0x3e>
 8014d86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d803      	bhi.n	8014d96 <__any_on+0x36>
 8014d8e:	2000      	movs	r0, #0
 8014d90:	bd10      	pop	{r4, pc}
 8014d92:	4603      	mov	r3, r0
 8014d94:	e7f7      	b.n	8014d86 <__any_on+0x26>
 8014d96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014d9a:	2900      	cmp	r1, #0
 8014d9c:	d0f5      	beq.n	8014d8a <__any_on+0x2a>
 8014d9e:	2001      	movs	r0, #1
 8014da0:	e7f6      	b.n	8014d90 <__any_on+0x30>
	...

08014da4 <_strtoul_l.constprop.0>:
 8014da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014da8:	4f36      	ldr	r7, [pc, #216]	; (8014e84 <_strtoul_l.constprop.0+0xe0>)
 8014daa:	4686      	mov	lr, r0
 8014dac:	460d      	mov	r5, r1
 8014dae:	4628      	mov	r0, r5
 8014db0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014db4:	5d3e      	ldrb	r6, [r7, r4]
 8014db6:	f016 0608 	ands.w	r6, r6, #8
 8014dba:	d1f8      	bne.n	8014dae <_strtoul_l.constprop.0+0xa>
 8014dbc:	2c2d      	cmp	r4, #45	; 0x2d
 8014dbe:	d130      	bne.n	8014e22 <_strtoul_l.constprop.0+0x7e>
 8014dc0:	782c      	ldrb	r4, [r5, #0]
 8014dc2:	2601      	movs	r6, #1
 8014dc4:	1c85      	adds	r5, r0, #2
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d057      	beq.n	8014e7a <_strtoul_l.constprop.0+0xd6>
 8014dca:	2b10      	cmp	r3, #16
 8014dcc:	d109      	bne.n	8014de2 <_strtoul_l.constprop.0+0x3e>
 8014dce:	2c30      	cmp	r4, #48	; 0x30
 8014dd0:	d107      	bne.n	8014de2 <_strtoul_l.constprop.0+0x3e>
 8014dd2:	7828      	ldrb	r0, [r5, #0]
 8014dd4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014dd8:	2858      	cmp	r0, #88	; 0x58
 8014dda:	d149      	bne.n	8014e70 <_strtoul_l.constprop.0+0xcc>
 8014ddc:	786c      	ldrb	r4, [r5, #1]
 8014dde:	2310      	movs	r3, #16
 8014de0:	3502      	adds	r5, #2
 8014de2:	f04f 38ff 	mov.w	r8, #4294967295
 8014de6:	2700      	movs	r7, #0
 8014de8:	fbb8 f8f3 	udiv	r8, r8, r3
 8014dec:	fb03 f908 	mul.w	r9, r3, r8
 8014df0:	ea6f 0909 	mvn.w	r9, r9
 8014df4:	4638      	mov	r0, r7
 8014df6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014dfa:	f1bc 0f09 	cmp.w	ip, #9
 8014dfe:	d815      	bhi.n	8014e2c <_strtoul_l.constprop.0+0x88>
 8014e00:	4664      	mov	r4, ip
 8014e02:	42a3      	cmp	r3, r4
 8014e04:	dd23      	ble.n	8014e4e <_strtoul_l.constprop.0+0xaa>
 8014e06:	f1b7 3fff 	cmp.w	r7, #4294967295
 8014e0a:	d007      	beq.n	8014e1c <_strtoul_l.constprop.0+0x78>
 8014e0c:	4580      	cmp	r8, r0
 8014e0e:	d31b      	bcc.n	8014e48 <_strtoul_l.constprop.0+0xa4>
 8014e10:	d101      	bne.n	8014e16 <_strtoul_l.constprop.0+0x72>
 8014e12:	45a1      	cmp	r9, r4
 8014e14:	db18      	blt.n	8014e48 <_strtoul_l.constprop.0+0xa4>
 8014e16:	fb00 4003 	mla	r0, r0, r3, r4
 8014e1a:	2701      	movs	r7, #1
 8014e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e20:	e7e9      	b.n	8014df6 <_strtoul_l.constprop.0+0x52>
 8014e22:	2c2b      	cmp	r4, #43	; 0x2b
 8014e24:	bf04      	itt	eq
 8014e26:	782c      	ldrbeq	r4, [r5, #0]
 8014e28:	1c85      	addeq	r5, r0, #2
 8014e2a:	e7cc      	b.n	8014dc6 <_strtoul_l.constprop.0+0x22>
 8014e2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014e30:	f1bc 0f19 	cmp.w	ip, #25
 8014e34:	d801      	bhi.n	8014e3a <_strtoul_l.constprop.0+0x96>
 8014e36:	3c37      	subs	r4, #55	; 0x37
 8014e38:	e7e3      	b.n	8014e02 <_strtoul_l.constprop.0+0x5e>
 8014e3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014e3e:	f1bc 0f19 	cmp.w	ip, #25
 8014e42:	d804      	bhi.n	8014e4e <_strtoul_l.constprop.0+0xaa>
 8014e44:	3c57      	subs	r4, #87	; 0x57
 8014e46:	e7dc      	b.n	8014e02 <_strtoul_l.constprop.0+0x5e>
 8014e48:	f04f 37ff 	mov.w	r7, #4294967295
 8014e4c:	e7e6      	b.n	8014e1c <_strtoul_l.constprop.0+0x78>
 8014e4e:	1c7b      	adds	r3, r7, #1
 8014e50:	d106      	bne.n	8014e60 <_strtoul_l.constprop.0+0xbc>
 8014e52:	2322      	movs	r3, #34	; 0x22
 8014e54:	f8ce 3000 	str.w	r3, [lr]
 8014e58:	4638      	mov	r0, r7
 8014e5a:	b932      	cbnz	r2, 8014e6a <_strtoul_l.constprop.0+0xc6>
 8014e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e60:	b106      	cbz	r6, 8014e64 <_strtoul_l.constprop.0+0xc0>
 8014e62:	4240      	negs	r0, r0
 8014e64:	2a00      	cmp	r2, #0
 8014e66:	d0f9      	beq.n	8014e5c <_strtoul_l.constprop.0+0xb8>
 8014e68:	b107      	cbz	r7, 8014e6c <_strtoul_l.constprop.0+0xc8>
 8014e6a:	1e69      	subs	r1, r5, #1
 8014e6c:	6011      	str	r1, [r2, #0]
 8014e6e:	e7f5      	b.n	8014e5c <_strtoul_l.constprop.0+0xb8>
 8014e70:	2430      	movs	r4, #48	; 0x30
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d1b5      	bne.n	8014de2 <_strtoul_l.constprop.0+0x3e>
 8014e76:	2308      	movs	r3, #8
 8014e78:	e7b3      	b.n	8014de2 <_strtoul_l.constprop.0+0x3e>
 8014e7a:	2c30      	cmp	r4, #48	; 0x30
 8014e7c:	d0a9      	beq.n	8014dd2 <_strtoul_l.constprop.0+0x2e>
 8014e7e:	230a      	movs	r3, #10
 8014e80:	e7af      	b.n	8014de2 <_strtoul_l.constprop.0+0x3e>
 8014e82:	bf00      	nop
 8014e84:	08016ed1 	.word	0x08016ed1

08014e88 <_strtoul_r>:
 8014e88:	f7ff bf8c 	b.w	8014da4 <_strtoul_l.constprop.0>

08014e8c <__ascii_wctomb>:
 8014e8c:	b149      	cbz	r1, 8014ea2 <__ascii_wctomb+0x16>
 8014e8e:	2aff      	cmp	r2, #255	; 0xff
 8014e90:	bf85      	ittet	hi
 8014e92:	238a      	movhi	r3, #138	; 0x8a
 8014e94:	6003      	strhi	r3, [r0, #0]
 8014e96:	700a      	strbls	r2, [r1, #0]
 8014e98:	f04f 30ff 	movhi.w	r0, #4294967295
 8014e9c:	bf98      	it	ls
 8014e9e:	2001      	movls	r0, #1
 8014ea0:	4770      	bx	lr
 8014ea2:	4608      	mov	r0, r1
 8014ea4:	4770      	bx	lr

08014ea6 <__ssputs_r>:
 8014ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eaa:	688e      	ldr	r6, [r1, #8]
 8014eac:	461f      	mov	r7, r3
 8014eae:	42be      	cmp	r6, r7
 8014eb0:	680b      	ldr	r3, [r1, #0]
 8014eb2:	4682      	mov	sl, r0
 8014eb4:	460c      	mov	r4, r1
 8014eb6:	4690      	mov	r8, r2
 8014eb8:	d82c      	bhi.n	8014f14 <__ssputs_r+0x6e>
 8014eba:	898a      	ldrh	r2, [r1, #12]
 8014ebc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014ec0:	d026      	beq.n	8014f10 <__ssputs_r+0x6a>
 8014ec2:	6965      	ldr	r5, [r4, #20]
 8014ec4:	6909      	ldr	r1, [r1, #16]
 8014ec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014eca:	eba3 0901 	sub.w	r9, r3, r1
 8014ece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014ed2:	1c7b      	adds	r3, r7, #1
 8014ed4:	444b      	add	r3, r9
 8014ed6:	106d      	asrs	r5, r5, #1
 8014ed8:	429d      	cmp	r5, r3
 8014eda:	bf38      	it	cc
 8014edc:	461d      	movcc	r5, r3
 8014ede:	0553      	lsls	r3, r2, #21
 8014ee0:	d527      	bpl.n	8014f32 <__ssputs_r+0x8c>
 8014ee2:	4629      	mov	r1, r5
 8014ee4:	f7fb fe7a 	bl	8010bdc <_malloc_r>
 8014ee8:	4606      	mov	r6, r0
 8014eea:	b360      	cbz	r0, 8014f46 <__ssputs_r+0xa0>
 8014eec:	6921      	ldr	r1, [r4, #16]
 8014eee:	464a      	mov	r2, r9
 8014ef0:	f7fe f83d 	bl	8012f6e <memcpy>
 8014ef4:	89a3      	ldrh	r3, [r4, #12]
 8014ef6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014efe:	81a3      	strh	r3, [r4, #12]
 8014f00:	6126      	str	r6, [r4, #16]
 8014f02:	6165      	str	r5, [r4, #20]
 8014f04:	444e      	add	r6, r9
 8014f06:	eba5 0509 	sub.w	r5, r5, r9
 8014f0a:	6026      	str	r6, [r4, #0]
 8014f0c:	60a5      	str	r5, [r4, #8]
 8014f0e:	463e      	mov	r6, r7
 8014f10:	42be      	cmp	r6, r7
 8014f12:	d900      	bls.n	8014f16 <__ssputs_r+0x70>
 8014f14:	463e      	mov	r6, r7
 8014f16:	6820      	ldr	r0, [r4, #0]
 8014f18:	4632      	mov	r2, r6
 8014f1a:	4641      	mov	r1, r8
 8014f1c:	f000 fe89 	bl	8015c32 <memmove>
 8014f20:	68a3      	ldr	r3, [r4, #8]
 8014f22:	1b9b      	subs	r3, r3, r6
 8014f24:	60a3      	str	r3, [r4, #8]
 8014f26:	6823      	ldr	r3, [r4, #0]
 8014f28:	4433      	add	r3, r6
 8014f2a:	6023      	str	r3, [r4, #0]
 8014f2c:	2000      	movs	r0, #0
 8014f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f32:	462a      	mov	r2, r5
 8014f34:	f000 fed7 	bl	8015ce6 <_realloc_r>
 8014f38:	4606      	mov	r6, r0
 8014f3a:	2800      	cmp	r0, #0
 8014f3c:	d1e0      	bne.n	8014f00 <__ssputs_r+0x5a>
 8014f3e:	6921      	ldr	r1, [r4, #16]
 8014f40:	4650      	mov	r0, sl
 8014f42:	f7fe fecb 	bl	8013cdc <_free_r>
 8014f46:	230c      	movs	r3, #12
 8014f48:	f8ca 3000 	str.w	r3, [sl]
 8014f4c:	89a3      	ldrh	r3, [r4, #12]
 8014f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f52:	81a3      	strh	r3, [r4, #12]
 8014f54:	f04f 30ff 	mov.w	r0, #4294967295
 8014f58:	e7e9      	b.n	8014f2e <__ssputs_r+0x88>
	...

08014f5c <_svfiprintf_r>:
 8014f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f60:	4698      	mov	r8, r3
 8014f62:	898b      	ldrh	r3, [r1, #12]
 8014f64:	061b      	lsls	r3, r3, #24
 8014f66:	b09d      	sub	sp, #116	; 0x74
 8014f68:	4607      	mov	r7, r0
 8014f6a:	460d      	mov	r5, r1
 8014f6c:	4614      	mov	r4, r2
 8014f6e:	d50e      	bpl.n	8014f8e <_svfiprintf_r+0x32>
 8014f70:	690b      	ldr	r3, [r1, #16]
 8014f72:	b963      	cbnz	r3, 8014f8e <_svfiprintf_r+0x32>
 8014f74:	2140      	movs	r1, #64	; 0x40
 8014f76:	f7fb fe31 	bl	8010bdc <_malloc_r>
 8014f7a:	6028      	str	r0, [r5, #0]
 8014f7c:	6128      	str	r0, [r5, #16]
 8014f7e:	b920      	cbnz	r0, 8014f8a <_svfiprintf_r+0x2e>
 8014f80:	230c      	movs	r3, #12
 8014f82:	603b      	str	r3, [r7, #0]
 8014f84:	f04f 30ff 	mov.w	r0, #4294967295
 8014f88:	e0d0      	b.n	801512c <_svfiprintf_r+0x1d0>
 8014f8a:	2340      	movs	r3, #64	; 0x40
 8014f8c:	616b      	str	r3, [r5, #20]
 8014f8e:	2300      	movs	r3, #0
 8014f90:	9309      	str	r3, [sp, #36]	; 0x24
 8014f92:	2320      	movs	r3, #32
 8014f94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f9c:	2330      	movs	r3, #48	; 0x30
 8014f9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015144 <_svfiprintf_r+0x1e8>
 8014fa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014fa6:	f04f 0901 	mov.w	r9, #1
 8014faa:	4623      	mov	r3, r4
 8014fac:	469a      	mov	sl, r3
 8014fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fb2:	b10a      	cbz	r2, 8014fb8 <_svfiprintf_r+0x5c>
 8014fb4:	2a25      	cmp	r2, #37	; 0x25
 8014fb6:	d1f9      	bne.n	8014fac <_svfiprintf_r+0x50>
 8014fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8014fbc:	d00b      	beq.n	8014fd6 <_svfiprintf_r+0x7a>
 8014fbe:	465b      	mov	r3, fp
 8014fc0:	4622      	mov	r2, r4
 8014fc2:	4629      	mov	r1, r5
 8014fc4:	4638      	mov	r0, r7
 8014fc6:	f7ff ff6e 	bl	8014ea6 <__ssputs_r>
 8014fca:	3001      	adds	r0, #1
 8014fcc:	f000 80a9 	beq.w	8015122 <_svfiprintf_r+0x1c6>
 8014fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fd2:	445a      	add	r2, fp
 8014fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8014fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	f000 80a1 	beq.w	8015122 <_svfiprintf_r+0x1c6>
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8014fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fea:	f10a 0a01 	add.w	sl, sl, #1
 8014fee:	9304      	str	r3, [sp, #16]
 8014ff0:	9307      	str	r3, [sp, #28]
 8014ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8014ff8:	4654      	mov	r4, sl
 8014ffa:	2205      	movs	r2, #5
 8014ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015000:	4850      	ldr	r0, [pc, #320]	; (8015144 <_svfiprintf_r+0x1e8>)
 8015002:	f7eb f8e5 	bl	80001d0 <memchr>
 8015006:	9a04      	ldr	r2, [sp, #16]
 8015008:	b9d8      	cbnz	r0, 8015042 <_svfiprintf_r+0xe6>
 801500a:	06d0      	lsls	r0, r2, #27
 801500c:	bf44      	itt	mi
 801500e:	2320      	movmi	r3, #32
 8015010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015014:	0711      	lsls	r1, r2, #28
 8015016:	bf44      	itt	mi
 8015018:	232b      	movmi	r3, #43	; 0x2b
 801501a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801501e:	f89a 3000 	ldrb.w	r3, [sl]
 8015022:	2b2a      	cmp	r3, #42	; 0x2a
 8015024:	d015      	beq.n	8015052 <_svfiprintf_r+0xf6>
 8015026:	9a07      	ldr	r2, [sp, #28]
 8015028:	4654      	mov	r4, sl
 801502a:	2000      	movs	r0, #0
 801502c:	f04f 0c0a 	mov.w	ip, #10
 8015030:	4621      	mov	r1, r4
 8015032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015036:	3b30      	subs	r3, #48	; 0x30
 8015038:	2b09      	cmp	r3, #9
 801503a:	d94d      	bls.n	80150d8 <_svfiprintf_r+0x17c>
 801503c:	b1b0      	cbz	r0, 801506c <_svfiprintf_r+0x110>
 801503e:	9207      	str	r2, [sp, #28]
 8015040:	e014      	b.n	801506c <_svfiprintf_r+0x110>
 8015042:	eba0 0308 	sub.w	r3, r0, r8
 8015046:	fa09 f303 	lsl.w	r3, r9, r3
 801504a:	4313      	orrs	r3, r2
 801504c:	9304      	str	r3, [sp, #16]
 801504e:	46a2      	mov	sl, r4
 8015050:	e7d2      	b.n	8014ff8 <_svfiprintf_r+0x9c>
 8015052:	9b03      	ldr	r3, [sp, #12]
 8015054:	1d19      	adds	r1, r3, #4
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	9103      	str	r1, [sp, #12]
 801505a:	2b00      	cmp	r3, #0
 801505c:	bfbb      	ittet	lt
 801505e:	425b      	neglt	r3, r3
 8015060:	f042 0202 	orrlt.w	r2, r2, #2
 8015064:	9307      	strge	r3, [sp, #28]
 8015066:	9307      	strlt	r3, [sp, #28]
 8015068:	bfb8      	it	lt
 801506a:	9204      	strlt	r2, [sp, #16]
 801506c:	7823      	ldrb	r3, [r4, #0]
 801506e:	2b2e      	cmp	r3, #46	; 0x2e
 8015070:	d10c      	bne.n	801508c <_svfiprintf_r+0x130>
 8015072:	7863      	ldrb	r3, [r4, #1]
 8015074:	2b2a      	cmp	r3, #42	; 0x2a
 8015076:	d134      	bne.n	80150e2 <_svfiprintf_r+0x186>
 8015078:	9b03      	ldr	r3, [sp, #12]
 801507a:	1d1a      	adds	r2, r3, #4
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	9203      	str	r2, [sp, #12]
 8015080:	2b00      	cmp	r3, #0
 8015082:	bfb8      	it	lt
 8015084:	f04f 33ff 	movlt.w	r3, #4294967295
 8015088:	3402      	adds	r4, #2
 801508a:	9305      	str	r3, [sp, #20]
 801508c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015154 <_svfiprintf_r+0x1f8>
 8015090:	7821      	ldrb	r1, [r4, #0]
 8015092:	2203      	movs	r2, #3
 8015094:	4650      	mov	r0, sl
 8015096:	f7eb f89b 	bl	80001d0 <memchr>
 801509a:	b138      	cbz	r0, 80150ac <_svfiprintf_r+0x150>
 801509c:	9b04      	ldr	r3, [sp, #16]
 801509e:	eba0 000a 	sub.w	r0, r0, sl
 80150a2:	2240      	movs	r2, #64	; 0x40
 80150a4:	4082      	lsls	r2, r0
 80150a6:	4313      	orrs	r3, r2
 80150a8:	3401      	adds	r4, #1
 80150aa:	9304      	str	r3, [sp, #16]
 80150ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150b0:	4825      	ldr	r0, [pc, #148]	; (8015148 <_svfiprintf_r+0x1ec>)
 80150b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150b6:	2206      	movs	r2, #6
 80150b8:	f7eb f88a 	bl	80001d0 <memchr>
 80150bc:	2800      	cmp	r0, #0
 80150be:	d038      	beq.n	8015132 <_svfiprintf_r+0x1d6>
 80150c0:	4b22      	ldr	r3, [pc, #136]	; (801514c <_svfiprintf_r+0x1f0>)
 80150c2:	bb1b      	cbnz	r3, 801510c <_svfiprintf_r+0x1b0>
 80150c4:	9b03      	ldr	r3, [sp, #12]
 80150c6:	3307      	adds	r3, #7
 80150c8:	f023 0307 	bic.w	r3, r3, #7
 80150cc:	3308      	adds	r3, #8
 80150ce:	9303      	str	r3, [sp, #12]
 80150d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d2:	4433      	add	r3, r6
 80150d4:	9309      	str	r3, [sp, #36]	; 0x24
 80150d6:	e768      	b.n	8014faa <_svfiprintf_r+0x4e>
 80150d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80150dc:	460c      	mov	r4, r1
 80150de:	2001      	movs	r0, #1
 80150e0:	e7a6      	b.n	8015030 <_svfiprintf_r+0xd4>
 80150e2:	2300      	movs	r3, #0
 80150e4:	3401      	adds	r4, #1
 80150e6:	9305      	str	r3, [sp, #20]
 80150e8:	4619      	mov	r1, r3
 80150ea:	f04f 0c0a 	mov.w	ip, #10
 80150ee:	4620      	mov	r0, r4
 80150f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150f4:	3a30      	subs	r2, #48	; 0x30
 80150f6:	2a09      	cmp	r2, #9
 80150f8:	d903      	bls.n	8015102 <_svfiprintf_r+0x1a6>
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d0c6      	beq.n	801508c <_svfiprintf_r+0x130>
 80150fe:	9105      	str	r1, [sp, #20]
 8015100:	e7c4      	b.n	801508c <_svfiprintf_r+0x130>
 8015102:	fb0c 2101 	mla	r1, ip, r1, r2
 8015106:	4604      	mov	r4, r0
 8015108:	2301      	movs	r3, #1
 801510a:	e7f0      	b.n	80150ee <_svfiprintf_r+0x192>
 801510c:	ab03      	add	r3, sp, #12
 801510e:	9300      	str	r3, [sp, #0]
 8015110:	462a      	mov	r2, r5
 8015112:	4b0f      	ldr	r3, [pc, #60]	; (8015150 <_svfiprintf_r+0x1f4>)
 8015114:	a904      	add	r1, sp, #16
 8015116:	4638      	mov	r0, r7
 8015118:	f7fc fd38 	bl	8011b8c <_printf_float>
 801511c:	1c42      	adds	r2, r0, #1
 801511e:	4606      	mov	r6, r0
 8015120:	d1d6      	bne.n	80150d0 <_svfiprintf_r+0x174>
 8015122:	89ab      	ldrh	r3, [r5, #12]
 8015124:	065b      	lsls	r3, r3, #25
 8015126:	f53f af2d 	bmi.w	8014f84 <_svfiprintf_r+0x28>
 801512a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801512c:	b01d      	add	sp, #116	; 0x74
 801512e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015132:	ab03      	add	r3, sp, #12
 8015134:	9300      	str	r3, [sp, #0]
 8015136:	462a      	mov	r2, r5
 8015138:	4b05      	ldr	r3, [pc, #20]	; (8015150 <_svfiprintf_r+0x1f4>)
 801513a:	a904      	add	r1, sp, #16
 801513c:	4638      	mov	r0, r7
 801513e:	f7fc ffc9 	bl	80120d4 <_printf_i>
 8015142:	e7eb      	b.n	801511c <_svfiprintf_r+0x1c0>
 8015144:	080172ec 	.word	0x080172ec
 8015148:	080172f6 	.word	0x080172f6
 801514c:	08011b8d 	.word	0x08011b8d
 8015150:	08014ea7 	.word	0x08014ea7
 8015154:	080172f2 	.word	0x080172f2

08015158 <_sungetc_r>:
 8015158:	b538      	push	{r3, r4, r5, lr}
 801515a:	1c4b      	adds	r3, r1, #1
 801515c:	4614      	mov	r4, r2
 801515e:	d103      	bne.n	8015168 <_sungetc_r+0x10>
 8015160:	f04f 35ff 	mov.w	r5, #4294967295
 8015164:	4628      	mov	r0, r5
 8015166:	bd38      	pop	{r3, r4, r5, pc}
 8015168:	8993      	ldrh	r3, [r2, #12]
 801516a:	f023 0320 	bic.w	r3, r3, #32
 801516e:	8193      	strh	r3, [r2, #12]
 8015170:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015172:	6852      	ldr	r2, [r2, #4]
 8015174:	b2cd      	uxtb	r5, r1
 8015176:	b18b      	cbz	r3, 801519c <_sungetc_r+0x44>
 8015178:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801517a:	4293      	cmp	r3, r2
 801517c:	dd08      	ble.n	8015190 <_sungetc_r+0x38>
 801517e:	6823      	ldr	r3, [r4, #0]
 8015180:	1e5a      	subs	r2, r3, #1
 8015182:	6022      	str	r2, [r4, #0]
 8015184:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015188:	6863      	ldr	r3, [r4, #4]
 801518a:	3301      	adds	r3, #1
 801518c:	6063      	str	r3, [r4, #4]
 801518e:	e7e9      	b.n	8015164 <_sungetc_r+0xc>
 8015190:	4621      	mov	r1, r4
 8015192:	f000 fd14 	bl	8015bbe <__submore>
 8015196:	2800      	cmp	r0, #0
 8015198:	d0f1      	beq.n	801517e <_sungetc_r+0x26>
 801519a:	e7e1      	b.n	8015160 <_sungetc_r+0x8>
 801519c:	6921      	ldr	r1, [r4, #16]
 801519e:	6823      	ldr	r3, [r4, #0]
 80151a0:	b151      	cbz	r1, 80151b8 <_sungetc_r+0x60>
 80151a2:	4299      	cmp	r1, r3
 80151a4:	d208      	bcs.n	80151b8 <_sungetc_r+0x60>
 80151a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80151aa:	42a9      	cmp	r1, r5
 80151ac:	d104      	bne.n	80151b8 <_sungetc_r+0x60>
 80151ae:	3b01      	subs	r3, #1
 80151b0:	3201      	adds	r2, #1
 80151b2:	6023      	str	r3, [r4, #0]
 80151b4:	6062      	str	r2, [r4, #4]
 80151b6:	e7d5      	b.n	8015164 <_sungetc_r+0xc>
 80151b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80151bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151c0:	6363      	str	r3, [r4, #52]	; 0x34
 80151c2:	2303      	movs	r3, #3
 80151c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80151c6:	4623      	mov	r3, r4
 80151c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80151cc:	6023      	str	r3, [r4, #0]
 80151ce:	2301      	movs	r3, #1
 80151d0:	e7dc      	b.n	801518c <_sungetc_r+0x34>

080151d2 <__ssrefill_r>:
 80151d2:	b510      	push	{r4, lr}
 80151d4:	460c      	mov	r4, r1
 80151d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80151d8:	b169      	cbz	r1, 80151f6 <__ssrefill_r+0x24>
 80151da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151de:	4299      	cmp	r1, r3
 80151e0:	d001      	beq.n	80151e6 <__ssrefill_r+0x14>
 80151e2:	f7fe fd7b 	bl	8013cdc <_free_r>
 80151e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151e8:	6063      	str	r3, [r4, #4]
 80151ea:	2000      	movs	r0, #0
 80151ec:	6360      	str	r0, [r4, #52]	; 0x34
 80151ee:	b113      	cbz	r3, 80151f6 <__ssrefill_r+0x24>
 80151f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80151f2:	6023      	str	r3, [r4, #0]
 80151f4:	bd10      	pop	{r4, pc}
 80151f6:	6923      	ldr	r3, [r4, #16]
 80151f8:	6023      	str	r3, [r4, #0]
 80151fa:	2300      	movs	r3, #0
 80151fc:	6063      	str	r3, [r4, #4]
 80151fe:	89a3      	ldrh	r3, [r4, #12]
 8015200:	f043 0320 	orr.w	r3, r3, #32
 8015204:	81a3      	strh	r3, [r4, #12]
 8015206:	f04f 30ff 	mov.w	r0, #4294967295
 801520a:	e7f3      	b.n	80151f4 <__ssrefill_r+0x22>

0801520c <__ssvfiscanf_r>:
 801520c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015210:	460c      	mov	r4, r1
 8015212:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8015216:	2100      	movs	r1, #0
 8015218:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801521c:	49a6      	ldr	r1, [pc, #664]	; (80154b8 <__ssvfiscanf_r+0x2ac>)
 801521e:	91a0      	str	r1, [sp, #640]	; 0x280
 8015220:	f10d 0804 	add.w	r8, sp, #4
 8015224:	49a5      	ldr	r1, [pc, #660]	; (80154bc <__ssvfiscanf_r+0x2b0>)
 8015226:	4fa6      	ldr	r7, [pc, #664]	; (80154c0 <__ssvfiscanf_r+0x2b4>)
 8015228:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80154c4 <__ssvfiscanf_r+0x2b8>
 801522c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015230:	4606      	mov	r6, r0
 8015232:	91a1      	str	r1, [sp, #644]	; 0x284
 8015234:	9300      	str	r3, [sp, #0]
 8015236:	7813      	ldrb	r3, [r2, #0]
 8015238:	2b00      	cmp	r3, #0
 801523a:	f000 815a 	beq.w	80154f2 <__ssvfiscanf_r+0x2e6>
 801523e:	5cf9      	ldrb	r1, [r7, r3]
 8015240:	f011 0108 	ands.w	r1, r1, #8
 8015244:	f102 0501 	add.w	r5, r2, #1
 8015248:	d019      	beq.n	801527e <__ssvfiscanf_r+0x72>
 801524a:	6863      	ldr	r3, [r4, #4]
 801524c:	2b00      	cmp	r3, #0
 801524e:	dd0f      	ble.n	8015270 <__ssvfiscanf_r+0x64>
 8015250:	6823      	ldr	r3, [r4, #0]
 8015252:	781a      	ldrb	r2, [r3, #0]
 8015254:	5cba      	ldrb	r2, [r7, r2]
 8015256:	0712      	lsls	r2, r2, #28
 8015258:	d401      	bmi.n	801525e <__ssvfiscanf_r+0x52>
 801525a:	462a      	mov	r2, r5
 801525c:	e7eb      	b.n	8015236 <__ssvfiscanf_r+0x2a>
 801525e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015260:	3201      	adds	r2, #1
 8015262:	9245      	str	r2, [sp, #276]	; 0x114
 8015264:	6862      	ldr	r2, [r4, #4]
 8015266:	3301      	adds	r3, #1
 8015268:	3a01      	subs	r2, #1
 801526a:	6062      	str	r2, [r4, #4]
 801526c:	6023      	str	r3, [r4, #0]
 801526e:	e7ec      	b.n	801524a <__ssvfiscanf_r+0x3e>
 8015270:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015272:	4621      	mov	r1, r4
 8015274:	4630      	mov	r0, r6
 8015276:	4798      	blx	r3
 8015278:	2800      	cmp	r0, #0
 801527a:	d0e9      	beq.n	8015250 <__ssvfiscanf_r+0x44>
 801527c:	e7ed      	b.n	801525a <__ssvfiscanf_r+0x4e>
 801527e:	2b25      	cmp	r3, #37	; 0x25
 8015280:	d012      	beq.n	80152a8 <__ssvfiscanf_r+0x9c>
 8015282:	469a      	mov	sl, r3
 8015284:	6863      	ldr	r3, [r4, #4]
 8015286:	2b00      	cmp	r3, #0
 8015288:	f340 8091 	ble.w	80153ae <__ssvfiscanf_r+0x1a2>
 801528c:	6822      	ldr	r2, [r4, #0]
 801528e:	7813      	ldrb	r3, [r2, #0]
 8015290:	4553      	cmp	r3, sl
 8015292:	f040 812e 	bne.w	80154f2 <__ssvfiscanf_r+0x2e6>
 8015296:	6863      	ldr	r3, [r4, #4]
 8015298:	3b01      	subs	r3, #1
 801529a:	6063      	str	r3, [r4, #4]
 801529c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801529e:	3201      	adds	r2, #1
 80152a0:	3301      	adds	r3, #1
 80152a2:	6022      	str	r2, [r4, #0]
 80152a4:	9345      	str	r3, [sp, #276]	; 0x114
 80152a6:	e7d8      	b.n	801525a <__ssvfiscanf_r+0x4e>
 80152a8:	9141      	str	r1, [sp, #260]	; 0x104
 80152aa:	9143      	str	r1, [sp, #268]	; 0x10c
 80152ac:	7853      	ldrb	r3, [r2, #1]
 80152ae:	2b2a      	cmp	r3, #42	; 0x2a
 80152b0:	bf02      	ittt	eq
 80152b2:	2310      	moveq	r3, #16
 80152b4:	1c95      	addeq	r5, r2, #2
 80152b6:	9341      	streq	r3, [sp, #260]	; 0x104
 80152b8:	220a      	movs	r2, #10
 80152ba:	46aa      	mov	sl, r5
 80152bc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80152c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80152c4:	2b09      	cmp	r3, #9
 80152c6:	d91c      	bls.n	8015302 <__ssvfiscanf_r+0xf6>
 80152c8:	487e      	ldr	r0, [pc, #504]	; (80154c4 <__ssvfiscanf_r+0x2b8>)
 80152ca:	2203      	movs	r2, #3
 80152cc:	f7ea ff80 	bl	80001d0 <memchr>
 80152d0:	b138      	cbz	r0, 80152e2 <__ssvfiscanf_r+0xd6>
 80152d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80152d4:	eba0 0009 	sub.w	r0, r0, r9
 80152d8:	2301      	movs	r3, #1
 80152da:	4083      	lsls	r3, r0
 80152dc:	4313      	orrs	r3, r2
 80152de:	9341      	str	r3, [sp, #260]	; 0x104
 80152e0:	4655      	mov	r5, sl
 80152e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80152e6:	2b78      	cmp	r3, #120	; 0x78
 80152e8:	d806      	bhi.n	80152f8 <__ssvfiscanf_r+0xec>
 80152ea:	2b57      	cmp	r3, #87	; 0x57
 80152ec:	d810      	bhi.n	8015310 <__ssvfiscanf_r+0x104>
 80152ee:	2b25      	cmp	r3, #37	; 0x25
 80152f0:	d0c7      	beq.n	8015282 <__ssvfiscanf_r+0x76>
 80152f2:	d857      	bhi.n	80153a4 <__ssvfiscanf_r+0x198>
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d065      	beq.n	80153c4 <__ssvfiscanf_r+0x1b8>
 80152f8:	2303      	movs	r3, #3
 80152fa:	9347      	str	r3, [sp, #284]	; 0x11c
 80152fc:	230a      	movs	r3, #10
 80152fe:	9342      	str	r3, [sp, #264]	; 0x108
 8015300:	e076      	b.n	80153f0 <__ssvfiscanf_r+0x1e4>
 8015302:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015304:	fb02 1103 	mla	r1, r2, r3, r1
 8015308:	3930      	subs	r1, #48	; 0x30
 801530a:	9143      	str	r1, [sp, #268]	; 0x10c
 801530c:	4655      	mov	r5, sl
 801530e:	e7d4      	b.n	80152ba <__ssvfiscanf_r+0xae>
 8015310:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015314:	2a20      	cmp	r2, #32
 8015316:	d8ef      	bhi.n	80152f8 <__ssvfiscanf_r+0xec>
 8015318:	a101      	add	r1, pc, #4	; (adr r1, 8015320 <__ssvfiscanf_r+0x114>)
 801531a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801531e:	bf00      	nop
 8015320:	080153d3 	.word	0x080153d3
 8015324:	080152f9 	.word	0x080152f9
 8015328:	080152f9 	.word	0x080152f9
 801532c:	08015431 	.word	0x08015431
 8015330:	080152f9 	.word	0x080152f9
 8015334:	080152f9 	.word	0x080152f9
 8015338:	080152f9 	.word	0x080152f9
 801533c:	080152f9 	.word	0x080152f9
 8015340:	080152f9 	.word	0x080152f9
 8015344:	080152f9 	.word	0x080152f9
 8015348:	080152f9 	.word	0x080152f9
 801534c:	08015447 	.word	0x08015447
 8015350:	0801542d 	.word	0x0801542d
 8015354:	080153ab 	.word	0x080153ab
 8015358:	080153ab 	.word	0x080153ab
 801535c:	080153ab 	.word	0x080153ab
 8015360:	080152f9 	.word	0x080152f9
 8015364:	080153e9 	.word	0x080153e9
 8015368:	080152f9 	.word	0x080152f9
 801536c:	080152f9 	.word	0x080152f9
 8015370:	080152f9 	.word	0x080152f9
 8015374:	080152f9 	.word	0x080152f9
 8015378:	08015457 	.word	0x08015457
 801537c:	08015425 	.word	0x08015425
 8015380:	080153cb 	.word	0x080153cb
 8015384:	080152f9 	.word	0x080152f9
 8015388:	080152f9 	.word	0x080152f9
 801538c:	08015453 	.word	0x08015453
 8015390:	080152f9 	.word	0x080152f9
 8015394:	0801542d 	.word	0x0801542d
 8015398:	080152f9 	.word	0x080152f9
 801539c:	080152f9 	.word	0x080152f9
 80153a0:	080153d3 	.word	0x080153d3
 80153a4:	3b45      	subs	r3, #69	; 0x45
 80153a6:	2b02      	cmp	r3, #2
 80153a8:	d8a6      	bhi.n	80152f8 <__ssvfiscanf_r+0xec>
 80153aa:	2305      	movs	r3, #5
 80153ac:	e01f      	b.n	80153ee <__ssvfiscanf_r+0x1e2>
 80153ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80153b0:	4621      	mov	r1, r4
 80153b2:	4630      	mov	r0, r6
 80153b4:	4798      	blx	r3
 80153b6:	2800      	cmp	r0, #0
 80153b8:	f43f af68 	beq.w	801528c <__ssvfiscanf_r+0x80>
 80153bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80153be:	2800      	cmp	r0, #0
 80153c0:	f040 808d 	bne.w	80154de <__ssvfiscanf_r+0x2d2>
 80153c4:	f04f 30ff 	mov.w	r0, #4294967295
 80153c8:	e08f      	b.n	80154ea <__ssvfiscanf_r+0x2de>
 80153ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80153cc:	f042 0220 	orr.w	r2, r2, #32
 80153d0:	9241      	str	r2, [sp, #260]	; 0x104
 80153d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80153d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80153d8:	9241      	str	r2, [sp, #260]	; 0x104
 80153da:	2210      	movs	r2, #16
 80153dc:	2b6f      	cmp	r3, #111	; 0x6f
 80153de:	9242      	str	r2, [sp, #264]	; 0x108
 80153e0:	bf34      	ite	cc
 80153e2:	2303      	movcc	r3, #3
 80153e4:	2304      	movcs	r3, #4
 80153e6:	e002      	b.n	80153ee <__ssvfiscanf_r+0x1e2>
 80153e8:	2300      	movs	r3, #0
 80153ea:	9342      	str	r3, [sp, #264]	; 0x108
 80153ec:	2303      	movs	r3, #3
 80153ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80153f0:	6863      	ldr	r3, [r4, #4]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	dd3d      	ble.n	8015472 <__ssvfiscanf_r+0x266>
 80153f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80153f8:	0659      	lsls	r1, r3, #25
 80153fa:	d404      	bmi.n	8015406 <__ssvfiscanf_r+0x1fa>
 80153fc:	6823      	ldr	r3, [r4, #0]
 80153fe:	781a      	ldrb	r2, [r3, #0]
 8015400:	5cba      	ldrb	r2, [r7, r2]
 8015402:	0712      	lsls	r2, r2, #28
 8015404:	d43c      	bmi.n	8015480 <__ssvfiscanf_r+0x274>
 8015406:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015408:	2b02      	cmp	r3, #2
 801540a:	dc4b      	bgt.n	80154a4 <__ssvfiscanf_r+0x298>
 801540c:	466b      	mov	r3, sp
 801540e:	4622      	mov	r2, r4
 8015410:	a941      	add	r1, sp, #260	; 0x104
 8015412:	4630      	mov	r0, r6
 8015414:	f000 f9b6 	bl	8015784 <_scanf_chars>
 8015418:	2801      	cmp	r0, #1
 801541a:	d06a      	beq.n	80154f2 <__ssvfiscanf_r+0x2e6>
 801541c:	2802      	cmp	r0, #2
 801541e:	f47f af1c 	bne.w	801525a <__ssvfiscanf_r+0x4e>
 8015422:	e7cb      	b.n	80153bc <__ssvfiscanf_r+0x1b0>
 8015424:	2308      	movs	r3, #8
 8015426:	9342      	str	r3, [sp, #264]	; 0x108
 8015428:	2304      	movs	r3, #4
 801542a:	e7e0      	b.n	80153ee <__ssvfiscanf_r+0x1e2>
 801542c:	220a      	movs	r2, #10
 801542e:	e7d5      	b.n	80153dc <__ssvfiscanf_r+0x1d0>
 8015430:	4629      	mov	r1, r5
 8015432:	4640      	mov	r0, r8
 8015434:	f000 fb8a 	bl	8015b4c <__sccl>
 8015438:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801543a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801543e:	9341      	str	r3, [sp, #260]	; 0x104
 8015440:	4605      	mov	r5, r0
 8015442:	2301      	movs	r3, #1
 8015444:	e7d3      	b.n	80153ee <__ssvfiscanf_r+0x1e2>
 8015446:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801544c:	9341      	str	r3, [sp, #260]	; 0x104
 801544e:	2300      	movs	r3, #0
 8015450:	e7cd      	b.n	80153ee <__ssvfiscanf_r+0x1e2>
 8015452:	2302      	movs	r3, #2
 8015454:	e7cb      	b.n	80153ee <__ssvfiscanf_r+0x1e2>
 8015456:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015458:	06c3      	lsls	r3, r0, #27
 801545a:	f53f aefe 	bmi.w	801525a <__ssvfiscanf_r+0x4e>
 801545e:	9b00      	ldr	r3, [sp, #0]
 8015460:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015462:	1d19      	adds	r1, r3, #4
 8015464:	9100      	str	r1, [sp, #0]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	07c0      	lsls	r0, r0, #31
 801546a:	bf4c      	ite	mi
 801546c:	801a      	strhmi	r2, [r3, #0]
 801546e:	601a      	strpl	r2, [r3, #0]
 8015470:	e6f3      	b.n	801525a <__ssvfiscanf_r+0x4e>
 8015472:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015474:	4621      	mov	r1, r4
 8015476:	4630      	mov	r0, r6
 8015478:	4798      	blx	r3
 801547a:	2800      	cmp	r0, #0
 801547c:	d0bb      	beq.n	80153f6 <__ssvfiscanf_r+0x1ea>
 801547e:	e79d      	b.n	80153bc <__ssvfiscanf_r+0x1b0>
 8015480:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015482:	3201      	adds	r2, #1
 8015484:	9245      	str	r2, [sp, #276]	; 0x114
 8015486:	6862      	ldr	r2, [r4, #4]
 8015488:	3a01      	subs	r2, #1
 801548a:	2a00      	cmp	r2, #0
 801548c:	6062      	str	r2, [r4, #4]
 801548e:	dd02      	ble.n	8015496 <__ssvfiscanf_r+0x28a>
 8015490:	3301      	adds	r3, #1
 8015492:	6023      	str	r3, [r4, #0]
 8015494:	e7b2      	b.n	80153fc <__ssvfiscanf_r+0x1f0>
 8015496:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015498:	4621      	mov	r1, r4
 801549a:	4630      	mov	r0, r6
 801549c:	4798      	blx	r3
 801549e:	2800      	cmp	r0, #0
 80154a0:	d0ac      	beq.n	80153fc <__ssvfiscanf_r+0x1f0>
 80154a2:	e78b      	b.n	80153bc <__ssvfiscanf_r+0x1b0>
 80154a4:	2b04      	cmp	r3, #4
 80154a6:	dc0f      	bgt.n	80154c8 <__ssvfiscanf_r+0x2bc>
 80154a8:	466b      	mov	r3, sp
 80154aa:	4622      	mov	r2, r4
 80154ac:	a941      	add	r1, sp, #260	; 0x104
 80154ae:	4630      	mov	r0, r6
 80154b0:	f000 f9c2 	bl	8015838 <_scanf_i>
 80154b4:	e7b0      	b.n	8015418 <__ssvfiscanf_r+0x20c>
 80154b6:	bf00      	nop
 80154b8:	08015159 	.word	0x08015159
 80154bc:	080151d3 	.word	0x080151d3
 80154c0:	08016ed1 	.word	0x08016ed1
 80154c4:	080172f2 	.word	0x080172f2
 80154c8:	4b0b      	ldr	r3, [pc, #44]	; (80154f8 <__ssvfiscanf_r+0x2ec>)
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	f43f aec5 	beq.w	801525a <__ssvfiscanf_r+0x4e>
 80154d0:	466b      	mov	r3, sp
 80154d2:	4622      	mov	r2, r4
 80154d4:	a941      	add	r1, sp, #260	; 0x104
 80154d6:	4630      	mov	r0, r6
 80154d8:	f7fc ff1e 	bl	8012318 <_scanf_float>
 80154dc:	e79c      	b.n	8015418 <__ssvfiscanf_r+0x20c>
 80154de:	89a3      	ldrh	r3, [r4, #12]
 80154e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80154e4:	bf18      	it	ne
 80154e6:	f04f 30ff 	movne.w	r0, #4294967295
 80154ea:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80154ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154f2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80154f4:	e7f9      	b.n	80154ea <__ssvfiscanf_r+0x2de>
 80154f6:	bf00      	nop
 80154f8:	08012319 	.word	0x08012319

080154fc <__sfputc_r>:
 80154fc:	6893      	ldr	r3, [r2, #8]
 80154fe:	3b01      	subs	r3, #1
 8015500:	2b00      	cmp	r3, #0
 8015502:	b410      	push	{r4}
 8015504:	6093      	str	r3, [r2, #8]
 8015506:	da08      	bge.n	801551a <__sfputc_r+0x1e>
 8015508:	6994      	ldr	r4, [r2, #24]
 801550a:	42a3      	cmp	r3, r4
 801550c:	db01      	blt.n	8015512 <__sfputc_r+0x16>
 801550e:	290a      	cmp	r1, #10
 8015510:	d103      	bne.n	801551a <__sfputc_r+0x1e>
 8015512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015516:	f7fd bb98 	b.w	8012c4a <__swbuf_r>
 801551a:	6813      	ldr	r3, [r2, #0]
 801551c:	1c58      	adds	r0, r3, #1
 801551e:	6010      	str	r0, [r2, #0]
 8015520:	7019      	strb	r1, [r3, #0]
 8015522:	4608      	mov	r0, r1
 8015524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015528:	4770      	bx	lr

0801552a <__sfputs_r>:
 801552a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801552c:	4606      	mov	r6, r0
 801552e:	460f      	mov	r7, r1
 8015530:	4614      	mov	r4, r2
 8015532:	18d5      	adds	r5, r2, r3
 8015534:	42ac      	cmp	r4, r5
 8015536:	d101      	bne.n	801553c <__sfputs_r+0x12>
 8015538:	2000      	movs	r0, #0
 801553a:	e007      	b.n	801554c <__sfputs_r+0x22>
 801553c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015540:	463a      	mov	r2, r7
 8015542:	4630      	mov	r0, r6
 8015544:	f7ff ffda 	bl	80154fc <__sfputc_r>
 8015548:	1c43      	adds	r3, r0, #1
 801554a:	d1f3      	bne.n	8015534 <__sfputs_r+0xa>
 801554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015550 <_vfiprintf_r>:
 8015550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015554:	460d      	mov	r5, r1
 8015556:	b09d      	sub	sp, #116	; 0x74
 8015558:	4614      	mov	r4, r2
 801555a:	4698      	mov	r8, r3
 801555c:	4606      	mov	r6, r0
 801555e:	b118      	cbz	r0, 8015568 <_vfiprintf_r+0x18>
 8015560:	6a03      	ldr	r3, [r0, #32]
 8015562:	b90b      	cbnz	r3, 8015568 <_vfiprintf_r+0x18>
 8015564:	f7fd fa22 	bl	80129ac <__sinit>
 8015568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801556a:	07d9      	lsls	r1, r3, #31
 801556c:	d405      	bmi.n	801557a <_vfiprintf_r+0x2a>
 801556e:	89ab      	ldrh	r3, [r5, #12]
 8015570:	059a      	lsls	r2, r3, #22
 8015572:	d402      	bmi.n	801557a <_vfiprintf_r+0x2a>
 8015574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015576:	f7fd fcf8 	bl	8012f6a <__retarget_lock_acquire_recursive>
 801557a:	89ab      	ldrh	r3, [r5, #12]
 801557c:	071b      	lsls	r3, r3, #28
 801557e:	d501      	bpl.n	8015584 <_vfiprintf_r+0x34>
 8015580:	692b      	ldr	r3, [r5, #16]
 8015582:	b99b      	cbnz	r3, 80155ac <_vfiprintf_r+0x5c>
 8015584:	4629      	mov	r1, r5
 8015586:	4630      	mov	r0, r6
 8015588:	f7fd fb9c 	bl	8012cc4 <__swsetup_r>
 801558c:	b170      	cbz	r0, 80155ac <_vfiprintf_r+0x5c>
 801558e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015590:	07dc      	lsls	r4, r3, #31
 8015592:	d504      	bpl.n	801559e <_vfiprintf_r+0x4e>
 8015594:	f04f 30ff 	mov.w	r0, #4294967295
 8015598:	b01d      	add	sp, #116	; 0x74
 801559a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801559e:	89ab      	ldrh	r3, [r5, #12]
 80155a0:	0598      	lsls	r0, r3, #22
 80155a2:	d4f7      	bmi.n	8015594 <_vfiprintf_r+0x44>
 80155a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155a6:	f7fd fce1 	bl	8012f6c <__retarget_lock_release_recursive>
 80155aa:	e7f3      	b.n	8015594 <_vfiprintf_r+0x44>
 80155ac:	2300      	movs	r3, #0
 80155ae:	9309      	str	r3, [sp, #36]	; 0x24
 80155b0:	2320      	movs	r3, #32
 80155b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80155b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80155ba:	2330      	movs	r3, #48	; 0x30
 80155bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015770 <_vfiprintf_r+0x220>
 80155c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155c4:	f04f 0901 	mov.w	r9, #1
 80155c8:	4623      	mov	r3, r4
 80155ca:	469a      	mov	sl, r3
 80155cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155d0:	b10a      	cbz	r2, 80155d6 <_vfiprintf_r+0x86>
 80155d2:	2a25      	cmp	r2, #37	; 0x25
 80155d4:	d1f9      	bne.n	80155ca <_vfiprintf_r+0x7a>
 80155d6:	ebba 0b04 	subs.w	fp, sl, r4
 80155da:	d00b      	beq.n	80155f4 <_vfiprintf_r+0xa4>
 80155dc:	465b      	mov	r3, fp
 80155de:	4622      	mov	r2, r4
 80155e0:	4629      	mov	r1, r5
 80155e2:	4630      	mov	r0, r6
 80155e4:	f7ff ffa1 	bl	801552a <__sfputs_r>
 80155e8:	3001      	adds	r0, #1
 80155ea:	f000 80a9 	beq.w	8015740 <_vfiprintf_r+0x1f0>
 80155ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155f0:	445a      	add	r2, fp
 80155f2:	9209      	str	r2, [sp, #36]	; 0x24
 80155f4:	f89a 3000 	ldrb.w	r3, [sl]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	f000 80a1 	beq.w	8015740 <_vfiprintf_r+0x1f0>
 80155fe:	2300      	movs	r3, #0
 8015600:	f04f 32ff 	mov.w	r2, #4294967295
 8015604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015608:	f10a 0a01 	add.w	sl, sl, #1
 801560c:	9304      	str	r3, [sp, #16]
 801560e:	9307      	str	r3, [sp, #28]
 8015610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015614:	931a      	str	r3, [sp, #104]	; 0x68
 8015616:	4654      	mov	r4, sl
 8015618:	2205      	movs	r2, #5
 801561a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801561e:	4854      	ldr	r0, [pc, #336]	; (8015770 <_vfiprintf_r+0x220>)
 8015620:	f7ea fdd6 	bl	80001d0 <memchr>
 8015624:	9a04      	ldr	r2, [sp, #16]
 8015626:	b9d8      	cbnz	r0, 8015660 <_vfiprintf_r+0x110>
 8015628:	06d1      	lsls	r1, r2, #27
 801562a:	bf44      	itt	mi
 801562c:	2320      	movmi	r3, #32
 801562e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015632:	0713      	lsls	r3, r2, #28
 8015634:	bf44      	itt	mi
 8015636:	232b      	movmi	r3, #43	; 0x2b
 8015638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801563c:	f89a 3000 	ldrb.w	r3, [sl]
 8015640:	2b2a      	cmp	r3, #42	; 0x2a
 8015642:	d015      	beq.n	8015670 <_vfiprintf_r+0x120>
 8015644:	9a07      	ldr	r2, [sp, #28]
 8015646:	4654      	mov	r4, sl
 8015648:	2000      	movs	r0, #0
 801564a:	f04f 0c0a 	mov.w	ip, #10
 801564e:	4621      	mov	r1, r4
 8015650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015654:	3b30      	subs	r3, #48	; 0x30
 8015656:	2b09      	cmp	r3, #9
 8015658:	d94d      	bls.n	80156f6 <_vfiprintf_r+0x1a6>
 801565a:	b1b0      	cbz	r0, 801568a <_vfiprintf_r+0x13a>
 801565c:	9207      	str	r2, [sp, #28]
 801565e:	e014      	b.n	801568a <_vfiprintf_r+0x13a>
 8015660:	eba0 0308 	sub.w	r3, r0, r8
 8015664:	fa09 f303 	lsl.w	r3, r9, r3
 8015668:	4313      	orrs	r3, r2
 801566a:	9304      	str	r3, [sp, #16]
 801566c:	46a2      	mov	sl, r4
 801566e:	e7d2      	b.n	8015616 <_vfiprintf_r+0xc6>
 8015670:	9b03      	ldr	r3, [sp, #12]
 8015672:	1d19      	adds	r1, r3, #4
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	9103      	str	r1, [sp, #12]
 8015678:	2b00      	cmp	r3, #0
 801567a:	bfbb      	ittet	lt
 801567c:	425b      	neglt	r3, r3
 801567e:	f042 0202 	orrlt.w	r2, r2, #2
 8015682:	9307      	strge	r3, [sp, #28]
 8015684:	9307      	strlt	r3, [sp, #28]
 8015686:	bfb8      	it	lt
 8015688:	9204      	strlt	r2, [sp, #16]
 801568a:	7823      	ldrb	r3, [r4, #0]
 801568c:	2b2e      	cmp	r3, #46	; 0x2e
 801568e:	d10c      	bne.n	80156aa <_vfiprintf_r+0x15a>
 8015690:	7863      	ldrb	r3, [r4, #1]
 8015692:	2b2a      	cmp	r3, #42	; 0x2a
 8015694:	d134      	bne.n	8015700 <_vfiprintf_r+0x1b0>
 8015696:	9b03      	ldr	r3, [sp, #12]
 8015698:	1d1a      	adds	r2, r3, #4
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	9203      	str	r2, [sp, #12]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	bfb8      	it	lt
 80156a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80156a6:	3402      	adds	r4, #2
 80156a8:	9305      	str	r3, [sp, #20]
 80156aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015780 <_vfiprintf_r+0x230>
 80156ae:	7821      	ldrb	r1, [r4, #0]
 80156b0:	2203      	movs	r2, #3
 80156b2:	4650      	mov	r0, sl
 80156b4:	f7ea fd8c 	bl	80001d0 <memchr>
 80156b8:	b138      	cbz	r0, 80156ca <_vfiprintf_r+0x17a>
 80156ba:	9b04      	ldr	r3, [sp, #16]
 80156bc:	eba0 000a 	sub.w	r0, r0, sl
 80156c0:	2240      	movs	r2, #64	; 0x40
 80156c2:	4082      	lsls	r2, r0
 80156c4:	4313      	orrs	r3, r2
 80156c6:	3401      	adds	r4, #1
 80156c8:	9304      	str	r3, [sp, #16]
 80156ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156ce:	4829      	ldr	r0, [pc, #164]	; (8015774 <_vfiprintf_r+0x224>)
 80156d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156d4:	2206      	movs	r2, #6
 80156d6:	f7ea fd7b 	bl	80001d0 <memchr>
 80156da:	2800      	cmp	r0, #0
 80156dc:	d03f      	beq.n	801575e <_vfiprintf_r+0x20e>
 80156de:	4b26      	ldr	r3, [pc, #152]	; (8015778 <_vfiprintf_r+0x228>)
 80156e0:	bb1b      	cbnz	r3, 801572a <_vfiprintf_r+0x1da>
 80156e2:	9b03      	ldr	r3, [sp, #12]
 80156e4:	3307      	adds	r3, #7
 80156e6:	f023 0307 	bic.w	r3, r3, #7
 80156ea:	3308      	adds	r3, #8
 80156ec:	9303      	str	r3, [sp, #12]
 80156ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156f0:	443b      	add	r3, r7
 80156f2:	9309      	str	r3, [sp, #36]	; 0x24
 80156f4:	e768      	b.n	80155c8 <_vfiprintf_r+0x78>
 80156f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80156fa:	460c      	mov	r4, r1
 80156fc:	2001      	movs	r0, #1
 80156fe:	e7a6      	b.n	801564e <_vfiprintf_r+0xfe>
 8015700:	2300      	movs	r3, #0
 8015702:	3401      	adds	r4, #1
 8015704:	9305      	str	r3, [sp, #20]
 8015706:	4619      	mov	r1, r3
 8015708:	f04f 0c0a 	mov.w	ip, #10
 801570c:	4620      	mov	r0, r4
 801570e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015712:	3a30      	subs	r2, #48	; 0x30
 8015714:	2a09      	cmp	r2, #9
 8015716:	d903      	bls.n	8015720 <_vfiprintf_r+0x1d0>
 8015718:	2b00      	cmp	r3, #0
 801571a:	d0c6      	beq.n	80156aa <_vfiprintf_r+0x15a>
 801571c:	9105      	str	r1, [sp, #20]
 801571e:	e7c4      	b.n	80156aa <_vfiprintf_r+0x15a>
 8015720:	fb0c 2101 	mla	r1, ip, r1, r2
 8015724:	4604      	mov	r4, r0
 8015726:	2301      	movs	r3, #1
 8015728:	e7f0      	b.n	801570c <_vfiprintf_r+0x1bc>
 801572a:	ab03      	add	r3, sp, #12
 801572c:	9300      	str	r3, [sp, #0]
 801572e:	462a      	mov	r2, r5
 8015730:	4b12      	ldr	r3, [pc, #72]	; (801577c <_vfiprintf_r+0x22c>)
 8015732:	a904      	add	r1, sp, #16
 8015734:	4630      	mov	r0, r6
 8015736:	f7fc fa29 	bl	8011b8c <_printf_float>
 801573a:	4607      	mov	r7, r0
 801573c:	1c78      	adds	r0, r7, #1
 801573e:	d1d6      	bne.n	80156ee <_vfiprintf_r+0x19e>
 8015740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015742:	07d9      	lsls	r1, r3, #31
 8015744:	d405      	bmi.n	8015752 <_vfiprintf_r+0x202>
 8015746:	89ab      	ldrh	r3, [r5, #12]
 8015748:	059a      	lsls	r2, r3, #22
 801574a:	d402      	bmi.n	8015752 <_vfiprintf_r+0x202>
 801574c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801574e:	f7fd fc0d 	bl	8012f6c <__retarget_lock_release_recursive>
 8015752:	89ab      	ldrh	r3, [r5, #12]
 8015754:	065b      	lsls	r3, r3, #25
 8015756:	f53f af1d 	bmi.w	8015594 <_vfiprintf_r+0x44>
 801575a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801575c:	e71c      	b.n	8015598 <_vfiprintf_r+0x48>
 801575e:	ab03      	add	r3, sp, #12
 8015760:	9300      	str	r3, [sp, #0]
 8015762:	462a      	mov	r2, r5
 8015764:	4b05      	ldr	r3, [pc, #20]	; (801577c <_vfiprintf_r+0x22c>)
 8015766:	a904      	add	r1, sp, #16
 8015768:	4630      	mov	r0, r6
 801576a:	f7fc fcb3 	bl	80120d4 <_printf_i>
 801576e:	e7e4      	b.n	801573a <_vfiprintf_r+0x1ea>
 8015770:	080172ec 	.word	0x080172ec
 8015774:	080172f6 	.word	0x080172f6
 8015778:	08011b8d 	.word	0x08011b8d
 801577c:	0801552b 	.word	0x0801552b
 8015780:	080172f2 	.word	0x080172f2

08015784 <_scanf_chars>:
 8015784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015788:	4615      	mov	r5, r2
 801578a:	688a      	ldr	r2, [r1, #8]
 801578c:	4680      	mov	r8, r0
 801578e:	460c      	mov	r4, r1
 8015790:	b932      	cbnz	r2, 80157a0 <_scanf_chars+0x1c>
 8015792:	698a      	ldr	r2, [r1, #24]
 8015794:	2a00      	cmp	r2, #0
 8015796:	bf0c      	ite	eq
 8015798:	2201      	moveq	r2, #1
 801579a:	f04f 32ff 	movne.w	r2, #4294967295
 801579e:	608a      	str	r2, [r1, #8]
 80157a0:	6822      	ldr	r2, [r4, #0]
 80157a2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8015834 <_scanf_chars+0xb0>
 80157a6:	06d1      	lsls	r1, r2, #27
 80157a8:	bf5f      	itttt	pl
 80157aa:	681a      	ldrpl	r2, [r3, #0]
 80157ac:	1d11      	addpl	r1, r2, #4
 80157ae:	6019      	strpl	r1, [r3, #0]
 80157b0:	6816      	ldrpl	r6, [r2, #0]
 80157b2:	2700      	movs	r7, #0
 80157b4:	69a0      	ldr	r0, [r4, #24]
 80157b6:	b188      	cbz	r0, 80157dc <_scanf_chars+0x58>
 80157b8:	2801      	cmp	r0, #1
 80157ba:	d107      	bne.n	80157cc <_scanf_chars+0x48>
 80157bc:	682a      	ldr	r2, [r5, #0]
 80157be:	7811      	ldrb	r1, [r2, #0]
 80157c0:	6962      	ldr	r2, [r4, #20]
 80157c2:	5c52      	ldrb	r2, [r2, r1]
 80157c4:	b952      	cbnz	r2, 80157dc <_scanf_chars+0x58>
 80157c6:	2f00      	cmp	r7, #0
 80157c8:	d031      	beq.n	801582e <_scanf_chars+0xaa>
 80157ca:	e022      	b.n	8015812 <_scanf_chars+0x8e>
 80157cc:	2802      	cmp	r0, #2
 80157ce:	d120      	bne.n	8015812 <_scanf_chars+0x8e>
 80157d0:	682b      	ldr	r3, [r5, #0]
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80157d8:	071b      	lsls	r3, r3, #28
 80157da:	d41a      	bmi.n	8015812 <_scanf_chars+0x8e>
 80157dc:	6823      	ldr	r3, [r4, #0]
 80157de:	06da      	lsls	r2, r3, #27
 80157e0:	bf5e      	ittt	pl
 80157e2:	682b      	ldrpl	r3, [r5, #0]
 80157e4:	781b      	ldrbpl	r3, [r3, #0]
 80157e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80157ea:	682a      	ldr	r2, [r5, #0]
 80157ec:	686b      	ldr	r3, [r5, #4]
 80157ee:	3201      	adds	r2, #1
 80157f0:	602a      	str	r2, [r5, #0]
 80157f2:	68a2      	ldr	r2, [r4, #8]
 80157f4:	3b01      	subs	r3, #1
 80157f6:	3a01      	subs	r2, #1
 80157f8:	606b      	str	r3, [r5, #4]
 80157fa:	3701      	adds	r7, #1
 80157fc:	60a2      	str	r2, [r4, #8]
 80157fe:	b142      	cbz	r2, 8015812 <_scanf_chars+0x8e>
 8015800:	2b00      	cmp	r3, #0
 8015802:	dcd7      	bgt.n	80157b4 <_scanf_chars+0x30>
 8015804:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015808:	4629      	mov	r1, r5
 801580a:	4640      	mov	r0, r8
 801580c:	4798      	blx	r3
 801580e:	2800      	cmp	r0, #0
 8015810:	d0d0      	beq.n	80157b4 <_scanf_chars+0x30>
 8015812:	6823      	ldr	r3, [r4, #0]
 8015814:	f013 0310 	ands.w	r3, r3, #16
 8015818:	d105      	bne.n	8015826 <_scanf_chars+0xa2>
 801581a:	68e2      	ldr	r2, [r4, #12]
 801581c:	3201      	adds	r2, #1
 801581e:	60e2      	str	r2, [r4, #12]
 8015820:	69a2      	ldr	r2, [r4, #24]
 8015822:	b102      	cbz	r2, 8015826 <_scanf_chars+0xa2>
 8015824:	7033      	strb	r3, [r6, #0]
 8015826:	6923      	ldr	r3, [r4, #16]
 8015828:	443b      	add	r3, r7
 801582a:	6123      	str	r3, [r4, #16]
 801582c:	2000      	movs	r0, #0
 801582e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015832:	bf00      	nop
 8015834:	08016ed1 	.word	0x08016ed1

08015838 <_scanf_i>:
 8015838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801583c:	4698      	mov	r8, r3
 801583e:	4b74      	ldr	r3, [pc, #464]	; (8015a10 <_scanf_i+0x1d8>)
 8015840:	460c      	mov	r4, r1
 8015842:	4682      	mov	sl, r0
 8015844:	4616      	mov	r6, r2
 8015846:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801584a:	b087      	sub	sp, #28
 801584c:	ab03      	add	r3, sp, #12
 801584e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015852:	4b70      	ldr	r3, [pc, #448]	; (8015a14 <_scanf_i+0x1dc>)
 8015854:	69a1      	ldr	r1, [r4, #24]
 8015856:	4a70      	ldr	r2, [pc, #448]	; (8015a18 <_scanf_i+0x1e0>)
 8015858:	2903      	cmp	r1, #3
 801585a:	bf18      	it	ne
 801585c:	461a      	movne	r2, r3
 801585e:	68a3      	ldr	r3, [r4, #8]
 8015860:	9201      	str	r2, [sp, #4]
 8015862:	1e5a      	subs	r2, r3, #1
 8015864:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015868:	bf88      	it	hi
 801586a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801586e:	4627      	mov	r7, r4
 8015870:	bf82      	ittt	hi
 8015872:	eb03 0905 	addhi.w	r9, r3, r5
 8015876:	f240 135d 	movwhi	r3, #349	; 0x15d
 801587a:	60a3      	strhi	r3, [r4, #8]
 801587c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015880:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015884:	bf98      	it	ls
 8015886:	f04f 0900 	movls.w	r9, #0
 801588a:	6023      	str	r3, [r4, #0]
 801588c:	463d      	mov	r5, r7
 801588e:	f04f 0b00 	mov.w	fp, #0
 8015892:	6831      	ldr	r1, [r6, #0]
 8015894:	ab03      	add	r3, sp, #12
 8015896:	7809      	ldrb	r1, [r1, #0]
 8015898:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801589c:	2202      	movs	r2, #2
 801589e:	f7ea fc97 	bl	80001d0 <memchr>
 80158a2:	b328      	cbz	r0, 80158f0 <_scanf_i+0xb8>
 80158a4:	f1bb 0f01 	cmp.w	fp, #1
 80158a8:	d159      	bne.n	801595e <_scanf_i+0x126>
 80158aa:	6862      	ldr	r2, [r4, #4]
 80158ac:	b92a      	cbnz	r2, 80158ba <_scanf_i+0x82>
 80158ae:	6822      	ldr	r2, [r4, #0]
 80158b0:	2308      	movs	r3, #8
 80158b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80158b6:	6063      	str	r3, [r4, #4]
 80158b8:	6022      	str	r2, [r4, #0]
 80158ba:	6822      	ldr	r2, [r4, #0]
 80158bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80158c0:	6022      	str	r2, [r4, #0]
 80158c2:	68a2      	ldr	r2, [r4, #8]
 80158c4:	1e51      	subs	r1, r2, #1
 80158c6:	60a1      	str	r1, [r4, #8]
 80158c8:	b192      	cbz	r2, 80158f0 <_scanf_i+0xb8>
 80158ca:	6832      	ldr	r2, [r6, #0]
 80158cc:	1c51      	adds	r1, r2, #1
 80158ce:	6031      	str	r1, [r6, #0]
 80158d0:	7812      	ldrb	r2, [r2, #0]
 80158d2:	f805 2b01 	strb.w	r2, [r5], #1
 80158d6:	6872      	ldr	r2, [r6, #4]
 80158d8:	3a01      	subs	r2, #1
 80158da:	2a00      	cmp	r2, #0
 80158dc:	6072      	str	r2, [r6, #4]
 80158de:	dc07      	bgt.n	80158f0 <_scanf_i+0xb8>
 80158e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80158e4:	4631      	mov	r1, r6
 80158e6:	4650      	mov	r0, sl
 80158e8:	4790      	blx	r2
 80158ea:	2800      	cmp	r0, #0
 80158ec:	f040 8085 	bne.w	80159fa <_scanf_i+0x1c2>
 80158f0:	f10b 0b01 	add.w	fp, fp, #1
 80158f4:	f1bb 0f03 	cmp.w	fp, #3
 80158f8:	d1cb      	bne.n	8015892 <_scanf_i+0x5a>
 80158fa:	6863      	ldr	r3, [r4, #4]
 80158fc:	b90b      	cbnz	r3, 8015902 <_scanf_i+0xca>
 80158fe:	230a      	movs	r3, #10
 8015900:	6063      	str	r3, [r4, #4]
 8015902:	6863      	ldr	r3, [r4, #4]
 8015904:	4945      	ldr	r1, [pc, #276]	; (8015a1c <_scanf_i+0x1e4>)
 8015906:	6960      	ldr	r0, [r4, #20]
 8015908:	1ac9      	subs	r1, r1, r3
 801590a:	f000 f91f 	bl	8015b4c <__sccl>
 801590e:	f04f 0b00 	mov.w	fp, #0
 8015912:	68a3      	ldr	r3, [r4, #8]
 8015914:	6822      	ldr	r2, [r4, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d03d      	beq.n	8015996 <_scanf_i+0x15e>
 801591a:	6831      	ldr	r1, [r6, #0]
 801591c:	6960      	ldr	r0, [r4, #20]
 801591e:	f891 c000 	ldrb.w	ip, [r1]
 8015922:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015926:	2800      	cmp	r0, #0
 8015928:	d035      	beq.n	8015996 <_scanf_i+0x15e>
 801592a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801592e:	d124      	bne.n	801597a <_scanf_i+0x142>
 8015930:	0510      	lsls	r0, r2, #20
 8015932:	d522      	bpl.n	801597a <_scanf_i+0x142>
 8015934:	f10b 0b01 	add.w	fp, fp, #1
 8015938:	f1b9 0f00 	cmp.w	r9, #0
 801593c:	d003      	beq.n	8015946 <_scanf_i+0x10e>
 801593e:	3301      	adds	r3, #1
 8015940:	f109 39ff 	add.w	r9, r9, #4294967295
 8015944:	60a3      	str	r3, [r4, #8]
 8015946:	6873      	ldr	r3, [r6, #4]
 8015948:	3b01      	subs	r3, #1
 801594a:	2b00      	cmp	r3, #0
 801594c:	6073      	str	r3, [r6, #4]
 801594e:	dd1b      	ble.n	8015988 <_scanf_i+0x150>
 8015950:	6833      	ldr	r3, [r6, #0]
 8015952:	3301      	adds	r3, #1
 8015954:	6033      	str	r3, [r6, #0]
 8015956:	68a3      	ldr	r3, [r4, #8]
 8015958:	3b01      	subs	r3, #1
 801595a:	60a3      	str	r3, [r4, #8]
 801595c:	e7d9      	b.n	8015912 <_scanf_i+0xda>
 801595e:	f1bb 0f02 	cmp.w	fp, #2
 8015962:	d1ae      	bne.n	80158c2 <_scanf_i+0x8a>
 8015964:	6822      	ldr	r2, [r4, #0]
 8015966:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801596a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801596e:	d1bf      	bne.n	80158f0 <_scanf_i+0xb8>
 8015970:	2310      	movs	r3, #16
 8015972:	6063      	str	r3, [r4, #4]
 8015974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015978:	e7a2      	b.n	80158c0 <_scanf_i+0x88>
 801597a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801597e:	6022      	str	r2, [r4, #0]
 8015980:	780b      	ldrb	r3, [r1, #0]
 8015982:	f805 3b01 	strb.w	r3, [r5], #1
 8015986:	e7de      	b.n	8015946 <_scanf_i+0x10e>
 8015988:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801598c:	4631      	mov	r1, r6
 801598e:	4650      	mov	r0, sl
 8015990:	4798      	blx	r3
 8015992:	2800      	cmp	r0, #0
 8015994:	d0df      	beq.n	8015956 <_scanf_i+0x11e>
 8015996:	6823      	ldr	r3, [r4, #0]
 8015998:	05d9      	lsls	r1, r3, #23
 801599a:	d50d      	bpl.n	80159b8 <_scanf_i+0x180>
 801599c:	42bd      	cmp	r5, r7
 801599e:	d909      	bls.n	80159b4 <_scanf_i+0x17c>
 80159a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80159a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80159a8:	4632      	mov	r2, r6
 80159aa:	4650      	mov	r0, sl
 80159ac:	4798      	blx	r3
 80159ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80159b2:	464d      	mov	r5, r9
 80159b4:	42bd      	cmp	r5, r7
 80159b6:	d028      	beq.n	8015a0a <_scanf_i+0x1d2>
 80159b8:	6822      	ldr	r2, [r4, #0]
 80159ba:	f012 0210 	ands.w	r2, r2, #16
 80159be:	d113      	bne.n	80159e8 <_scanf_i+0x1b0>
 80159c0:	702a      	strb	r2, [r5, #0]
 80159c2:	6863      	ldr	r3, [r4, #4]
 80159c4:	9e01      	ldr	r6, [sp, #4]
 80159c6:	4639      	mov	r1, r7
 80159c8:	4650      	mov	r0, sl
 80159ca:	47b0      	blx	r6
 80159cc:	f8d8 3000 	ldr.w	r3, [r8]
 80159d0:	6821      	ldr	r1, [r4, #0]
 80159d2:	1d1a      	adds	r2, r3, #4
 80159d4:	f8c8 2000 	str.w	r2, [r8]
 80159d8:	f011 0f20 	tst.w	r1, #32
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	d00f      	beq.n	8015a00 <_scanf_i+0x1c8>
 80159e0:	6018      	str	r0, [r3, #0]
 80159e2:	68e3      	ldr	r3, [r4, #12]
 80159e4:	3301      	adds	r3, #1
 80159e6:	60e3      	str	r3, [r4, #12]
 80159e8:	6923      	ldr	r3, [r4, #16]
 80159ea:	1bed      	subs	r5, r5, r7
 80159ec:	445d      	add	r5, fp
 80159ee:	442b      	add	r3, r5
 80159f0:	6123      	str	r3, [r4, #16]
 80159f2:	2000      	movs	r0, #0
 80159f4:	b007      	add	sp, #28
 80159f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159fa:	f04f 0b00 	mov.w	fp, #0
 80159fe:	e7ca      	b.n	8015996 <_scanf_i+0x15e>
 8015a00:	07ca      	lsls	r2, r1, #31
 8015a02:	bf4c      	ite	mi
 8015a04:	8018      	strhmi	r0, [r3, #0]
 8015a06:	6018      	strpl	r0, [r3, #0]
 8015a08:	e7eb      	b.n	80159e2 <_scanf_i+0x1aa>
 8015a0a:	2001      	movs	r0, #1
 8015a0c:	e7f2      	b.n	80159f4 <_scanf_i+0x1bc>
 8015a0e:	bf00      	nop
 8015a10:	08016388 	.word	0x08016388
 8015a14:	08014e89 	.word	0x08014e89
 8015a18:	08011a21 	.word	0x08011a21
 8015a1c:	0801730d 	.word	0x0801730d

08015a20 <__swhatbuf_r>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	460c      	mov	r4, r1
 8015a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a28:	2900      	cmp	r1, #0
 8015a2a:	b096      	sub	sp, #88	; 0x58
 8015a2c:	4615      	mov	r5, r2
 8015a2e:	461e      	mov	r6, r3
 8015a30:	da0d      	bge.n	8015a4e <__swhatbuf_r+0x2e>
 8015a32:	89a3      	ldrh	r3, [r4, #12]
 8015a34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015a38:	f04f 0100 	mov.w	r1, #0
 8015a3c:	bf0c      	ite	eq
 8015a3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015a42:	2340      	movne	r3, #64	; 0x40
 8015a44:	2000      	movs	r0, #0
 8015a46:	6031      	str	r1, [r6, #0]
 8015a48:	602b      	str	r3, [r5, #0]
 8015a4a:	b016      	add	sp, #88	; 0x58
 8015a4c:	bd70      	pop	{r4, r5, r6, pc}
 8015a4e:	466a      	mov	r2, sp
 8015a50:	f000 f90a 	bl	8015c68 <_fstat_r>
 8015a54:	2800      	cmp	r0, #0
 8015a56:	dbec      	blt.n	8015a32 <__swhatbuf_r+0x12>
 8015a58:	9901      	ldr	r1, [sp, #4]
 8015a5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015a5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015a62:	4259      	negs	r1, r3
 8015a64:	4159      	adcs	r1, r3
 8015a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a6a:	e7eb      	b.n	8015a44 <__swhatbuf_r+0x24>

08015a6c <__smakebuf_r>:
 8015a6c:	898b      	ldrh	r3, [r1, #12]
 8015a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a70:	079d      	lsls	r5, r3, #30
 8015a72:	4606      	mov	r6, r0
 8015a74:	460c      	mov	r4, r1
 8015a76:	d507      	bpl.n	8015a88 <__smakebuf_r+0x1c>
 8015a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015a7c:	6023      	str	r3, [r4, #0]
 8015a7e:	6123      	str	r3, [r4, #16]
 8015a80:	2301      	movs	r3, #1
 8015a82:	6163      	str	r3, [r4, #20]
 8015a84:	b002      	add	sp, #8
 8015a86:	bd70      	pop	{r4, r5, r6, pc}
 8015a88:	ab01      	add	r3, sp, #4
 8015a8a:	466a      	mov	r2, sp
 8015a8c:	f7ff ffc8 	bl	8015a20 <__swhatbuf_r>
 8015a90:	9900      	ldr	r1, [sp, #0]
 8015a92:	4605      	mov	r5, r0
 8015a94:	4630      	mov	r0, r6
 8015a96:	f7fb f8a1 	bl	8010bdc <_malloc_r>
 8015a9a:	b948      	cbnz	r0, 8015ab0 <__smakebuf_r+0x44>
 8015a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015aa0:	059a      	lsls	r2, r3, #22
 8015aa2:	d4ef      	bmi.n	8015a84 <__smakebuf_r+0x18>
 8015aa4:	f023 0303 	bic.w	r3, r3, #3
 8015aa8:	f043 0302 	orr.w	r3, r3, #2
 8015aac:	81a3      	strh	r3, [r4, #12]
 8015aae:	e7e3      	b.n	8015a78 <__smakebuf_r+0xc>
 8015ab0:	89a3      	ldrh	r3, [r4, #12]
 8015ab2:	6020      	str	r0, [r4, #0]
 8015ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ab8:	81a3      	strh	r3, [r4, #12]
 8015aba:	9b00      	ldr	r3, [sp, #0]
 8015abc:	6163      	str	r3, [r4, #20]
 8015abe:	9b01      	ldr	r3, [sp, #4]
 8015ac0:	6120      	str	r0, [r4, #16]
 8015ac2:	b15b      	cbz	r3, 8015adc <__smakebuf_r+0x70>
 8015ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ac8:	4630      	mov	r0, r6
 8015aca:	f000 f8df 	bl	8015c8c <_isatty_r>
 8015ace:	b128      	cbz	r0, 8015adc <__smakebuf_r+0x70>
 8015ad0:	89a3      	ldrh	r3, [r4, #12]
 8015ad2:	f023 0303 	bic.w	r3, r3, #3
 8015ad6:	f043 0301 	orr.w	r3, r3, #1
 8015ada:	81a3      	strh	r3, [r4, #12]
 8015adc:	89a3      	ldrh	r3, [r4, #12]
 8015ade:	431d      	orrs	r5, r3
 8015ae0:	81a5      	strh	r5, [r4, #12]
 8015ae2:	e7cf      	b.n	8015a84 <__smakebuf_r+0x18>

08015ae4 <_putc_r>:
 8015ae4:	b570      	push	{r4, r5, r6, lr}
 8015ae6:	460d      	mov	r5, r1
 8015ae8:	4614      	mov	r4, r2
 8015aea:	4606      	mov	r6, r0
 8015aec:	b118      	cbz	r0, 8015af6 <_putc_r+0x12>
 8015aee:	6a03      	ldr	r3, [r0, #32]
 8015af0:	b90b      	cbnz	r3, 8015af6 <_putc_r+0x12>
 8015af2:	f7fc ff5b 	bl	80129ac <__sinit>
 8015af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015af8:	07d8      	lsls	r0, r3, #31
 8015afa:	d405      	bmi.n	8015b08 <_putc_r+0x24>
 8015afc:	89a3      	ldrh	r3, [r4, #12]
 8015afe:	0599      	lsls	r1, r3, #22
 8015b00:	d402      	bmi.n	8015b08 <_putc_r+0x24>
 8015b02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b04:	f7fd fa31 	bl	8012f6a <__retarget_lock_acquire_recursive>
 8015b08:	68a3      	ldr	r3, [r4, #8]
 8015b0a:	3b01      	subs	r3, #1
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	60a3      	str	r3, [r4, #8]
 8015b10:	da05      	bge.n	8015b1e <_putc_r+0x3a>
 8015b12:	69a2      	ldr	r2, [r4, #24]
 8015b14:	4293      	cmp	r3, r2
 8015b16:	db12      	blt.n	8015b3e <_putc_r+0x5a>
 8015b18:	b2eb      	uxtb	r3, r5
 8015b1a:	2b0a      	cmp	r3, #10
 8015b1c:	d00f      	beq.n	8015b3e <_putc_r+0x5a>
 8015b1e:	6823      	ldr	r3, [r4, #0]
 8015b20:	1c5a      	adds	r2, r3, #1
 8015b22:	6022      	str	r2, [r4, #0]
 8015b24:	701d      	strb	r5, [r3, #0]
 8015b26:	b2ed      	uxtb	r5, r5
 8015b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b2a:	07da      	lsls	r2, r3, #31
 8015b2c:	d405      	bmi.n	8015b3a <_putc_r+0x56>
 8015b2e:	89a3      	ldrh	r3, [r4, #12]
 8015b30:	059b      	lsls	r3, r3, #22
 8015b32:	d402      	bmi.n	8015b3a <_putc_r+0x56>
 8015b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b36:	f7fd fa19 	bl	8012f6c <__retarget_lock_release_recursive>
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	bd70      	pop	{r4, r5, r6, pc}
 8015b3e:	4629      	mov	r1, r5
 8015b40:	4622      	mov	r2, r4
 8015b42:	4630      	mov	r0, r6
 8015b44:	f7fd f881 	bl	8012c4a <__swbuf_r>
 8015b48:	4605      	mov	r5, r0
 8015b4a:	e7ed      	b.n	8015b28 <_putc_r+0x44>

08015b4c <__sccl>:
 8015b4c:	b570      	push	{r4, r5, r6, lr}
 8015b4e:	780b      	ldrb	r3, [r1, #0]
 8015b50:	4604      	mov	r4, r0
 8015b52:	2b5e      	cmp	r3, #94	; 0x5e
 8015b54:	bf0b      	itete	eq
 8015b56:	784b      	ldrbeq	r3, [r1, #1]
 8015b58:	1c4a      	addne	r2, r1, #1
 8015b5a:	1c8a      	addeq	r2, r1, #2
 8015b5c:	2100      	movne	r1, #0
 8015b5e:	bf08      	it	eq
 8015b60:	2101      	moveq	r1, #1
 8015b62:	3801      	subs	r0, #1
 8015b64:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8015b68:	f800 1f01 	strb.w	r1, [r0, #1]!
 8015b6c:	42a8      	cmp	r0, r5
 8015b6e:	d1fb      	bne.n	8015b68 <__sccl+0x1c>
 8015b70:	b90b      	cbnz	r3, 8015b76 <__sccl+0x2a>
 8015b72:	1e50      	subs	r0, r2, #1
 8015b74:	bd70      	pop	{r4, r5, r6, pc}
 8015b76:	f081 0101 	eor.w	r1, r1, #1
 8015b7a:	54e1      	strb	r1, [r4, r3]
 8015b7c:	4610      	mov	r0, r2
 8015b7e:	4602      	mov	r2, r0
 8015b80:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015b84:	2d2d      	cmp	r5, #45	; 0x2d
 8015b86:	d005      	beq.n	8015b94 <__sccl+0x48>
 8015b88:	2d5d      	cmp	r5, #93	; 0x5d
 8015b8a:	d016      	beq.n	8015bba <__sccl+0x6e>
 8015b8c:	2d00      	cmp	r5, #0
 8015b8e:	d0f1      	beq.n	8015b74 <__sccl+0x28>
 8015b90:	462b      	mov	r3, r5
 8015b92:	e7f2      	b.n	8015b7a <__sccl+0x2e>
 8015b94:	7846      	ldrb	r6, [r0, #1]
 8015b96:	2e5d      	cmp	r6, #93	; 0x5d
 8015b98:	d0fa      	beq.n	8015b90 <__sccl+0x44>
 8015b9a:	42b3      	cmp	r3, r6
 8015b9c:	dcf8      	bgt.n	8015b90 <__sccl+0x44>
 8015b9e:	3002      	adds	r0, #2
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	3201      	adds	r2, #1
 8015ba4:	4296      	cmp	r6, r2
 8015ba6:	54a1      	strb	r1, [r4, r2]
 8015ba8:	dcfb      	bgt.n	8015ba2 <__sccl+0x56>
 8015baa:	1af2      	subs	r2, r6, r3
 8015bac:	3a01      	subs	r2, #1
 8015bae:	1c5d      	adds	r5, r3, #1
 8015bb0:	42b3      	cmp	r3, r6
 8015bb2:	bfa8      	it	ge
 8015bb4:	2200      	movge	r2, #0
 8015bb6:	18ab      	adds	r3, r5, r2
 8015bb8:	e7e1      	b.n	8015b7e <__sccl+0x32>
 8015bba:	4610      	mov	r0, r2
 8015bbc:	e7da      	b.n	8015b74 <__sccl+0x28>

08015bbe <__submore>:
 8015bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc2:	460c      	mov	r4, r1
 8015bc4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015bca:	4299      	cmp	r1, r3
 8015bcc:	d11d      	bne.n	8015c0a <__submore+0x4c>
 8015bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015bd2:	f7fb f803 	bl	8010bdc <_malloc_r>
 8015bd6:	b918      	cbnz	r0, 8015be0 <__submore+0x22>
 8015bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015be4:	63a3      	str	r3, [r4, #56]	; 0x38
 8015be6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015bea:	6360      	str	r0, [r4, #52]	; 0x34
 8015bec:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015bf0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015bf4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015bf8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015bfc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015c00:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015c04:	6020      	str	r0, [r4, #0]
 8015c06:	2000      	movs	r0, #0
 8015c08:	e7e8      	b.n	8015bdc <__submore+0x1e>
 8015c0a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015c0c:	0077      	lsls	r7, r6, #1
 8015c0e:	463a      	mov	r2, r7
 8015c10:	f000 f869 	bl	8015ce6 <_realloc_r>
 8015c14:	4605      	mov	r5, r0
 8015c16:	2800      	cmp	r0, #0
 8015c18:	d0de      	beq.n	8015bd8 <__submore+0x1a>
 8015c1a:	eb00 0806 	add.w	r8, r0, r6
 8015c1e:	4601      	mov	r1, r0
 8015c20:	4632      	mov	r2, r6
 8015c22:	4640      	mov	r0, r8
 8015c24:	f7fd f9a3 	bl	8012f6e <memcpy>
 8015c28:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015c2c:	f8c4 8000 	str.w	r8, [r4]
 8015c30:	e7e9      	b.n	8015c06 <__submore+0x48>

08015c32 <memmove>:
 8015c32:	4288      	cmp	r0, r1
 8015c34:	b510      	push	{r4, lr}
 8015c36:	eb01 0402 	add.w	r4, r1, r2
 8015c3a:	d902      	bls.n	8015c42 <memmove+0x10>
 8015c3c:	4284      	cmp	r4, r0
 8015c3e:	4623      	mov	r3, r4
 8015c40:	d807      	bhi.n	8015c52 <memmove+0x20>
 8015c42:	1e43      	subs	r3, r0, #1
 8015c44:	42a1      	cmp	r1, r4
 8015c46:	d008      	beq.n	8015c5a <memmove+0x28>
 8015c48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c50:	e7f8      	b.n	8015c44 <memmove+0x12>
 8015c52:	4402      	add	r2, r0
 8015c54:	4601      	mov	r1, r0
 8015c56:	428a      	cmp	r2, r1
 8015c58:	d100      	bne.n	8015c5c <memmove+0x2a>
 8015c5a:	bd10      	pop	{r4, pc}
 8015c5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015c60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015c64:	e7f7      	b.n	8015c56 <memmove+0x24>
	...

08015c68 <_fstat_r>:
 8015c68:	b538      	push	{r3, r4, r5, lr}
 8015c6a:	4d07      	ldr	r5, [pc, #28]	; (8015c88 <_fstat_r+0x20>)
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	4604      	mov	r4, r0
 8015c70:	4608      	mov	r0, r1
 8015c72:	4611      	mov	r1, r2
 8015c74:	602b      	str	r3, [r5, #0]
 8015c76:	f7f3 fcc1 	bl	80095fc <_fstat>
 8015c7a:	1c43      	adds	r3, r0, #1
 8015c7c:	d102      	bne.n	8015c84 <_fstat_r+0x1c>
 8015c7e:	682b      	ldr	r3, [r5, #0]
 8015c80:	b103      	cbz	r3, 8015c84 <_fstat_r+0x1c>
 8015c82:	6023      	str	r3, [r4, #0]
 8015c84:	bd38      	pop	{r3, r4, r5, pc}
 8015c86:	bf00      	nop
 8015c88:	2000508c 	.word	0x2000508c

08015c8c <_isatty_r>:
 8015c8c:	b538      	push	{r3, r4, r5, lr}
 8015c8e:	4d06      	ldr	r5, [pc, #24]	; (8015ca8 <_isatty_r+0x1c>)
 8015c90:	2300      	movs	r3, #0
 8015c92:	4604      	mov	r4, r0
 8015c94:	4608      	mov	r0, r1
 8015c96:	602b      	str	r3, [r5, #0]
 8015c98:	f7f3 fcb6 	bl	8009608 <_isatty>
 8015c9c:	1c43      	adds	r3, r0, #1
 8015c9e:	d102      	bne.n	8015ca6 <_isatty_r+0x1a>
 8015ca0:	682b      	ldr	r3, [r5, #0]
 8015ca2:	b103      	cbz	r3, 8015ca6 <_isatty_r+0x1a>
 8015ca4:	6023      	str	r3, [r4, #0]
 8015ca6:	bd38      	pop	{r3, r4, r5, pc}
 8015ca8:	2000508c 	.word	0x2000508c

08015cac <abort>:
 8015cac:	b508      	push	{r3, lr}
 8015cae:	2006      	movs	r0, #6
 8015cb0:	f000 f870 	bl	8015d94 <raise>
 8015cb4:	2001      	movs	r0, #1
 8015cb6:	f7f3 fc7b 	bl	80095b0 <_exit>

08015cba <_calloc_r>:
 8015cba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015cbc:	fba1 2402 	umull	r2, r4, r1, r2
 8015cc0:	b94c      	cbnz	r4, 8015cd6 <_calloc_r+0x1c>
 8015cc2:	4611      	mov	r1, r2
 8015cc4:	9201      	str	r2, [sp, #4]
 8015cc6:	f7fa ff89 	bl	8010bdc <_malloc_r>
 8015cca:	9a01      	ldr	r2, [sp, #4]
 8015ccc:	4605      	mov	r5, r0
 8015cce:	b930      	cbnz	r0, 8015cde <_calloc_r+0x24>
 8015cd0:	4628      	mov	r0, r5
 8015cd2:	b003      	add	sp, #12
 8015cd4:	bd30      	pop	{r4, r5, pc}
 8015cd6:	220c      	movs	r2, #12
 8015cd8:	6002      	str	r2, [r0, #0]
 8015cda:	2500      	movs	r5, #0
 8015cdc:	e7f8      	b.n	8015cd0 <_calloc_r+0x16>
 8015cde:	4621      	mov	r1, r4
 8015ce0:	f7fd f848 	bl	8012d74 <memset>
 8015ce4:	e7f4      	b.n	8015cd0 <_calloc_r+0x16>

08015ce6 <_realloc_r>:
 8015ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cea:	4680      	mov	r8, r0
 8015cec:	4614      	mov	r4, r2
 8015cee:	460e      	mov	r6, r1
 8015cf0:	b921      	cbnz	r1, 8015cfc <_realloc_r+0x16>
 8015cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf6:	4611      	mov	r1, r2
 8015cf8:	f7fa bf70 	b.w	8010bdc <_malloc_r>
 8015cfc:	b92a      	cbnz	r2, 8015d0a <_realloc_r+0x24>
 8015cfe:	f7fd ffed 	bl	8013cdc <_free_r>
 8015d02:	4625      	mov	r5, r4
 8015d04:	4628      	mov	r0, r5
 8015d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d0a:	f000 f85f 	bl	8015dcc <_malloc_usable_size_r>
 8015d0e:	4284      	cmp	r4, r0
 8015d10:	4607      	mov	r7, r0
 8015d12:	d802      	bhi.n	8015d1a <_realloc_r+0x34>
 8015d14:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015d18:	d812      	bhi.n	8015d40 <_realloc_r+0x5a>
 8015d1a:	4621      	mov	r1, r4
 8015d1c:	4640      	mov	r0, r8
 8015d1e:	f7fa ff5d 	bl	8010bdc <_malloc_r>
 8015d22:	4605      	mov	r5, r0
 8015d24:	2800      	cmp	r0, #0
 8015d26:	d0ed      	beq.n	8015d04 <_realloc_r+0x1e>
 8015d28:	42bc      	cmp	r4, r7
 8015d2a:	4622      	mov	r2, r4
 8015d2c:	4631      	mov	r1, r6
 8015d2e:	bf28      	it	cs
 8015d30:	463a      	movcs	r2, r7
 8015d32:	f7fd f91c 	bl	8012f6e <memcpy>
 8015d36:	4631      	mov	r1, r6
 8015d38:	4640      	mov	r0, r8
 8015d3a:	f7fd ffcf 	bl	8013cdc <_free_r>
 8015d3e:	e7e1      	b.n	8015d04 <_realloc_r+0x1e>
 8015d40:	4635      	mov	r5, r6
 8015d42:	e7df      	b.n	8015d04 <_realloc_r+0x1e>

08015d44 <_raise_r>:
 8015d44:	291f      	cmp	r1, #31
 8015d46:	b538      	push	{r3, r4, r5, lr}
 8015d48:	4604      	mov	r4, r0
 8015d4a:	460d      	mov	r5, r1
 8015d4c:	d904      	bls.n	8015d58 <_raise_r+0x14>
 8015d4e:	2316      	movs	r3, #22
 8015d50:	6003      	str	r3, [r0, #0]
 8015d52:	f04f 30ff 	mov.w	r0, #4294967295
 8015d56:	bd38      	pop	{r3, r4, r5, pc}
 8015d58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015d5a:	b112      	cbz	r2, 8015d62 <_raise_r+0x1e>
 8015d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d60:	b94b      	cbnz	r3, 8015d76 <_raise_r+0x32>
 8015d62:	4620      	mov	r0, r4
 8015d64:	f000 f830 	bl	8015dc8 <_getpid_r>
 8015d68:	462a      	mov	r2, r5
 8015d6a:	4601      	mov	r1, r0
 8015d6c:	4620      	mov	r0, r4
 8015d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d72:	f000 b817 	b.w	8015da4 <_kill_r>
 8015d76:	2b01      	cmp	r3, #1
 8015d78:	d00a      	beq.n	8015d90 <_raise_r+0x4c>
 8015d7a:	1c59      	adds	r1, r3, #1
 8015d7c:	d103      	bne.n	8015d86 <_raise_r+0x42>
 8015d7e:	2316      	movs	r3, #22
 8015d80:	6003      	str	r3, [r0, #0]
 8015d82:	2001      	movs	r0, #1
 8015d84:	e7e7      	b.n	8015d56 <_raise_r+0x12>
 8015d86:	2400      	movs	r4, #0
 8015d88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015d8c:	4628      	mov	r0, r5
 8015d8e:	4798      	blx	r3
 8015d90:	2000      	movs	r0, #0
 8015d92:	e7e0      	b.n	8015d56 <_raise_r+0x12>

08015d94 <raise>:
 8015d94:	4b02      	ldr	r3, [pc, #8]	; (8015da0 <raise+0xc>)
 8015d96:	4601      	mov	r1, r0
 8015d98:	6818      	ldr	r0, [r3, #0]
 8015d9a:	f7ff bfd3 	b.w	8015d44 <_raise_r>
 8015d9e:	bf00      	nop
 8015da0:	20000554 	.word	0x20000554

08015da4 <_kill_r>:
 8015da4:	b538      	push	{r3, r4, r5, lr}
 8015da6:	4d07      	ldr	r5, [pc, #28]	; (8015dc4 <_kill_r+0x20>)
 8015da8:	2300      	movs	r3, #0
 8015daa:	4604      	mov	r4, r0
 8015dac:	4608      	mov	r0, r1
 8015dae:	4611      	mov	r1, r2
 8015db0:	602b      	str	r3, [r5, #0]
 8015db2:	f7f3 fbf5 	bl	80095a0 <_kill>
 8015db6:	1c43      	adds	r3, r0, #1
 8015db8:	d102      	bne.n	8015dc0 <_kill_r+0x1c>
 8015dba:	682b      	ldr	r3, [r5, #0]
 8015dbc:	b103      	cbz	r3, 8015dc0 <_kill_r+0x1c>
 8015dbe:	6023      	str	r3, [r4, #0]
 8015dc0:	bd38      	pop	{r3, r4, r5, pc}
 8015dc2:	bf00      	nop
 8015dc4:	2000508c 	.word	0x2000508c

08015dc8 <_getpid_r>:
 8015dc8:	f7f3 bbe8 	b.w	800959c <_getpid>

08015dcc <_malloc_usable_size_r>:
 8015dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dd0:	1f18      	subs	r0, r3, #4
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	bfbc      	itt	lt
 8015dd6:	580b      	ldrlt	r3, [r1, r0]
 8015dd8:	18c0      	addlt	r0, r0, r3
 8015dda:	4770      	bx	lr

08015ddc <sqrt>:
 8015ddc:	b538      	push	{r3, r4, r5, lr}
 8015dde:	ed2d 8b02 	vpush	{d8}
 8015de2:	ec55 4b10 	vmov	r4, r5, d0
 8015de6:	f000 f9d1 	bl	801618c <__ieee754_sqrt>
 8015dea:	4622      	mov	r2, r4
 8015dec:	462b      	mov	r3, r5
 8015dee:	4620      	mov	r0, r4
 8015df0:	4629      	mov	r1, r5
 8015df2:	eeb0 8a40 	vmov.f32	s16, s0
 8015df6:	eef0 8a60 	vmov.f32	s17, s1
 8015dfa:	f7ea fe97 	bl	8000b2c <__aeabi_dcmpun>
 8015dfe:	b990      	cbnz	r0, 8015e26 <sqrt+0x4a>
 8015e00:	2200      	movs	r2, #0
 8015e02:	2300      	movs	r3, #0
 8015e04:	4620      	mov	r0, r4
 8015e06:	4629      	mov	r1, r5
 8015e08:	f7ea fe68 	bl	8000adc <__aeabi_dcmplt>
 8015e0c:	b158      	cbz	r0, 8015e26 <sqrt+0x4a>
 8015e0e:	f7fd f881 	bl	8012f14 <__errno>
 8015e12:	2321      	movs	r3, #33	; 0x21
 8015e14:	6003      	str	r3, [r0, #0]
 8015e16:	2200      	movs	r2, #0
 8015e18:	2300      	movs	r3, #0
 8015e1a:	4610      	mov	r0, r2
 8015e1c:	4619      	mov	r1, r3
 8015e1e:	f7ea fd15 	bl	800084c <__aeabi_ddiv>
 8015e22:	ec41 0b18 	vmov	d8, r0, r1
 8015e26:	eeb0 0a48 	vmov.f32	s0, s16
 8015e2a:	eef0 0a68 	vmov.f32	s1, s17
 8015e2e:	ecbd 8b02 	vpop	{d8}
 8015e32:	bd38      	pop	{r3, r4, r5, pc}
 8015e34:	0000      	movs	r0, r0
	...

08015e38 <atan>:
 8015e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3c:	ec55 4b10 	vmov	r4, r5, d0
 8015e40:	4bc3      	ldr	r3, [pc, #780]	; (8016150 <atan+0x318>)
 8015e42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015e46:	429e      	cmp	r6, r3
 8015e48:	46ab      	mov	fp, r5
 8015e4a:	dd18      	ble.n	8015e7e <atan+0x46>
 8015e4c:	4bc1      	ldr	r3, [pc, #772]	; (8016154 <atan+0x31c>)
 8015e4e:	429e      	cmp	r6, r3
 8015e50:	dc01      	bgt.n	8015e56 <atan+0x1e>
 8015e52:	d109      	bne.n	8015e68 <atan+0x30>
 8015e54:	b144      	cbz	r4, 8015e68 <atan+0x30>
 8015e56:	4622      	mov	r2, r4
 8015e58:	462b      	mov	r3, r5
 8015e5a:	4620      	mov	r0, r4
 8015e5c:	4629      	mov	r1, r5
 8015e5e:	f7ea fa15 	bl	800028c <__adddf3>
 8015e62:	4604      	mov	r4, r0
 8015e64:	460d      	mov	r5, r1
 8015e66:	e006      	b.n	8015e76 <atan+0x3e>
 8015e68:	f1bb 0f00 	cmp.w	fp, #0
 8015e6c:	f300 8131 	bgt.w	80160d2 <atan+0x29a>
 8015e70:	a59b      	add	r5, pc, #620	; (adr r5, 80160e0 <atan+0x2a8>)
 8015e72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015e76:	ec45 4b10 	vmov	d0, r4, r5
 8015e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e7e:	4bb6      	ldr	r3, [pc, #728]	; (8016158 <atan+0x320>)
 8015e80:	429e      	cmp	r6, r3
 8015e82:	dc14      	bgt.n	8015eae <atan+0x76>
 8015e84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8015e88:	429e      	cmp	r6, r3
 8015e8a:	dc0d      	bgt.n	8015ea8 <atan+0x70>
 8015e8c:	a396      	add	r3, pc, #600	; (adr r3, 80160e8 <atan+0x2b0>)
 8015e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e92:	ee10 0a10 	vmov	r0, s0
 8015e96:	4629      	mov	r1, r5
 8015e98:	f7ea f9f8 	bl	800028c <__adddf3>
 8015e9c:	4baf      	ldr	r3, [pc, #700]	; (801615c <atan+0x324>)
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	f7ea fe3a 	bl	8000b18 <__aeabi_dcmpgt>
 8015ea4:	2800      	cmp	r0, #0
 8015ea6:	d1e6      	bne.n	8015e76 <atan+0x3e>
 8015ea8:	f04f 3aff 	mov.w	sl, #4294967295
 8015eac:	e02b      	b.n	8015f06 <atan+0xce>
 8015eae:	f000 f963 	bl	8016178 <fabs>
 8015eb2:	4bab      	ldr	r3, [pc, #684]	; (8016160 <atan+0x328>)
 8015eb4:	429e      	cmp	r6, r3
 8015eb6:	ec55 4b10 	vmov	r4, r5, d0
 8015eba:	f300 80bf 	bgt.w	801603c <atan+0x204>
 8015ebe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8015ec2:	429e      	cmp	r6, r3
 8015ec4:	f300 80a0 	bgt.w	8016008 <atan+0x1d0>
 8015ec8:	ee10 2a10 	vmov	r2, s0
 8015ecc:	ee10 0a10 	vmov	r0, s0
 8015ed0:	462b      	mov	r3, r5
 8015ed2:	4629      	mov	r1, r5
 8015ed4:	f7ea f9da 	bl	800028c <__adddf3>
 8015ed8:	4ba0      	ldr	r3, [pc, #640]	; (801615c <atan+0x324>)
 8015eda:	2200      	movs	r2, #0
 8015edc:	f7ea f9d4 	bl	8000288 <__aeabi_dsub>
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	4606      	mov	r6, r0
 8015ee4:	460f      	mov	r7, r1
 8015ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015eea:	4620      	mov	r0, r4
 8015eec:	4629      	mov	r1, r5
 8015eee:	f7ea f9cd 	bl	800028c <__adddf3>
 8015ef2:	4602      	mov	r2, r0
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	4630      	mov	r0, r6
 8015ef8:	4639      	mov	r1, r7
 8015efa:	f7ea fca7 	bl	800084c <__aeabi_ddiv>
 8015efe:	f04f 0a00 	mov.w	sl, #0
 8015f02:	4604      	mov	r4, r0
 8015f04:	460d      	mov	r5, r1
 8015f06:	4622      	mov	r2, r4
 8015f08:	462b      	mov	r3, r5
 8015f0a:	4620      	mov	r0, r4
 8015f0c:	4629      	mov	r1, r5
 8015f0e:	f7ea fb73 	bl	80005f8 <__aeabi_dmul>
 8015f12:	4602      	mov	r2, r0
 8015f14:	460b      	mov	r3, r1
 8015f16:	4680      	mov	r8, r0
 8015f18:	4689      	mov	r9, r1
 8015f1a:	f7ea fb6d 	bl	80005f8 <__aeabi_dmul>
 8015f1e:	a374      	add	r3, pc, #464	; (adr r3, 80160f0 <atan+0x2b8>)
 8015f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f24:	4606      	mov	r6, r0
 8015f26:	460f      	mov	r7, r1
 8015f28:	f7ea fb66 	bl	80005f8 <__aeabi_dmul>
 8015f2c:	a372      	add	r3, pc, #456	; (adr r3, 80160f8 <atan+0x2c0>)
 8015f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f32:	f7ea f9ab 	bl	800028c <__adddf3>
 8015f36:	4632      	mov	r2, r6
 8015f38:	463b      	mov	r3, r7
 8015f3a:	f7ea fb5d 	bl	80005f8 <__aeabi_dmul>
 8015f3e:	a370      	add	r3, pc, #448	; (adr r3, 8016100 <atan+0x2c8>)
 8015f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f44:	f7ea f9a2 	bl	800028c <__adddf3>
 8015f48:	4632      	mov	r2, r6
 8015f4a:	463b      	mov	r3, r7
 8015f4c:	f7ea fb54 	bl	80005f8 <__aeabi_dmul>
 8015f50:	a36d      	add	r3, pc, #436	; (adr r3, 8016108 <atan+0x2d0>)
 8015f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f56:	f7ea f999 	bl	800028c <__adddf3>
 8015f5a:	4632      	mov	r2, r6
 8015f5c:	463b      	mov	r3, r7
 8015f5e:	f7ea fb4b 	bl	80005f8 <__aeabi_dmul>
 8015f62:	a36b      	add	r3, pc, #428	; (adr r3, 8016110 <atan+0x2d8>)
 8015f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f68:	f7ea f990 	bl	800028c <__adddf3>
 8015f6c:	4632      	mov	r2, r6
 8015f6e:	463b      	mov	r3, r7
 8015f70:	f7ea fb42 	bl	80005f8 <__aeabi_dmul>
 8015f74:	a368      	add	r3, pc, #416	; (adr r3, 8016118 <atan+0x2e0>)
 8015f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7a:	f7ea f987 	bl	800028c <__adddf3>
 8015f7e:	4642      	mov	r2, r8
 8015f80:	464b      	mov	r3, r9
 8015f82:	f7ea fb39 	bl	80005f8 <__aeabi_dmul>
 8015f86:	a366      	add	r3, pc, #408	; (adr r3, 8016120 <atan+0x2e8>)
 8015f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f8c:	4680      	mov	r8, r0
 8015f8e:	4689      	mov	r9, r1
 8015f90:	4630      	mov	r0, r6
 8015f92:	4639      	mov	r1, r7
 8015f94:	f7ea fb30 	bl	80005f8 <__aeabi_dmul>
 8015f98:	a363      	add	r3, pc, #396	; (adr r3, 8016128 <atan+0x2f0>)
 8015f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f9e:	f7ea f973 	bl	8000288 <__aeabi_dsub>
 8015fa2:	4632      	mov	r2, r6
 8015fa4:	463b      	mov	r3, r7
 8015fa6:	f7ea fb27 	bl	80005f8 <__aeabi_dmul>
 8015faa:	a361      	add	r3, pc, #388	; (adr r3, 8016130 <atan+0x2f8>)
 8015fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb0:	f7ea f96a 	bl	8000288 <__aeabi_dsub>
 8015fb4:	4632      	mov	r2, r6
 8015fb6:	463b      	mov	r3, r7
 8015fb8:	f7ea fb1e 	bl	80005f8 <__aeabi_dmul>
 8015fbc:	a35e      	add	r3, pc, #376	; (adr r3, 8016138 <atan+0x300>)
 8015fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fc2:	f7ea f961 	bl	8000288 <__aeabi_dsub>
 8015fc6:	4632      	mov	r2, r6
 8015fc8:	463b      	mov	r3, r7
 8015fca:	f7ea fb15 	bl	80005f8 <__aeabi_dmul>
 8015fce:	a35c      	add	r3, pc, #368	; (adr r3, 8016140 <atan+0x308>)
 8015fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fd4:	f7ea f958 	bl	8000288 <__aeabi_dsub>
 8015fd8:	4632      	mov	r2, r6
 8015fda:	463b      	mov	r3, r7
 8015fdc:	f7ea fb0c 	bl	80005f8 <__aeabi_dmul>
 8015fe0:	4602      	mov	r2, r0
 8015fe2:	460b      	mov	r3, r1
 8015fe4:	4640      	mov	r0, r8
 8015fe6:	4649      	mov	r1, r9
 8015fe8:	f7ea f950 	bl	800028c <__adddf3>
 8015fec:	4622      	mov	r2, r4
 8015fee:	462b      	mov	r3, r5
 8015ff0:	f7ea fb02 	bl	80005f8 <__aeabi_dmul>
 8015ff4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015ff8:	4602      	mov	r2, r0
 8015ffa:	460b      	mov	r3, r1
 8015ffc:	d14b      	bne.n	8016096 <atan+0x25e>
 8015ffe:	4620      	mov	r0, r4
 8016000:	4629      	mov	r1, r5
 8016002:	f7ea f941 	bl	8000288 <__aeabi_dsub>
 8016006:	e72c      	b.n	8015e62 <atan+0x2a>
 8016008:	ee10 0a10 	vmov	r0, s0
 801600c:	4b53      	ldr	r3, [pc, #332]	; (801615c <atan+0x324>)
 801600e:	2200      	movs	r2, #0
 8016010:	4629      	mov	r1, r5
 8016012:	f7ea f939 	bl	8000288 <__aeabi_dsub>
 8016016:	4b51      	ldr	r3, [pc, #324]	; (801615c <atan+0x324>)
 8016018:	4606      	mov	r6, r0
 801601a:	460f      	mov	r7, r1
 801601c:	2200      	movs	r2, #0
 801601e:	4620      	mov	r0, r4
 8016020:	4629      	mov	r1, r5
 8016022:	f7ea f933 	bl	800028c <__adddf3>
 8016026:	4602      	mov	r2, r0
 8016028:	460b      	mov	r3, r1
 801602a:	4630      	mov	r0, r6
 801602c:	4639      	mov	r1, r7
 801602e:	f7ea fc0d 	bl	800084c <__aeabi_ddiv>
 8016032:	f04f 0a01 	mov.w	sl, #1
 8016036:	4604      	mov	r4, r0
 8016038:	460d      	mov	r5, r1
 801603a:	e764      	b.n	8015f06 <atan+0xce>
 801603c:	4b49      	ldr	r3, [pc, #292]	; (8016164 <atan+0x32c>)
 801603e:	429e      	cmp	r6, r3
 8016040:	da1d      	bge.n	801607e <atan+0x246>
 8016042:	ee10 0a10 	vmov	r0, s0
 8016046:	4b48      	ldr	r3, [pc, #288]	; (8016168 <atan+0x330>)
 8016048:	2200      	movs	r2, #0
 801604a:	4629      	mov	r1, r5
 801604c:	f7ea f91c 	bl	8000288 <__aeabi_dsub>
 8016050:	4b45      	ldr	r3, [pc, #276]	; (8016168 <atan+0x330>)
 8016052:	4606      	mov	r6, r0
 8016054:	460f      	mov	r7, r1
 8016056:	2200      	movs	r2, #0
 8016058:	4620      	mov	r0, r4
 801605a:	4629      	mov	r1, r5
 801605c:	f7ea facc 	bl	80005f8 <__aeabi_dmul>
 8016060:	4b3e      	ldr	r3, [pc, #248]	; (801615c <atan+0x324>)
 8016062:	2200      	movs	r2, #0
 8016064:	f7ea f912 	bl	800028c <__adddf3>
 8016068:	4602      	mov	r2, r0
 801606a:	460b      	mov	r3, r1
 801606c:	4630      	mov	r0, r6
 801606e:	4639      	mov	r1, r7
 8016070:	f7ea fbec 	bl	800084c <__aeabi_ddiv>
 8016074:	f04f 0a02 	mov.w	sl, #2
 8016078:	4604      	mov	r4, r0
 801607a:	460d      	mov	r5, r1
 801607c:	e743      	b.n	8015f06 <atan+0xce>
 801607e:	462b      	mov	r3, r5
 8016080:	ee10 2a10 	vmov	r2, s0
 8016084:	4939      	ldr	r1, [pc, #228]	; (801616c <atan+0x334>)
 8016086:	2000      	movs	r0, #0
 8016088:	f7ea fbe0 	bl	800084c <__aeabi_ddiv>
 801608c:	f04f 0a03 	mov.w	sl, #3
 8016090:	4604      	mov	r4, r0
 8016092:	460d      	mov	r5, r1
 8016094:	e737      	b.n	8015f06 <atan+0xce>
 8016096:	4b36      	ldr	r3, [pc, #216]	; (8016170 <atan+0x338>)
 8016098:	4e36      	ldr	r6, [pc, #216]	; (8016174 <atan+0x33c>)
 801609a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160a2:	f7ea f8f1 	bl	8000288 <__aeabi_dsub>
 80160a6:	4622      	mov	r2, r4
 80160a8:	462b      	mov	r3, r5
 80160aa:	f7ea f8ed 	bl	8000288 <__aeabi_dsub>
 80160ae:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80160b2:	4602      	mov	r2, r0
 80160b4:	460b      	mov	r3, r1
 80160b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80160ba:	f7ea f8e5 	bl	8000288 <__aeabi_dsub>
 80160be:	f1bb 0f00 	cmp.w	fp, #0
 80160c2:	4604      	mov	r4, r0
 80160c4:	460d      	mov	r5, r1
 80160c6:	f6bf aed6 	bge.w	8015e76 <atan+0x3e>
 80160ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80160ce:	461d      	mov	r5, r3
 80160d0:	e6d1      	b.n	8015e76 <atan+0x3e>
 80160d2:	a51d      	add	r5, pc, #116	; (adr r5, 8016148 <atan+0x310>)
 80160d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80160d8:	e6cd      	b.n	8015e76 <atan+0x3e>
 80160da:	bf00      	nop
 80160dc:	f3af 8000 	nop.w
 80160e0:	54442d18 	.word	0x54442d18
 80160e4:	bff921fb 	.word	0xbff921fb
 80160e8:	8800759c 	.word	0x8800759c
 80160ec:	7e37e43c 	.word	0x7e37e43c
 80160f0:	e322da11 	.word	0xe322da11
 80160f4:	3f90ad3a 	.word	0x3f90ad3a
 80160f8:	24760deb 	.word	0x24760deb
 80160fc:	3fa97b4b 	.word	0x3fa97b4b
 8016100:	a0d03d51 	.word	0xa0d03d51
 8016104:	3fb10d66 	.word	0x3fb10d66
 8016108:	c54c206e 	.word	0xc54c206e
 801610c:	3fb745cd 	.word	0x3fb745cd
 8016110:	920083ff 	.word	0x920083ff
 8016114:	3fc24924 	.word	0x3fc24924
 8016118:	5555550d 	.word	0x5555550d
 801611c:	3fd55555 	.word	0x3fd55555
 8016120:	2c6a6c2f 	.word	0x2c6a6c2f
 8016124:	bfa2b444 	.word	0xbfa2b444
 8016128:	52defd9a 	.word	0x52defd9a
 801612c:	3fadde2d 	.word	0x3fadde2d
 8016130:	af749a6d 	.word	0xaf749a6d
 8016134:	3fb3b0f2 	.word	0x3fb3b0f2
 8016138:	fe231671 	.word	0xfe231671
 801613c:	3fbc71c6 	.word	0x3fbc71c6
 8016140:	9998ebc4 	.word	0x9998ebc4
 8016144:	3fc99999 	.word	0x3fc99999
 8016148:	54442d18 	.word	0x54442d18
 801614c:	3ff921fb 	.word	0x3ff921fb
 8016150:	440fffff 	.word	0x440fffff
 8016154:	7ff00000 	.word	0x7ff00000
 8016158:	3fdbffff 	.word	0x3fdbffff
 801615c:	3ff00000 	.word	0x3ff00000
 8016160:	3ff2ffff 	.word	0x3ff2ffff
 8016164:	40038000 	.word	0x40038000
 8016168:	3ff80000 	.word	0x3ff80000
 801616c:	bff00000 	.word	0xbff00000
 8016170:	08017338 	.word	0x08017338
 8016174:	08017318 	.word	0x08017318

08016178 <fabs>:
 8016178:	ec51 0b10 	vmov	r0, r1, d0
 801617c:	ee10 2a10 	vmov	r2, s0
 8016180:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016184:	ec43 2b10 	vmov	d0, r2, r3
 8016188:	4770      	bx	lr
	...

0801618c <__ieee754_sqrt>:
 801618c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016190:	ec55 4b10 	vmov	r4, r5, d0
 8016194:	4e67      	ldr	r6, [pc, #412]	; (8016334 <__ieee754_sqrt+0x1a8>)
 8016196:	43ae      	bics	r6, r5
 8016198:	ee10 0a10 	vmov	r0, s0
 801619c:	ee10 2a10 	vmov	r2, s0
 80161a0:	4629      	mov	r1, r5
 80161a2:	462b      	mov	r3, r5
 80161a4:	d10d      	bne.n	80161c2 <__ieee754_sqrt+0x36>
 80161a6:	f7ea fa27 	bl	80005f8 <__aeabi_dmul>
 80161aa:	4602      	mov	r2, r0
 80161ac:	460b      	mov	r3, r1
 80161ae:	4620      	mov	r0, r4
 80161b0:	4629      	mov	r1, r5
 80161b2:	f7ea f86b 	bl	800028c <__adddf3>
 80161b6:	4604      	mov	r4, r0
 80161b8:	460d      	mov	r5, r1
 80161ba:	ec45 4b10 	vmov	d0, r4, r5
 80161be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c2:	2d00      	cmp	r5, #0
 80161c4:	dc0b      	bgt.n	80161de <__ieee754_sqrt+0x52>
 80161c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80161ca:	4326      	orrs	r6, r4
 80161cc:	d0f5      	beq.n	80161ba <__ieee754_sqrt+0x2e>
 80161ce:	b135      	cbz	r5, 80161de <__ieee754_sqrt+0x52>
 80161d0:	f7ea f85a 	bl	8000288 <__aeabi_dsub>
 80161d4:	4602      	mov	r2, r0
 80161d6:	460b      	mov	r3, r1
 80161d8:	f7ea fb38 	bl	800084c <__aeabi_ddiv>
 80161dc:	e7eb      	b.n	80161b6 <__ieee754_sqrt+0x2a>
 80161de:	1509      	asrs	r1, r1, #20
 80161e0:	f000 808d 	beq.w	80162fe <__ieee754_sqrt+0x172>
 80161e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80161e8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80161ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80161f0:	07c9      	lsls	r1, r1, #31
 80161f2:	bf5c      	itt	pl
 80161f4:	005b      	lslpl	r3, r3, #1
 80161f6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80161fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80161fe:	bf58      	it	pl
 8016200:	0052      	lslpl	r2, r2, #1
 8016202:	2500      	movs	r5, #0
 8016204:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016208:	1076      	asrs	r6, r6, #1
 801620a:	0052      	lsls	r2, r2, #1
 801620c:	f04f 0e16 	mov.w	lr, #22
 8016210:	46ac      	mov	ip, r5
 8016212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016216:	eb0c 0001 	add.w	r0, ip, r1
 801621a:	4298      	cmp	r0, r3
 801621c:	bfde      	ittt	le
 801621e:	1a1b      	suble	r3, r3, r0
 8016220:	eb00 0c01 	addle.w	ip, r0, r1
 8016224:	186d      	addle	r5, r5, r1
 8016226:	005b      	lsls	r3, r3, #1
 8016228:	f1be 0e01 	subs.w	lr, lr, #1
 801622c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016230:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016234:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016238:	d1ed      	bne.n	8016216 <__ieee754_sqrt+0x8a>
 801623a:	4674      	mov	r4, lr
 801623c:	2720      	movs	r7, #32
 801623e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8016242:	4563      	cmp	r3, ip
 8016244:	eb01 000e 	add.w	r0, r1, lr
 8016248:	dc02      	bgt.n	8016250 <__ieee754_sqrt+0xc4>
 801624a:	d113      	bne.n	8016274 <__ieee754_sqrt+0xe8>
 801624c:	4290      	cmp	r0, r2
 801624e:	d811      	bhi.n	8016274 <__ieee754_sqrt+0xe8>
 8016250:	2800      	cmp	r0, #0
 8016252:	eb00 0e01 	add.w	lr, r0, r1
 8016256:	da57      	bge.n	8016308 <__ieee754_sqrt+0x17c>
 8016258:	f1be 0f00 	cmp.w	lr, #0
 801625c:	db54      	blt.n	8016308 <__ieee754_sqrt+0x17c>
 801625e:	f10c 0801 	add.w	r8, ip, #1
 8016262:	eba3 030c 	sub.w	r3, r3, ip
 8016266:	4290      	cmp	r0, r2
 8016268:	bf88      	it	hi
 801626a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801626e:	1a12      	subs	r2, r2, r0
 8016270:	440c      	add	r4, r1
 8016272:	46c4      	mov	ip, r8
 8016274:	005b      	lsls	r3, r3, #1
 8016276:	3f01      	subs	r7, #1
 8016278:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801627c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016280:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016284:	d1dd      	bne.n	8016242 <__ieee754_sqrt+0xb6>
 8016286:	4313      	orrs	r3, r2
 8016288:	d01b      	beq.n	80162c2 <__ieee754_sqrt+0x136>
 801628a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8016338 <__ieee754_sqrt+0x1ac>
 801628e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801633c <__ieee754_sqrt+0x1b0>
 8016292:	e9da 0100 	ldrd	r0, r1, [sl]
 8016296:	e9db 2300 	ldrd	r2, r3, [fp]
 801629a:	f7e9 fff5 	bl	8000288 <__aeabi_dsub>
 801629e:	e9da 8900 	ldrd	r8, r9, [sl]
 80162a2:	4602      	mov	r2, r0
 80162a4:	460b      	mov	r3, r1
 80162a6:	4640      	mov	r0, r8
 80162a8:	4649      	mov	r1, r9
 80162aa:	f7ea fc21 	bl	8000af0 <__aeabi_dcmple>
 80162ae:	b140      	cbz	r0, 80162c2 <__ieee754_sqrt+0x136>
 80162b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80162b4:	e9da 0100 	ldrd	r0, r1, [sl]
 80162b8:	e9db 2300 	ldrd	r2, r3, [fp]
 80162bc:	d126      	bne.n	801630c <__ieee754_sqrt+0x180>
 80162be:	3501      	adds	r5, #1
 80162c0:	463c      	mov	r4, r7
 80162c2:	106a      	asrs	r2, r5, #1
 80162c4:	0863      	lsrs	r3, r4, #1
 80162c6:	07e9      	lsls	r1, r5, #31
 80162c8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80162cc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80162d0:	bf48      	it	mi
 80162d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80162d6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80162da:	461c      	mov	r4, r3
 80162dc:	e76d      	b.n	80161ba <__ieee754_sqrt+0x2e>
 80162de:	0ad3      	lsrs	r3, r2, #11
 80162e0:	3815      	subs	r0, #21
 80162e2:	0552      	lsls	r2, r2, #21
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d0fa      	beq.n	80162de <__ieee754_sqrt+0x152>
 80162e8:	02dc      	lsls	r4, r3, #11
 80162ea:	d50a      	bpl.n	8016302 <__ieee754_sqrt+0x176>
 80162ec:	f1c1 0420 	rsb	r4, r1, #32
 80162f0:	fa22 f404 	lsr.w	r4, r2, r4
 80162f4:	1e4d      	subs	r5, r1, #1
 80162f6:	408a      	lsls	r2, r1
 80162f8:	4323      	orrs	r3, r4
 80162fa:	1b41      	subs	r1, r0, r5
 80162fc:	e772      	b.n	80161e4 <__ieee754_sqrt+0x58>
 80162fe:	4608      	mov	r0, r1
 8016300:	e7f0      	b.n	80162e4 <__ieee754_sqrt+0x158>
 8016302:	005b      	lsls	r3, r3, #1
 8016304:	3101      	adds	r1, #1
 8016306:	e7ef      	b.n	80162e8 <__ieee754_sqrt+0x15c>
 8016308:	46e0      	mov	r8, ip
 801630a:	e7aa      	b.n	8016262 <__ieee754_sqrt+0xd6>
 801630c:	f7e9 ffbe 	bl	800028c <__adddf3>
 8016310:	e9da 8900 	ldrd	r8, r9, [sl]
 8016314:	4602      	mov	r2, r0
 8016316:	460b      	mov	r3, r1
 8016318:	4640      	mov	r0, r8
 801631a:	4649      	mov	r1, r9
 801631c:	f7ea fbde 	bl	8000adc <__aeabi_dcmplt>
 8016320:	b120      	cbz	r0, 801632c <__ieee754_sqrt+0x1a0>
 8016322:	1ca0      	adds	r0, r4, #2
 8016324:	bf08      	it	eq
 8016326:	3501      	addeq	r5, #1
 8016328:	3402      	adds	r4, #2
 801632a:	e7ca      	b.n	80162c2 <__ieee754_sqrt+0x136>
 801632c:	3401      	adds	r4, #1
 801632e:	f024 0401 	bic.w	r4, r4, #1
 8016332:	e7c6      	b.n	80162c2 <__ieee754_sqrt+0x136>
 8016334:	7ff00000 	.word	0x7ff00000
 8016338:	20000558 	.word	0x20000558
 801633c:	20000560 	.word	0x20000560

08016340 <_init>:
 8016340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016342:	bf00      	nop
 8016344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016346:	bc08      	pop	{r3}
 8016348:	469e      	mov	lr, r3
 801634a:	4770      	bx	lr

0801634c <_fini>:
 801634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801634e:	bf00      	nop
 8016350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016352:	bc08      	pop	{r3}
 8016354:	469e      	mov	lr, r3
 8016356:	4770      	bx	lr
